{
  "version": 3,
  "sources": ["../../@azure/identity/src/plugins/consumer.browser.ts", "../../@azure/logger/src/log.common.ts", "../../@azure/logger/src/debug.ts", "../../@azure/logger/src/index.ts", "../../@azure/identity/src/util/logging.ts", "../../@azure/identity/src/errors.ts", "../../@azure/identity/src/constants.ts", "../../@azure/core-tracing/src/tracingContext.ts", "../../@azure/core-tracing/src/state-browser.mts", "../../@azure/core-tracing/src/instrumenter.ts", "../../@azure/core-tracing/src/tracingClient.ts", "../../@azure/identity/src/util/tracing.ts", "../../@azure/identity/src/credentials/chainedTokenCredential.ts", "../../@azure/identity/src/credentials/defaultAzureCredential.browser.ts", "../../@azure/core-util/src/random.ts", "../../@azure/core-util/src/object.ts", "../../@azure/core-util/src/error.ts", "../../@azure/core-util/src/bytesEncoding.common.ts", "../../@azure/core-util/src/uuidUtils.common.ts", "../../@azure/core-util/src/uuidUtils-browser.mts", "../../@azure/core-util/src/checkEnvironment.ts", "../../@azure/abort-controller/src/AbortSignal.ts", "../../@azure/abort-controller/src/AbortController.ts", "../../@azure/msal-browser/dist/index.mjs", "../../@azure/msal-common/src/utils/Constants.ts", "../../@azure/msal-common/src/error/AuthErrorCodes.ts", "../../@azure/msal-common/src/error/AuthError.ts", "../../@azure/msal-common/src/error/ClientAuthErrorCodes.ts", "../../@azure/msal-common/src/error/ClientAuthError.ts", "../../@azure/msal-common/src/account/AuthToken.ts", "../../@azure/msal-common/src/authority/AuthorityType.ts", "../../@azure/msal-common/src/authority/OpenIdConfigResponse.ts", "../../@azure/msal-common/src/error/ClientConfigurationErrorCodes.ts", "../../@azure/msal-common/src/error/ClientConfigurationError.ts", "../../@azure/msal-common/src/utils/StringUtils.ts", "../../@azure/msal-common/src/utils/UrlUtils.ts", "../../@azure/msal-common/src/url/UrlString.ts", "../../@azure/msal-common/src/authority/AuthorityMetadata.ts", "../../@azure/msal-common/src/authority/ProtocolMode.ts", "../../@azure/msal-common/src/authority/AuthorityOptions.ts", "../../@azure/msal-common/src/authority/CloudInstanceDiscoveryResponse.ts", "../../@azure/msal-common/src/authority/CloudInstanceDiscoveryErrorResponse.ts", "../../@azure/msal-common/src/telemetry/performance/PerformanceEvent.ts", "../../@azure/msal-common/src/utils/FunctionWrappers.ts", "../../@azure/msal-common/src/authority/RegionDiscovery.ts", "../../@azure/msal-common/src/utils/TimeUtils.ts", "../../@azure/msal-common/src/cache/utils/CacheHelpers.ts", "../../@azure/msal-common/src/authority/Authority.ts", "../../@azure/msal-common/src/authority/AuthorityFactory.ts", "../../@azure/msal-common/src/utils/ClientAssertionUtils.ts", "../../@azure/msal-common/src/constants/AADServerParamKeys.ts", "../../@azure/msal-common/src/crypto/ICrypto.ts", "../../@azure/msal-common/src/logger/Logger.ts", "../../@azure/msal-common/src/packageMetadata.ts", "../../@azure/msal-common/src/request/ScopeSet.ts", "../../@azure/msal-common/src/account/ClientInfo.ts", "../../@azure/msal-common/src/account/AccountInfo.ts", "../../@azure/msal-common/src/account/TokenClaims.ts", "../../@azure/msal-common/src/cache/entities/AccountEntity.ts", "../../@azure/msal-common/src/error/CacheErrorCodes.ts", "../../@azure/msal-common/src/error/CacheError.ts", "../../@azure/msal-common/src/cache/CacheManager.ts", "../../@azure/msal-common/src/config/ClientConfiguration.ts", "../../@azure/msal-common/src/error/ServerError.ts", "../../@azure/msal-common/src/network/ThrottlingUtils.ts", "../../@azure/msal-common/src/network/NetworkManager.ts", "../../@azure/msal-common/src/account/CcsCredential.ts", "../../@azure/msal-common/src/request/RequestValidator.ts", "../../@azure/msal-common/src/request/RequestParameterBuilder.ts", "../../@azure/msal-common/src/client/BaseClient.ts", "../../@azure/msal-common/src/error/InteractionRequiredAuthErrorCodes.ts", "../../@azure/msal-common/src/error/InteractionRequiredAuthError.ts", "../../@azure/msal-common/src/utils/ProtocolUtils.ts", "../../@azure/msal-common/src/crypto/PopTokenGenerator.ts", "../../@azure/msal-common/src/cache/persistence/TokenCacheContext.ts", "../../@azure/msal-common/src/response/ResponseHandler.ts", "../../@azure/msal-common/src/client/AuthorizationCodeClient.ts", "../../@azure/msal-common/src/client/RefreshTokenClient.ts", "../../@azure/msal-common/src/client/SilentFlowClient.ts", "../../@azure/msal-common/src/network/INetworkModule.ts", "../../@azure/msal-common/src/error/JoseHeaderErrorCodes.ts", "../../@azure/msal-common/src/error/JoseHeaderError.ts", "../../@azure/msal-common/src/crypto/JoseHeader.ts", "../../@azure/msal-common/src/request/AuthenticationHeaderParser.ts", "../../@azure/msal-common/src/telemetry/server/ServerTelemetryManager.ts", "../../@azure/msal-common/src/telemetry/performance/StubPerformanceClient.ts", "../../@azure/msal-common/src/telemetry/performance/PerformanceClient.ts", "../../@azure/msal-browser/src/error/BrowserAuthErrorCodes.ts", "../../@azure/msal-browser/src/error/BrowserAuthError.ts", "../../@azure/msal-browser/src/utils/BrowserConstants.ts", "../../@azure/msal-browser/src/encode/Base64Encode.ts", "../../@azure/msal-browser/src/crypto/BrowserCrypto.ts", "../../@azure/msal-browser/src/error/BrowserConfigurationAuthErrorCodes.ts", "../../@azure/msal-browser/src/error/BrowserConfigurationAuthError.ts", "../../@azure/msal-browser/src/utils/BrowserUtils.ts", "../../@azure/msal-browser/src/navigation/NavigationClient.ts", "../../@azure/msal-browser/src/network/FetchClient.ts", "../../@azure/msal-browser/src/config/Configuration.ts", "../../@azure/msal-browser/src/packageMetadata.ts", "../../@azure/msal-browser/src/operatingcontext/BaseOperatingContext.ts", "../../@azure/msal-browser/src/naa/BridgeStatusCode.ts", "../../@azure/msal-browser/src/naa/BridgeProxy.ts", "../../@azure/msal-browser/src/operatingcontext/NestedAppOperatingContext.ts", "../../@azure/msal-browser/src/operatingcontext/StandardOperatingContext.ts", "../../@azure/msal-browser/src/encode/Base64Decode.ts", "../../@azure/msal-browser/src/cache/DatabaseStorage.ts", "../../@azure/msal-browser/src/cache/MemoryStorage.ts", "../../@azure/msal-browser/src/cache/AsyncMemoryStorage.ts", "../../@azure/msal-browser/src/crypto/CryptoOps.ts", "../../@azure/msal-browser/src/cache/BrowserStorage.ts", "../../@azure/msal-browser/src/utils/BrowserProtocolUtils.ts", "../../@azure/msal-browser/src/cache/BrowserCacheManager.ts", "../../@azure/msal-browser/src/cache/AccountManager.ts", "../../@azure/msal-browser/src/event/EventType.ts", "../../@azure/msal-browser/src/event/EventHandler.ts", "../../@azure/msal-browser/src/interaction_client/BaseInteractionClient.ts", "../../@azure/msal-browser/src/crypto/PkceGenerator.ts", "../../@azure/msal-browser/src/request/RequestHelpers.ts", "../../@azure/msal-browser/src/interaction_client/StandardInteractionClient.ts", "../../@azure/msal-browser/src/error/NativeAuthErrorCodes.ts", "../../@azure/msal-browser/src/broker/nativeBroker/NativeStatusCodes.ts", "../../@azure/msal-browser/src/error/NativeAuthError.ts", "../../@azure/msal-browser/src/interaction_client/SilentCacheClient.ts", "../../@azure/msal-browser/src/interaction_client/NativeInteractionClient.ts", "../../@azure/msal-browser/src/broker/nativeBroker/NativeMessageHandler.ts", "../../@azure/msal-browser/src/interaction_handler/InteractionHandler.ts", "../../@azure/msal-browser/src/response/ResponseHandler.ts", "../../@azure/msal-browser/src/interaction_client/PopupClient.ts", "../../@azure/msal-browser/src/interaction_handler/RedirectHandler.ts", "../../@azure/msal-browser/src/interaction_client/RedirectClient.ts", "../../@azure/msal-browser/src/interaction_handler/SilentHandler.ts", "../../@azure/msal-browser/src/interaction_client/SilentIframeClient.ts", "../../@azure/msal-browser/src/interaction_client/SilentRefreshClient.ts", "../../@azure/msal-browser/src/cache/TokenCache.ts", "../../@azure/msal-browser/src/interaction_client/HybridSpaAuthorizationCodeClient.ts", "../../@azure/msal-browser/src/interaction_client/SilentAuthCodeClient.ts", "../../@azure/msal-browser/src/controllers/StandardController.ts", "../../@azure/msal-browser/src/naa/BridgeError.ts", "../../@azure/msal-browser/src/naa/mapping/NestedAppAuthAdapter.ts", "../../@azure/msal-browser/src/error/NestedAppAuthError.ts", "../../@azure/msal-browser/src/controllers/NestedAppAuthController.ts", "../../@azure/msal-browser/src/controllers/ControllerFactory.ts", "../../@azure/msal-browser/src/app/PublicClientApplication.ts", "../../@azure/msal-browser/src/controllers/UnknownOperatingContextController.ts", "../../@azure/msal-browser/src/operatingcontext/UnknownOperatingContext.ts", "../../@azure/msal-browser/src/app/PublicClientNext.ts", "../../@azure/msal-browser/src/app/IPublicClientApplication.ts", "../../@azure/msal-browser/src/event/EventMessage.ts", "../../@azure/msal-browser/src/crypto/SignedHttpRequest.ts", "../../@azure/msal-browser/src/telemetry/BrowserPerformanceClient.ts", "../../@azure/identity/src/msal/utils.ts", "../../@azure/core-rest-pipeline/src/pipeline.ts", "../../@azure/core-rest-pipeline/src/log.ts", "../../@azure/core-rest-pipeline/src/util/sanitizer.ts", "../../@azure/core-rest-pipeline/src/policies/logPolicy.ts", "../../@azure/core-rest-pipeline/src/policies/redirectPolicy.ts", "../../@azure/core-rest-pipeline/src/util/userAgentPlatform-browser.mts", "../../@azure/core-rest-pipeline/src/constants.ts", "../../@azure/core-rest-pipeline/src/util/userAgent.ts", "../../@azure/core-rest-pipeline/src/policies/userAgentPolicy.ts", "../../@azure/core-rest-pipeline/src/util/typeGuards.ts", "../../@azure/core-rest-pipeline/src/util/file.ts", "../../@azure/core-rest-pipeline/src/util/concat.common.ts", "../../@azure/core-rest-pipeline/src/policies/multipartPolicy.ts", "../../@azure/core-rest-pipeline/src/policies/decompressResponsePolicy-browser.mts", "../../@azure/core-rest-pipeline/node_modules/@azure/abort-controller/src/AbortError.ts", "../../@azure/core-rest-pipeline/src/util/helpers.ts", "../../@azure/core-rest-pipeline/src/retryStrategies/throttlingRetryStrategy.ts", "../../@azure/core-rest-pipeline/src/retryStrategies/exponentialRetryStrategy.ts", "../../@azure/core-rest-pipeline/src/policies/retryPolicy.ts", "../../@azure/core-rest-pipeline/src/policies/defaultRetryPolicy.ts", "../../@azure/core-rest-pipeline/src/httpHeaders.ts", "../../@azure/core-rest-pipeline/src/policies/formDataPolicy.ts", "../../@azure/core-rest-pipeline/src/policies/proxyPolicy.common.ts", "../../@azure/core-rest-pipeline/src/policies/setClientRequestIdPolicy.ts", "../../@azure/core-rest-pipeline/src/policies/tlsPolicy.ts", "../../@azure/core-rest-pipeline/src/util/inspect.common.ts", "../../@azure/core-rest-pipeline/src/restError.ts", "../../@azure/core-rest-pipeline/src/policies/tracingPolicy.ts", "../../@azure/core-rest-pipeline/src/createPipelineFromOptions.ts", "../../@azure/core-rest-pipeline/src/fetchHttpClient.ts", "../../@azure/core-rest-pipeline/src/defaultHttpClient-browser.mts", "../../@azure/core-rest-pipeline/src/pipelineRequest.ts", "../../@azure/core-rest-pipeline/src/util/tokenCycler.ts", "../../@azure/core-rest-pipeline/src/policies/bearerTokenAuthenticationPolicy.ts", "../../@azure/identity/src/util/processMultiTenantRequest.browser.ts", "../../@azure/identity/src/util/tenantIdUtils.ts", "../../@azure/core-client/src/interfaces.ts", "../../@azure/core-client/src/utils.ts", "../../@azure/core-client/src/serializer.ts", "../../@azure/core-client/src/state-browser.mts", "../../@azure/core-client/src/operationHelpers.ts", "../../@azure/core-client/src/deserializationPolicy.ts", "../../@azure/core-client/src/interfaceHelpers.ts", "../../@azure/core-client/src/serializationPolicy.ts", "../../@azure/core-client/src/pipeline.ts", "../../@azure/core-client/src/httpClientCache.ts", "../../@azure/core-client/src/urlHelpers.ts", "../../@azure/core-client/src/log.ts", "../../@azure/core-client/src/serviceClient.ts", "../../@azure/identity/src/util/identityTokenEndpoint.ts", "../../@azure/identity/src/credentials/managedIdentityCredential/utils.ts", "../../@azure/identity/src/client/identityClient.ts", "../../@azure/identity/src/credentials/clientSecretCredential.browser.ts", "../../@azure/identity/src/credentials/environmentCredential.browser.ts", "../../@azure/identity/src/credentials/clientCertificateCredential.browser.ts", "../../@azure/identity/src/credentials/clientAssertionCredential.browser.ts", "../../@azure/identity/src/credentials/azureCliCredential.browser.ts", "../../@azure/identity/src/credentials/azureDeveloperCliCredential.browser.ts", "../../@azure/identity/src/msal/browserFlows/msalBrowserCommon.ts", "../../@azure/identity/src/msal/browserFlows/msalAuthCode.ts", "../../@azure/identity/src/util/scopeUtils.ts", "../../@azure/identity/src/credentials/interactiveBrowserCredential.browser.ts", "../../@azure/identity/src/credentials/managedIdentityCredential/index.browser.ts", "../../@azure/identity/src/credentials/deviceCodeCredential.browser.ts", "../../@azure/identity/src/credentials/azurePipelinesCredential.browser.ts", "../../@azure/identity/src/credentials/authorizationCodeCredential.browser.ts", "../../@azure/identity/src/credentials/azurePowerShellCredential.browser.ts", "../../@azure/identity/src/credentials/usernamePasswordCredential.browser.ts", "../../@azure/identity/src/credentials/visualStudioCodeCredential.browser.ts", "../../@azure/identity/src/credentials/onBehalfOfCredential.browser.ts", "../../@azure/identity/src/credentials/workloadIdentityCredential.browser.ts", "../../@azure/identity/src/tokenProvider.ts", "../../@azure/identity/src/index.ts"],
  "sourcesContent": ["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// This module is a shim for the plugin consumer in the browser\n\nexport function useIdentityPlugin(_plugin: unknown): void {\n  throw new Error(\"Identity plugins are not supported in browser environments.\");\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport function log(...args: any[]): void {\n  if (args.length > 0) {\n    const firstArg = String(args[0]);\n    if (firstArg.includes(\":error\")) {\n      console.error(...args);\n    } else if (firstArg.includes(\":warning\")) {\n      console.warn(...args);\n    } else if (firstArg.includes(\":info\")) {\n      console.info(...args);\n    } else if (firstArg.includes(\":verbose\")) {\n      console.debug(...args);\n    } else {\n      console.debug(...args);\n    }\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { log } from \"./log.js\";\n\n/**\n * A simple mechanism for enabling logging.\n * Intended to mimic the publicly available `debug` package.\n */\nexport interface Debug {\n  /**\n   * Creates a new logger with the given namespace.\n   */\n  (namespace: string): Debugger;\n  /**\n   * The default log method (defaults to console)\n   */\n  log: (...args: any[]) => void;\n  /**\n   * Enables a particular set of namespaces.\n   * To enable multiple separate them with commas, e.g. \"info,debug\".\n   * Supports wildcards, e.g. \"azure:*\"\n   * Supports skip syntax, e.g. \"azure:*,-azure:storage:*\" will enable\n   * everything under azure except for things under azure:storage.\n   */\n  enable: (namespaces: string) => void;\n  /**\n   * Checks if a particular namespace is enabled.\n   */\n  enabled: (namespace: string) => boolean;\n  /**\n   * Disables all logging, returns what was previously enabled.\n   */\n  disable: () => string;\n}\n\n/**\n * A log function that can be dynamically enabled and redirected.\n */\nexport interface Debugger {\n  /**\n   * Logs the given arguments to the `log` method.\n   */\n  (...args: any[]): void;\n  /**\n   * True if this logger is active and logging.\n   */\n  enabled: boolean;\n  /**\n   * Used to cleanup/remove this logger.\n   */\n  destroy: () => boolean;\n  /**\n   * The current log method. Can be overridden to redirect output.\n   */\n  log: (...args: any[]) => void;\n  /**\n   * The namespace of this logger.\n   */\n  namespace: string;\n  /**\n   * Extends this logger with a child namespace.\n   * Namespaces are separated with a ':' character.\n   */\n  extend: (namespace: string) => Debugger;\n}\n\nconst debugEnvVariable =\n  (typeof process !== \"undefined\" && process.env && process.env.DEBUG) || undefined;\n\nlet enabledString: string | undefined;\nlet enabledNamespaces: RegExp[] = [];\nlet skippedNamespaces: RegExp[] = [];\nconst debuggers: Debugger[] = [];\n\nif (debugEnvVariable) {\n  enable(debugEnvVariable);\n}\n\nconst debugObj: Debug = Object.assign(\n  (namespace: string): Debugger => {\n    return createDebugger(namespace);\n  },\n  {\n    enable,\n    enabled,\n    disable,\n    log,\n  },\n);\n\nfunction enable(namespaces: string): void {\n  enabledString = namespaces;\n  enabledNamespaces = [];\n  skippedNamespaces = [];\n  const wildcard = /\\*/g;\n  const namespaceList = namespaces.split(\",\").map((ns) => ns.trim().replace(wildcard, \".*?\"));\n  for (const ns of namespaceList) {\n    if (ns.startsWith(\"-\")) {\n      skippedNamespaces.push(new RegExp(`^${ns.substr(1)}$`));\n    } else {\n      enabledNamespaces.push(new RegExp(`^${ns}$`));\n    }\n  }\n  for (const instance of debuggers) {\n    instance.enabled = enabled(instance.namespace);\n  }\n}\n\nfunction enabled(namespace: string): boolean {\n  if (namespace.endsWith(\"*\")) {\n    return true;\n  }\n\n  for (const skipped of skippedNamespaces) {\n    if (skipped.test(namespace)) {\n      return false;\n    }\n  }\n  for (const enabledNamespace of enabledNamespaces) {\n    if (enabledNamespace.test(namespace)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction disable(): string {\n  const result = enabledString || \"\";\n  enable(\"\");\n  return result;\n}\n\nfunction createDebugger(namespace: string): Debugger {\n  const newDebugger: Debugger = Object.assign(debug, {\n    enabled: enabled(namespace),\n    destroy,\n    log: debugObj.log,\n    namespace,\n    extend,\n  });\n\n  function debug(...args: any[]): void {\n    if (!newDebugger.enabled) {\n      return;\n    }\n    if (args.length > 0) {\n      args[0] = `${namespace} ${args[0]}`;\n    }\n    newDebugger.log(...args);\n  }\n\n  debuggers.push(newDebugger);\n\n  return newDebugger;\n}\n\nfunction destroy(this: Debugger): boolean {\n  const index = debuggers.indexOf(this);\n  if (index >= 0) {\n    debuggers.splice(index, 1);\n    return true;\n  }\n  return false;\n}\n\nfunction extend(this: Debugger, namespace: string): Debugger {\n  const newDebugger = createDebugger(`${this.namespace}:${namespace}`);\n  newDebugger.log = this.log;\n  return newDebugger;\n}\n\nexport default debugObj;\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport debug, { type Debugger } from \"./debug.js\";\nexport type { Debugger } from \"./debug.js\";\n\nconst registeredLoggers = new Set<AzureDebugger>();\nconst logLevelFromEnv =\n  (typeof process !== \"undefined\" && process.env && process.env.AZURE_LOG_LEVEL) || undefined;\n\nlet azureLogLevel: AzureLogLevel | undefined;\n\n/**\n * The AzureLogger provides a mechanism for overriding where logs are output to.\n * By default, logs are sent to stderr.\n * Override the `log` method to redirect logs to another location.\n */\nexport const AzureLogger: AzureClientLogger = debug(\"azure\");\nAzureLogger.log = (...args) => {\n  debug.log(...args);\n};\n\n/**\n * The log levels supported by the logger.\n * The log levels in order of most verbose to least verbose are:\n * - verbose\n * - info\n * - warning\n * - error\n */\nexport type AzureLogLevel = \"verbose\" | \"info\" | \"warning\" | \"error\";\nconst AZURE_LOG_LEVELS = [\"verbose\", \"info\", \"warning\", \"error\"];\n\ntype AzureDebugger = Debugger & { level: AzureLogLevel };\n\n/**\n * An AzureClientLogger is a function that can log to an appropriate severity level.\n */\nexport type AzureClientLogger = Debugger;\n\nif (logLevelFromEnv) {\n  // avoid calling setLogLevel because we don't want a mis-set environment variable to crash\n  if (isAzureLogLevel(logLevelFromEnv)) {\n    setLogLevel(logLevelFromEnv);\n  } else {\n    console.error(\n      `AZURE_LOG_LEVEL set to unknown log level '${logLevelFromEnv}'; logging is not enabled. Acceptable values: ${AZURE_LOG_LEVELS.join(\n        \", \",\n      )}.`,\n    );\n  }\n}\n\n/**\n * Immediately enables logging at the specified log level. If no level is specified, logging is disabled.\n * @param level - The log level to enable for logging.\n * Options from most verbose to least verbose are:\n * - verbose\n * - info\n * - warning\n * - error\n */\nexport function setLogLevel(level?: AzureLogLevel): void {\n  if (level && !isAzureLogLevel(level)) {\n    throw new Error(\n      `Unknown log level '${level}'. Acceptable values: ${AZURE_LOG_LEVELS.join(\",\")}`,\n    );\n  }\n  azureLogLevel = level;\n\n  const enabledNamespaces = [];\n  for (const logger of registeredLoggers) {\n    if (shouldEnable(logger)) {\n      enabledNamespaces.push(logger.namespace);\n    }\n  }\n\n  debug.enable(enabledNamespaces.join(\",\"));\n}\n\n/**\n * Retrieves the currently specified log level.\n */\nexport function getLogLevel(): AzureLogLevel | undefined {\n  return azureLogLevel;\n}\n\nconst levelMap = {\n  verbose: 400,\n  info: 300,\n  warning: 200,\n  error: 100,\n};\n\n/**\n * Defines the methods available on the SDK-facing logger.\n */\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface AzureLogger {\n  /**\n   * Used for failures the program is unlikely to recover from,\n   * such as Out of Memory.\n   */\n  error: Debugger;\n  /**\n   * Used when a function fails to perform its intended task.\n   * Usually this means the function will throw an exception.\n   * Not used for self-healing events (e.g. automatic retry)\n   */\n  warning: Debugger;\n  /**\n   * Used when a function operates normally.\n   */\n  info: Debugger;\n  /**\n   * Used for detailed troubleshooting scenarios. This is\n   * intended for use by developers / system administrators\n   * for diagnosing specific failures.\n   */\n  verbose: Debugger;\n}\n\n/**\n * Creates a logger for use by the Azure SDKs that inherits from `AzureLogger`.\n * @param namespace - The name of the SDK package.\n * @hidden\n */\nexport function createClientLogger(namespace: string): AzureLogger {\n  const clientRootLogger: AzureClientLogger = AzureLogger.extend(namespace);\n  patchLogMethod(AzureLogger, clientRootLogger);\n  return {\n    error: createLogger(clientRootLogger, \"error\"),\n    warning: createLogger(clientRootLogger, \"warning\"),\n    info: createLogger(clientRootLogger, \"info\"),\n    verbose: createLogger(clientRootLogger, \"verbose\"),\n  };\n}\n\nfunction patchLogMethod(parent: AzureClientLogger, child: AzureClientLogger | AzureDebugger): void {\n  child.log = (...args) => {\n    parent.log(...args);\n  };\n}\n\nfunction createLogger(parent: AzureClientLogger, level: AzureLogLevel): AzureDebugger {\n  const logger: AzureDebugger = Object.assign(parent.extend(level), {\n    level,\n  });\n\n  patchLogMethod(parent, logger);\n\n  if (shouldEnable(logger)) {\n    const enabledNamespaces = debug.disable();\n    debug.enable(enabledNamespaces + \",\" + logger.namespace);\n  }\n\n  registeredLoggers.add(logger);\n\n  return logger;\n}\n\nfunction shouldEnable(logger: AzureDebugger): boolean {\n  return Boolean(azureLogLevel && levelMap[logger.level] <= levelMap[azureLogLevel]);\n}\n\nfunction isAzureLogLevel(logLevel: string): logLevel is AzureLogLevel {\n  return AZURE_LOG_LEVELS.includes(logLevel as any);\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AzureLogger, createClientLogger } from \"@azure/logger\";\n\n/**\n * The AzureLogger used for all clients within the identity package\n */\nexport const logger = createClientLogger(\"identity\");\n\ninterface EnvironmentAccumulator {\n  missing: string[];\n  assigned: string[];\n}\n\n/**\n * Separates a list of environment variable names into a plain object with two arrays: an array of missing environment variables and another array with assigned environment variables.\n * @param supportedEnvVars - List of environment variable names\n */\nexport function processEnvVars(supportedEnvVars: string[]): EnvironmentAccumulator {\n  return supportedEnvVars.reduce(\n    (acc: EnvironmentAccumulator, envVariable: string) => {\n      if (process.env[envVariable]) {\n        acc.assigned.push(envVariable);\n      } else {\n        acc.missing.push(envVariable);\n      }\n      return acc;\n    },\n    { missing: [], assigned: [] },\n  );\n}\n\n/**\n * Based on a given list of environment variable names,\n * logs the environment variables currently assigned during the usage of a credential that goes by the given name.\n * @param credentialName - Name of the credential in use\n * @param supportedEnvVars - List of environment variables supported by that credential\n */\nexport function logEnvVars(credentialName: string, supportedEnvVars: string[]): void {\n  const { assigned } = processEnvVars(supportedEnvVars);\n  logger.info(\n    `${credentialName} => Found the following environment variables: ${assigned.join(\", \")}`,\n  );\n}\n\n/**\n * Formatting the success event on the credentials\n */\nexport function formatSuccess(scope: string | string[]): string {\n  return `SUCCESS. Scopes: ${Array.isArray(scope) ? scope.join(\", \") : scope}.`;\n}\n\n/**\n * Formatting the success event on the credentials\n */\nexport function formatError(scope: string | string[] | undefined, error: Error | string): string {\n  let message = \"ERROR.\";\n  if (scope?.length) {\n    message += ` Scopes: ${Array.isArray(scope) ? scope.join(\", \") : scope}.`;\n  }\n  return `${message} Error message: ${typeof error === \"string\" ? error : error.message}.`;\n}\n\n/**\n * A CredentialLoggerInstance is a logger properly formatted to work in a credential's constructor, and its methods.\n */\nexport interface CredentialLoggerInstance {\n  title: string;\n  fullTitle: string;\n  info(message: string): void;\n  warning(message: string): void;\n  verbose(message: string): void;\n  error(err: string): void;\n}\n\n/**\n * Generates a CredentialLoggerInstance.\n *\n * It logs with the format:\n *\n *   `[title] => [message]`\n *\n */\nexport function credentialLoggerInstance(\n  title: string,\n  parent?: CredentialLoggerInstance,\n  log: AzureLogger = logger,\n): CredentialLoggerInstance {\n  const fullTitle = parent ? `${parent.fullTitle} ${title}` : title;\n\n  function info(message: string): void {\n    log.info(`${fullTitle} =>`, message);\n  }\n\n  function warning(message: string): void {\n    log.warning(`${fullTitle} =>`, message);\n  }\n\n  function verbose(message: string): void {\n    log.verbose(`${fullTitle} =>`, message);\n  }\n\n  function error(message: string): void {\n    log.error(`${fullTitle} =>`, message);\n  }\n\n  return {\n    title,\n    fullTitle,\n    info,\n    warning,\n    verbose,\n    error,\n  };\n}\n\n/**\n * A CredentialLogger is a logger declared at the credential's constructor, and used at any point in the credential.\n * It has all the properties of a CredentialLoggerInstance, plus other logger instances, one per method.\n */\nexport interface CredentialLogger extends CredentialLoggerInstance {\n  parent: AzureLogger;\n  getToken: CredentialLoggerInstance;\n}\n\n/**\n * Generates a CredentialLogger, which is a logger declared at the credential's constructor, and used at any point in the credential.\n * It has all the properties of a CredentialLoggerInstance, plus other logger instances, one per method.\n *\n * It logs with the format:\n *\n *   `[title] => [message]`\n *   `[title] => getToken() => [message]`\n *\n */\nexport function credentialLogger(title: string, log: AzureLogger = logger): CredentialLogger {\n  const credLogger = credentialLoggerInstance(title, undefined, log);\n  return {\n    ...credLogger,\n    parent: log,\n    getToken: credentialLoggerInstance(\"=> getToken()\", credLogger, log),\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { GetTokenOptions } from \"@azure/core-auth\";\n\n/**\n * See the official documentation for more details:\n *\n * https://learn.microsoft.com/en-us/azure/active-directory/develop/v1-protocols-oauth-code#error-response-1\n *\n * NOTE: This documentation is for v1 OAuth support but the same error\n * response details still apply to v2.\n */\nexport interface ErrorResponse {\n  /**\n   * The string identifier for the error.\n   */\n  error: string;\n\n  /**\n   * The error's description.\n   */\n  errorDescription: string;\n\n  /**\n   * An array of codes pertaining to the error(s) that occurred.\n   */\n  errorCodes?: number[];\n\n  /**\n   * The timestamp at which the error occurred.\n   */\n  timestamp?: string;\n\n  /**\n   * The trace identifier for this error occurrence.\n   */\n  traceId?: string;\n\n  /**\n   * The correlation ID to be used for tracking the source of the error.\n   */\n  correlationId?: string;\n}\n\n/**\n * Used for internal deserialization of OAuth responses. Public model is ErrorResponse\n * @internal\n */\nexport interface OAuthErrorResponse {\n  error: string;\n  error_description: string;\n  error_codes?: number[];\n  timestamp?: string;\n  trace_id?: string;\n  correlation_id?: string;\n}\n\nfunction isErrorResponse(errorResponse: any): errorResponse is OAuthErrorResponse {\n  return (\n    errorResponse &&\n    typeof errorResponse.error === \"string\" &&\n    typeof errorResponse.error_description === \"string\"\n  );\n}\n\n/**\n * The Error.name value of an CredentialUnavailable\n */\nexport const CredentialUnavailableErrorName = \"CredentialUnavailableError\";\n\n/**\n * This signifies that the credential that was tried in a chained credential\n * was not available to be used as the credential. Rather than treating this as\n * an error that should halt the chain, it's caught and the chain continues\n */\nexport class CredentialUnavailableError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = CredentialUnavailableErrorName;\n  }\n}\n\n/**\n * The Error.name value of an AuthenticationError\n */\nexport const AuthenticationErrorName = \"AuthenticationError\";\n\n/**\n * Provides details about a failure to authenticate with Azure Active\n * Directory.  The `errorResponse` field contains more details about\n * the specific failure.\n */\nexport class AuthenticationError extends Error {\n  /**\n   * The HTTP status code returned from the authentication request.\n   */\n  public readonly statusCode: number;\n\n  /**\n   * The error response details.\n   */\n  public readonly errorResponse: ErrorResponse;\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  constructor(statusCode: number, errorBody: object | string | undefined | null) {\n    let errorResponse: ErrorResponse = {\n      error: \"unknown\",\n      errorDescription: \"An unknown error occurred and no additional details are available.\",\n    };\n\n    if (isErrorResponse(errorBody)) {\n      errorResponse = convertOAuthErrorResponseToErrorResponse(errorBody);\n    } else if (typeof errorBody === \"string\") {\n      try {\n        // Most error responses will contain JSON-formatted error details\n        // in the response body\n        const oauthErrorResponse: OAuthErrorResponse = JSON.parse(errorBody);\n        errorResponse = convertOAuthErrorResponseToErrorResponse(oauthErrorResponse);\n      } catch (e: any) {\n        if (statusCode === 400) {\n          errorResponse = {\n            error: \"authority_not_found\",\n            errorDescription: \"The specified authority URL was not found.\",\n          };\n        } else {\n          errorResponse = {\n            error: \"unknown_error\",\n            errorDescription: `An unknown error has occurred. Response body:\\n\\n${errorBody}`,\n          };\n        }\n      }\n    } else {\n      errorResponse = {\n        error: \"unknown_error\",\n        errorDescription: \"An unknown error occurred and no additional details are available.\",\n      };\n    }\n\n    super(\n      `${errorResponse.error} Status code: ${statusCode}\\nMore details:\\n${errorResponse.errorDescription}`,\n    );\n    this.statusCode = statusCode;\n    this.errorResponse = errorResponse;\n\n    // Ensure that this type reports the correct name\n    this.name = AuthenticationErrorName;\n  }\n}\n\n/**\n * The Error.name value of an AggregateAuthenticationError\n */\nexport const AggregateAuthenticationErrorName = \"AggregateAuthenticationError\";\n\n/**\n * Provides an `errors` array containing {@link AuthenticationError} instance\n * for authentication failures from credentials in a {@link ChainedTokenCredential}.\n */\nexport class AggregateAuthenticationError extends Error {\n  /**\n   * The array of error objects that were thrown while trying to authenticate\n   * with the credentials in a {@link ChainedTokenCredential}.\n   */\n  public errors: any[];\n\n  constructor(errors: any[], errorMessage?: string) {\n    const errorDetail = errors.join(\"\\n\");\n    super(`${errorMessage}\\n${errorDetail}`);\n    this.errors = errors;\n\n    // Ensure that this type reports the correct name\n    this.name = AggregateAuthenticationErrorName;\n  }\n}\n\nfunction convertOAuthErrorResponseToErrorResponse(errorBody: OAuthErrorResponse): ErrorResponse {\n  return {\n    error: errorBody.error,\n    errorDescription: errorBody.error_description,\n    correlationId: errorBody.correlation_id,\n    errorCodes: errorBody.error_codes,\n    timestamp: errorBody.timestamp,\n    traceId: errorBody.trace_id,\n  };\n}\n\n/**\n * Optional parameters to the {@link AuthenticationRequiredError}\n */\nexport interface AuthenticationRequiredErrorOptions {\n  /**\n   * The list of scopes for which the token will have access.\n   */\n  scopes: string[];\n  /**\n   * The options passed to the getToken request.\n   */\n  getTokenOptions?: GetTokenOptions;\n  /**\n   * The message of the error.\n   */\n  message?: string;\n}\n\n/**\n * Error used to enforce authentication after trying to retrieve a token silently.\n */\nexport class AuthenticationRequiredError extends Error {\n  /**\n   * The list of scopes for which the token will have access.\n   */\n  public scopes: string[];\n  /**\n   * The options passed to the getToken request.\n   */\n  public getTokenOptions?: GetTokenOptions;\n\n  constructor(\n    /**\n     * Optional parameters. A message can be specified. The {@link GetTokenOptions} of the request can also be specified to more easily associate the error with the received parameters.\n     */\n    options: AuthenticationRequiredErrorOptions,\n  ) {\n    super(options.message);\n    this.scopes = options.scopes;\n    this.getTokenOptions = options.getTokenOptions;\n    this.name = \"AuthenticationRequiredError\";\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Current version of the `@azure/identity` package.\n */\nexport const SDK_VERSION = `4.4.1`;\n\n/**\n * The default client ID for authentication\n * @internal\n */\n// TODO: temporary - this is the Azure CLI clientID - we'll replace it when\n// Developer Sign On application is available\n// https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/src/Constants.cs#L9\nexport const DeveloperSignOnClientId = \"04b07795-8ddb-461a-bbee-02f9e1bf7b46\";\n\n/**\n * The default tenant for authentication\n * @internal\n */\nexport const DefaultTenantId = \"common\";\n\n/**\n * A list of known Azure authority hosts\n */\nexport enum AzureAuthorityHosts {\n  /**\n   * China-based Azure Authority Host\n   */\n  AzureChina = \"https://login.chinacloudapi.cn\",\n  /**\n   * Germany-based Azure Authority Host\n   */\n  AzureGermany = \"https://login.microsoftonline.de\",\n  /**\n   * US Government Azure Authority Host\n   */\n  AzureGovernment = \"https://login.microsoftonline.us\",\n  /**\n   * Public Cloud Azure Authority Host\n   */\n  AzurePublicCloud = \"https://login.microsoftonline.com\",\n}\n\n/**\n * @internal\n * The default authority host.\n */\nexport const DefaultAuthorityHost = AzureAuthorityHosts.AzurePublicCloud;\n\n/**\n * @internal\n * Allow acquiring tokens for any tenant for multi-tentant auth.\n */\nexport const ALL_TENANTS: string[] = [\"*\"];\n\n/**\n * @internal\n */\nexport const CACHE_CAE_SUFFIX = \"cae\";\n\n/**\n * @internal\n */\nexport const CACHE_NON_CAE_SUFFIX = \"nocae\";\n\n/**\n * @internal\n *\n * The default name for the cache persistence plugin.\n * Matches the constant defined in the cache persistence package.\n */\nexport const DEFAULT_TOKEN_CACHE_NAME = \"msal.cache\";\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { TracingContext, TracingSpan } from \"./interfaces.js\";\n\n/** @internal */\nexport const knownContextKeys = {\n  span: Symbol.for(\"@azure/core-tracing span\"),\n  namespace: Symbol.for(\"@azure/core-tracing namespace\"),\n};\n\n/**\n * Creates a new {@link TracingContext} with the given options.\n * @param options - A set of known keys that may be set on the context.\n * @returns A new {@link TracingContext} with the given options.\n *\n * @internal\n */\nexport function createTracingContext(options: CreateTracingContextOptions = {}): TracingContext {\n  let context: TracingContext = new TracingContextImpl(options.parentContext);\n  if (options.span) {\n    context = context.setValue(knownContextKeys.span, options.span);\n  }\n  if (options.namespace) {\n    context = context.setValue(knownContextKeys.namespace, options.namespace);\n  }\n  return context;\n}\n\n/** @internal */\nexport class TracingContextImpl implements TracingContext {\n  private _contextMap: Map<symbol, unknown>;\n  constructor(initialContext?: TracingContext) {\n    this._contextMap =\n      initialContext instanceof TracingContextImpl\n        ? new Map<symbol, unknown>(initialContext._contextMap)\n        : new Map();\n  }\n\n  setValue(key: symbol, value: unknown): TracingContext {\n    const newContext = new TracingContextImpl(this);\n    newContext._contextMap.set(key, value);\n    return newContext;\n  }\n\n  getValue(key: symbol): unknown {\n    return this._contextMap.get(key);\n  }\n\n  deleteValue(key: symbol): TracingContext {\n    const newContext = new TracingContextImpl(this);\n    newContext._contextMap.delete(key);\n    return newContext;\n  }\n}\n\n/**\n * Represents a set of items that can be set when creating a new {@link TracingContext}.\n */\nexport interface CreateTracingContextOptions {\n  /** The {@link parentContext} - the newly created context will contain all the values of the parent context unless overridden. */\n  parentContext?: TracingContext;\n  /** An initial span to set on the context. */\n  span?: TracingSpan;\n  /** The namespace to set on any child spans. */\n  namespace?: string;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Instrumenter } from \"./interfaces.js\";\n\n/**\n * Browser-only implementation of the module's state. The browser esm variant will not load the commonjs state, so we do not need to share state between the two.\n */\nexport const state = {\n  instrumenterImplementation: undefined as Instrumenter | undefined,\n};\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  Instrumenter,\n  InstrumenterSpanOptions,\n  TracingContext,\n  TracingSpan,\n} from \"./interfaces.js\";\n\nimport { createTracingContext } from \"./tracingContext.js\";\nimport { state } from \"./state.js\";\n\nexport function createDefaultTracingSpan(): TracingSpan {\n  return {\n    end: () => {\n      // noop\n    },\n    isRecording: () => false,\n    recordException: () => {\n      // noop\n    },\n    setAttribute: () => {\n      // noop\n    },\n    setStatus: () => {\n      // noop\n    },\n  };\n}\n\nexport function createDefaultInstrumenter(): Instrumenter {\n  return {\n    createRequestHeaders: (): Record<string, string> => {\n      return {};\n    },\n    parseTraceparentHeader: (): TracingContext | undefined => {\n      return undefined;\n    },\n    startSpan: (\n      _name: string,\n      spanOptions: InstrumenterSpanOptions,\n    ): { span: TracingSpan; tracingContext: TracingContext } => {\n      return {\n        span: createDefaultTracingSpan(),\n        tracingContext: createTracingContext({ parentContext: spanOptions.tracingContext }),\n      };\n    },\n    withContext<\n      CallbackArgs extends unknown[],\n      Callback extends (...args: CallbackArgs) => ReturnType<Callback>,\n    >(\n      _context: TracingContext,\n      callback: Callback,\n      ...callbackArgs: CallbackArgs\n    ): ReturnType<Callback> {\n      return callback(...callbackArgs);\n    },\n  };\n}\n\n/**\n * Extends the Azure SDK with support for a given instrumenter implementation.\n *\n * @param instrumenter - The instrumenter implementation to use.\n */\nexport function useInstrumenter(instrumenter: Instrumenter): void {\n  state.instrumenterImplementation = instrumenter;\n}\n\n/**\n * Gets the currently set instrumenter, a No-Op instrumenter by default.\n *\n * @returns The currently set instrumenter\n */\nexport function getInstrumenter(): Instrumenter {\n  if (!state.instrumenterImplementation) {\n    state.instrumenterImplementation = createDefaultInstrumenter();\n  }\n  return state.instrumenterImplementation;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  OperationTracingOptions,\n  OptionsWithTracingContext,\n  Resolved,\n  TracingClient,\n  TracingClientOptions,\n  TracingContext,\n  TracingSpan,\n  TracingSpanOptions,\n} from \"./interfaces.js\";\nimport { getInstrumenter } from \"./instrumenter.js\";\nimport { knownContextKeys } from \"./tracingContext.js\";\n\n/**\n * Creates a new tracing client.\n *\n * @param options - Options used to configure the tracing client.\n * @returns - An instance of {@link TracingClient}.\n */\nexport function createTracingClient(options: TracingClientOptions): TracingClient {\n  const { namespace, packageName, packageVersion } = options;\n\n  function startSpan<Options extends { tracingOptions?: OperationTracingOptions }>(\n    name: string,\n    operationOptions?: Options,\n    spanOptions?: TracingSpanOptions,\n  ): {\n    span: TracingSpan;\n    updatedOptions: OptionsWithTracingContext<Options>;\n  } {\n    const startSpanResult = getInstrumenter().startSpan(name, {\n      ...spanOptions,\n      packageName: packageName,\n      packageVersion: packageVersion,\n      tracingContext: operationOptions?.tracingOptions?.tracingContext,\n    });\n    let tracingContext = startSpanResult.tracingContext;\n    const span = startSpanResult.span;\n    if (!tracingContext.getValue(knownContextKeys.namespace)) {\n      tracingContext = tracingContext.setValue(knownContextKeys.namespace, namespace);\n    }\n    span.setAttribute(\"az.namespace\", tracingContext.getValue(knownContextKeys.namespace));\n    const updatedOptions: OptionsWithTracingContext<Options> = Object.assign({}, operationOptions, {\n      tracingOptions: { ...operationOptions?.tracingOptions, tracingContext },\n    });\n\n    return {\n      span,\n      updatedOptions,\n    };\n  }\n\n  async function withSpan<\n    Options extends { tracingOptions?: OperationTracingOptions },\n    Callback extends (\n      updatedOptions: Options,\n      span: Omit<TracingSpan, \"end\">,\n    ) => ReturnType<Callback>,\n  >(\n    name: string,\n    operationOptions: Options,\n    callback: Callback,\n    spanOptions?: TracingSpanOptions,\n  ): Promise<Resolved<ReturnType<Callback>>> {\n    const { span, updatedOptions } = startSpan(name, operationOptions, spanOptions);\n    try {\n      const result = await withContext(updatedOptions.tracingOptions.tracingContext, () =>\n        Promise.resolve(callback(updatedOptions, span)),\n      );\n      span.setStatus({ status: \"success\" });\n      return result as ReturnType<typeof withSpan>;\n    } catch (err: any) {\n      span.setStatus({ status: \"error\", error: err });\n      throw err;\n    } finally {\n      span.end();\n    }\n  }\n\n  function withContext<\n    CallbackArgs extends unknown[],\n    Callback extends (...args: CallbackArgs) => ReturnType<Callback>,\n  >(\n    context: TracingContext,\n    callback: Callback,\n    ...callbackArgs: CallbackArgs\n  ): ReturnType<Callback> {\n    return getInstrumenter().withContext(context, callback, ...callbackArgs);\n  }\n\n  /**\n   * Parses a traceparent header value into a span identifier.\n   *\n   * @param traceparentHeader - The traceparent header to parse.\n   * @returns An implementation-specific identifier for the span.\n   */\n  function parseTraceparentHeader(traceparentHeader: string): TracingContext | undefined {\n    return getInstrumenter().parseTraceparentHeader(traceparentHeader);\n  }\n\n  /**\n   * Creates a set of request headers to propagate tracing information to a backend.\n   *\n   * @param tracingContext - The context containing the span to serialize.\n   * @returns The set of headers to add to a request.\n   */\n  function createRequestHeaders(tracingContext?: TracingContext): Record<string, string> {\n    return getInstrumenter().createRequestHeaders(tracingContext);\n  }\n\n  return {\n    startSpan,\n    withSpan,\n    withContext,\n    parseTraceparentHeader,\n    createRequestHeaders,\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { SDK_VERSION } from \"../constants\";\nimport { createTracingClient } from \"@azure/core-tracing\";\n\n/**\n * Creates a span using the global tracer.\n * @internal\n */\nexport const tracingClient = createTracingClient({\n  namespace: \"Microsoft.AAD\",\n  packageName: \"@azure/identity\",\n  packageVersion: SDK_VERSION,\n});\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\nimport { AggregateAuthenticationError, CredentialUnavailableError } from \"../errors\";\nimport { credentialLogger, formatError, formatSuccess } from \"../util/logging\";\nimport { tracingClient } from \"../util/tracing\";\n\n/**\n * @internal\n */\nexport const logger = credentialLogger(\"ChainedTokenCredential\");\n\n/**\n * Enables multiple `TokenCredential` implementations to be tried in order\n * until one of the getToken methods returns an access token.\n */\nexport class ChainedTokenCredential implements TokenCredential {\n  private _sources: TokenCredential[] = [];\n\n  /**\n   * Creates an instance of ChainedTokenCredential using the given credentials.\n   *\n   * @param sources - `TokenCredential` implementations to be tried in order.\n   *\n   * Example usage:\n   * ```javascript\n   * const firstCredential = new ClientSecretCredential(tenantId, clientId, clientSecret);\n   * const secondCredential = new ClientSecretCredential(tenantId, anotherClientId, anotherSecret);\n   * const credentialChain = new ChainedTokenCredential(firstCredential, secondCredential);\n   * ```\n   */\n  constructor(...sources: TokenCredential[]) {\n    this._sources = sources;\n  }\n\n  /**\n   * Returns the first access token returned by one of the chained\n   * `TokenCredential` implementations.  Throws an {@link AggregateAuthenticationError}\n   * when one or more credentials throws an {@link AuthenticationError} and\n   * no credentials have returned an access token.\n   *\n   * This method is called automatically by Azure SDK client libraries. You may call this method\n   * directly, but you must also handle token caching and token refreshing.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                `TokenCredential` implementation might make.\n   */\n  async getToken(scopes: string | string[], options: GetTokenOptions = {}): Promise<AccessToken> {\n    const { token } = await this.getTokenInternal(scopes, options);\n    return token;\n  }\n\n  private async getTokenInternal(\n    scopes: string | string[],\n    options: GetTokenOptions = {},\n  ): Promise<{ token: AccessToken; successfulCredential: TokenCredential }> {\n    let token: AccessToken | null = null;\n    let successfulCredential: TokenCredential;\n    const errors: Error[] = [];\n\n    return tracingClient.withSpan(\n      \"ChainedTokenCredential.getToken\",\n      options,\n      async (updatedOptions) => {\n        for (let i = 0; i < this._sources.length && token === null; i++) {\n          try {\n            token = await this._sources[i].getToken(scopes, updatedOptions);\n            successfulCredential = this._sources[i];\n          } catch (err: any) {\n            if (\n              err.name === \"CredentialUnavailableError\" ||\n              err.name === \"AuthenticationRequiredError\"\n            ) {\n              errors.push(err);\n            } else {\n              logger.getToken.info(formatError(scopes, err));\n              throw err;\n            }\n          }\n        }\n\n        if (!token && errors.length > 0) {\n          const err = new AggregateAuthenticationError(\n            errors,\n            \"ChainedTokenCredential authentication failed.\",\n          );\n          logger.getToken.info(formatError(scopes, err));\n          throw err;\n        }\n\n        logger.getToken.info(\n          `Result for ${successfulCredential.constructor.name}: ${formatSuccess(scopes)}`,\n        );\n\n        if (token === null) {\n          throw new CredentialUnavailableError(\"Failed to retrieve a valid token\");\n        }\n        return { token, successfulCredential };\n      },\n    );\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { credentialLogger, formatError } from \"../util/logging\";\nimport { AccessToken } from \"@azure/core-auth\";\nimport { ChainedTokenCredential } from \"./chainedTokenCredential\";\nimport { TokenCredentialOptions } from \"../tokenCredentialOptions\";\n\nconst BrowserNotSupportedError = new Error(\n  \"DefaultAzureCredential is not supported in the browser. Use InteractiveBrowserCredential instead.\",\n);\nconst logger = credentialLogger(\"DefaultAzureCredential\");\n\n/**\n * Provides a default {@link ChainedTokenCredential} configuration for\n * applications that will be deployed to Azure.\n *\n * Only available in Node.js.\n */\nexport class DefaultAzureCredential extends ChainedTokenCredential {\n  /**\n   * Creates an instance of the DefaultAzureCredential class.\n   *\n   * @param options - Options for configuring the client which makes the authentication request.\n   */\n  constructor(_tokenCredentialOptions?: TokenCredentialOptions) {\n    super();\n    logger.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n\n  public getToken(): Promise<AccessToken> {\n    logger.getToken.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Returns a random integer value between a lower and upper bound,\n * inclusive of both bounds.\n * Note that this uses Math.random and isn't secure. If you need to use\n * this for any kind of security purpose, find a better source of random.\n * @param min - The smallest integer value allowed.\n * @param max - The largest integer value allowed.\n */\nexport function getRandomIntegerInclusive(min: number, max: number): number {\n  // Make sure inputs are integers.\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  // Pick a random offset from zero to the size of the range.\n  // Since Math.random() can never return 1, we have to make the range one larger\n  // in order to be inclusive of the maximum value after we take the floor.\n  const offset = Math.floor(Math.random() * (max - min + 1));\n  return offset + min;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * A generic shape for a plain JS object.\n */\nexport type UnknownObject = { [s: string]: unknown };\n\n/**\n * Helper to determine when an input is a generic JS object.\n * @returns true when input is an object type that is not null, Array, RegExp, or Date.\n */\nexport function isObject(input: unknown): input is UnknownObject {\n  return (\n    typeof input === \"object\" &&\n    input !== null &&\n    !Array.isArray(input) &&\n    !(input instanceof RegExp) &&\n    !(input instanceof Date)\n  );\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { isObject } from \"./object.js\";\n\n/**\n * Typeguard for an error object shape (has name and message)\n * @param e - Something caught by a catch clause.\n */\nexport function isError(e: unknown): e is Error {\n  if (isObject(e)) {\n    const hasName = typeof e.name === \"string\";\n    const hasMessage = typeof e.message === \"string\";\n    return hasName && hasMessage;\n  }\n  return false;\n}\n\n/**\n * Given what is thought to be an error object, return the message if possible.\n * If the message is missing, returns a stringified version of the input.\n * @param e - Something thrown from a try block\n * @returns The error message or a string of the input\n */\nexport function getErrorMessage(e: unknown): string {\n  if (isError(e)) {\n    return e.message;\n  } else {\n    let stringified: string;\n    try {\n      if (typeof e === \"object\" && e) {\n        stringified = JSON.stringify(e);\n      } else {\n        stringified = String(e);\n      }\n    } catch (err: any) {\n      stringified = \"[unable to stringify input]\";\n    }\n    return `Unknown error ${stringified}`;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\ndeclare global {\n  // stub these out for the browser\n  function btoa(input: string): string;\n  function atob(input: string): string;\n}\n\n/** The supported character encoding type */\nexport type EncodingType = \"utf-8\" | \"base64\" | \"base64url\" | \"hex\";\n\n/**\n * The helper that transforms bytes with specific character encoding into string\n * @param bytes - the uint8array bytes\n * @param format - the format we use to encode the byte\n * @returns a string of the encoded string\n */\nexport function uint8ArrayToString(bytes: Uint8Array, format: EncodingType): string {\n  switch (format) {\n    case \"utf-8\":\n      return uint8ArrayToUtf8String(bytes);\n    case \"base64\":\n      return uint8ArrayToBase64(bytes);\n    case \"base64url\":\n      return uint8ArrayToBase64Url(bytes);\n    case \"hex\":\n      return uint8ArrayToHexString(bytes);\n  }\n}\n\n/**\n * The helper that transforms string to specific character encoded bytes array.\n * @param value - the string to be converted\n * @param format - the format we use to decode the value\n * @returns a uint8array\n */\nexport function stringToUint8Array(value: string, format: EncodingType): Uint8Array {\n  switch (format) {\n    case \"utf-8\":\n      return utf8StringToUint8Array(value);\n    case \"base64\":\n      return base64ToUint8Array(value);\n    case \"base64url\":\n      return base64UrlToUint8Array(value);\n    case \"hex\":\n      return hexStringToUint8Array(value);\n  }\n}\n\n/**\n * Decodes a Uint8Array into a Base64 string.\n * @internal\n */\nexport function uint8ArrayToBase64(bytes: Uint8Array): string {\n  return btoa([...bytes].map((x) => String.fromCharCode(x)).join(\"\"));\n}\n\n/**\n * Decodes a Uint8Array into a Base64Url string.\n * @internal\n */\nexport function uint8ArrayToBase64Url(bytes: Uint8Array): string {\n  return uint8ArrayToBase64(bytes).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n}\n\n/**\n * Decodes a Uint8Array into a javascript string.\n * @internal\n */\nexport function uint8ArrayToUtf8String(bytes: Uint8Array): string {\n  const decoder = new TextDecoder();\n  const dataString = decoder.decode(bytes);\n  return dataString;\n}\n\n/**\n * Decodes a Uint8Array into a hex string\n * @internal\n */\nexport function uint8ArrayToHexString(bytes: Uint8Array): string {\n  return [...bytes].map((x) => x.toString(16).padStart(2, \"0\")).join(\"\");\n}\n\n/**\n * Encodes a JavaScript string into a Uint8Array.\n * @internal\n */\nexport function utf8StringToUint8Array(value: string): Uint8Array {\n  return new TextEncoder().encode(value);\n}\n\n/**\n * Encodes a Base64 string into a Uint8Array.\n * @internal\n */\nexport function base64ToUint8Array(value: string): Uint8Array {\n  return new Uint8Array([...atob(value)].map((x) => x.charCodeAt(0)));\n}\n\n/**\n * Encodes a Base64Url string into a Uint8Array.\n * @internal\n */\nexport function base64UrlToUint8Array(value: string): Uint8Array {\n  const base64String = value.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  return base64ToUint8Array(base64String);\n}\n\nconst hexDigits = new Set(\"0123456789abcdefABCDEF\");\n\n/**\n * Encodes a hex string into a Uint8Array\n * @internal\n */\nexport function hexStringToUint8Array(value: string): Uint8Array {\n  // If value has odd length, the last character will be ignored, consistent with NodeJS Buffer behavior\n  const bytes = new Uint8Array(value.length / 2);\n  for (let i = 0; i < value.length / 2; ++i) {\n    const highNibble = value[2 * i];\n    const lowNibble = value[2 * i + 1];\n    if (!hexDigits.has(highNibble) || !hexDigits.has(lowNibble)) {\n      // Replicate Node Buffer behavior by exiting early when we encounter an invalid byte\n      return bytes.slice(0, i);\n    }\n\n    bytes[i] = parseInt(`${highNibble}${lowNibble}`, 16);\n  }\n\n  return bytes;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n */\nexport function generateUUID(): string {\n  let uuid = \"\";\n  for (let i = 0; i < 32; i++) {\n    // Generate a random number between 0 and 15\n    const randomNumber = Math.floor(Math.random() * 16);\n    // Set the UUID version to 4 in the 13th position\n    if (i === 12) {\n      uuid += \"4\";\n    } else if (i === 16) {\n      // Set the UUID variant to \"10\" in the 17th position\n      uuid += (randomNumber & 0x3) | 0x8;\n    } else {\n      // Add a random hexadecimal digit to the UUID string\n      uuid += randomNumber.toString(16);\n    }\n    // Add hyphens to the UUID string at the appropriate positions\n    if (i === 7 || i === 11 || i === 15 || i === 19) {\n      uuid += \"-\";\n    }\n  }\n  return uuid;\n}\n\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n */\nexport function randomUUID(): string {\n  return generateUUID();\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { generateUUID } from \"./uuidUtils.common.js\";\n\ninterface Crypto {\n  randomUUID(): string;\n}\n\ndeclare const globalThis: {\n  crypto: Crypto;\n};\n\n// NOTE: This could be undefined if not used in a secure context\nconst uuidFunction =\n  typeof globalThis?.crypto?.randomUUID === \"function\"\n    ? globalThis.crypto.randomUUID.bind(globalThis.crypto)\n    : generateUUID;\n\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n */\nexport function randomUUID(): string {\n  return uuidFunction();\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\ninterface Window {\n  document: unknown;\n}\n\ninterface DedicatedWorkerGlobalScope {\n  constructor: {\n    name: string;\n  };\n\n  importScripts: (...paths: string[]) => void;\n}\n\ninterface Navigator {\n  product: string;\n}\n\ninterface DenoGlobal {\n  version: {\n    deno: string;\n  };\n}\n\ninterface BunGlobal {\n  version: string;\n}\n\n// eslint-disable-next-line @azure/azure-sdk/ts-no-window\ndeclare const window: Window;\ndeclare const self: DedicatedWorkerGlobalScope;\ndeclare const Deno: DenoGlobal;\ndeclare const Bun: BunGlobal;\ndeclare const navigator: Navigator;\n\n/**\n * A constant that indicates whether the environment the code is running is a Web Browser.\n */\n// eslint-disable-next-line @azure/azure-sdk/ts-no-window\nexport const isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n\n/**\n * A constant that indicates whether the environment the code is running is a Web Worker.\n */\nexport const isWebWorker =\n  typeof self === \"object\" &&\n  typeof self?.importScripts === \"function\" &&\n  (self.constructor?.name === \"DedicatedWorkerGlobalScope\" ||\n    self.constructor?.name === \"ServiceWorkerGlobalScope\" ||\n    self.constructor?.name === \"SharedWorkerGlobalScope\");\n\n/**\n * A constant that indicates whether the environment the code is running is Deno.\n */\nexport const isDeno =\n  typeof Deno !== \"undefined\" &&\n  typeof Deno.version !== \"undefined\" &&\n  typeof Deno.version.deno !== \"undefined\";\n\n/**\n * A constant that indicates whether the environment the code is running is Bun.sh.\n */\nexport const isBun = typeof Bun !== \"undefined\" && typeof Bun.version !== \"undefined\";\n\n/**\n * A constant that indicates whether the environment the code is running is a Node.js compatible environment.\n */\nexport const isNodeLike =\n  typeof globalThis.process !== \"undefined\" &&\n  Boolean(globalThis.process.version) &&\n  Boolean(globalThis.process.versions?.node);\n\n/**\n * A constant that indicates whether the environment the code is running is a Node.js compatible environment.\n * @deprecated Use `isNodeLike` instead.\n */\nexport const isNode = isNodeLike;\n\n/**\n * A constant that indicates whether the environment the code is running is Node.JS.\n */\nexport const isNodeRuntime = isNodeLike && !isBun && !isDeno;\n\n/**\n * A constant that indicates whether the environment the code is running is in React-Native.\n */\n// https://github.com/facebook/react-native/blob/main/packages/react-native/Libraries/Core/setUpNavigator.js\nexport const isReactNative =\n  typeof navigator !== \"undefined\" && navigator?.product === \"ReactNative\";\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"../shims-public.d.ts\" />\n\ntype AbortEventListener = (this: AbortSignalLike, ev?: any) => any;\n\nconst listenersMap = new WeakMap<AbortSignal, AbortEventListener[]>();\nconst abortedMap = new WeakMap<AbortSignal, boolean>();\n\n/**\n * Allows the request to be aborted upon firing of the \"abort\" event.\n * Compatible with the browser built-in AbortSignal and common polyfills.\n */\nexport interface AbortSignalLike {\n  /**\n   * Indicates if the signal has already been aborted.\n   */\n  readonly aborted: boolean;\n  /**\n   * Add new \"abort\" event listener, only support \"abort\" event.\n   */\n  addEventListener(\n    type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any,\n    options?: any\n  ): void;\n  /**\n   * Remove \"abort\" event listener, only support \"abort\" event.\n   */\n  removeEventListener(\n    type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any,\n    options?: any\n  ): void;\n}\n\n/**\n * An aborter instance implements AbortSignal interface, can abort HTTP requests.\n *\n * - Call AbortSignal.none to create a new AbortSignal instance that cannot be cancelled.\n * Use `AbortSignal.none` when you are required to pass a cancellation token but the operation\n * cannot or will not ever be cancelled.\n *\n * @example\n * Abort without timeout\n * ```ts\n * await doAsyncWork(AbortSignal.none);\n * ```\n */\nexport class AbortSignal implements AbortSignalLike {\n  constructor() {\n    listenersMap.set(this, []);\n    abortedMap.set(this, false);\n  }\n\n  /**\n   * Status of whether aborted or not.\n   *\n   * @readonly\n   */\n  public get aborted(): boolean {\n    if (!abortedMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    return abortedMap.get(this)!;\n  }\n\n  /**\n   * Creates a new AbortSignal instance that will never be aborted.\n   *\n   * @readonly\n   */\n  public static get none(): AbortSignal {\n    return new AbortSignal();\n  }\n\n  /**\n   * onabort event listener.\n   */\n  public onabort: ((ev?: Event) => any) | null = null;\n\n  /**\n   * Added new \"abort\" event listener, only support \"abort\" event.\n   *\n   * @param _type - Only support \"abort\" event\n   * @param listener - The listener to be added\n   */\n  public addEventListener(\n    // tslint:disable-next-line:variable-name\n    _type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any\n  ): void {\n    if (!listenersMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    const listeners = listenersMap.get(this)!;\n    listeners.push(listener);\n  }\n\n  /**\n   * Remove \"abort\" event listener, only support \"abort\" event.\n   *\n   * @param _type - Only support \"abort\" event\n   * @param listener - The listener to be removed\n   */\n  public removeEventListener(\n    // tslint:disable-next-line:variable-name\n    _type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any\n  ): void {\n    if (!listenersMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    const listeners = listenersMap.get(this)!;\n\n    const index = listeners.indexOf(listener);\n    if (index > -1) {\n      listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Dispatches a synthetic event to the AbortSignal.\n   */\n  dispatchEvent(_event: Event): boolean {\n    throw new Error(\n      \"This is a stub dispatchEvent implementation that should not be used.  It only exists for type-checking purposes.\"\n    );\n  }\n}\n\n/**\n * Helper to trigger an abort event immediately, the onabort and all abort event listeners will be triggered.\n * Will try to trigger abort event for all linked AbortSignal nodes.\n *\n * - If there is a timeout, the timer will be cancelled.\n * - If aborted is true, nothing will happen.\n *\n * @internal\n */\n// eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\nexport function abortSignal(signal: AbortSignal): void {\n  if (signal.aborted) {\n    return;\n  }\n\n  if (signal.onabort) {\n    signal.onabort.call(signal);\n  }\n\n  const listeners = listenersMap.get(signal)!;\n  if (listeners) {\n    // Create a copy of listeners so mutations to the array\n    // (e.g. via removeListener calls) don't affect the listeners\n    // we invoke.\n    listeners.slice().forEach((listener) => {\n      listener.call(signal, { type: \"abort\" });\n    });\n  }\n\n  abortedMap.set(signal, true);\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortSignal, AbortSignalLike, abortSignal } from \"./AbortSignal\";\n\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * ```ts\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n * ```\n */\nexport class AbortError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = \"AbortError\";\n  }\n}\n\n/**\n * An AbortController provides an AbortSignal and the associated controls to signal\n * that an asynchronous operation should be aborted.\n *\n * @example\n * Abort an operation when another event fires\n * ```ts\n * const controller = new AbortController();\n * const signal = controller.signal;\n * doAsyncWork(signal);\n * button.addEventListener('click', () => controller.abort());\n * ```\n *\n * @example\n * Share aborter cross multiple operations in 30s\n * ```ts\n * // Upload the same data to 2 different data centers at the same time,\n * // abort another when any of them is finished\n * const controller = AbortController.withTimeout(30 * 1000);\n * doAsyncWork(controller.signal).then(controller.abort);\n * doAsyncWork(controller.signal).then(controller.abort);\n *```\n *\n * @example\n * Cascaded aborting\n * ```ts\n * // All operations can't take more than 30 seconds\n * const aborter = Aborter.timeout(30 * 1000);\n *\n * // Following 2 operations can't take more than 25 seconds\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * ```\n */\nexport class AbortController {\n  private _signal: AbortSignal;\n\n  /**\n   * @param parentSignals - The AbortSignals that will signal aborted on the AbortSignal associated with this controller.\n   */\n  constructor(parentSignals?: AbortSignalLike[]);\n  /**\n   * @param parentSignals - The AbortSignals that will signal aborted on the AbortSignal associated with this controller.\n   */\n  constructor(...parentSignals: AbortSignalLike[]);\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  constructor(parentSignals?: any) {\n    this._signal = new AbortSignal();\n\n    if (!parentSignals) {\n      return;\n    }\n    // coerce parentSignals into an array\n    if (!Array.isArray(parentSignals)) {\n      // eslint-disable-next-line prefer-rest-params\n      parentSignals = arguments;\n    }\n    for (const parentSignal of parentSignals) {\n      // if the parent signal has already had abort() called,\n      // then call abort on this signal as well.\n      if (parentSignal.aborted) {\n        this.abort();\n      } else {\n        // when the parent signal aborts, this signal should as well.\n        parentSignal.addEventListener(\"abort\", () => {\n          this.abort();\n        });\n      }\n    }\n  }\n\n  /**\n   * The AbortSignal associated with this controller that will signal aborted\n   * when the abort method is called on this controller.\n   *\n   * @readonly\n   */\n  public get signal(): AbortSignal {\n    return this._signal;\n  }\n\n  /**\n   * Signal that any operations passed this controller's associated abort signal\n   * to cancel any remaining work and throw an `AbortError`.\n   */\n  abort(): void {\n    abortSignal(this._signal);\n  }\n\n  /**\n   * Creates a new AbortSignal instance that will abort after the provided ms.\n   * @param ms - Elapsed time in milliseconds to trigger an abort.\n   */\n  public static timeout(ms: number): AbortSignal {\n    const signal = new AbortSignal();\n    const timer = setTimeout(abortSignal, ms, signal);\n    // Prevent the active Timer from keeping the Node.js event loop active.\n    if (typeof timer.unref === \"function\") {\n      timer.unref();\n    }\n    return signal;\n  }\n}\n", "/*! @azure/msal-browser v3.20.0 2024-07-23 */\n'use strict';\nimport * as BrowserUtils from './utils/BrowserUtils.mjs';\nexport { BrowserUtils };\nexport { PublicClientApplication, createNestablePublicClientApplication, createStandardPublicClientApplication } from './app/PublicClientApplication.mjs';\nexport { PublicClientNext } from './app/PublicClientNext.mjs';\nexport { DEFAULT_IFRAME_TIMEOUT_MS } from './config/Configuration.mjs';\nexport { ApiId, BrowserCacheLocation, CacheLookupPolicy, InteractionStatus, InteractionType, WrapperSKU } from './utils/BrowserConstants.mjs';\nexport { BrowserAuthError, BrowserAuthErrorMessage } from './error/BrowserAuthError.mjs';\nexport { BrowserConfigurationAuthError, BrowserConfigurationAuthErrorMessage } from './error/BrowserConfigurationAuthError.mjs';\nexport { stubbedPublicClientApplication } from './app/IPublicClientApplication.mjs';\nexport { NavigationClient } from './navigation/NavigationClient.mjs';\nexport { MemoryStorage } from './cache/MemoryStorage.mjs';\nexport { BrowserStorage } from './cache/BrowserStorage.mjs';\nexport { EventMessageUtils } from './event/EventMessage.mjs';\nexport { EventType } from './event/EventType.mjs';\nexport { SignedHttpRequest } from './crypto/SignedHttpRequest.mjs';\nexport { BrowserPerformanceClient } from './telemetry/BrowserPerformanceClient.mjs';\nexport { BrowserPerformanceMeasurement } from './telemetry/BrowserPerformanceMeasurement.mjs';\nexport { AccountEntity, AuthError, AuthErrorCodes, AuthErrorMessage, AuthenticationHeaderParser, AuthenticationScheme, AzureCloudInstance, ClientAuthError, ClientAuthErrorCodes, ClientAuthErrorMessage, ClientConfigurationError, ClientConfigurationErrorCodes, ClientConfigurationErrorMessage, InteractionRequiredAuthError, InteractionRequiredAuthErrorCodes, InteractionRequiredAuthErrorMessage, JsonWebTokenTypes, LogLevel, Logger, OIDC_DEFAULT_SCOPES, PerformanceEvents, PromptValue, ProtocolMode, ServerError, ServerResponseType, StringUtils, StubPerformanceClient, UrlString } from '@azure/msal-common';\nexport { version } from './packageMetadata.mjs';\nimport * as BrowserAuthErrorCodes from './error/BrowserAuthErrorCodes.mjs';\nexport { BrowserAuthErrorCodes };\nimport * as BrowserConfigurationAuthErrorCodes from './error/BrowserConfigurationAuthErrorCodes.mjs';\nexport { BrowserConfigurationAuthErrorCodes };\n//# sourceMappingURL=index.mjs.map\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nexport const Constants = {\n    LIBRARY_NAME: \"MSAL.JS\",\n    SKU: \"msal.js.common\",\n    // Prefix for all library cache entries\n    CACHE_PREFIX: \"msal\",\n    // default authority\n    DEFAULT_AUTHORITY: \"https://login.microsoftonline.com/common/\",\n    DEFAULT_AUTHORITY_HOST: \"login.microsoftonline.com\",\n    DEFAULT_COMMON_TENANT: \"common\",\n    // ADFS String\n    ADFS: \"adfs\",\n    DSTS: \"dstsv2\",\n    // Default AAD Instance Discovery Endpoint\n    AAD_INSTANCE_DISCOVERY_ENDPT:\n        \"https://login.microsoftonline.com/common/discovery/instance?api-version=1.1&authorization_endpoint=\",\n    // CIAM URL\n    CIAM_AUTH_URL: \".ciamlogin.com\",\n    AAD_TENANT_DOMAIN_SUFFIX: \".onmicrosoft.com\",\n    // Resource delimiter - used for certain cache entries\n    RESOURCE_DELIM: \"|\",\n    // Placeholder for non-existent account ids/objects\n    NO_ACCOUNT: \"NO_ACCOUNT\",\n    // Claims\n    CLAIMS: \"claims\",\n    // Consumer UTID\n    CONSUMER_UTID: \"9188040d-6c67-4c5b-b112-36a304b66dad\",\n    // Default scopes\n    OPENID_SCOPE: \"openid\",\n    PROFILE_SCOPE: \"profile\",\n    OFFLINE_ACCESS_SCOPE: \"offline_access\",\n    EMAIL_SCOPE: \"email\",\n    // Default response type for authorization code flow\n    CODE_RESPONSE_TYPE: \"code\",\n    CODE_GRANT_TYPE: \"authorization_code\",\n    RT_GRANT_TYPE: \"refresh_token\",\n    FRAGMENT_RESPONSE_MODE: \"fragment\",\n    S256_CODE_CHALLENGE_METHOD: \"S256\",\n    URL_FORM_CONTENT_TYPE: \"application/x-www-form-urlencoded;charset=utf-8\",\n    AUTHORIZATION_PENDING: \"authorization_pending\",\n    NOT_DEFINED: \"not_defined\",\n    EMPTY_STRING: \"\",\n    NOT_APPLICABLE: \"N/A\",\n    NOT_AVAILABLE: \"Not Available\",\n    FORWARD_SLASH: \"/\",\n    IMDS_ENDPOINT: \"http://169.254.169.254/metadata/instance/compute/location\",\n    IMDS_VERSION: \"2020-06-01\",\n    IMDS_TIMEOUT: 2000,\n    AZURE_REGION_AUTO_DISCOVER_FLAG: \"TryAutoDetect\",\n    REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX: \"login.microsoft.com\",\n    KNOWN_PUBLIC_CLOUDS: [\n        \"login.microsoftonline.com\",\n        \"login.windows.net\",\n        \"login.microsoft.com\",\n        \"sts.windows.net\",\n    ],\n    TOKEN_RESPONSE_TYPE: \"token\",\n    ID_TOKEN_RESPONSE_TYPE: \"id_token\",\n    SHR_NONCE_VALIDITY: 240,\n    INVALID_INSTANCE: \"invalid_instance\",\n};\n\nexport const HttpStatus = {\n    SUCCESS: 200,\n    SUCCESS_RANGE_START: 200,\n    SUCCESS_RANGE_END: 299,\n    REDIRECT: 302,\n    CLIENT_ERROR: 400,\n    CLIENT_ERROR_RANGE_START: 400,\n    BAD_REQUEST: 400,\n    UNAUTHORIZED: 401,\n    NOT_FOUND: 404,\n    REQUEST_TIMEOUT: 408,\n    TOO_MANY_REQUESTS: 429,\n    CLIENT_ERROR_RANGE_END: 499,\n    SERVER_ERROR: 500,\n    SERVER_ERROR_RANGE_START: 500,\n    SERVICE_UNAVAILABLE: 503,\n    GATEWAY_TIMEOUT: 504,\n    SERVER_ERROR_RANGE_END: 599,\n    MULTI_SIDED_ERROR: 600,\n} as const;\nexport type HttpStatus = (typeof HttpStatus)[keyof typeof HttpStatus];\n\nexport const OIDC_DEFAULT_SCOPES = [\n    Constants.OPENID_SCOPE,\n    Constants.PROFILE_SCOPE,\n    Constants.OFFLINE_ACCESS_SCOPE,\n];\n\nexport const OIDC_SCOPES = [...OIDC_DEFAULT_SCOPES, Constants.EMAIL_SCOPE];\n\n/**\n * Request header names\n */\nexport const HeaderNames = {\n    CONTENT_TYPE: \"Content-Type\",\n    RETRY_AFTER: \"Retry-After\",\n    CCS_HEADER: \"X-AnchorMailbox\",\n    WWWAuthenticate: \"WWW-Authenticate\",\n    AuthenticationInfo: \"Authentication-Info\",\n    X_MS_REQUEST_ID: \"x-ms-request-id\",\n    X_MS_HTTP_VERSION: \"x-ms-httpver\",\n} as const;\nexport type HeaderNames = (typeof HeaderNames)[keyof typeof HeaderNames];\n\n/**\n * Persistent cache keys MSAL which stay while user is logged in.\n */\nexport const PersistentCacheKeys = {\n    ID_TOKEN: \"idtoken\",\n    CLIENT_INFO: \"client.info\",\n    ADAL_ID_TOKEN: \"adal.idtoken\",\n    ERROR: \"error\",\n    ERROR_DESC: \"error.description\",\n    ACTIVE_ACCOUNT: \"active-account\", // Legacy active-account cache key, use new key instead\n    ACTIVE_ACCOUNT_FILTERS: \"active-account-filters\", // new cache entry for active_account for a more robust version for browser\n} as const;\nexport type PersistentCacheKeys =\n    (typeof PersistentCacheKeys)[keyof typeof PersistentCacheKeys];\n\n/**\n * String constants related to AAD Authority\n */\nexport const AADAuthorityConstants = {\n    COMMON: \"common\",\n    ORGANIZATIONS: \"organizations\",\n    CONSUMERS: \"consumers\",\n} as const;\nexport type AADAuthorityConstants =\n    (typeof AADAuthorityConstants)[keyof typeof AADAuthorityConstants];\n\n/**\n * Claims request keys\n */\nexport const ClaimsRequestKeys = {\n    ACCESS_TOKEN: \"access_token\",\n    XMS_CC: \"xms_cc\",\n} as const;\nexport type ClaimsRequestKeys =\n    (typeof ClaimsRequestKeys)[keyof typeof ClaimsRequestKeys];\n\n/**\n * we considered making this \"enum\" in the request instead of string, however it looks like the allowed list of\n * prompt values kept changing over past couple of years. There are some undocumented prompt values for some\n * internal partners too, hence the choice of generic \"string\" type instead of the \"enum\"\n */\nexport const PromptValue = {\n    LOGIN: \"login\",\n    SELECT_ACCOUNT: \"select_account\",\n    CONSENT: \"consent\",\n    NONE: \"none\",\n    CREATE: \"create\",\n    NO_SESSION: \"no_session\",\n};\n\n/**\n * allowed values for codeVerifier\n */\nexport const CodeChallengeMethodValues = {\n    PLAIN: \"plain\",\n    S256: \"S256\",\n};\n\n/**\n * allowed values for server response type\n */\nexport const ServerResponseType = {\n    QUERY: \"query\",\n    FRAGMENT: \"fragment\",\n} as const;\nexport type ServerResponseType =\n    (typeof ServerResponseType)[keyof typeof ServerResponseType];\n\n/**\n * allowed values for response_mode\n */\nexport const ResponseMode = {\n    ...ServerResponseType,\n    FORM_POST: \"form_post\",\n} as const;\nexport type ResponseMode = (typeof ResponseMode)[keyof typeof ResponseMode];\n\n/**\n * allowed grant_type\n */\nexport const GrantType = {\n    IMPLICIT_GRANT: \"implicit\",\n    AUTHORIZATION_CODE_GRANT: \"authorization_code\",\n    CLIENT_CREDENTIALS_GRANT: \"client_credentials\",\n    RESOURCE_OWNER_PASSWORD_GRANT: \"password\",\n    REFRESH_TOKEN_GRANT: \"refresh_token\",\n    DEVICE_CODE_GRANT: \"device_code\",\n    JWT_BEARER: \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n} as const;\nexport type GrantType = (typeof GrantType)[keyof typeof GrantType];\n\n/**\n * Account types in Cache\n */\nexport const CacheAccountType = {\n    MSSTS_ACCOUNT_TYPE: \"MSSTS\",\n    ADFS_ACCOUNT_TYPE: \"ADFS\",\n    MSAV1_ACCOUNT_TYPE: \"MSA\",\n    GENERIC_ACCOUNT_TYPE: \"Generic\", // NTLM, Kerberos, FBA, Basic etc\n} as const;\nexport type CacheAccountType =\n    (typeof CacheAccountType)[keyof typeof CacheAccountType];\n\n/**\n * Separators used in cache\n */\nexport const Separators = {\n    CACHE_KEY_SEPARATOR: \"-\",\n    CLIENT_INFO_SEPARATOR: \".\",\n} as const;\nexport type Separators = (typeof Separators)[keyof typeof Separators];\n\n/**\n * Credential Type stored in the cache\n */\nexport const CredentialType = {\n    ID_TOKEN: \"IdToken\",\n    ACCESS_TOKEN: \"AccessToken\",\n    ACCESS_TOKEN_WITH_AUTH_SCHEME: \"AccessToken_With_AuthScheme\",\n    REFRESH_TOKEN: \"RefreshToken\",\n} as const;\nexport type CredentialType =\n    (typeof CredentialType)[keyof typeof CredentialType];\n\n/**\n * Combine all cache types\n */\nexport const CacheType = {\n    ADFS: 1001,\n    MSA: 1002,\n    MSSTS: 1003,\n    GENERIC: 1004,\n    ACCESS_TOKEN: 2001,\n    REFRESH_TOKEN: 2002,\n    ID_TOKEN: 2003,\n    APP_METADATA: 3001,\n    UNDEFINED: 9999,\n} as const;\nexport type CacheType = (typeof CacheType)[keyof typeof CacheType];\n\n/**\n * More Cache related constants\n */\nexport const APP_METADATA = \"appmetadata\";\nexport const CLIENT_INFO = \"client_info\";\nexport const THE_FAMILY_ID = \"1\";\n\nexport const AUTHORITY_METADATA_CONSTANTS = {\n    CACHE_KEY: \"authority-metadata\",\n    REFRESH_TIME_SECONDS: 3600 * 24, // 24 Hours\n};\n\nexport const AuthorityMetadataSource = {\n    CONFIG: \"config\",\n    CACHE: \"cache\",\n    NETWORK: \"network\",\n    HARDCODED_VALUES: \"hardcoded_values\",\n} as const;\nexport type AuthorityMetadataSource =\n    (typeof AuthorityMetadataSource)[keyof typeof AuthorityMetadataSource];\n\nexport const SERVER_TELEM_CONSTANTS = {\n    SCHEMA_VERSION: 5,\n    MAX_CUR_HEADER_BYTES: 80, // ESTS limit is 100B, set to 80 to provide a 20B buffer\n    MAX_LAST_HEADER_BYTES: 330, // ESTS limit is 350B, set to 330 to provide a 20B buffer,\n    MAX_CACHED_ERRORS: 50, // Limit the number of errors that can be stored to prevent uncontrolled size gains\n    CACHE_KEY: \"server-telemetry\",\n    CATEGORY_SEPARATOR: \"|\",\n    VALUE_SEPARATOR: \",\",\n    OVERFLOW_TRUE: \"1\",\n    OVERFLOW_FALSE: \"0\",\n    UNKNOWN_ERROR: \"unknown_error\",\n};\n\n/**\n * Type of the authentication request\n */\nexport const AuthenticationScheme = {\n    BEARER: \"Bearer\",\n    POP: \"pop\",\n    SSH: \"ssh-cert\",\n} as const;\nexport type AuthenticationScheme =\n    (typeof AuthenticationScheme)[keyof typeof AuthenticationScheme];\n\n/**\n * Constants related to throttling\n */\nexport const ThrottlingConstants = {\n    // Default time to throttle RequestThumbprint in seconds\n    DEFAULT_THROTTLE_TIME_SECONDS: 60,\n    // Default maximum time to throttle in seconds, overrides what the server sends back\n    DEFAULT_MAX_THROTTLE_TIME_SECONDS: 3600,\n    // Prefix for storing throttling entries\n    THROTTLING_PREFIX: \"throttling\",\n    // Value assigned to the x-ms-lib-capability header to indicate to the server the library supports throttling\n    X_MS_LIB_CAPABILITY_VALUE: \"retry-after, h429\",\n};\n\nexport const Errors = {\n    INVALID_GRANT_ERROR: \"invalid_grant\",\n    CLIENT_MISMATCH_ERROR: \"client_mismatch\",\n};\n\n/**\n * Password grant parameters\n */\nexport const PasswordGrantConstants = {\n    username: \"username\",\n    password: \"password\",\n} as const;\nexport type PasswordGrantConstants =\n    (typeof PasswordGrantConstants)[keyof typeof PasswordGrantConstants];\n\n/**\n * Response codes\n */\nexport const ResponseCodes = {\n    httpSuccess: 200,\n    httpBadRequest: 400,\n} as const;\nexport type ResponseCodes = (typeof ResponseCodes)[keyof typeof ResponseCodes];\n\n/**\n * Region Discovery Sources\n */\nexport const RegionDiscoverySources = {\n    FAILED_AUTO_DETECTION: \"1\",\n    INTERNAL_CACHE: \"2\",\n    ENVIRONMENT_VARIABLE: \"3\",\n    IMDS: \"4\",\n} as const;\nexport type RegionDiscoverySources =\n    (typeof RegionDiscoverySources)[keyof typeof RegionDiscoverySources];\n\n/**\n * Region Discovery Outcomes\n */\nexport const RegionDiscoveryOutcomes = {\n    CONFIGURED_MATCHES_DETECTED: \"1\",\n    CONFIGURED_NO_AUTO_DETECTION: \"2\",\n    CONFIGURED_NOT_DETECTED: \"3\",\n    AUTO_DETECTION_REQUESTED_SUCCESSFUL: \"4\",\n    AUTO_DETECTION_REQUESTED_FAILED: \"5\",\n} as const;\nexport type RegionDiscoveryOutcomes =\n    (typeof RegionDiscoveryOutcomes)[keyof typeof RegionDiscoveryOutcomes];\n\n/**\n * Specifies the reason for fetching the access token from the identity provider\n */\nexport const CacheOutcome = {\n    // When a token is found in the cache or the cache is not supposed to be hit when making the request\n    NOT_APPLICABLE: \"0\",\n    // When the token request goes to the identity provider because force_refresh was set to true. Also occurs if claims were requested\n    FORCE_REFRESH_OR_CLAIMS: \"1\",\n    // When the token request goes to the identity provider because no cached access token exists\n    NO_CACHED_ACCESS_TOKEN: \"2\",\n    // When the token request goes to the identity provider because cached access token expired\n    CACHED_ACCESS_TOKEN_EXPIRED: \"3\",\n    // When the token request goes to the identity provider because refresh_in was used and the existing token needs to be refreshed\n    PROACTIVELY_REFRESHED: \"4\",\n} as const;\nexport type CacheOutcome = (typeof CacheOutcome)[keyof typeof CacheOutcome];\n\nexport const JsonWebTokenTypes = {\n    Jwt: \"JWT\",\n    Jwk: \"JWK\",\n    Pop: \"pop\",\n} as const;\nexport type JsonWebTokenTypes =\n    (typeof JsonWebTokenTypes)[keyof typeof JsonWebTokenTypes];\n\nexport const ONE_DAY_IN_MS = 86400000;\n\n// Token renewal offset default in seconds\nexport const DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * AuthErrorMessage class containing string constants used by error codes and messages.\n */\nexport const unexpectedError = \"unexpected_error\";\nexport const postRequestFailed = \"post_request_failed\";\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Constants } from \"../utils/Constants\";\nimport * as AuthErrorCodes from \"./AuthErrorCodes\";\nexport { AuthErrorCodes };\n\nexport const AuthErrorMessages = {\n    [AuthErrorCodes.unexpectedError]: \"Unexpected error in authentication.\",\n    [AuthErrorCodes.postRequestFailed]:\n        \"Post request failed from the network, could be a 4xx/5xx or a network unavailability. Please check the exact error code for details.\",\n};\n\n/**\n * AuthErrorMessage class containing string constants used by error codes and messages.\n * @deprecated Use AuthErrorCodes instead\n */\nexport const AuthErrorMessage = {\n    unexpectedError: {\n        code: AuthErrorCodes.unexpectedError,\n        desc: AuthErrorMessages[AuthErrorCodes.unexpectedError],\n    },\n    postRequestFailed: {\n        code: AuthErrorCodes.postRequestFailed,\n        desc: AuthErrorMessages[AuthErrorCodes.postRequestFailed],\n    },\n};\n\n/**\n * General error class thrown by the MSAL.js library.\n */\nexport class AuthError extends Error {\n    /**\n     * Short string denoting error\n     */\n    errorCode: string;\n\n    /**\n     * Detailed description of error\n     */\n    errorMessage: string;\n\n    /**\n     * Describes the subclass of an error\n     */\n    subError: string;\n\n    /**\n     * CorrelationId associated with the error\n     */\n    correlationId: string;\n\n    constructor(errorCode?: string, errorMessage?: string, suberror?: string) {\n        const errorString = errorMessage\n            ? `${errorCode}: ${errorMessage}`\n            : errorCode;\n        super(errorString);\n        Object.setPrototypeOf(this, AuthError.prototype);\n\n        this.errorCode = errorCode || Constants.EMPTY_STRING;\n        this.errorMessage = errorMessage || Constants.EMPTY_STRING;\n        this.subError = suberror || Constants.EMPTY_STRING;\n        this.name = \"AuthError\";\n    }\n\n    setCorrelationId(correlationId: string): void {\n        this.correlationId = correlationId;\n    }\n}\n\nexport function createAuthError(\n    code: string,\n    additionalMessage?: string\n): AuthError {\n    return new AuthError(\n        code,\n        additionalMessage\n            ? `${AuthErrorMessages[code]} ${additionalMessage}`\n            : AuthErrorMessages[code]\n    );\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nexport const clientInfoDecodingError = \"client_info_decoding_error\";\nexport const clientInfoEmptyError = \"client_info_empty_error\";\nexport const tokenParsingError = \"token_parsing_error\";\nexport const nullOrEmptyToken = \"null_or_empty_token\";\nexport const endpointResolutionError = \"endpoints_resolution_error\";\nexport const networkError = \"network_error\";\nexport const openIdConfigError = \"openid_config_error\";\nexport const hashNotDeserialized = \"hash_not_deserialized\";\nexport const invalidState = \"invalid_state\";\nexport const stateMismatch = \"state_mismatch\";\nexport const stateNotFound = \"state_not_found\";\nexport const nonceMismatch = \"nonce_mismatch\";\nexport const authTimeNotFound = \"auth_time_not_found\";\nexport const maxAgeTranspired = \"max_age_transpired\";\nexport const multipleMatchingTokens = \"multiple_matching_tokens\";\nexport const multipleMatchingAccounts = \"multiple_matching_accounts\";\nexport const multipleMatchingAppMetadata = \"multiple_matching_appMetadata\";\nexport const requestCannotBeMade = \"request_cannot_be_made\";\nexport const cannotRemoveEmptyScope = \"cannot_remove_empty_scope\";\nexport const cannotAppendScopeSet = \"cannot_append_scopeset\";\nexport const emptyInputScopeSet = \"empty_input_scopeset\";\nexport const deviceCodePollingCancelled = \"device_code_polling_cancelled\";\nexport const deviceCodeExpired = \"device_code_expired\";\nexport const deviceCodeUnknownError = \"device_code_unknown_error\";\nexport const noAccountInSilentRequest = \"no_account_in_silent_request\";\nexport const invalidCacheRecord = \"invalid_cache_record\";\nexport const invalidCacheEnvironment = \"invalid_cache_environment\";\nexport const noAccountFound = \"no_account_found\";\nexport const noCryptoObject = \"no_crypto_object\";\nexport const unexpectedCredentialType = \"unexpected_credential_type\";\nexport const invalidAssertion = \"invalid_assertion\";\nexport const invalidClientCredential = \"invalid_client_credential\";\nexport const tokenRefreshRequired = \"token_refresh_required\";\nexport const userTimeoutReached = \"user_timeout_reached\";\nexport const tokenClaimsCnfRequiredForSignedJwt =\n    \"token_claims_cnf_required_for_signedjwt\";\nexport const authorizationCodeMissingFromServerResponse =\n    \"authorization_code_missing_from_server_response\";\nexport const bindingKeyNotRemoved = \"binding_key_not_removed\";\nexport const endSessionEndpointNotSupported =\n    \"end_session_endpoint_not_supported\";\nexport const keyIdMissing = \"key_id_missing\";\nexport const noNetworkConnectivity = \"no_network_connectivity\";\nexport const userCanceled = \"user_canceled\";\nexport const missingTenantIdError = \"missing_tenant_id_error\";\nexport const methodNotImplemented = \"method_not_implemented\";\nexport const nestedAppAuthBridgeDisabled = \"nested_app_auth_bridge_disabled\";\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError } from \"./AuthError\";\nimport * as ClientAuthErrorCodes from \"./ClientAuthErrorCodes\";\nexport { ClientAuthErrorCodes }; // Allow importing as \"ClientAuthErrorCodes\";\n\n/**\n * ClientAuthErrorMessage class containing string constants used by error codes and messages.\n */\n\nexport const ClientAuthErrorMessages = {\n    [ClientAuthErrorCodes.clientInfoDecodingError]:\n        \"The client info could not be parsed/decoded correctly\",\n    [ClientAuthErrorCodes.clientInfoEmptyError]: \"The client info was empty\",\n    [ClientAuthErrorCodes.tokenParsingError]: \"Token cannot be parsed\",\n    [ClientAuthErrorCodes.nullOrEmptyToken]: \"The token is null or empty\",\n    [ClientAuthErrorCodes.endpointResolutionError]:\n        \"Endpoints cannot be resolved\",\n    [ClientAuthErrorCodes.networkError]: \"Network request failed\",\n    [ClientAuthErrorCodes.openIdConfigError]:\n        \"Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints.\",\n    [ClientAuthErrorCodes.hashNotDeserialized]:\n        \"The hash parameters could not be deserialized\",\n    [ClientAuthErrorCodes.invalidState]: \"State was not the expected format\",\n    [ClientAuthErrorCodes.stateMismatch]: \"State mismatch error\",\n    [ClientAuthErrorCodes.stateNotFound]: \"State not found\",\n    [ClientAuthErrorCodes.nonceMismatch]: \"Nonce mismatch error\",\n    [ClientAuthErrorCodes.authTimeNotFound]:\n        \"Max Age was requested and the ID token is missing the auth_time variable.\" +\n        \" auth_time is an optional claim and is not enabled by default - it must be enabled.\" +\n        \" See https://aka.ms/msaljs/optional-claims for more information.\",\n    [ClientAuthErrorCodes.maxAgeTranspired]:\n        \"Max Age is set to 0, or too much time has elapsed since the last end-user authentication.\",\n    [ClientAuthErrorCodes.multipleMatchingTokens]:\n        \"The cache contains multiple tokens satisfying the requirements. \" +\n        \"Call AcquireToken again providing more requirements such as authority or account.\",\n    [ClientAuthErrorCodes.multipleMatchingAccounts]:\n        \"The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account\",\n    [ClientAuthErrorCodes.multipleMatchingAppMetadata]:\n        \"The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata\",\n    [ClientAuthErrorCodes.requestCannotBeMade]:\n        \"Token request cannot be made without authorization code or refresh token.\",\n    [ClientAuthErrorCodes.cannotRemoveEmptyScope]:\n        \"Cannot remove null or empty scope from ScopeSet\",\n    [ClientAuthErrorCodes.cannotAppendScopeSet]: \"Cannot append ScopeSet\",\n    [ClientAuthErrorCodes.emptyInputScopeSet]:\n        \"Empty input ScopeSet cannot be processed\",\n    [ClientAuthErrorCodes.deviceCodePollingCancelled]:\n        \"Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true.\",\n    [ClientAuthErrorCodes.deviceCodeExpired]: \"Device code is expired.\",\n    [ClientAuthErrorCodes.deviceCodeUnknownError]:\n        \"Device code stopped polling for unknown reasons.\",\n    [ClientAuthErrorCodes.noAccountInSilentRequest]:\n        \"Please pass an account object, silent flow is not supported without account information\",\n    [ClientAuthErrorCodes.invalidCacheRecord]:\n        \"Cache record object was null or undefined.\",\n    [ClientAuthErrorCodes.invalidCacheEnvironment]:\n        \"Invalid environment when attempting to create cache entry\",\n    [ClientAuthErrorCodes.noAccountFound]:\n        \"No account found in cache for given key.\",\n    [ClientAuthErrorCodes.noCryptoObject]: \"No crypto object detected.\",\n    [ClientAuthErrorCodes.unexpectedCredentialType]:\n        \"Unexpected credential type.\",\n    [ClientAuthErrorCodes.invalidAssertion]:\n        \"Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515\",\n    [ClientAuthErrorCodes.invalidClientCredential]:\n        \"Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential\",\n    [ClientAuthErrorCodes.tokenRefreshRequired]:\n        \"Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired.\",\n    [ClientAuthErrorCodes.userTimeoutReached]:\n        \"User defined timeout for device code polling reached\",\n    [ClientAuthErrorCodes.tokenClaimsCnfRequiredForSignedJwt]:\n        \"Cannot generate a POP jwt if the token_claims are not populated\",\n    [ClientAuthErrorCodes.authorizationCodeMissingFromServerResponse]:\n        \"Server response does not contain an authorization code to proceed\",\n    [ClientAuthErrorCodes.bindingKeyNotRemoved]:\n        \"Could not remove the credential's binding key from storage.\",\n    [ClientAuthErrorCodes.endSessionEndpointNotSupported]:\n        \"The provided authority does not support logout\",\n    [ClientAuthErrorCodes.keyIdMissing]:\n        \"A keyId value is missing from the requested bound token's cache record and is required to match the token to it's stored binding key.\",\n    [ClientAuthErrorCodes.noNetworkConnectivity]:\n        \"No network connectivity. Check your internet connection.\",\n    [ClientAuthErrorCodes.userCanceled]: \"User cancelled the flow.\",\n    [ClientAuthErrorCodes.missingTenantIdError]:\n        \"A tenant id - not common, organizations, or consumers - must be specified when using the client_credentials flow.\",\n    [ClientAuthErrorCodes.methodNotImplemented]:\n        \"This method has not been implemented\",\n    [ClientAuthErrorCodes.nestedAppAuthBridgeDisabled]:\n        \"The nested app auth bridge is disabled\",\n};\n\n/**\n * String constants used by error codes and messages.\n * @deprecated Use ClientAuthErrorCodes instead\n */\nexport const ClientAuthErrorMessage = {\n    clientInfoDecodingError: {\n        code: ClientAuthErrorCodes.clientInfoDecodingError,\n        desc: ClientAuthErrorMessages[\n            ClientAuthErrorCodes.clientInfoDecodingError\n        ],\n    },\n    clientInfoEmptyError: {\n        code: ClientAuthErrorCodes.clientInfoEmptyError,\n        desc: ClientAuthErrorMessages[\n            ClientAuthErrorCodes.clientInfoEmptyError\n        ],\n    },\n    tokenParsingError: {\n        code: ClientAuthErrorCodes.tokenParsingError,\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.tokenParsingError],\n    },\n    nullOrEmptyToken: {\n        code: ClientAuthErrorCodes.nullOrEmptyToken,\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.nullOrEmptyToken],\n    },\n    endpointResolutionError: {\n        code: ClientAuthErrorCodes.endpointResolutionError,\n        desc: ClientAuthErrorMessages[\n            ClientAuthErrorCodes.endpointResolutionError\n        ],\n    },\n    networkError: {\n        code: ClientAuthErrorCodes.networkError,\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.networkError],\n    },\n    unableToGetOpenidConfigError: {\n        code: ClientAuthErrorCodes.openIdConfigError,\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.openIdConfigError],\n    },\n    hashNotDeserialized: {\n        code: ClientAuthErrorCodes.hashNotDeserialized,\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.hashNotDeserialized],\n    },\n    invalidStateError: {\n        code: ClientAuthErrorCodes.invalidState,\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.invalidState],\n    },\n    stateMismatchError: {\n        code: ClientAuthErrorCodes.stateMismatch,\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.stateMismatch],\n    },\n    stateNotFoundError: {\n        code: ClientAuthErrorCodes.stateNotFound,\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.stateNotFound],\n    },\n    nonceMismatchError: {\n        code: ClientAuthErrorCodes.nonceMismatch,\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.nonceMismatch],\n    },\n    authTimeNotFoundError: {\n        code: ClientAuthErrorCodes.authTimeNotFound,\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.authTimeNotFound],\n    },\n    maxAgeTranspired: {\n        code: ClientAuthErrorCodes.maxAgeTranspired,\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.maxAgeTranspired],\n    },\n    multipleMatchingTokens: {\n        code: ClientAuthErrorCodes.multipleMatchingTokens,\n        desc: ClientAuthErrorMessages[\n            ClientAuthErrorCodes.multipleMatchingTokens\n        ],\n    },\n    multipleMatchingAccounts: {\n        code: ClientAuthErrorCodes.multipleMatchingAccounts,\n        desc: ClientAuthErrorMessages[\n            ClientAuthErrorCodes.multipleMatchingAccounts\n        ],\n    },\n    multipleMatchingAppMetadata: {\n        code: ClientAuthErrorCodes.multipleMatchingAppMetadata,\n        desc: ClientAuthErrorMessages[\n            ClientAuthErrorCodes.multipleMatchingAppMetadata\n        ],\n    },\n    tokenRequestCannotBeMade: {\n        code: ClientAuthErrorCodes.requestCannotBeMade,\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.requestCannotBeMade],\n    },\n    removeEmptyScopeError: {\n        code: ClientAuthErrorCodes.cannotRemoveEmptyScope,\n        desc: ClientAuthErrorMessages[\n            ClientAuthErrorCodes.cannotRemoveEmptyScope\n        ],\n    },\n    appendScopeSetError: {\n        code: ClientAuthErrorCodes.cannotAppendScopeSet,\n        desc: ClientAuthErrorMessages[\n            ClientAuthErrorCodes.cannotAppendScopeSet\n        ],\n    },\n    emptyInputScopeSetError: {\n        code: ClientAuthErrorCodes.emptyInputScopeSet,\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.emptyInputScopeSet],\n    },\n    DeviceCodePollingCancelled: {\n        code: ClientAuthErrorCodes.deviceCodePollingCancelled,\n        desc: ClientAuthErrorMessages[\n            ClientAuthErrorCodes.deviceCodePollingCancelled\n        ],\n    },\n    DeviceCodeExpired: {\n        code: ClientAuthErrorCodes.deviceCodeExpired,\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.deviceCodeExpired],\n    },\n    DeviceCodeUnknownError: {\n        code: ClientAuthErrorCodes.deviceCodeUnknownError,\n        desc: ClientAuthErrorMessages[\n            ClientAuthErrorCodes.deviceCodeUnknownError\n        ],\n    },\n    NoAccountInSilentRequest: {\n        code: ClientAuthErrorCodes.noAccountInSilentRequest,\n        desc: ClientAuthErrorMessages[\n            ClientAuthErrorCodes.noAccountInSilentRequest\n        ],\n    },\n    invalidCacheRecord: {\n        code: ClientAuthErrorCodes.invalidCacheRecord,\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.invalidCacheRecord],\n    },\n    invalidCacheEnvironment: {\n        code: ClientAuthErrorCodes.invalidCacheEnvironment,\n        desc: ClientAuthErrorMessages[\n            ClientAuthErrorCodes.invalidCacheEnvironment\n        ],\n    },\n    noAccountFound: {\n        code: ClientAuthErrorCodes.noAccountFound,\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.noAccountFound],\n    },\n    noCryptoObj: {\n        code: ClientAuthErrorCodes.noCryptoObject,\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.noCryptoObject],\n    },\n    unexpectedCredentialType: {\n        code: ClientAuthErrorCodes.unexpectedCredentialType,\n        desc: ClientAuthErrorMessages[\n            ClientAuthErrorCodes.unexpectedCredentialType\n        ],\n    },\n    invalidAssertion: {\n        code: ClientAuthErrorCodes.invalidAssertion,\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.invalidAssertion],\n    },\n    invalidClientCredential: {\n        code: ClientAuthErrorCodes.invalidClientCredential,\n        desc: ClientAuthErrorMessages[\n            ClientAuthErrorCodes.invalidClientCredential\n        ],\n    },\n    tokenRefreshRequired: {\n        code: ClientAuthErrorCodes.tokenRefreshRequired,\n        desc: ClientAuthErrorMessages[\n            ClientAuthErrorCodes.tokenRefreshRequired\n        ],\n    },\n    userTimeoutReached: {\n        code: ClientAuthErrorCodes.userTimeoutReached,\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.userTimeoutReached],\n    },\n    tokenClaimsRequired: {\n        code: ClientAuthErrorCodes.tokenClaimsCnfRequiredForSignedJwt,\n        desc: ClientAuthErrorMessages[\n            ClientAuthErrorCodes.tokenClaimsCnfRequiredForSignedJwt\n        ],\n    },\n    noAuthorizationCodeFromServer: {\n        code: ClientAuthErrorCodes.authorizationCodeMissingFromServerResponse,\n        desc: ClientAuthErrorMessages[\n            ClientAuthErrorCodes.authorizationCodeMissingFromServerResponse\n        ],\n    },\n    bindingKeyNotRemovedError: {\n        code: ClientAuthErrorCodes.bindingKeyNotRemoved,\n        desc: ClientAuthErrorMessages[\n            ClientAuthErrorCodes.bindingKeyNotRemoved\n        ],\n    },\n    logoutNotSupported: {\n        code: ClientAuthErrorCodes.endSessionEndpointNotSupported,\n        desc: ClientAuthErrorMessages[\n            ClientAuthErrorCodes.endSessionEndpointNotSupported\n        ],\n    },\n    keyIdMissing: {\n        code: ClientAuthErrorCodes.keyIdMissing,\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.keyIdMissing],\n    },\n    noNetworkConnectivity: {\n        code: ClientAuthErrorCodes.noNetworkConnectivity,\n        desc: ClientAuthErrorMessages[\n            ClientAuthErrorCodes.noNetworkConnectivity\n        ],\n    },\n    userCanceledError: {\n        code: ClientAuthErrorCodes.userCanceled,\n        desc: ClientAuthErrorMessages[ClientAuthErrorCodes.userCanceled],\n    },\n    missingTenantIdError: {\n        code: ClientAuthErrorCodes.missingTenantIdError,\n        desc: ClientAuthErrorMessages[\n            ClientAuthErrorCodes.missingTenantIdError\n        ],\n    },\n    nestedAppAuthBridgeDisabled: {\n        code: ClientAuthErrorCodes.nestedAppAuthBridgeDisabled,\n        desc: ClientAuthErrorMessages[\n            ClientAuthErrorCodes.nestedAppAuthBridgeDisabled\n        ],\n    },\n};\n\n/**\n * Error thrown when there is an error in the client code running on the browser.\n */\nexport class ClientAuthError extends AuthError {\n    constructor(errorCode: string, additionalMessage?: string) {\n        super(\n            errorCode,\n            additionalMessage\n                ? `${ClientAuthErrorMessages[errorCode]}: ${additionalMessage}`\n                : ClientAuthErrorMessages[errorCode]\n        );\n        this.name = \"ClientAuthError\";\n\n        Object.setPrototypeOf(this, ClientAuthError.prototype);\n    }\n}\n\nexport function createClientAuthError(\n    errorCode: string,\n    additionalMessage?: string\n): ClientAuthError {\n    return new ClientAuthError(errorCode, additionalMessage);\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { TokenClaims } from \"./TokenClaims\";\nimport {\n    createClientAuthError,\n    ClientAuthErrorCodes,\n} from \"../error/ClientAuthError\";\n\n/**\n * Extract token by decoding the rawToken\n *\n * @param encodedToken\n */\nexport function extractTokenClaims(\n    encodedToken: string,\n    base64Decode: (input: string) => string\n): TokenClaims {\n    const jswPayload = getJWSPayload(encodedToken);\n\n    // token will be decoded to get the username\n    try {\n        // base64Decode() should throw an error if there is an issue\n        const base64Decoded = base64Decode(jswPayload);\n        return JSON.parse(base64Decoded) as TokenClaims;\n    } catch (err) {\n        throw createClientAuthError(ClientAuthErrorCodes.tokenParsingError);\n    }\n}\n\n/**\n * decode a JWT\n *\n * @param authToken\n */\nexport function getJWSPayload(authToken: string): string {\n    if (!authToken) {\n        throw createClientAuthError(ClientAuthErrorCodes.nullOrEmptyToken);\n    }\n    const tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\n    const matches = tokenPartsRegex.exec(authToken);\n    if (!matches || matches.length < 4) {\n        throw createClientAuthError(ClientAuthErrorCodes.tokenParsingError);\n    }\n    /**\n     * const crackedToken = {\n     *  header: matches[1],\n     *  JWSPayload: matches[2],\n     *  JWSSig: matches[3],\n     * };\n     */\n\n    return matches[2];\n}\n\n/**\n * Determine if the token's max_age has transpired\n */\nexport function checkMaxAge(authTime: number, maxAge: number): void {\n    /*\n     * per https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest\n     * To force an immediate re-authentication: If an app requires that a user re-authenticate prior to access,\n     * provide a value of 0 for the max_age parameter and the AS will force a fresh login.\n     */\n    const fiveMinuteSkew = 300000; // five minutes in milliseconds\n    if (maxAge === 0 || Date.now() - fiveMinuteSkew > authTime + maxAge) {\n        throw createClientAuthError(ClientAuthErrorCodes.maxAgeTranspired);\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * Authority types supported by MSAL.\n */\nexport const AuthorityType = {\n    Default: 0,\n    Adfs: 1,\n    Dsts: 2,\n    Ciam: 3,\n} as const;\nexport type AuthorityType = (typeof AuthorityType)[keyof typeof AuthorityType];\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * Tenant Discovery Response which contains the relevant OAuth endpoints and data needed for authentication and authorization.\n */\nexport type OpenIdConfigResponse = {\n    authorization_endpoint: string;\n    token_endpoint: string;\n    end_session_endpoint?: string;\n    issuer: string;\n    jwks_uri: string;\n};\n\nexport function isOpenIdConfigResponse(response: object): boolean {\n    return (\n        response.hasOwnProperty(\"authorization_endpoint\") &&\n        response.hasOwnProperty(\"token_endpoint\") &&\n        response.hasOwnProperty(\"issuer\") &&\n        response.hasOwnProperty(\"jwks_uri\")\n    );\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nexport const redirectUriEmpty = \"redirect_uri_empty\";\nexport const claimsRequestParsingError = \"claims_request_parsing_error\";\nexport const authorityUriInsecure = \"authority_uri_insecure\";\nexport const urlParseError = \"url_parse_error\";\nexport const urlEmptyError = \"empty_url_error\";\nexport const emptyInputScopesError = \"empty_input_scopes_error\";\nexport const invalidPromptValue = \"invalid_prompt_value\";\nexport const invalidClaims = \"invalid_claims\";\nexport const tokenRequestEmpty = \"token_request_empty\";\nexport const logoutRequestEmpty = \"logout_request_empty\";\nexport const invalidCodeChallengeMethod = \"invalid_code_challenge_method\";\nexport const pkceParamsMissing = \"pkce_params_missing\";\nexport const invalidCloudDiscoveryMetadata = \"invalid_cloud_discovery_metadata\";\nexport const invalidAuthorityMetadata = \"invalid_authority_metadata\";\nexport const untrustedAuthority = \"untrusted_authority\";\nexport const missingSshJwk = \"missing_ssh_jwk\";\nexport const missingSshKid = \"missing_ssh_kid\";\nexport const missingNonceAuthenticationHeader =\n    \"missing_nonce_authentication_header\";\nexport const invalidAuthenticationHeader = \"invalid_authentication_header\";\nexport const cannotSetOIDCOptions = \"cannot_set_OIDCOptions\";\nexport const cannotAllowNativeBroker = \"cannot_allow_native_broker\";\nexport const authorityMismatch = \"authority_mismatch\";\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError } from \"./AuthError\";\nimport * as ClientConfigurationErrorCodes from \"./ClientConfigurationErrorCodes\";\nexport { ClientConfigurationErrorCodes };\n\nexport const ClientConfigurationErrorMessages = {\n    [ClientConfigurationErrorCodes.redirectUriEmpty]:\n        \"A redirect URI is required for all calls, and none has been set.\",\n    [ClientConfigurationErrorCodes.claimsRequestParsingError]:\n        \"Could not parse the given claims request object.\",\n    [ClientConfigurationErrorCodes.authorityUriInsecure]:\n        \"Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\",\n    [ClientConfigurationErrorCodes.urlParseError]:\n        \"URL could not be parsed into appropriate segments.\",\n    [ClientConfigurationErrorCodes.urlEmptyError]: \"URL was empty or null.\",\n    [ClientConfigurationErrorCodes.emptyInputScopesError]:\n        \"Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token.\",\n    [ClientConfigurationErrorCodes.invalidPromptValue]:\n        \"Please see here for valid configuration options: https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_common.html#commonauthorizationurlrequest\",\n    [ClientConfigurationErrorCodes.invalidClaims]:\n        \"Given claims parameter must be a stringified JSON object.\",\n    [ClientConfigurationErrorCodes.tokenRequestEmpty]:\n        \"Token request was empty and not found in cache.\",\n    [ClientConfigurationErrorCodes.logoutRequestEmpty]:\n        \"The logout request was null or undefined.\",\n    [ClientConfigurationErrorCodes.invalidCodeChallengeMethod]:\n        'code_challenge_method passed is invalid. Valid values are \"plain\" and \"S256\".',\n    [ClientConfigurationErrorCodes.pkceParamsMissing]:\n        \"Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request\",\n    [ClientConfigurationErrorCodes.invalidCloudDiscoveryMetadata]:\n        \"Invalid cloudDiscoveryMetadata provided. Must be a stringified JSON object containing tenant_discovery_endpoint and metadata fields\",\n    [ClientConfigurationErrorCodes.invalidAuthorityMetadata]:\n        \"Invalid authorityMetadata provided. Must by a stringified JSON object containing authorization_endpoint, token_endpoint, issuer fields.\",\n    [ClientConfigurationErrorCodes.untrustedAuthority]:\n        \"The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter.\",\n    [ClientConfigurationErrorCodes.missingSshJwk]:\n        \"Missing sshJwk in SSH certificate request. A stringified JSON Web Key is required when using the SSH authentication scheme.\",\n    [ClientConfigurationErrorCodes.missingSshKid]:\n        \"Missing sshKid in SSH certificate request. A string that uniquely identifies the public SSH key is required when using the SSH authentication scheme.\",\n    [ClientConfigurationErrorCodes.missingNonceAuthenticationHeader]:\n        \"Unable to find an authentication header containing server nonce. Either the Authentication-Info or WWW-Authenticate headers must be present in order to obtain a server nonce.\",\n    [ClientConfigurationErrorCodes.invalidAuthenticationHeader]:\n        \"Invalid authentication header provided\",\n    [ClientConfigurationErrorCodes.cannotSetOIDCOptions]:\n        \"Cannot set OIDCOptions parameter. Please change the protocol mode to OIDC or use a non-Microsoft authority.\",\n    [ClientConfigurationErrorCodes.cannotAllowNativeBroker]:\n        \"Cannot set allowNativeBroker parameter to true when not in AAD protocol mode.\",\n    [ClientConfigurationErrorCodes.authorityMismatch]:\n        \"Authority mismatch error. Authority provided in login request or PublicClientApplication config does not match the environment of the provided account. Please use a matching account or make an interactive request to login to this authority.\",\n};\n\n/**\n * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.\n * @deprecated Use ClientConfigurationErrorCodes instead\n */\nexport const ClientConfigurationErrorMessage = {\n    redirectUriNotSet: {\n        code: ClientConfigurationErrorCodes.redirectUriEmpty,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.redirectUriEmpty\n        ],\n    },\n    claimsRequestParsingError: {\n        code: ClientConfigurationErrorCodes.claimsRequestParsingError,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.claimsRequestParsingError\n        ],\n    },\n    authorityUriInsecure: {\n        code: ClientConfigurationErrorCodes.authorityUriInsecure,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.authorityUriInsecure\n        ],\n    },\n    urlParseError: {\n        code: ClientConfigurationErrorCodes.urlParseError,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.urlParseError\n        ],\n    },\n    urlEmptyError: {\n        code: ClientConfigurationErrorCodes.urlEmptyError,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.urlEmptyError\n        ],\n    },\n    emptyScopesError: {\n        code: ClientConfigurationErrorCodes.emptyInputScopesError,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.emptyInputScopesError\n        ],\n    },\n    invalidPrompt: {\n        code: ClientConfigurationErrorCodes.invalidPromptValue,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.invalidPromptValue\n        ],\n    },\n    invalidClaimsRequest: {\n        code: ClientConfigurationErrorCodes.invalidClaims,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.invalidClaims\n        ],\n    },\n    tokenRequestEmptyError: {\n        code: ClientConfigurationErrorCodes.tokenRequestEmpty,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.tokenRequestEmpty\n        ],\n    },\n    logoutRequestEmptyError: {\n        code: ClientConfigurationErrorCodes.logoutRequestEmpty,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.logoutRequestEmpty\n        ],\n    },\n    invalidCodeChallengeMethod: {\n        code: ClientConfigurationErrorCodes.invalidCodeChallengeMethod,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.invalidCodeChallengeMethod\n        ],\n    },\n    invalidCodeChallengeParams: {\n        code: ClientConfigurationErrorCodes.pkceParamsMissing,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.pkceParamsMissing\n        ],\n    },\n    invalidCloudDiscoveryMetadata: {\n        code: ClientConfigurationErrorCodes.invalidCloudDiscoveryMetadata,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.invalidCloudDiscoveryMetadata\n        ],\n    },\n    invalidAuthorityMetadata: {\n        code: ClientConfigurationErrorCodes.invalidAuthorityMetadata,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.invalidAuthorityMetadata\n        ],\n    },\n    untrustedAuthority: {\n        code: ClientConfigurationErrorCodes.untrustedAuthority,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.untrustedAuthority\n        ],\n    },\n    missingSshJwk: {\n        code: ClientConfigurationErrorCodes.missingSshJwk,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.missingSshJwk\n        ],\n    },\n    missingSshKid: {\n        code: ClientConfigurationErrorCodes.missingSshKid,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.missingSshKid\n        ],\n    },\n    missingNonceAuthenticationHeader: {\n        code: ClientConfigurationErrorCodes.missingNonceAuthenticationHeader,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.missingNonceAuthenticationHeader\n        ],\n    },\n    invalidAuthenticationHeader: {\n        code: ClientConfigurationErrorCodes.invalidAuthenticationHeader,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.invalidAuthenticationHeader\n        ],\n    },\n    cannotSetOIDCOptions: {\n        code: ClientConfigurationErrorCodes.cannotSetOIDCOptions,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.cannotSetOIDCOptions\n        ],\n    },\n    cannotAllowNativeBroker: {\n        code: ClientConfigurationErrorCodes.cannotAllowNativeBroker,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.cannotAllowNativeBroker\n        ],\n    },\n    authorityMismatch: {\n        code: ClientConfigurationErrorCodes.authorityMismatch,\n        desc: ClientConfigurationErrorMessages[\n            ClientConfigurationErrorCodes.authorityMismatch\n        ],\n    },\n};\n\n/**\n * Error thrown when there is an error in configuration of the MSAL.js library.\n */\nexport class ClientConfigurationError extends AuthError {\n    constructor(errorCode: string) {\n        super(errorCode, ClientConfigurationErrorMessages[errorCode]);\n        this.name = \"ClientConfigurationError\";\n        Object.setPrototypeOf(this, ClientConfigurationError.prototype);\n    }\n}\n\nexport function createClientConfigurationError(\n    errorCode: string\n): ClientConfigurationError {\n    return new ClientConfigurationError(errorCode);\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * @hidden\n */\nexport class StringUtils {\n    /**\n     * Check if stringified object is empty\n     * @param strObj\n     */\n    static isEmptyObj(strObj?: string): boolean {\n        if (strObj) {\n            try {\n                const obj = JSON.parse(strObj);\n                return Object.keys(obj).length === 0;\n            } catch (e) {}\n        }\n        return true;\n    }\n\n    static startsWith(str: string, search: string): boolean {\n        return str.indexOf(search) === 0;\n    }\n\n    static endsWith(str: string, search: string): boolean {\n        return (\n            str.length >= search.length &&\n            str.lastIndexOf(search) === str.length - search.length\n        );\n    }\n\n    /**\n     * Parses string into an object.\n     *\n     * @param query\n     */\n    static queryStringToObject<T>(query: string): T {\n        const obj: {} = {};\n        const params = query.split(\"&\");\n        const decode = (s: string) => decodeURIComponent(s.replace(/\\+/g, \" \"));\n        params.forEach((pair) => {\n            if (pair.trim()) {\n                const [key, value] = pair.split(/=(.+)/g, 2); // Split on the first occurence of the '=' character\n                if (key && value) {\n                    obj[decode(key)] = decode(value);\n                }\n            }\n        });\n        return obj as T;\n    }\n\n    /**\n     * Trims entries in an array.\n     *\n     * @param arr\n     */\n    static trimArrayEntries(arr: Array<string>): Array<string> {\n        return arr.map((entry) => entry.trim());\n    }\n\n    /**\n     * Removes empty strings from array\n     * @param arr\n     */\n    static removeEmptyStringsFromArray(arr: Array<string>): Array<string> {\n        return arr.filter((entry) => {\n            return !!entry;\n        });\n    }\n\n    /**\n     * Attempts to parse a string into JSON\n     * @param str\n     */\n    static jsonParseHelper<T>(str: string): T | null {\n        try {\n            return JSON.parse(str) as T;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    /**\n     * Tests if a given string matches a given pattern, with support for wildcards and queries.\n     * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\n     * @param input String to match against\n     */\n    static matchPattern(pattern: string, input: string): boolean {\n        /**\n         * Wildcard support: https://stackoverflow.com/a/3117248/4888559\n         * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\n         */\n        // eslint-disable-next-line security/detect-non-literal-regexp\n        const regex: RegExp = new RegExp(\n            pattern\n                .replace(/\\\\/g, \"\\\\\\\\\")\n                .replace(/\\*/g, \"[^ ]*\")\n                .replace(/\\?/g, \"\\\\?\")\n        );\n\n        return regex.test(input);\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ServerAuthorizationCodeResponse } from \"../response/ServerAuthorizationCodeResponse\";\nimport {\n    ClientAuthErrorCodes,\n    createClientAuthError,\n} from \"../error/ClientAuthError\";\n\n/**\n * Parses hash string from given string. Returns empty string if no hash symbol is found.\n * @param hashString\n */\nexport function stripLeadingHashOrQuery(responseString: string): string {\n    if (responseString.startsWith(\"#/\")) {\n        return responseString.substring(2);\n    } else if (\n        responseString.startsWith(\"#\") ||\n        responseString.startsWith(\"?\")\n    ) {\n        return responseString.substring(1);\n    }\n\n    return responseString;\n}\n\n/**\n * Returns URL hash as server auth code response object.\n */\nexport function getDeserializedResponse(\n    responseString: string\n): ServerAuthorizationCodeResponse | null {\n    // Check if given hash is empty\n    if (!responseString || responseString.indexOf(\"=\") < 0) {\n        return null;\n    }\n    try {\n        // Strip the # or ? symbol if present\n        const normalizedResponse = stripLeadingHashOrQuery(responseString);\n        // If # symbol was not present, above will return empty string, so give original hash value\n        const deserializedHash: ServerAuthorizationCodeResponse =\n            Object.fromEntries(new URLSearchParams(normalizedResponse));\n\n        // Check for known response properties\n        if (\n            deserializedHash.code ||\n            deserializedHash.error ||\n            deserializedHash.error_description ||\n            deserializedHash.state\n        ) {\n            return deserializedHash;\n        }\n    } catch (e) {\n        throw createClientAuthError(ClientAuthErrorCodes.hashNotDeserialized);\n    }\n\n    return null;\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    createClientConfigurationError,\n    ClientConfigurationErrorCodes,\n} from \"../error/ClientConfigurationError\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { IUri } from \"./IUri\";\nimport { AADAuthorityConstants, Constants } from \"../utils/Constants\";\nimport * as UrlUtils from \"../utils/UrlUtils\";\n\n/**\n * Url object class which can perform various transformations on url strings.\n */\nexport class UrlString {\n    // internal url string field\n    private _urlString: string;\n    public get urlString(): string {\n        return this._urlString;\n    }\n\n    constructor(url: string) {\n        this._urlString = url;\n        if (!this._urlString) {\n            // Throws error if url is empty\n            throw createClientConfigurationError(\n                ClientConfigurationErrorCodes.urlEmptyError\n            );\n        }\n\n        if (!url.includes(\"#\")) {\n            this._urlString = UrlString.canonicalizeUri(url);\n        }\n    }\n\n    /**\n     * Ensure urls are lower case and end with a / character.\n     * @param url\n     */\n    static canonicalizeUri(url: string): string {\n        if (url) {\n            let lowerCaseUrl = url.toLowerCase();\n\n            if (StringUtils.endsWith(lowerCaseUrl, \"?\")) {\n                lowerCaseUrl = lowerCaseUrl.slice(0, -1);\n            } else if (StringUtils.endsWith(lowerCaseUrl, \"?/\")) {\n                lowerCaseUrl = lowerCaseUrl.slice(0, -2);\n            }\n\n            if (!StringUtils.endsWith(lowerCaseUrl, \"/\")) {\n                lowerCaseUrl += \"/\";\n            }\n\n            return lowerCaseUrl;\n        }\n\n        return url;\n    }\n\n    /**\n     * Throws if urlString passed is not a valid authority URI string.\n     */\n    validateAsUri(): void {\n        // Attempts to parse url for uri components\n        let components;\n        try {\n            components = this.getUrlComponents();\n        } catch (e) {\n            throw createClientConfigurationError(\n                ClientConfigurationErrorCodes.urlParseError\n            );\n        }\n\n        // Throw error if URI or path segments are not parseable.\n        if (!components.HostNameAndPort || !components.PathSegments) {\n            throw createClientConfigurationError(\n                ClientConfigurationErrorCodes.urlParseError\n            );\n        }\n\n        // Throw error if uri is insecure.\n        if (\n            !components.Protocol ||\n            components.Protocol.toLowerCase() !== \"https:\"\n        ) {\n            throw createClientConfigurationError(\n                ClientConfigurationErrorCodes.authorityUriInsecure\n            );\n        }\n    }\n\n    /**\n     * Given a url and a query string return the url with provided query string appended\n     * @param url\n     * @param queryString\n     */\n    static appendQueryString(url: string, queryString: string): string {\n        if (!queryString) {\n            return url;\n        }\n\n        return url.indexOf(\"?\") < 0\n            ? `${url}?${queryString}`\n            : `${url}&${queryString}`;\n    }\n\n    /**\n     * Returns a url with the hash removed\n     * @param url\n     */\n    static removeHashFromUrl(url: string): string {\n        return UrlString.canonicalizeUri(url.split(\"#\")[0]);\n    }\n\n    /**\n     * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\n     * @param href The url\n     * @param tenantId The tenant id to replace\n     */\n    replaceTenantPath(tenantId: string): UrlString {\n        const urlObject = this.getUrlComponents();\n        const pathArray = urlObject.PathSegments;\n        if (\n            tenantId &&\n            pathArray.length !== 0 &&\n            (pathArray[0] === AADAuthorityConstants.COMMON ||\n                pathArray[0] === AADAuthorityConstants.ORGANIZATIONS)\n        ) {\n            pathArray[0] = tenantId;\n        }\n        return UrlString.constructAuthorityUriFromObject(urlObject);\n    }\n\n    /**\n     * Parses out the components from a url string.\n     * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\n     */\n    getUrlComponents(): IUri {\n        // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\n        const regEx = RegExp(\n            \"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\"\n        );\n\n        // If url string does not match regEx, we throw an error\n        const match = this.urlString.match(regEx);\n        if (!match) {\n            throw createClientConfigurationError(\n                ClientConfigurationErrorCodes.urlParseError\n            );\n        }\n\n        // Url component object\n        const urlComponents = {\n            Protocol: match[1],\n            HostNameAndPort: match[4],\n            AbsolutePath: match[5],\n            QueryString: match[7],\n        } as IUri;\n\n        let pathSegments = urlComponents.AbsolutePath.split(\"/\");\n        pathSegments = pathSegments.filter((val) => val && val.length > 0); // remove empty elements\n        urlComponents.PathSegments = pathSegments;\n\n        if (\n            urlComponents.QueryString &&\n            urlComponents.QueryString.endsWith(\"/\")\n        ) {\n            urlComponents.QueryString = urlComponents.QueryString.substring(\n                0,\n                urlComponents.QueryString.length - 1\n            );\n        }\n        return urlComponents;\n    }\n\n    static getDomainFromUrl(url: string): string {\n        const regEx = RegExp(\"^([^:/?#]+://)?([^/?#]*)\");\n\n        const match = url.match(regEx);\n\n        if (!match) {\n            throw createClientConfigurationError(\n                ClientConfigurationErrorCodes.urlParseError\n            );\n        }\n\n        return match[2];\n    }\n\n    static getAbsoluteUrl(relativeUrl: string, baseUrl: string): string {\n        if (relativeUrl[0] === Constants.FORWARD_SLASH) {\n            const url = new UrlString(baseUrl);\n            const baseComponents = url.getUrlComponents();\n\n            return (\n                baseComponents.Protocol +\n                \"//\" +\n                baseComponents.HostNameAndPort +\n                relativeUrl\n            );\n        }\n\n        return relativeUrl;\n    }\n\n    static constructAuthorityUriFromObject(urlObject: IUri): UrlString {\n        return new UrlString(\n            urlObject.Protocol +\n                \"//\" +\n                urlObject.HostNameAndPort +\n                \"/\" +\n                urlObject.PathSegments.join(\"/\")\n        );\n    }\n\n    /**\n     * Check if the hash of the URL string contains known properties\n     * @deprecated This API will be removed in a future version\n     */\n    static hashContainsKnownProperties(response: string): boolean {\n        return !!UrlUtils.getDeserializedResponse(response);\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Logger } from \"../logger/Logger\";\nimport { UrlString } from \"../url/UrlString\";\nimport { AuthorityMetadataSource } from \"../utils/Constants\";\nimport { StaticAuthorityOptions } from \"./AuthorityOptions\";\nimport { CloudDiscoveryMetadata } from \"./CloudDiscoveryMetadata\";\nimport { CloudInstanceDiscoveryResponse } from \"./CloudInstanceDiscoveryResponse\";\nimport { OpenIdConfigResponse } from \"./OpenIdConfigResponse\";\n\ntype RawMetadata = {\n    endpointMetadata: { [key: string]: OpenIdConfigResponse };\n    instanceDiscoveryMetadata: CloudInstanceDiscoveryResponse;\n};\n\nexport const rawMetdataJSON: RawMetadata = {\n    endpointMetadata: {\n        \"login.microsoftonline.com\": {\n            token_endpoint:\n                \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/token\",\n            jwks_uri:\n                \"https://login.microsoftonline.com/{tenantid}/discovery/v2.0/keys\",\n            issuer: \"https://login.microsoftonline.com/{tenantid}/v2.0\",\n            authorization_endpoint:\n                \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/authorize\",\n            end_session_endpoint:\n                \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/logout\",\n        },\n        \"login.chinacloudapi.cn\": {\n            token_endpoint:\n                \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/token\",\n            jwks_uri:\n                \"https://login.chinacloudapi.cn/{tenantid}/discovery/v2.0/keys\",\n            issuer: \"https://login.partner.microsoftonline.cn/{tenantid}/v2.0\",\n            authorization_endpoint:\n                \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/authorize\",\n            end_session_endpoint:\n                \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/logout\",\n        },\n        \"login.microsoftonline.us\": {\n            token_endpoint:\n                \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/token\",\n            jwks_uri:\n                \"https://login.microsoftonline.us/{tenantid}/discovery/v2.0/keys\",\n            issuer: \"https://login.microsoftonline.us/{tenantid}/v2.0\",\n            authorization_endpoint:\n                \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/authorize\",\n            end_session_endpoint:\n                \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/logout\",\n        },\n    },\n    instanceDiscoveryMetadata: {\n        tenant_discovery_endpoint:\n            \"https://{canonicalAuthority}/v2.0/.well-known/openid-configuration\",\n        metadata: [\n            {\n                preferred_network: \"login.microsoftonline.com\",\n                preferred_cache: \"login.windows.net\",\n                aliases: [\n                    \"login.microsoftonline.com\",\n                    \"login.windows.net\",\n                    \"login.microsoft.com\",\n                    \"sts.windows.net\",\n                ],\n            },\n            {\n                preferred_network: \"login.partner.microsoftonline.cn\",\n                preferred_cache: \"login.partner.microsoftonline.cn\",\n                aliases: [\n                    \"login.partner.microsoftonline.cn\",\n                    \"login.chinacloudapi.cn\",\n                ],\n            },\n            {\n                preferred_network: \"login.microsoftonline.de\",\n                preferred_cache: \"login.microsoftonline.de\",\n                aliases: [\"login.microsoftonline.de\"],\n            },\n            {\n                preferred_network: \"login.microsoftonline.us\",\n                preferred_cache: \"login.microsoftonline.us\",\n                aliases: [\n                    \"login.microsoftonline.us\",\n                    \"login.usgovcloudapi.net\",\n                ],\n            },\n            {\n                preferred_network: \"login-us.microsoftonline.com\",\n                preferred_cache: \"login-us.microsoftonline.com\",\n                aliases: [\"login-us.microsoftonline.com\"],\n            },\n        ],\n    },\n};\n\nexport const EndpointMetadata = rawMetdataJSON.endpointMetadata;\nexport const InstanceDiscoveryMetadata =\n    rawMetdataJSON.instanceDiscoveryMetadata;\n\nexport const InstanceDiscoveryMetadataAliases: Set<String> = new Set();\nInstanceDiscoveryMetadata.metadata.forEach(\n    (metadataEntry: CloudDiscoveryMetadata) => {\n        metadataEntry.aliases.forEach((alias: string) => {\n            InstanceDiscoveryMetadataAliases.add(alias);\n        });\n    }\n);\n\n/**\n * Attempts to get an aliases array from the static authority metadata sources based on the canonical authority host\n * @param staticAuthorityOptions\n * @param logger\n * @returns\n */\nexport function getAliasesFromStaticSources(\n    staticAuthorityOptions: StaticAuthorityOptions,\n    logger?: Logger\n): string[] {\n    let staticAliases: string[] | undefined;\n    const canonicalAuthority = staticAuthorityOptions.canonicalAuthority;\n    if (canonicalAuthority) {\n        const authorityHost = new UrlString(\n            canonicalAuthority\n        ).getUrlComponents().HostNameAndPort;\n        staticAliases =\n            getAliasesFromMetadata(\n                authorityHost,\n                staticAuthorityOptions.cloudDiscoveryMetadata?.metadata,\n                AuthorityMetadataSource.CONFIG,\n                logger\n            ) ||\n            getAliasesFromMetadata(\n                authorityHost,\n                InstanceDiscoveryMetadata.metadata,\n                AuthorityMetadataSource.HARDCODED_VALUES,\n                logger\n            ) ||\n            staticAuthorityOptions.knownAuthorities;\n    }\n\n    return staticAliases || [];\n}\n\n/**\n * Returns aliases for from the raw cloud discovery metadata passed in\n * @param authorityHost\n * @param rawCloudDiscoveryMetadata\n * @returns\n */\nexport function getAliasesFromMetadata(\n    authorityHost?: string,\n    cloudDiscoveryMetadata?: CloudDiscoveryMetadata[],\n    source?: AuthorityMetadataSource,\n    logger?: Logger\n): string[] | null {\n    logger?.trace(`getAliasesFromMetadata called with source: ${source}`);\n    if (authorityHost && cloudDiscoveryMetadata) {\n        const metadata = getCloudDiscoveryMetadataFromNetworkResponse(\n            cloudDiscoveryMetadata,\n            authorityHost\n        );\n\n        if (metadata) {\n            logger?.trace(\n                `getAliasesFromMetadata: found cloud discovery metadata in ${source}, returning aliases`\n            );\n            return metadata.aliases;\n        } else {\n            logger?.trace(\n                `getAliasesFromMetadata: did not find cloud discovery metadata in ${source}`\n            );\n        }\n    }\n\n    return null;\n}\n\n/**\n * Get cloud discovery metadata for common authorities\n */\nexport function getCloudDiscoveryMetadataFromHardcodedValues(\n    authorityHost: string\n): CloudDiscoveryMetadata | null {\n    const metadata = getCloudDiscoveryMetadataFromNetworkResponse(\n        InstanceDiscoveryMetadata.metadata,\n        authorityHost\n    );\n    return metadata;\n}\n\n/**\n * Searches instance discovery network response for the entry that contains the host in the aliases list\n * @param response\n * @param authority\n */\nexport function getCloudDiscoveryMetadataFromNetworkResponse(\n    response: CloudDiscoveryMetadata[],\n    authorityHost: string\n): CloudDiscoveryMetadata | null {\n    for (let i = 0; i < response.length; i++) {\n        const metadata = response[i];\n        if (metadata.aliases.includes(authorityHost)) {\n            return metadata;\n        }\n    }\n\n    return null;\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * Protocol modes supported by MSAL.\n */\nexport const ProtocolMode = {\n    AAD: \"AAD\",\n    OIDC: \"OIDC\",\n} as const;\nexport type ProtocolMode = (typeof ProtocolMode)[keyof typeof ProtocolMode];\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ProtocolMode } from \"./ProtocolMode\";\nimport { OIDCOptions } from \"./OIDCOptions\";\nimport { AzureRegionConfiguration } from \"./AzureRegionConfiguration\";\nimport { CloudInstanceDiscoveryResponse } from \"./CloudInstanceDiscoveryResponse\";\n\nexport type AuthorityOptions = {\n    protocolMode: ProtocolMode;\n    OIDCOptions?: OIDCOptions | null;\n    knownAuthorities: Array<string>;\n    cloudDiscoveryMetadata: string;\n    authorityMetadata: string;\n    skipAuthorityMetadataCache?: boolean;\n    azureRegionConfiguration?: AzureRegionConfiguration;\n    authority?: string;\n};\n\nexport type StaticAuthorityOptions = Partial<\n    Pick<AuthorityOptions, \"knownAuthorities\">\n> & {\n    canonicalAuthority?: string;\n    cloudDiscoveryMetadata?: CloudInstanceDiscoveryResponse;\n};\n\nexport const AzureCloudInstance = {\n    // AzureCloudInstance is not specified.\n    None: \"none\",\n\n    // Microsoft Azure public cloud\n    AzurePublic: \"https://login.microsoftonline.com\",\n\n    // Microsoft PPE\n    AzurePpe: \"https://login.windows-ppe.net\",\n\n    // Microsoft Chinese national/regional cloud\n    AzureChina: \"https://login.chinacloudapi.cn\",\n\n    // Microsoft German national/regional cloud (\"Black Forest\")\n    AzureGermany: \"https://login.microsoftonline.de\",\n\n    // US Government cloud\n    AzureUsGovernment: \"https://login.microsoftonline.us\",\n} as const;\nexport type AzureCloudInstance =\n    (typeof AzureCloudInstance)[keyof typeof AzureCloudInstance];\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { CloudDiscoveryMetadata } from \"./CloudDiscoveryMetadata\";\n\n/**\n * The OpenID Configuration Endpoint Response type. Used by the authority class to get relevant OAuth endpoints.\n */\nexport type CloudInstanceDiscoveryResponse = {\n    tenant_discovery_endpoint: string;\n    metadata: Array<CloudDiscoveryMetadata>;\n};\n\nexport function isCloudInstanceDiscoveryResponse(response: object): boolean {\n    return (\n        response.hasOwnProperty(\"tenant_discovery_endpoint\") &&\n        response.hasOwnProperty(\"metadata\")\n    );\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * The OpenID Configuration Endpoint Response type. Used by the authority class to get relevant OAuth endpoints.\n */\nexport type CloudInstanceDiscoveryErrorResponse = {\n    error: String;\n    error_description: String;\n    error_codes?: Array<Number>;\n    timestamp?: String;\n    trace_id?: String;\n    correlation_id?: String;\n    error_uri?: String;\n};\n\nexport function isCloudInstanceDiscoveryErrorResponse(\n    response: object\n): boolean {\n    return (\n        response.hasOwnProperty(\"error\") &&\n        response.hasOwnProperty(\"error_description\")\n    );\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * Enumeration of operations that are instrumented by have their performance measured by the PerformanceClient.\n *\n * @export\n * @enum {number}\n */\nexport const PerformanceEvents = {\n    /**\n     * acquireTokenByCode API (msal-browser and msal-node).\n     * Used to acquire tokens by trading an authorization code against the token endpoint.\n     */\n    AcquireTokenByCode: \"acquireTokenByCode\",\n\n    /**\n     * acquireTokenByRefreshToken API (msal-browser and msal-node).\n     * Used to renew an access token using a refresh token against the token endpoint.\n     */\n    AcquireTokenByRefreshToken: \"acquireTokenByRefreshToken\",\n\n    /**\n     * acquireTokenSilent API (msal-browser and msal-node).\n     * Used to silently acquire a new access token (from the cache or the network).\n     */\n    AcquireTokenSilent: \"acquireTokenSilent\",\n\n    /**\n     * acquireTokenSilentAsync (msal-browser).\n     * Internal API for acquireTokenSilent.\n     */\n    AcquireTokenSilentAsync: \"acquireTokenSilentAsync\",\n\n    /**\n     * acquireTokenPopup (msal-browser).\n     * Used to acquire a new access token interactively through pop ups\n     */\n    AcquireTokenPopup: \"acquireTokenPopup\",\n\n    /**\n     * acquireTokenPreRedirect (msal-browser).\n     * First part of the redirect flow.\n     * Used to acquire a new access token interactively through redirects.\n     */\n    AcquireTokenPreRedirect: \"acquireTokenPreRedirect\",\n\n    /**\n     * acquireTokenRedirect (msal-browser).\n     * Second part of the redirect flow.\n     * Used to acquire a new access token interactively through redirects.\n     */\n    AcquireTokenRedirect: \"acquireTokenRedirect\",\n\n    /**\n     * getPublicKeyThumbprint API in CryptoOpts class (msal-browser).\n     * Used to generate a public/private keypair and generate a public key thumbprint for pop requests.\n     */\n    CryptoOptsGetPublicKeyThumbprint: \"cryptoOptsGetPublicKeyThumbprint\",\n\n    /**\n     * signJwt API in CryptoOpts class (msal-browser).\n     * Used to signed a pop token.\n     */\n    CryptoOptsSignJwt: \"cryptoOptsSignJwt\",\n\n    /**\n     * acquireToken API in the SilentCacheClient class (msal-browser).\n     * Used to read access tokens from the cache.\n     */\n    SilentCacheClientAcquireToken: \"silentCacheClientAcquireToken\",\n\n    /**\n     * acquireToken API in the SilentIframeClient class (msal-browser).\n     * Used to acquire a new set of tokens from the authorize endpoint in a hidden iframe.\n     */\n    SilentIframeClientAcquireToken: \"silentIframeClientAcquireToken\",\n    AwaitConcurrentIframe: \"awaitConcurrentIframe\", // Time spent waiting for a concurrent iframe to complete\n\n    /**\n     * acquireToken API in SilentRereshClient (msal-browser).\n     * Used to acquire a new set of tokens from the token endpoint using a refresh token.\n     */\n    SilentRefreshClientAcquireToken: \"silentRefreshClientAcquireToken\",\n\n    /**\n     * ssoSilent API (msal-browser).\n     * Used to silently acquire an authorization code and set of tokens using a hidden iframe.\n     */\n    SsoSilent: \"ssoSilent\",\n\n    /**\n     * getDiscoveredAuthority API in StandardInteractionClient class (msal-browser).\n     * Used to load authority metadata for a request.\n     */\n    StandardInteractionClientGetDiscoveredAuthority:\n        \"standardInteractionClientGetDiscoveredAuthority\",\n\n    /**\n     * acquireToken APIs in msal-browser.\n     * Used to make an /authorize endpoint call with native brokering enabled.\n     */\n    FetchAccountIdWithNativeBroker: \"fetchAccountIdWithNativeBroker\",\n\n    /**\n     * acquireToken API in NativeInteractionClient class (msal-browser).\n     * Used to acquire a token from Native component when native brokering is enabled.\n     */\n    NativeInteractionClientAcquireToken: \"nativeInteractionClientAcquireToken\",\n    /**\n     * Time spent creating default headers for requests to token endpoint\n     */\n    BaseClientCreateTokenRequestHeaders: \"baseClientCreateTokenRequestHeaders\",\n    /**\n     * Time spent sending/waiting for the response of a request to the token endpoint\n     */\n    RefreshTokenClientExecutePostToTokenEndpoint:\n        \"refreshTokenClientExecutePostToTokenEndpoint\",\n    AuthorizationCodeClientExecutePostToTokenEndpoint:\n        \"authorizationCodeClientExecutePostToTokenEndpoint\",\n    /**\n     * Used to measure the time taken for completing embedded-broker handshake (PW-Broker).\n     */\n    BrokerHandhshake: \"brokerHandshake\",\n    /**\n     * acquireTokenByRefreshToken API in BrokerClientApplication (PW-Broker) .\n     */\n    AcquireTokenByRefreshTokenInBroker: \"acquireTokenByRefreshTokenInBroker\",\n    /**\n     * Time taken for token acquisition by broker\n     */\n    AcquireTokenByBroker: \"acquireTokenByBroker\",\n\n    /**\n     * Time spent on the network for refresh token acquisition\n     */\n    RefreshTokenClientExecuteTokenRequest:\n        \"refreshTokenClientExecuteTokenRequest\",\n\n    /**\n     * Time taken for acquiring refresh token , records RT size\n     */\n    RefreshTokenClientAcquireToken: \"refreshTokenClientAcquireToken\",\n\n    /**\n     * Time taken for acquiring cached refresh token\n     */\n    RefreshTokenClientAcquireTokenWithCachedRefreshToken:\n        \"refreshTokenClientAcquireTokenWithCachedRefreshToken\",\n\n    /**\n     * acquireTokenByRefreshToken API in RefreshTokenClient (msal-common).\n     */\n    RefreshTokenClientAcquireTokenByRefreshToken:\n        \"refreshTokenClientAcquireTokenByRefreshToken\",\n\n    /**\n     * Helper function to create token request body in RefreshTokenClient (msal-common).\n     */\n    RefreshTokenClientCreateTokenRequestBody:\n        \"refreshTokenClientCreateTokenRequestBody\",\n\n    /**\n     * acquireTokenFromCache (msal-browser).\n     * Internal API for acquiring token from cache\n     */\n    AcquireTokenFromCache: \"acquireTokenFromCache\",\n    SilentFlowClientAcquireCachedToken: \"silentFlowClientAcquireCachedToken\",\n    SilentFlowClientGenerateResultFromCacheRecord:\n        \"silentFlowClientGenerateResultFromCacheRecord\",\n\n    /**\n     * acquireTokenBySilentIframe (msal-browser).\n     * Internal API for acquiring token by silent Iframe\n     */\n    AcquireTokenBySilentIframe: \"acquireTokenBySilentIframe\",\n\n    /**\n     * Internal API for initializing base request in BaseInteractionClient (msal-browser)\n     */\n    InitializeBaseRequest: \"initializeBaseRequest\",\n\n    /**\n     * Internal API for initializing silent request in SilentCacheClient (msal-browser)\n     */\n    InitializeSilentRequest: \"initializeSilentRequest\",\n\n    InitializeClientApplication: \"initializeClientApplication\",\n\n    /**\n     * Helper function in SilentIframeClient class (msal-browser).\n     */\n    SilentIframeClientTokenHelper: \"silentIframeClientTokenHelper\",\n\n    /**\n     * SilentHandler\n     */\n    SilentHandlerInitiateAuthRequest: \"silentHandlerInitiateAuthRequest\",\n    SilentHandlerMonitorIframeForHash: \"silentHandlerMonitorIframeForHash\",\n    SilentHandlerLoadFrame: \"silentHandlerLoadFrame\",\n    SilentHandlerLoadFrameSync: \"silentHandlerLoadFrameSync\",\n\n    /**\n     * Helper functions in StandardInteractionClient class (msal-browser)\n     */\n    StandardInteractionClientCreateAuthCodeClient:\n        \"standardInteractionClientCreateAuthCodeClient\",\n    StandardInteractionClientGetClientConfiguration:\n        \"standardInteractionClientGetClientConfiguration\",\n    StandardInteractionClientInitializeAuthorizationRequest:\n        \"standardInteractionClientInitializeAuthorizationRequest\",\n    StandardInteractionClientInitializeAuthorizationCodeRequest:\n        \"standardInteractionClientInitializeAuthorizationCodeRequest\",\n\n    /**\n     * getAuthCodeUrl API (msal-browser and msal-node).\n     */\n    GetAuthCodeUrl: \"getAuthCodeUrl\",\n\n    /**\n     * Functions from InteractionHandler (msal-browser)\n     */\n    HandleCodeResponseFromServer: \"handleCodeResponseFromServer\",\n    HandleCodeResponse: \"handleCodeResponse\",\n    UpdateTokenEndpointAuthority: \"updateTokenEndpointAuthority\",\n\n    /**\n     * APIs in Authorization Code Client (msal-common)\n     */\n    AuthClientAcquireToken: \"authClientAcquireToken\",\n    AuthClientExecuteTokenRequest: \"authClientExecuteTokenRequest\",\n    AuthClientCreateTokenRequestBody: \"authClientCreateTokenRequestBody\",\n    AuthClientCreateQueryString: \"authClientCreateQueryString\",\n\n    /**\n     * Generate functions in PopTokenGenerator (msal-common)\n     */\n    PopTokenGenerateCnf: \"popTokenGenerateCnf\",\n    PopTokenGenerateKid: \"popTokenGenerateKid\",\n\n    /**\n     * handleServerTokenResponse API in ResponseHandler (msal-common)\n     */\n    HandleServerTokenResponse: \"handleServerTokenResponse\",\n    DeserializeResponse: \"deserializeResponse\",\n\n    /**\n     * Authority functions\n     */\n    AuthorityFactoryCreateDiscoveredInstance:\n        \"authorityFactoryCreateDiscoveredInstance\",\n    AuthorityResolveEndpointsAsync: \"authorityResolveEndpointsAsync\",\n    AuthorityResolveEndpointsFromLocalSources:\n        \"authorityResolveEndpointsFromLocalSources\",\n    AuthorityGetCloudDiscoveryMetadataFromNetwork:\n        \"authorityGetCloudDiscoveryMetadataFromNetwork\",\n    AuthorityUpdateCloudDiscoveryMetadata:\n        \"authorityUpdateCloudDiscoveryMetadata\",\n    AuthorityGetEndpointMetadataFromNetwork:\n        \"authorityGetEndpointMetadataFromNetwork\",\n    AuthorityUpdateEndpointMetadata: \"authorityUpdateEndpointMetadata\",\n    AuthorityUpdateMetadataWithRegionalInformation:\n        \"authorityUpdateMetadataWithRegionalInformation\",\n\n    /**\n     * Region Discovery functions\n     */\n    RegionDiscoveryDetectRegion: \"regionDiscoveryDetectRegion\",\n    RegionDiscoveryGetRegionFromIMDS: \"regionDiscoveryGetRegionFromIMDS\",\n    RegionDiscoveryGetCurrentVersion: \"regionDiscoveryGetCurrentVersion\",\n\n    AcquireTokenByCodeAsync: \"acquireTokenByCodeAsync\",\n\n    GetEndpointMetadataFromNetwork: \"getEndpointMetadataFromNetwork\",\n    GetCloudDiscoveryMetadataFromNetworkMeasurement:\n        \"getCloudDiscoveryMetadataFromNetworkMeasurement\",\n\n    HandleRedirectPromiseMeasurement: \"handleRedirectPromise\",\n    HandleNativeRedirectPromiseMeasurement: \"handleNativeRedirectPromise\",\n\n    UpdateCloudDiscoveryMetadataMeasurement:\n        \"updateCloudDiscoveryMetadataMeasurement\",\n\n    UsernamePasswordClientAcquireToken: \"usernamePasswordClientAcquireToken\",\n\n    NativeMessageHandlerHandshake: \"nativeMessageHandlerHandshake\",\n\n    NativeGenerateAuthResult: \"nativeGenerateAuthResult\",\n\n    RemoveHiddenIframe: \"removeHiddenIframe\",\n\n    /**\n     * Cache operations\n     */\n    ClearTokensAndKeysWithClaims: \"clearTokensAndKeysWithClaims\",\n    CacheManagerGetRefreshToken: \"cacheManagerGetRefreshToken\",\n\n    /**\n     * Crypto Operations\n     */\n    GeneratePkceCodes: \"generatePkceCodes\",\n    GenerateCodeVerifier: \"generateCodeVerifier\",\n    GenerateCodeChallengeFromVerifier: \"generateCodeChallengeFromVerifier\",\n    Sha256Digest: \"sha256Digest\",\n    GetRandomValues: \"getRandomValues\",\n} as const;\nexport type PerformanceEvents =\n    (typeof PerformanceEvents)[keyof typeof PerformanceEvents];\n\nexport const PerformanceEventAbbreviations: ReadonlyMap<string, string> =\n    new Map([\n        [PerformanceEvents.AcquireTokenByCode, \"ATByCode\"],\n        [PerformanceEvents.AcquireTokenByRefreshToken, \"ATByRT\"],\n        [PerformanceEvents.AcquireTokenSilent, \"ATS\"],\n        [PerformanceEvents.AcquireTokenSilentAsync, \"ATSAsync\"],\n        [PerformanceEvents.AcquireTokenPopup, \"ATPopup\"],\n        [PerformanceEvents.AcquireTokenRedirect, \"ATRedirect\"],\n        [\n            PerformanceEvents.CryptoOptsGetPublicKeyThumbprint,\n            \"CryptoGetPKThumb\",\n        ],\n        [PerformanceEvents.CryptoOptsSignJwt, \"CryptoSignJwt\"],\n        [PerformanceEvents.SilentCacheClientAcquireToken, \"SltCacheClientAT\"],\n        [PerformanceEvents.SilentIframeClientAcquireToken, \"SltIframeClientAT\"],\n        [PerformanceEvents.SilentRefreshClientAcquireToken, \"SltRClientAT\"],\n        [PerformanceEvents.SsoSilent, \"SsoSlt\"],\n        [\n            PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority,\n            \"StdIntClientGetDiscAuth\",\n        ],\n        [\n            PerformanceEvents.FetchAccountIdWithNativeBroker,\n            \"FetchAccIdWithNtvBroker\",\n        ],\n        [\n            PerformanceEvents.NativeInteractionClientAcquireToken,\n            \"NtvIntClientAT\",\n        ],\n        [\n            PerformanceEvents.BaseClientCreateTokenRequestHeaders,\n            \"BaseClientCreateTReqHead\",\n        ],\n        [\n            PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint,\n            \"RTClientExecPost\",\n        ],\n        [\n            PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint,\n            \"AuthCodeClientExecPost\",\n        ],\n        [PerformanceEvents.BrokerHandhshake, \"BrokerHandshake\"],\n        [\n            PerformanceEvents.AcquireTokenByRefreshTokenInBroker,\n            \"ATByRTInBroker\",\n        ],\n        [PerformanceEvents.AcquireTokenByBroker, \"ATByBroker\"],\n        [\n            PerformanceEvents.RefreshTokenClientExecuteTokenRequest,\n            \"RTClientExecTReq\",\n        ],\n        [PerformanceEvents.RefreshTokenClientAcquireToken, \"RTClientAT\"],\n        [\n            PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken,\n            \"RTClientATWithCachedRT\",\n        ],\n        [\n            PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken,\n            \"RTClientATByRT\",\n        ],\n        [\n            PerformanceEvents.RefreshTokenClientCreateTokenRequestBody,\n            \"RTClientCreateTReqBody\",\n        ],\n        [PerformanceEvents.AcquireTokenFromCache, \"ATFromCache\"],\n        [\n            PerformanceEvents.SilentFlowClientAcquireCachedToken,\n            \"SltFlowClientATCached\",\n        ],\n        [\n            PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord,\n            \"SltFlowClientGenResFromCache\",\n        ],\n        [PerformanceEvents.AcquireTokenBySilentIframe, \"ATBySltIframe\"],\n        [PerformanceEvents.InitializeBaseRequest, \"InitBaseReq\"],\n        [PerformanceEvents.InitializeSilentRequest, \"InitSltReq\"],\n        [\n            PerformanceEvents.InitializeClientApplication,\n            \"InitClientApplication\",\n        ],\n        [PerformanceEvents.SilentIframeClientTokenHelper, \"SIClientTHelper\"],\n        [\n            PerformanceEvents.SilentHandlerInitiateAuthRequest,\n            \"SHandlerInitAuthReq\",\n        ],\n        [\n            PerformanceEvents.SilentHandlerMonitorIframeForHash,\n            \"SltHandlerMonitorIframeForHash\",\n        ],\n        [PerformanceEvents.SilentHandlerLoadFrame, \"SHandlerLoadFrame\"],\n        [PerformanceEvents.SilentHandlerLoadFrameSync, \"SHandlerLoadFrameSync\"],\n\n        [\n            PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\n            \"StdIntClientCreateAuthCodeClient\",\n        ],\n        [\n            PerformanceEvents.StandardInteractionClientGetClientConfiguration,\n            \"StdIntClientGetClientConf\",\n        ],\n        [\n            PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,\n            \"StdIntClientInitAuthReq\",\n        ],\n        [\n            PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest,\n            \"StdIntClientInitAuthCodeReq\",\n        ],\n\n        [PerformanceEvents.GetAuthCodeUrl, \"GetAuthCodeUrl\"],\n\n        [\n            PerformanceEvents.HandleCodeResponseFromServer,\n            \"HandleCodeResFromServer\",\n        ],\n        [PerformanceEvents.HandleCodeResponse, \"HandleCodeResp\"],\n        [PerformanceEvents.UpdateTokenEndpointAuthority, \"UpdTEndpointAuth\"],\n\n        [PerformanceEvents.AuthClientAcquireToken, \"AuthClientAT\"],\n        [PerformanceEvents.AuthClientExecuteTokenRequest, \"AuthClientExecTReq\"],\n        [\n            PerformanceEvents.AuthClientCreateTokenRequestBody,\n            \"AuthClientCreateTReqBody\",\n        ],\n        [\n            PerformanceEvents.AuthClientCreateQueryString,\n            \"AuthClientCreateQueryStr\",\n        ],\n        [PerformanceEvents.PopTokenGenerateCnf, \"PopTGenCnf\"],\n        [PerformanceEvents.PopTokenGenerateKid, \"PopTGenKid\"],\n        [PerformanceEvents.HandleServerTokenResponse, \"HandleServerTRes\"],\n        [PerformanceEvents.DeserializeResponse, \"DeserializeRes\"],\n        [\n            PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance,\n            \"AuthFactCreateDiscInst\",\n        ],\n        [\n            PerformanceEvents.AuthorityResolveEndpointsAsync,\n            \"AuthResolveEndpointsAsync\",\n        ],\n        [\n            PerformanceEvents.AuthorityResolveEndpointsFromLocalSources,\n            \"AuthResolveEndpointsFromLocal\",\n        ],\n        [\n            PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork,\n            \"AuthGetCDMetaFromNet\",\n        ],\n        [\n            PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata,\n            \"AuthUpdCDMeta\",\n        ],\n        [\n            PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork,\n            \"AuthUpdCDMetaFromNet\",\n        ],\n        [\n            PerformanceEvents.AuthorityUpdateEndpointMetadata,\n            \"AuthUpdEndpointMeta\",\n        ],\n        [\n            PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation,\n            \"AuthUpdMetaWithRegInfo\",\n        ],\n        [PerformanceEvents.RegionDiscoveryDetectRegion, \"RegDiscDetectReg\"],\n        [\n            PerformanceEvents.RegionDiscoveryGetRegionFromIMDS,\n            \"RegDiscGetRegFromIMDS\",\n        ],\n        [\n            PerformanceEvents.RegionDiscoveryGetCurrentVersion,\n            \"RegDiscGetCurrentVer\",\n        ],\n        [PerformanceEvents.AcquireTokenByCodeAsync, \"ATByCodeAsync\"],\n        [\n            PerformanceEvents.GetEndpointMetadataFromNetwork,\n            \"GetEndpointMetaFromNet\",\n        ],\n        [\n            PerformanceEvents.GetCloudDiscoveryMetadataFromNetworkMeasurement,\n            \"GetCDMetaFromNet\",\n        ],\n        [\n            PerformanceEvents.HandleRedirectPromiseMeasurement,\n            \"HandleRedirectPromise\",\n        ],\n        [\n            PerformanceEvents.HandleNativeRedirectPromiseMeasurement,\n            \"HandleNtvRedirectPromise\",\n        ],\n        [\n            PerformanceEvents.UpdateCloudDiscoveryMetadataMeasurement,\n            \"UpdateCDMeta\",\n        ],\n        [\n            PerformanceEvents.UsernamePasswordClientAcquireToken,\n            \"UserPassClientAT\",\n        ],\n        [\n            PerformanceEvents.NativeMessageHandlerHandshake,\n            \"NtvMsgHandlerHandshake\",\n        ],\n        [PerformanceEvents.NativeGenerateAuthResult, \"NtvGenAuthRes\"],\n        [PerformanceEvents.RemoveHiddenIframe, \"RemoveHiddenIframe\"],\n        [\n            PerformanceEvents.ClearTokensAndKeysWithClaims,\n            \"ClearTAndKeysWithClaims\",\n        ],\n        [PerformanceEvents.CacheManagerGetRefreshToken, \"CacheManagerGetRT\"],\n        [PerformanceEvents.GeneratePkceCodes, \"GenPkceCodes\"],\n        [PerformanceEvents.GenerateCodeVerifier, \"GenCodeVerifier\"],\n        [\n            PerformanceEvents.GenerateCodeChallengeFromVerifier,\n            \"GenCodeChallengeFromVerifier\",\n        ],\n        [PerformanceEvents.Sha256Digest, \"Sha256Digest\"],\n        [PerformanceEvents.GetRandomValues, \"GetRandomValues\"],\n    ]);\n\n/**\n * State of the performance event.\n *\n * @export\n * @enum {number}\n */\nexport const PerformanceEventStatus = {\n    NotStarted: 0,\n    InProgress: 1,\n    Completed: 2,\n} as const;\nexport type PerformanceEventStatus =\n    (typeof PerformanceEventStatus)[keyof typeof PerformanceEventStatus];\n\nexport type SubMeasurement = {\n    name: string;\n    startTimeMs: number;\n};\n\n/**\n * Performance measurement taken by the library, including metadata about the request and application.\n *\n * @export\n * @typedef {PerformanceEvent}\n */\nexport type PerformanceEvent = {\n    /**\n     * Unique id for the event\n     *\n     * @type {string}\n     */\n    eventId: string;\n\n    /**\n     * State of the perforance measure.\n     *\n     * @type {PerformanceEventStatus}\n     */\n    status: PerformanceEventStatus;\n\n    /**\n     * Login authority used for the request\n     *\n     * @type {string}\n     */\n    authority: string;\n\n    /**\n     * Client id for the application\n     *\n     * @type {string}\n     */\n    clientId: string;\n\n    /**\n     * Correlation ID used for the request\n     *\n     * @type {string}\n     */\n    correlationId: string;\n\n    /**\n     * End-to-end duration in milliseconds.\n     * @date 3/22/2022 - 3:40:05 PM\n     *\n     * @type {number}\n     */\n    durationMs?: number;\n\n    /**\n     * Visibility of the page when the event completed.\n     * Read from: https://developer.mozilla.org/docs/Web/API/Page_Visibility_API\n     *\n     * @type {?(string | null)}\n     */\n    endPageVisibility?: string | null;\n\n    /**\n     * Whether the result was retrieved from the cache.\n     *\n     * @type {(boolean | null)}\n     */\n    fromCache?: boolean | null;\n\n    /**\n     * Event name (usually in the form of classNameFunctionName)\n     *\n     * @type {string}\n     */\n    name: string;\n\n    /**\n     * Visibility of the page when the event completed.\n     * Read from: https://developer.mozilla.org/docs/Web/API/Page_Visibility_API\n     *\n     * @type {?(string | null)}\n     */\n    startPageVisibility?: string | null;\n\n    /**\n     * Unix millisecond timestamp when the event was initiated.\n     *\n     * @type {number}\n     */\n    startTimeMs: number;\n\n    /**\n     * Whether or the operation completed successfully.\n     *\n     * @type {(boolean | null)}\n     */\n    success?: boolean | null;\n\n    /**\n     * Add specific error code in case of failure\n     *\n     * @type {string}\n     */\n    errorCode?: string;\n\n    /**\n     * Add specific sub error code in case of failure\n     *\n     * @type {string}\n     */\n    subErrorCode?: string;\n\n    /**\n     * Server error number\n     */\n    serverErrorNo?: string;\n\n    /**\n     * Name of the library used for the operation.\n     *\n     * @type {string}\n     */\n    libraryName: string;\n\n    /**\n     * Version of the library used for the operation.\n     *\n     * @type {string}\n     */\n    libraryVersion: string;\n\n    /**\n     * Whether the response is from a native component (e.g., WAM)\n     *\n     * @type {?boolean}\n     */\n    isNativeBroker?: boolean;\n\n    /**\n     * Request ID returned from the response\n     *\n     * @type {?string}\n     */\n    requestId?: string;\n\n    /**\n     * Cache lookup policy\n     *\n     * @type {?number}\n     */\n    cacheLookupPolicy?: number | undefined;\n\n    /**\n     * Cache Outcome\n     * @type {?number}\n     */\n    cacheOutcome?: number;\n\n    /**\n     * Amount of time spent in the JS queue in milliseconds.\n     *\n     * @type {?number}\n     */\n    queuedTimeMs?: number;\n\n    /**\n     * Sub-measurements for internal use. To be deleted before flushing.\n     */\n    incompleteSubMeasurements?: Map<string, SubMeasurement>;\n\n    visibilityChangeCount?: number;\n    incompleteSubsCount?: number;\n\n    /**\n     * CorrelationId of the in progress iframe request that was awaited\n     */\n    awaitIframeCorrelationId?: string;\n    /**\n     * Amount of times queued in the JS event queue.\n     *\n     * @type {?number}\n     */\n    queuedCount?: number;\n    /**\n     * Amount of manually completed queue events.\n     *\n     * @type {?number}\n     */\n    queuedManuallyCompletedCount?: number;\n\n    /**\n     * Size of the id token\n     *\n     * @type {number}\n     */\n    idTokenSize?: number;\n\n    /**\n     *\n     * Size of the access token\n     *\n     * @type {number}\n     */\n\n    accessTokenSize?: number;\n\n    /**\n     *\n     * Size of the refresh token\n     *\n     * @type {number}\n     */\n\n    refreshTokenSize?: number | undefined;\n\n    /**\n     * Application name as specified by the app.\n     *\n     * @type {?string}\n     */\n    appName?: string;\n\n    /**\n     * Application version as specified by the app.\n     *\n     * @type {?string}\n     */\n    appVersion?: string;\n\n    /**\n     * The following are fields that may be emitted in native broker scenarios\n     */\n    extensionId?: string;\n    extensionVersion?: string;\n    matsBrokerVersion?: string;\n    matsAccountJoinOnStart?: string;\n    matsAccountJoinOnEnd?: string;\n    matsDeviceJoin?: string;\n    matsPromptBehavior?: string;\n    matsApiErrorCode?: number;\n    matsUiVisible?: boolean;\n    matsSilentCode?: number;\n    matsSilentBiSubCode?: number;\n    matsSilentMessage?: string;\n    matsSilentStatus?: number;\n    matsHttpStatus?: number;\n    matsHttpEventCount?: number;\n    httpVerToken?: string;\n\n    /**\n     * Native broker fields\n     */\n    allowNativeBroker?: boolean;\n    extensionInstalled?: boolean;\n    extensionHandshakeTimeoutMs?: number;\n    extensionHandshakeTimedOut?: boolean;\n\n    /**\n     * Nested App Auth Fields\n     */\n    nestedAppAuthRequest?: boolean;\n\n    /**\n     * Multiple matched access/id/refresh tokens in the cache\n     */\n    multiMatchedAT?: number;\n    multiMatchedID?: number;\n    multiMatchedRT?: number;\n\n    errorName?: string;\n    errorStack?: string[];\n\n    // Event context as JSON string\n    context?: string;\n\n    // Number of tokens in the cache to be reported when cache quota is exceeded\n    cacheRtCount?: number;\n    cacheIdCount?: number;\n    cacheAtCount?: number;\n\n    // Scenario id to track custom user prompts\n    scenarioId?: string;\n\n    accountType?: \"AAD\" | \"MSA\" | \"B2C\";\n};\n\nexport type PerformanceEventContext = {\n    dur?: number;\n    err?: string;\n    subErr?: string;\n    fail?: number;\n};\n\nexport type PerformanceEventStackedContext = PerformanceEventContext & {\n    name?: string;\n    childErr?: string;\n};\n\nexport const IntFields: ReadonlySet<string> = new Set([\n    \"accessTokenSize\",\n    \"durationMs\",\n    \"idTokenSize\",\n    \"matsSilentStatus\",\n    \"matsHttpStatus\",\n    \"refreshTokenSize\",\n    \"queuedTimeMs\",\n    \"startTimeMs\",\n    \"status\",\n    \"multiMatchedAT\",\n    \"multiMatchedID\",\n    \"multiMatchedRT\",\n]);\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Logger } from \"../logger/Logger\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\n\n/**\n * Wraps a function with a performance measurement.\n * Usage: invoke(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\n * @param callback\n * @param eventName\n * @param logger\n * @param telemetryClient\n * @param correlationId\n * @returns\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const invoke = <T extends Array<any>, U>(\n    callback: (...args: T) => U,\n    eventName: string,\n    logger: Logger,\n    telemetryClient?: IPerformanceClient,\n    correlationId?: string\n) => {\n    return (...args: T): U => {\n        logger.trace(`Executing function ${eventName}`);\n        const inProgressEvent = telemetryClient?.startMeasurement(\n            eventName,\n            correlationId\n        );\n        if (correlationId) {\n            // Track number of times this API is called in a single request\n            const eventCount = eventName + \"CallCount\";\n            telemetryClient?.incrementFields(\n                { [eventCount]: 1 },\n                correlationId\n            );\n        }\n        try {\n            const result = callback(...args);\n            inProgressEvent?.end({\n                success: true,\n            });\n            logger.trace(`Returning result from ${eventName}`);\n            return result;\n        } catch (e) {\n            logger.trace(`Error occurred in ${eventName}`);\n            try {\n                logger.trace(JSON.stringify(e));\n            } catch (e) {\n                logger.trace(\"Unable to print error message.\");\n            }\n            inProgressEvent?.end(\n                {\n                    success: false,\n                },\n                e\n            );\n            throw e;\n        }\n    };\n};\n\n/**\n * Wraps an async function with a performance measurement.\n * Usage: invokeAsync(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\n * @param callback\n * @param eventName\n * @param logger\n * @param telemetryClient\n * @param correlationId\n * @returns\n * @internal\n *\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const invokeAsync = <T extends Array<any>, U>(\n    callback: (...args: T) => Promise<U>,\n    eventName: string,\n    logger: Logger,\n    telemetryClient?: IPerformanceClient,\n    correlationId?: string\n) => {\n    return (...args: T): Promise<U> => {\n        logger.trace(`Executing function ${eventName}`);\n        const inProgressEvent = telemetryClient?.startMeasurement(\n            eventName,\n            correlationId\n        );\n        if (correlationId) {\n            // Track number of times this API is called in a single request\n            const eventCount = eventName + \"CallCount\";\n            telemetryClient?.incrementFields(\n                { [eventCount]: 1 },\n                correlationId\n            );\n        }\n        telemetryClient?.setPreQueueTime(eventName, correlationId);\n        return callback(...args)\n            .then((response) => {\n                logger.trace(`Returning result from ${eventName}`);\n                inProgressEvent?.end({\n                    success: true,\n                });\n                return response;\n            })\n            .catch((e) => {\n                logger.trace(`Error occurred in ${eventName}`);\n                try {\n                    logger.trace(JSON.stringify(e));\n                } catch (e) {\n                    logger.trace(\"Unable to print error message.\");\n                }\n                inProgressEvent?.end(\n                    {\n                        success: false,\n                    },\n                    e\n                );\n                throw e;\n            });\n    };\n};\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { INetworkModule } from \"../network/INetworkModule\";\nimport { NetworkResponse } from \"../network/NetworkManager\";\nimport { IMDSBadResponse } from \"../response/IMDSBadResponse\";\nimport {\n    Constants,\n    RegionDiscoverySources,\n    ResponseCodes,\n} from \"../utils/Constants\";\nimport { RegionDiscoveryMetadata } from \"./RegionDiscoveryMetadata\";\nimport { ImdsOptions } from \"./ImdsOptions\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\nimport { invokeAsync } from \"../utils/FunctionWrappers\";\nimport { Logger } from \"../logger/Logger\";\n\nexport class RegionDiscovery {\n    // Network interface to make requests with.\n    protected networkInterface: INetworkModule;\n    // Logger\n    private logger: Logger;\n    // Performance client\n    protected performanceClient: IPerformanceClient | undefined;\n    // CorrelationId\n    protected correlationId: string | undefined;\n    // Options for the IMDS endpoint request\n    protected static IMDS_OPTIONS: ImdsOptions = {\n        headers: {\n            Metadata: \"true\",\n        },\n    };\n\n    constructor(\n        networkInterface: INetworkModule,\n        logger: Logger,\n        performanceClient?: IPerformanceClient,\n        correlationId?: string\n    ) {\n        this.networkInterface = networkInterface;\n        this.logger = logger;\n        this.performanceClient = performanceClient;\n        this.correlationId = correlationId;\n    }\n\n    /**\n     * Detect the region from the application's environment.\n     *\n     * @returns Promise<string | null>\n     */\n    public async detectRegion(\n        environmentRegion: string | undefined,\n        regionDiscoveryMetadata: RegionDiscoveryMetadata\n    ): Promise<string | null> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.RegionDiscoveryDetectRegion,\n            this.correlationId\n        );\n\n        // Initialize auto detected region with the region from the envrionment\n        let autodetectedRegionName = environmentRegion;\n\n        // Check if a region was detected from the environment, if not, attempt to get the region from IMDS\n        if (!autodetectedRegionName) {\n            const options = RegionDiscovery.IMDS_OPTIONS;\n\n            try {\n                const localIMDSVersionResponse = await invokeAsync(\n                    this.getRegionFromIMDS.bind(this),\n                    PerformanceEvents.RegionDiscoveryGetRegionFromIMDS,\n                    this.logger,\n                    this.performanceClient,\n                    this.correlationId\n                )(Constants.IMDS_VERSION, options);\n                if (\n                    localIMDSVersionResponse.status ===\n                    ResponseCodes.httpSuccess\n                ) {\n                    autodetectedRegionName = localIMDSVersionResponse.body;\n                    regionDiscoveryMetadata.region_source =\n                        RegionDiscoverySources.IMDS;\n                }\n\n                // If the response using the local IMDS version failed, try to fetch the current version of IMDS and retry.\n                if (\n                    localIMDSVersionResponse.status ===\n                    ResponseCodes.httpBadRequest\n                ) {\n                    const currentIMDSVersion = await invokeAsync(\n                        this.getCurrentVersion.bind(this),\n                        PerformanceEvents.RegionDiscoveryGetCurrentVersion,\n                        this.logger,\n                        this.performanceClient,\n                        this.correlationId\n                    )(options);\n                    if (!currentIMDSVersion) {\n                        regionDiscoveryMetadata.region_source =\n                            RegionDiscoverySources.FAILED_AUTO_DETECTION;\n                        return null;\n                    }\n\n                    const currentIMDSVersionResponse = await invokeAsync(\n                        this.getRegionFromIMDS.bind(this),\n                        PerformanceEvents.RegionDiscoveryGetRegionFromIMDS,\n                        this.logger,\n                        this.performanceClient,\n                        this.correlationId\n                    )(currentIMDSVersion, options);\n                    if (\n                        currentIMDSVersionResponse.status ===\n                        ResponseCodes.httpSuccess\n                    ) {\n                        autodetectedRegionName =\n                            currentIMDSVersionResponse.body;\n                        regionDiscoveryMetadata.region_source =\n                            RegionDiscoverySources.IMDS;\n                    }\n                }\n            } catch (e) {\n                regionDiscoveryMetadata.region_source =\n                    RegionDiscoverySources.FAILED_AUTO_DETECTION;\n                return null;\n            }\n        } else {\n            regionDiscoveryMetadata.region_source =\n                RegionDiscoverySources.ENVIRONMENT_VARIABLE;\n        }\n\n        // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION\n        if (!autodetectedRegionName) {\n            regionDiscoveryMetadata.region_source =\n                RegionDiscoverySources.FAILED_AUTO_DETECTION;\n        }\n\n        return autodetectedRegionName || null;\n    }\n\n    /**\n     * Make the call to the IMDS endpoint\n     *\n     * @param imdsEndpointUrl\n     * @returns Promise<NetworkResponse<string>>\n     */\n    private async getRegionFromIMDS(\n        version: string,\n        options: ImdsOptions\n    ): Promise<NetworkResponse<string>> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.RegionDiscoveryGetRegionFromIMDS,\n            this.correlationId\n        );\n        return this.networkInterface.sendGetRequestAsync<string>(\n            `${Constants.IMDS_ENDPOINT}?api-version=${version}&format=text`,\n            options,\n            Constants.IMDS_TIMEOUT\n        );\n    }\n\n    /**\n     * Get the most recent version of the IMDS endpoint available\n     *\n     * @returns Promise<string | null>\n     */\n    private async getCurrentVersion(\n        options: ImdsOptions\n    ): Promise<string | null> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.RegionDiscoveryGetCurrentVersion,\n            this.correlationId\n        );\n        try {\n            const response =\n                await this.networkInterface.sendGetRequestAsync<IMDSBadResponse>(\n                    `${Constants.IMDS_ENDPOINT}?format=json`,\n                    options\n                );\n\n            // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\n            if (\n                response.status === ResponseCodes.httpBadRequest &&\n                response.body &&\n                response.body[\"newest-versions\"] &&\n                response.body[\"newest-versions\"].length > 0\n            ) {\n                return response.body[\"newest-versions\"][0];\n            }\n\n            return null;\n        } catch (e) {\n            return null;\n        }\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * Utility functions for managing date and time operations.\n */\n\n/**\n * return the current time in Unix time (seconds).\n */\nexport function nowSeconds(): number {\n    // Date.getTime() returns in milliseconds.\n    return Math.round(new Date().getTime() / 1000.0);\n}\n\n/**\n * check if a token is expired based on given UTC time in seconds.\n * @param expiresOn\n */\nexport function isTokenExpired(expiresOn: string, offset: number): boolean {\n    // check for access token expiry\n    const expirationSec = Number(expiresOn) || 0;\n    const offsetCurrentTimeSec = nowSeconds() + offset;\n\n    // If current time + offset is greater than token expiration time, then token is expired.\n    return offsetCurrentTimeSec > expirationSec;\n}\n\n/**\n * If the current time is earlier than the time that a token was cached at, we must discard the token\n * i.e. The system clock was turned back after acquiring the cached token\n * @param cachedAt\n * @param offset\n */\nexport function wasClockTurnedBack(cachedAt: string): boolean {\n    const cachedAtSec = Number(cachedAt);\n\n    return cachedAtSec > nowSeconds();\n}\n\n/**\n * Waits for t number of milliseconds\n * @param t number\n * @param value T\n */\nexport function delay<T>(t: number, value?: T): Promise<T | void> {\n    return new Promise((resolve) => setTimeout(() => resolve(value), t));\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { extractTokenClaims } from \"../../account/AuthToken\";\nimport { TokenClaims } from \"../../account/TokenClaims\";\nimport { CloudDiscoveryMetadata } from \"../../authority/CloudDiscoveryMetadata\";\nimport { OpenIdConfigResponse } from \"../../authority/OpenIdConfigResponse\";\nimport {\n    ClientAuthErrorCodes,\n    createClientAuthError,\n} from \"../../error/ClientAuthError\";\nimport {\n    APP_METADATA,\n    AUTHORITY_METADATA_CONSTANTS,\n    AuthenticationScheme,\n    CredentialType,\n    SERVER_TELEM_CONSTANTS,\n    Separators,\n    ThrottlingConstants,\n} from \"../../utils/Constants\";\nimport * as TimeUtils from \"../../utils/TimeUtils\";\nimport { AccessTokenEntity } from \"../entities/AccessTokenEntity\";\nimport { AppMetadataEntity } from \"../entities/AppMetadataEntity\";\nimport { AuthorityMetadataEntity } from \"../entities/AuthorityMetadataEntity\";\nimport { CredentialEntity } from \"../entities/CredentialEntity\";\nimport { IdTokenEntity } from \"../entities/IdTokenEntity\";\nimport { RefreshTokenEntity } from \"../entities/RefreshTokenEntity\";\n\n/**\n * Cache Key: <home_account_id>-<environment>-<credential_type>-<client_id or familyId>-<realm>-<scopes>-<claims hash>-<scheme>\n * IdToken Example: uid.utid-login.microsoftonline.com-idtoken-app_client_id-contoso.com\n * AccessToken Example: uid.utid-login.microsoftonline.com-accesstoken-app_client_id-contoso.com-scope1 scope2--pop\n * RefreshToken Example: uid.utid-login.microsoftonline.com-refreshtoken-1-contoso.com\n * @param credentialEntity\n * @returns\n */\nexport function generateCredentialKey(\n    credentialEntity: CredentialEntity\n): string {\n    const credentialKey = [\n        generateAccountId(credentialEntity),\n        generateCredentialId(credentialEntity),\n        generateTarget(credentialEntity),\n        generateClaimsHash(credentialEntity),\n        generateScheme(credentialEntity),\n    ];\n\n    return credentialKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n\n/**\n * Create IdTokenEntity\n * @param homeAccountId\n * @param authenticationResult\n * @param clientId\n * @param authority\n */\nexport function createIdTokenEntity(\n    homeAccountId: string,\n    environment: string,\n    idToken: string,\n    clientId: string,\n    tenantId: string\n): IdTokenEntity {\n    const idTokenEntity: IdTokenEntity = {\n        credentialType: CredentialType.ID_TOKEN,\n        homeAccountId: homeAccountId,\n        environment: environment,\n        clientId: clientId,\n        secret: idToken,\n        realm: tenantId,\n    };\n\n    return idTokenEntity;\n}\n\n/**\n * Create AccessTokenEntity\n * @param homeAccountId\n * @param environment\n * @param accessToken\n * @param clientId\n * @param tenantId\n * @param scopes\n * @param expiresOn\n * @param extExpiresOn\n */\nexport function createAccessTokenEntity(\n    homeAccountId: string,\n    environment: string,\n    accessToken: string,\n    clientId: string,\n    tenantId: string,\n    scopes: string,\n    expiresOn: number,\n    extExpiresOn: number,\n    base64Decode: (input: string) => string,\n    refreshOn?: number,\n    tokenType?: AuthenticationScheme,\n    userAssertionHash?: string,\n    keyId?: string,\n    requestedClaims?: string,\n    requestedClaimsHash?: string\n): AccessTokenEntity {\n    const atEntity: AccessTokenEntity = {\n        homeAccountId: homeAccountId,\n        credentialType: CredentialType.ACCESS_TOKEN,\n        secret: accessToken,\n        cachedAt: TimeUtils.nowSeconds().toString(),\n        expiresOn: expiresOn.toString(),\n        extendedExpiresOn: extExpiresOn.toString(),\n        environment: environment,\n        clientId: clientId,\n        realm: tenantId,\n        target: scopes,\n        tokenType: tokenType || AuthenticationScheme.BEARER,\n    };\n\n    if (userAssertionHash) {\n        atEntity.userAssertionHash = userAssertionHash;\n    }\n\n    if (refreshOn) {\n        atEntity.refreshOn = refreshOn.toString();\n    }\n\n    if (requestedClaims) {\n        atEntity.requestedClaims = requestedClaims;\n        atEntity.requestedClaimsHash = requestedClaimsHash;\n    }\n\n    /*\n     * Create Access Token With Auth Scheme instead of regular access token\n     * Cast to lower to handle \"bearer\" from ADFS\n     */\n    if (\n        atEntity.tokenType?.toLowerCase() !==\n        AuthenticationScheme.BEARER.toLowerCase()\n    ) {\n        atEntity.credentialType = CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\n        switch (atEntity.tokenType) {\n            case AuthenticationScheme.POP:\n                // Make sure keyId is present and add it to credential\n                const tokenClaims: TokenClaims | null = extractTokenClaims(\n                    accessToken,\n                    base64Decode\n                );\n                if (!tokenClaims?.cnf?.kid) {\n                    throw createClientAuthError(\n                        ClientAuthErrorCodes.tokenClaimsCnfRequiredForSignedJwt\n                    );\n                }\n                atEntity.keyId = tokenClaims.cnf.kid;\n                break;\n            case AuthenticationScheme.SSH:\n                atEntity.keyId = keyId;\n        }\n    }\n\n    return atEntity;\n}\n\n/**\n * Create RefreshTokenEntity\n * @param homeAccountId\n * @param authenticationResult\n * @param clientId\n * @param authority\n */\nexport function createRefreshTokenEntity(\n    homeAccountId: string,\n    environment: string,\n    refreshToken: string,\n    clientId: string,\n    familyId?: string,\n    userAssertionHash?: string,\n    expiresOn?: number\n): RefreshTokenEntity {\n    const rtEntity: RefreshTokenEntity = {\n        credentialType: CredentialType.REFRESH_TOKEN,\n        homeAccountId: homeAccountId,\n        environment: environment,\n        clientId: clientId,\n        secret: refreshToken,\n    };\n\n    if (userAssertionHash) {\n        rtEntity.userAssertionHash = userAssertionHash;\n    }\n\n    if (familyId) {\n        rtEntity.familyId = familyId;\n    }\n\n    if (expiresOn) {\n        rtEntity.expiresOn = expiresOn.toString();\n    }\n\n    return rtEntity;\n}\n\nexport function isCredentialEntity(entity: object): boolean {\n    return (\n        entity.hasOwnProperty(\"homeAccountId\") &&\n        entity.hasOwnProperty(\"environment\") &&\n        entity.hasOwnProperty(\"credentialType\") &&\n        entity.hasOwnProperty(\"clientId\") &&\n        entity.hasOwnProperty(\"secret\")\n    );\n}\n\n/**\n * Validates an entity: checks for all expected params\n * @param entity\n */\nexport function isAccessTokenEntity(entity: object): boolean {\n    if (!entity) {\n        return false;\n    }\n\n    return (\n        isCredentialEntity(entity) &&\n        entity.hasOwnProperty(\"realm\") &&\n        entity.hasOwnProperty(\"target\") &&\n        (entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN ||\n            entity[\"credentialType\"] ===\n                CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME)\n    );\n}\n\n/**\n * Validates an entity: checks for all expected params\n * @param entity\n */\nexport function isIdTokenEntity(entity: object): boolean {\n    if (!entity) {\n        return false;\n    }\n\n    return (\n        isCredentialEntity(entity) &&\n        entity.hasOwnProperty(\"realm\") &&\n        entity[\"credentialType\"] === CredentialType.ID_TOKEN\n    );\n}\n\n/**\n * Validates an entity: checks for all expected params\n * @param entity\n */\nexport function isRefreshTokenEntity(entity: object): boolean {\n    if (!entity) {\n        return false;\n    }\n\n    return (\n        isCredentialEntity(entity) &&\n        entity[\"credentialType\"] === CredentialType.REFRESH_TOKEN\n    );\n}\n\n/**\n * Generate Account Id key component as per the schema: <home_account_id>-<environment>\n */\nfunction generateAccountId(credentialEntity: CredentialEntity): string {\n    const accountId: Array<string> = [\n        credentialEntity.homeAccountId,\n        credentialEntity.environment,\n    ];\n    return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n\n/**\n * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>\n */\nfunction generateCredentialId(credentialEntity: CredentialEntity): string {\n    const clientOrFamilyId =\n        credentialEntity.credentialType === CredentialType.REFRESH_TOKEN\n            ? credentialEntity.familyId || credentialEntity.clientId\n            : credentialEntity.clientId;\n    const credentialId: Array<string> = [\n        credentialEntity.credentialType,\n        clientOrFamilyId,\n        credentialEntity.realm || \"\",\n    ];\n\n    return credentialId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n\n/**\n * Generate target key component as per schema: <target>\n */\nfunction generateTarget(credentialEntity: CredentialEntity): string {\n    return (credentialEntity.target || \"\").toLowerCase();\n}\n\n/**\n * Generate requested claims key component as per schema: <requestedClaims>\n */\nfunction generateClaimsHash(credentialEntity: CredentialEntity): string {\n    return (credentialEntity.requestedClaimsHash || \"\").toLowerCase();\n}\n\n/**\n * Generate scheme key componenet as per schema: <scheme>\n */\nfunction generateScheme(credentialEntity: CredentialEntity): string {\n    /*\n     * PoP Tokens and SSH certs include scheme in cache key\n     * Cast to lowercase to handle \"bearer\" from ADFS\n     */\n    return credentialEntity.tokenType &&\n        credentialEntity.tokenType.toLowerCase() !==\n            AuthenticationScheme.BEARER.toLowerCase()\n        ? credentialEntity.tokenType.toLowerCase()\n        : \"\";\n}\n\n/**\n * validates if a given cache entry is \"Telemetry\", parses <key,value>\n * @param key\n * @param entity\n */\nexport function isServerTelemetryEntity(key: string, entity?: object): boolean {\n    const validateKey: boolean =\n        key.indexOf(SERVER_TELEM_CONSTANTS.CACHE_KEY) === 0;\n    let validateEntity: boolean = true;\n\n    if (entity) {\n        validateEntity =\n            entity.hasOwnProperty(\"failedRequests\") &&\n            entity.hasOwnProperty(\"errors\") &&\n            entity.hasOwnProperty(\"cacheHits\");\n    }\n\n    return validateKey && validateEntity;\n}\n\n/**\n * validates if a given cache entry is \"Throttling\", parses <key,value>\n * @param key\n * @param entity\n */\nexport function isThrottlingEntity(key: string, entity?: object): boolean {\n    let validateKey: boolean = false;\n    if (key) {\n        validateKey = key.indexOf(ThrottlingConstants.THROTTLING_PREFIX) === 0;\n    }\n\n    let validateEntity: boolean = true;\n    if (entity) {\n        validateEntity = entity.hasOwnProperty(\"throttleTime\");\n    }\n\n    return validateKey && validateEntity;\n}\n\n/**\n * Generate AppMetadata Cache Key as per the schema: appmetadata-<environment>-<client_id>\n */\nexport function generateAppMetadataKey({\n    environment,\n    clientId,\n}: AppMetadataEntity): string {\n    const appMetaDataKeyArray: Array<string> = [\n        APP_METADATA,\n        environment,\n        clientId,\n    ];\n    return appMetaDataKeyArray\n        .join(Separators.CACHE_KEY_SEPARATOR)\n        .toLowerCase();\n}\n\n/*\n * Validates an entity: checks for all expected params\n * @param entity\n */\nexport function isAppMetadataEntity(key: string, entity: object): boolean {\n    if (!entity) {\n        return false;\n    }\n\n    return (\n        key.indexOf(APP_METADATA) === 0 &&\n        entity.hasOwnProperty(\"clientId\") &&\n        entity.hasOwnProperty(\"environment\")\n    );\n}\n\n/**\n * Validates an entity: checks for all expected params\n * @param entity\n */\nexport function isAuthorityMetadataEntity(\n    key: string,\n    entity: object\n): boolean {\n    if (!entity) {\n        return false;\n    }\n\n    return (\n        key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) === 0 &&\n        entity.hasOwnProperty(\"aliases\") &&\n        entity.hasOwnProperty(\"preferred_cache\") &&\n        entity.hasOwnProperty(\"preferred_network\") &&\n        entity.hasOwnProperty(\"canonical_authority\") &&\n        entity.hasOwnProperty(\"authorization_endpoint\") &&\n        entity.hasOwnProperty(\"token_endpoint\") &&\n        entity.hasOwnProperty(\"issuer\") &&\n        entity.hasOwnProperty(\"aliasesFromNetwork\") &&\n        entity.hasOwnProperty(\"endpointsFromNetwork\") &&\n        entity.hasOwnProperty(\"expiresAt\") &&\n        entity.hasOwnProperty(\"jwks_uri\")\n    );\n}\n\n/**\n * Reset the exiresAt value\n */\nexport function generateAuthorityMetadataExpiresAt(): number {\n    return (\n        TimeUtils.nowSeconds() +\n        AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS\n    );\n}\n\nexport function updateAuthorityEndpointMetadata(\n    authorityMetadata: AuthorityMetadataEntity,\n    updatedValues: OpenIdConfigResponse,\n    fromNetwork: boolean\n): void {\n    authorityMetadata.authorization_endpoint =\n        updatedValues.authorization_endpoint;\n    authorityMetadata.token_endpoint = updatedValues.token_endpoint;\n    authorityMetadata.end_session_endpoint = updatedValues.end_session_endpoint;\n    authorityMetadata.issuer = updatedValues.issuer;\n    authorityMetadata.endpointsFromNetwork = fromNetwork;\n    authorityMetadata.jwks_uri = updatedValues.jwks_uri;\n}\n\nexport function updateCloudDiscoveryMetadata(\n    authorityMetadata: AuthorityMetadataEntity,\n    updatedValues: CloudDiscoveryMetadata,\n    fromNetwork: boolean\n): void {\n    authorityMetadata.aliases = updatedValues.aliases;\n    authorityMetadata.preferred_cache = updatedValues.preferred_cache;\n    authorityMetadata.preferred_network = updatedValues.preferred_network;\n    authorityMetadata.aliasesFromNetwork = fromNetwork;\n}\n\n/**\n * Returns whether or not the data needs to be refreshed\n */\nexport function isAuthorityMetadataExpired(\n    metadata: AuthorityMetadataEntity\n): boolean {\n    return metadata.expiresAt <= TimeUtils.nowSeconds();\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthorityType } from \"./AuthorityType\";\nimport {\n    isOpenIdConfigResponse,\n    OpenIdConfigResponse,\n} from \"./OpenIdConfigResponse\";\nimport { UrlString } from \"../url/UrlString\";\nimport { IUri } from \"../url/IUri\";\nimport {\n    createClientAuthError,\n    ClientAuthErrorCodes,\n} from \"../error/ClientAuthError\";\nimport { INetworkModule } from \"../network/INetworkModule\";\nimport {\n    AADAuthorityConstants,\n    AuthorityMetadataSource,\n    Constants,\n    RegionDiscoveryOutcomes,\n} from \"../utils/Constants\";\nimport {\n    EndpointMetadata,\n    getCloudDiscoveryMetadataFromHardcodedValues,\n    getCloudDiscoveryMetadataFromNetworkResponse,\n    InstanceDiscoveryMetadataAliases,\n} from \"./AuthorityMetadata\";\nimport {\n    createClientConfigurationError,\n    ClientConfigurationErrorCodes,\n} from \"../error/ClientConfigurationError\";\nimport { ProtocolMode } from \"./ProtocolMode\";\nimport { ICacheManager } from \"../cache/interface/ICacheManager\";\nimport { AuthorityMetadataEntity } from \"../cache/entities/AuthorityMetadataEntity\";\nimport {\n    AuthorityOptions,\n    AzureCloudInstance,\n    StaticAuthorityOptions,\n} from \"./AuthorityOptions\";\nimport {\n    CloudInstanceDiscoveryResponse,\n    isCloudInstanceDiscoveryResponse,\n} from \"./CloudInstanceDiscoveryResponse\";\nimport {\n    CloudInstanceDiscoveryErrorResponse,\n    isCloudInstanceDiscoveryErrorResponse,\n} from \"./CloudInstanceDiscoveryErrorResponse\";\nimport { CloudDiscoveryMetadata } from \"./CloudDiscoveryMetadata\";\nimport { RegionDiscovery } from \"./RegionDiscovery\";\nimport { RegionDiscoveryMetadata } from \"./RegionDiscoveryMetadata\";\nimport { ImdsOptions } from \"./ImdsOptions\";\nimport { AzureCloudOptions } from \"../config/ClientConfiguration\";\nimport { Logger } from \"../logger/Logger\";\nimport { AuthError } from \"../error/AuthError\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\nimport { invokeAsync } from \"../utils/FunctionWrappers\";\nimport * as CacheHelpers from \"../cache/utils/CacheHelpers\";\n\n/**\n * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the\n * endpoint. It will store the pertinent config data in this object for use during token calls.\n * @internal\n */\nexport class Authority {\n    // Canonical authority url string\n    private _canonicalAuthority: UrlString;\n    // Canonicaly authority url components\n    private _canonicalAuthorityUrlComponents: IUri | null;\n    // Network interface to make requests with.\n    protected networkInterface: INetworkModule;\n    // Cache Manager to cache network responses\n    protected cacheManager: ICacheManager;\n    // Protocol mode to construct endpoints\n    private authorityOptions: AuthorityOptions;\n    // Authority metadata\n    private metadata: AuthorityMetadataEntity;\n    // Region discovery service\n    private regionDiscovery: RegionDiscovery;\n    // Region discovery metadata\n    public regionDiscoveryMetadata: RegionDiscoveryMetadata;\n    // Logger object\n    private logger: Logger;\n    // Performance client\n    protected performanceClient: IPerformanceClient | undefined;\n    // Correlation Id\n    protected correlationId: string;\n    // Indicates if the authority is fake, for the purpose of a Managed Identity Application\n    private managedIdentity: boolean;\n    // Reserved tenant domain names that will not be replaced with tenant id\n    private static reservedTenantDomains: Set<string> = new Set([\n        \"{tenant}\",\n        \"{tenantid}\",\n        AADAuthorityConstants.COMMON,\n        AADAuthorityConstants.CONSUMERS,\n        AADAuthorityConstants.ORGANIZATIONS,\n    ]);\n\n    constructor(\n        authority: string,\n        networkInterface: INetworkModule,\n        cacheManager: ICacheManager,\n        authorityOptions: AuthorityOptions,\n        logger: Logger,\n        correlationId: string,\n        performanceClient?: IPerformanceClient,\n        managedIdentity?: boolean\n    ) {\n        this.canonicalAuthority = authority;\n        this._canonicalAuthority.validateAsUri();\n        this.networkInterface = networkInterface;\n        this.cacheManager = cacheManager;\n        this.authorityOptions = authorityOptions;\n        this.regionDiscoveryMetadata = {\n            region_used: undefined,\n            region_source: undefined,\n            region_outcome: undefined,\n        };\n        this.logger = logger;\n        this.performanceClient = performanceClient;\n        this.correlationId = correlationId;\n        this.managedIdentity = managedIdentity || false;\n        this.regionDiscovery = new RegionDiscovery(\n            networkInterface,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        );\n    }\n\n    /**\n     * Get {@link AuthorityType}\n     * @param authorityUri {@link IUri}\n     * @private\n     */\n    private getAuthorityType(authorityUri: IUri): AuthorityType {\n        // CIAM auth url pattern is being standardized as: <tenant>.ciamlogin.com\n        if (authorityUri.HostNameAndPort.endsWith(Constants.CIAM_AUTH_URL)) {\n            return AuthorityType.Ciam;\n        }\n\n        const pathSegments = authorityUri.PathSegments;\n        if (pathSegments.length) {\n            switch (pathSegments[0].toLowerCase()) {\n                case Constants.ADFS:\n                    return AuthorityType.Adfs;\n                case Constants.DSTS:\n                    return AuthorityType.Dsts;\n                default:\n                    break;\n            }\n        }\n        return AuthorityType.Default;\n    }\n\n    // See above for AuthorityType\n    public get authorityType(): AuthorityType {\n        return this.getAuthorityType(this.canonicalAuthorityUrlComponents);\n    }\n\n    /**\n     * ProtocolMode enum representing the way endpoints are constructed.\n     */\n    public get protocolMode(): ProtocolMode {\n        return this.authorityOptions.protocolMode;\n    }\n\n    /**\n     * Returns authorityOptions which can be used to reinstantiate a new authority instance\n     */\n    public get options(): AuthorityOptions {\n        return this.authorityOptions;\n    }\n\n    /**\n     * A URL that is the authority set by the developer\n     */\n    public get canonicalAuthority(): string {\n        return this._canonicalAuthority.urlString;\n    }\n\n    /**\n     * Sets canonical authority.\n     */\n    public set canonicalAuthority(url: string) {\n        this._canonicalAuthority = new UrlString(url);\n        this._canonicalAuthority.validateAsUri();\n        this._canonicalAuthorityUrlComponents = null;\n    }\n\n    /**\n     * Get authority components.\n     */\n    public get canonicalAuthorityUrlComponents(): IUri {\n        if (!this._canonicalAuthorityUrlComponents) {\n            this._canonicalAuthorityUrlComponents =\n                this._canonicalAuthority.getUrlComponents();\n        }\n\n        return this._canonicalAuthorityUrlComponents;\n    }\n\n    /**\n     * Get hostname and port i.e. login.microsoftonline.com\n     */\n    public get hostnameAndPort(): string {\n        return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase();\n    }\n\n    /**\n     * Get tenant for authority.\n     */\n    public get tenant(): string {\n        return this.canonicalAuthorityUrlComponents.PathSegments[0];\n    }\n\n    /**\n     * OAuth /authorize endpoint for requests\n     */\n    public get authorizationEndpoint(): string {\n        if (this.discoveryComplete()) {\n            return this.replacePath(this.metadata.authorization_endpoint);\n        } else {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.endpointResolutionError\n            );\n        }\n    }\n\n    /**\n     * OAuth /token endpoint for requests\n     */\n    public get tokenEndpoint(): string {\n        if (this.discoveryComplete()) {\n            return this.replacePath(this.metadata.token_endpoint);\n        } else {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.endpointResolutionError\n            );\n        }\n    }\n\n    public get deviceCodeEndpoint(): string {\n        if (this.discoveryComplete()) {\n            return this.replacePath(\n                this.metadata.token_endpoint.replace(\"/token\", \"/devicecode\")\n            );\n        } else {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.endpointResolutionError\n            );\n        }\n    }\n\n    /**\n     * OAuth logout endpoint for requests\n     */\n    public get endSessionEndpoint(): string {\n        if (this.discoveryComplete()) {\n            // ROPC policies may not have end_session_endpoint set\n            if (!this.metadata.end_session_endpoint) {\n                throw createClientAuthError(\n                    ClientAuthErrorCodes.endSessionEndpointNotSupported\n                );\n            }\n            return this.replacePath(this.metadata.end_session_endpoint);\n        } else {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.endpointResolutionError\n            );\n        }\n    }\n\n    /**\n     * OAuth issuer for requests\n     */\n    public get selfSignedJwtAudience(): string {\n        if (this.discoveryComplete()) {\n            return this.replacePath(this.metadata.issuer);\n        } else {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.endpointResolutionError\n            );\n        }\n    }\n\n    /**\n     * Jwks_uri for token signing keys\n     */\n    public get jwksUri(): string {\n        if (this.discoveryComplete()) {\n            return this.replacePath(this.metadata.jwks_uri);\n        } else {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.endpointResolutionError\n            );\n        }\n    }\n\n    /**\n     * Returns a flag indicating that tenant name can be replaced in authority {@link IUri}\n     * @param authorityUri {@link IUri}\n     * @private\n     */\n    private canReplaceTenant(authorityUri: IUri): boolean {\n        return (\n            authorityUri.PathSegments.length === 1 &&\n            !Authority.reservedTenantDomains.has(\n                authorityUri.PathSegments[0]\n            ) &&\n            this.getAuthorityType(authorityUri) === AuthorityType.Default &&\n            this.protocolMode === ProtocolMode.AAD\n        );\n    }\n\n    /**\n     * Replaces tenant in url path with current tenant. Defaults to common.\n     * @param urlString\n     */\n    private replaceTenant(urlString: string): string {\n        return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);\n    }\n\n    /**\n     * Replaces path such as tenant or policy with the current tenant or policy.\n     * @param urlString\n     */\n    private replacePath(urlString: string): string {\n        let endpoint = urlString;\n        const cachedAuthorityUrl = new UrlString(\n            this.metadata.canonical_authority\n        );\n        const cachedAuthorityUrlComponents =\n            cachedAuthorityUrl.getUrlComponents();\n        const cachedAuthorityParts = cachedAuthorityUrlComponents.PathSegments;\n        const currentAuthorityParts =\n            this.canonicalAuthorityUrlComponents.PathSegments;\n\n        currentAuthorityParts.forEach((currentPart, index) => {\n            let cachedPart = cachedAuthorityParts[index];\n            if (\n                index === 0 &&\n                this.canReplaceTenant(cachedAuthorityUrlComponents)\n            ) {\n                const tenantId = new UrlString(\n                    this.metadata.authorization_endpoint\n                ).getUrlComponents().PathSegments[0];\n                /**\n                 * Check if AAD canonical authority contains tenant domain name, for example \"testdomain.onmicrosoft.com\",\n                 * by comparing its first path segment to the corresponding authorization endpoint path segment, which is\n                 * always resolved with tenant id by OIDC.\n                 */\n                if (cachedPart !== tenantId) {\n                    this.logger.verbose(\n                        `Replacing tenant domain name ${cachedPart} with id ${tenantId}`\n                    );\n                    cachedPart = tenantId;\n                }\n            }\n            if (currentPart !== cachedPart) {\n                endpoint = endpoint.replace(\n                    `/${cachedPart}/`,\n                    `/${currentPart}/`\n                );\n            }\n        });\n\n        return this.replaceTenant(endpoint);\n    }\n\n    /**\n     * The default open id configuration endpoint for any canonical authority.\n     */\n    protected get defaultOpenIdConfigurationEndpoint(): string {\n        const canonicalAuthorityHost = this.hostnameAndPort;\n        if (\n            this.canonicalAuthority.endsWith(\"v2.0/\") ||\n            this.authorityType === AuthorityType.Adfs ||\n            (this.protocolMode !== ProtocolMode.AAD &&\n                !this.isAliasOfKnownMicrosoftAuthority(canonicalAuthorityHost))\n        ) {\n            return `${this.canonicalAuthority}.well-known/openid-configuration`;\n        }\n        return `${this.canonicalAuthority}v2.0/.well-known/openid-configuration`;\n    }\n\n    /**\n     * Boolean that returns whether or not tenant discovery has been completed.\n     */\n    discoveryComplete(): boolean {\n        return !!this.metadata;\n    }\n\n    /**\n     * Perform endpoint discovery to discover aliases, preferred_cache, preferred_network\n     * and the /authorize, /token and logout endpoints.\n     */\n    public async resolveEndpointsAsync(): Promise<void> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.AuthorityResolveEndpointsAsync,\n            this.correlationId\n        );\n\n        const metadataEntity = this.getCurrentMetadataEntity();\n\n        const cloudDiscoverySource = await invokeAsync(\n            this.updateCloudDiscoveryMetadata.bind(this),\n            PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(metadataEntity);\n        this.canonicalAuthority = this.canonicalAuthority.replace(\n            this.hostnameAndPort,\n            metadataEntity.preferred_network\n        );\n        const endpointSource = await invokeAsync(\n            this.updateEndpointMetadata.bind(this),\n            PerformanceEvents.AuthorityUpdateEndpointMetadata,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(metadataEntity);\n        this.updateCachedMetadata(metadataEntity, cloudDiscoverySource, {\n            source: endpointSource,\n        });\n        this.performanceClient?.addFields(\n            {\n                cloudDiscoverySource: cloudDiscoverySource,\n                authorityEndpointSource: endpointSource,\n            },\n            this.correlationId\n        );\n    }\n\n    /**\n     * Returns metadata entity from cache if it exists, otherwiser returns a new metadata entity built\n     * from the configured canonical authority\n     * @returns\n     */\n    private getCurrentMetadataEntity(): AuthorityMetadataEntity {\n        let metadataEntity: AuthorityMetadataEntity | null =\n            this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);\n\n        if (!metadataEntity) {\n            metadataEntity = {\n                aliases: [],\n                preferred_cache: this.hostnameAndPort,\n                preferred_network: this.hostnameAndPort,\n                canonical_authority: this.canonicalAuthority,\n                authorization_endpoint: \"\",\n                token_endpoint: \"\",\n                end_session_endpoint: \"\",\n                issuer: \"\",\n                aliasesFromNetwork: false,\n                endpointsFromNetwork: false,\n                expiresAt: CacheHelpers.generateAuthorityMetadataExpiresAt(),\n                jwks_uri: \"\",\n            };\n        }\n        return metadataEntity;\n    }\n\n    /**\n     * Updates cached metadata based on metadata source and sets the instance's metadata\n     * property to the same value\n     * @param metadataEntity\n     * @param cloudDiscoverySource\n     * @param endpointMetadataResult\n     */\n    private updateCachedMetadata(\n        metadataEntity: AuthorityMetadataEntity,\n        cloudDiscoverySource: AuthorityMetadataSource | null,\n        endpointMetadataResult: {\n            source: AuthorityMetadataSource;\n            metadata?: OpenIdConfigResponse;\n        } | null\n    ): void {\n        if (\n            cloudDiscoverySource !== AuthorityMetadataSource.CACHE &&\n            endpointMetadataResult?.source !== AuthorityMetadataSource.CACHE\n        ) {\n            // Reset the expiration time unless both values came from a successful cache lookup\n            metadataEntity.expiresAt =\n                CacheHelpers.generateAuthorityMetadataExpiresAt();\n            metadataEntity.canonical_authority = this.canonicalAuthority;\n        }\n\n        const cacheKey = this.cacheManager.generateAuthorityMetadataCacheKey(\n            metadataEntity.preferred_cache\n        );\n        this.cacheManager.setAuthorityMetadata(cacheKey, metadataEntity);\n        this.metadata = metadataEntity;\n    }\n\n    /**\n     * Update AuthorityMetadataEntity with new endpoints and return where the information came from\n     * @param metadataEntity\n     */\n    private async updateEndpointMetadata(\n        metadataEntity: AuthorityMetadataEntity\n    ): Promise<AuthorityMetadataSource> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.AuthorityUpdateEndpointMetadata,\n            this.correlationId\n        );\n\n        const localMetadata =\n            this.updateEndpointMetadataFromLocalSources(metadataEntity);\n\n        // Further update may be required for hardcoded metadata if regional metadata is preferred\n        if (localMetadata) {\n            if (\n                localMetadata.source ===\n                AuthorityMetadataSource.HARDCODED_VALUES\n            ) {\n                // If the user prefers to use an azure region replace the global endpoints with regional information.\n                if (\n                    this.authorityOptions.azureRegionConfiguration?.azureRegion\n                ) {\n                    if (localMetadata.metadata) {\n                        const hardcodedMetadata = await invokeAsync(\n                            this.updateMetadataWithRegionalInformation.bind(\n                                this\n                            ),\n                            PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation,\n                            this.logger,\n                            this.performanceClient,\n                            this.correlationId\n                        )(localMetadata.metadata);\n                        CacheHelpers.updateAuthorityEndpointMetadata(\n                            metadataEntity,\n                            hardcodedMetadata,\n                            false\n                        );\n                        metadataEntity.canonical_authority =\n                            this.canonicalAuthority;\n                    }\n                }\n            }\n            return localMetadata.source;\n        }\n\n        // Get metadata from network if local sources aren't available\n        let metadata = await invokeAsync(\n            this.getEndpointMetadataFromNetwork.bind(this),\n            PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )();\n        if (metadata) {\n            // If the user prefers to use an azure region replace the global endpoints with regional information.\n            if (this.authorityOptions.azureRegionConfiguration?.azureRegion) {\n                metadata = await invokeAsync(\n                    this.updateMetadataWithRegionalInformation.bind(this),\n                    PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation,\n                    this.logger,\n                    this.performanceClient,\n                    this.correlationId\n                )(metadata);\n            }\n\n            CacheHelpers.updateAuthorityEndpointMetadata(\n                metadataEntity,\n                metadata,\n                true\n            );\n            return AuthorityMetadataSource.NETWORK;\n        } else {\n            // Metadata could not be obtained from the config, cache, network or hardcoded values\n            throw createClientAuthError(\n                ClientAuthErrorCodes.openIdConfigError,\n                this.defaultOpenIdConfigurationEndpoint\n            );\n        }\n    }\n\n    /**\n     * Updates endpoint metadata from local sources and returns where the information was retrieved from and the metadata config\n     * response if the source is hardcoded metadata\n     * @param metadataEntity\n     * @returns\n     */\n    private updateEndpointMetadataFromLocalSources(\n        metadataEntity: AuthorityMetadataEntity\n    ): {\n        source: AuthorityMetadataSource;\n        metadata?: OpenIdConfigResponse;\n    } | null {\n        this.logger.verbose(\n            \"Attempting to get endpoint metadata from authority configuration\"\n        );\n        const configMetadata = this.getEndpointMetadataFromConfig();\n        if (configMetadata) {\n            this.logger.verbose(\n                \"Found endpoint metadata in authority configuration\"\n            );\n            CacheHelpers.updateAuthorityEndpointMetadata(\n                metadataEntity,\n                configMetadata,\n                false\n            );\n            return {\n                source: AuthorityMetadataSource.CONFIG,\n            };\n        }\n\n        this.logger.verbose(\n            \"Did not find endpoint metadata in the config... Attempting to get endpoint metadata from the hardcoded values.\"\n        );\n\n        // skipAuthorityMetadataCache is used to bypass hardcoded authority metadata and force a network metadata cache lookup and network metadata request if no cached response is available.\n        if (this.authorityOptions.skipAuthorityMetadataCache) {\n            this.logger.verbose(\n                \"Skipping hardcoded metadata cache since skipAuthorityMetadataCache is set to true. Attempting to get endpoint metadata from the network metadata cache.\"\n            );\n        } else {\n            const hardcodedMetadata =\n                this.getEndpointMetadataFromHardcodedValues();\n            if (hardcodedMetadata) {\n                CacheHelpers.updateAuthorityEndpointMetadata(\n                    metadataEntity,\n                    hardcodedMetadata,\n                    false\n                );\n                return {\n                    source: AuthorityMetadataSource.HARDCODED_VALUES,\n                    metadata: hardcodedMetadata,\n                };\n            } else {\n                this.logger.verbose(\n                    \"Did not find endpoint metadata in hardcoded values... Attempting to get endpoint metadata from the network metadata cache.\"\n                );\n            }\n        }\n\n        // Check cached metadata entity expiration status\n        const metadataEntityExpired =\n            CacheHelpers.isAuthorityMetadataExpired(metadataEntity);\n        if (\n            this.isAuthoritySameType(metadataEntity) &&\n            metadataEntity.endpointsFromNetwork &&\n            !metadataEntityExpired\n        ) {\n            // No need to update\n            this.logger.verbose(\"Found endpoint metadata in the cache.\");\n            return { source: AuthorityMetadataSource.CACHE };\n        } else if (metadataEntityExpired) {\n            this.logger.verbose(\"The metadata entity is expired.\");\n        }\n\n        return null;\n    }\n\n    /**\n     * Compares the number of url components after the domain to determine if the cached\n     * authority metadata can be used for the requested authority. Protects against same domain different\n     * authority such as login.microsoftonline.com/tenant and login.microsoftonline.com/tfp/tenant/policy\n     * @param metadataEntity\n     */\n    private isAuthoritySameType(\n        metadataEntity: AuthorityMetadataEntity\n    ): boolean {\n        const cachedAuthorityUrl = new UrlString(\n            metadataEntity.canonical_authority\n        );\n        const cachedParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\n\n        return (\n            cachedParts.length ===\n            this.canonicalAuthorityUrlComponents.PathSegments.length\n        );\n    }\n\n    /**\n     * Parse authorityMetadata config option\n     */\n    private getEndpointMetadataFromConfig(): OpenIdConfigResponse | null {\n        if (this.authorityOptions.authorityMetadata) {\n            try {\n                return JSON.parse(\n                    this.authorityOptions.authorityMetadata\n                ) as OpenIdConfigResponse;\n            } catch (e) {\n                throw createClientConfigurationError(\n                    ClientConfigurationErrorCodes.invalidAuthorityMetadata\n                );\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Gets OAuth endpoints from the given OpenID configuration endpoint.\n     *\n     * @param hasHardcodedMetadata boolean\n     */\n    private async getEndpointMetadataFromNetwork(): Promise<OpenIdConfigResponse | null> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork,\n            this.correlationId\n        );\n\n        const options: ImdsOptions = {};\n\n        /*\n         * TODO: Add a timeout if the authority exists in our library's\n         * hardcoded list of metadata\n         */\n\n        const openIdConfigurationEndpoint =\n            this.defaultOpenIdConfigurationEndpoint;\n        this.logger.verbose(\n            `Authority.getEndpointMetadataFromNetwork: attempting to retrieve OAuth endpoints from ${openIdConfigurationEndpoint}`\n        );\n\n        try {\n            const response =\n                await this.networkInterface.sendGetRequestAsync<OpenIdConfigResponse>(\n                    openIdConfigurationEndpoint,\n                    options\n                );\n            const isValidResponse = isOpenIdConfigResponse(response.body);\n            if (isValidResponse) {\n                return response.body;\n            } else {\n                this.logger.verbose(\n                    `Authority.getEndpointMetadataFromNetwork: could not parse response as OpenID configuration`\n                );\n                return null;\n            }\n        } catch (e) {\n            this.logger.verbose(\n                `Authority.getEndpointMetadataFromNetwork: ${e}`\n            );\n            return null;\n        }\n    }\n\n    /**\n     * Get OAuth endpoints for common authorities.\n     */\n    private getEndpointMetadataFromHardcodedValues(): OpenIdConfigResponse | null {\n        if (this.hostnameAndPort in EndpointMetadata) {\n            return EndpointMetadata[this.hostnameAndPort];\n        }\n\n        return null;\n    }\n\n    /**\n     * Update the retrieved metadata with regional information.\n     * User selected Azure region will be used if configured.\n     */\n    private async updateMetadataWithRegionalInformation(\n        metadata: OpenIdConfigResponse\n    ): Promise<OpenIdConfigResponse> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation,\n            this.correlationId\n        );\n\n        const userConfiguredAzureRegion =\n            this.authorityOptions.azureRegionConfiguration?.azureRegion;\n\n        if (userConfiguredAzureRegion) {\n            if (\n                userConfiguredAzureRegion !==\n                Constants.AZURE_REGION_AUTO_DISCOVER_FLAG\n            ) {\n                this.regionDiscoveryMetadata.region_outcome =\n                    RegionDiscoveryOutcomes.CONFIGURED_NO_AUTO_DETECTION;\n                this.regionDiscoveryMetadata.region_used =\n                    userConfiguredAzureRegion;\n                return Authority.replaceWithRegionalInformation(\n                    metadata,\n                    userConfiguredAzureRegion\n                );\n            }\n\n            const autodetectedRegionName = await invokeAsync(\n                this.regionDiscovery.detectRegion.bind(this.regionDiscovery),\n                PerformanceEvents.RegionDiscoveryDetectRegion,\n                this.logger,\n                this.performanceClient,\n                this.correlationId\n            )(\n                this.authorityOptions.azureRegionConfiguration\n                    ?.environmentRegion,\n                this.regionDiscoveryMetadata\n            );\n\n            if (autodetectedRegionName) {\n                this.regionDiscoveryMetadata.region_outcome =\n                    RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_SUCCESSFUL;\n                this.regionDiscoveryMetadata.region_used =\n                    autodetectedRegionName;\n                return Authority.replaceWithRegionalInformation(\n                    metadata,\n                    autodetectedRegionName\n                );\n            }\n\n            this.regionDiscoveryMetadata.region_outcome =\n                RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_FAILED;\n        }\n\n        return metadata;\n    }\n\n    /**\n     * Updates the AuthorityMetadataEntity with new aliases, preferred_network and preferred_cache\n     * and returns where the information was retrieved from\n     * @param metadataEntity\n     * @returns AuthorityMetadataSource\n     */\n    private async updateCloudDiscoveryMetadata(\n        metadataEntity: AuthorityMetadataEntity\n    ): Promise<AuthorityMetadataSource> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata,\n            this.correlationId\n        );\n        const localMetadataSource =\n            this.updateCloudDiscoveryMetadataFromLocalSources(metadataEntity);\n        if (localMetadataSource) {\n            return localMetadataSource;\n        }\n\n        // Fallback to network as metadata source\n        const metadata = await invokeAsync(\n            this.getCloudDiscoveryMetadataFromNetwork.bind(this),\n            PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )();\n\n        if (metadata) {\n            CacheHelpers.updateCloudDiscoveryMetadata(\n                metadataEntity,\n                metadata,\n                true\n            );\n            return AuthorityMetadataSource.NETWORK;\n        }\n\n        // Metadata could not be obtained from the config, cache, network or hardcoded values\n        throw createClientConfigurationError(\n            ClientConfigurationErrorCodes.untrustedAuthority\n        );\n    }\n\n    private updateCloudDiscoveryMetadataFromLocalSources(\n        metadataEntity: AuthorityMetadataEntity\n    ): AuthorityMetadataSource | null {\n        this.logger.verbose(\n            \"Attempting to get cloud discovery metadata  from authority configuration\"\n        );\n        this.logger.verbosePii(\n            `Known Authorities: ${\n                this.authorityOptions.knownAuthorities ||\n                Constants.NOT_APPLICABLE\n            }`\n        );\n        this.logger.verbosePii(\n            `Authority Metadata: ${\n                this.authorityOptions.authorityMetadata ||\n                Constants.NOT_APPLICABLE\n            }`\n        );\n        this.logger.verbosePii(\n            `Canonical Authority: ${\n                metadataEntity.canonical_authority || Constants.NOT_APPLICABLE\n            }`\n        );\n        const metadata = this.getCloudDiscoveryMetadataFromConfig();\n        if (metadata) {\n            this.logger.verbose(\n                \"Found cloud discovery metadata in authority configuration\"\n            );\n            CacheHelpers.updateCloudDiscoveryMetadata(\n                metadataEntity,\n                metadata,\n                false\n            );\n            return AuthorityMetadataSource.CONFIG;\n        }\n\n        // If the cached metadata came from config but that config was not passed to this instance, we must go to hardcoded values\n        this.logger.verbose(\n            \"Did not find cloud discovery metadata in the config... Attempting to get cloud discovery metadata from the hardcoded values.\"\n        );\n\n        if (this.options.skipAuthorityMetadataCache) {\n            this.logger.verbose(\n                \"Skipping hardcoded cloud discovery metadata cache since skipAuthorityMetadataCache is set to true. Attempting to get cloud discovery metadata from the network metadata cache.\"\n            );\n        } else {\n            const hardcodedMetadata =\n                getCloudDiscoveryMetadataFromHardcodedValues(\n                    this.hostnameAndPort\n                );\n            if (hardcodedMetadata) {\n                this.logger.verbose(\n                    \"Found cloud discovery metadata from hardcoded values.\"\n                );\n                CacheHelpers.updateCloudDiscoveryMetadata(\n                    metadataEntity,\n                    hardcodedMetadata,\n                    false\n                );\n                return AuthorityMetadataSource.HARDCODED_VALUES;\n            }\n\n            this.logger.verbose(\n                \"Did not find cloud discovery metadata in hardcoded values... Attempting to get cloud discovery metadata from the network metadata cache.\"\n            );\n        }\n\n        const metadataEntityExpired =\n            CacheHelpers.isAuthorityMetadataExpired(metadataEntity);\n        if (\n            this.isAuthoritySameType(metadataEntity) &&\n            metadataEntity.aliasesFromNetwork &&\n            !metadataEntityExpired\n        ) {\n            this.logger.verbose(\"Found cloud discovery metadata in the cache.\");\n            // No need to update\n            return AuthorityMetadataSource.CACHE;\n        } else if (metadataEntityExpired) {\n            this.logger.verbose(\"The metadata entity is expired.\");\n        }\n\n        return null;\n    }\n\n    /**\n     * Parse cloudDiscoveryMetadata config or check knownAuthorities\n     */\n    private getCloudDiscoveryMetadataFromConfig(): CloudDiscoveryMetadata | null {\n        // CIAM does not support cloud discovery metadata\n        if (this.authorityType === AuthorityType.Ciam) {\n            this.logger.verbose(\n                \"CIAM authorities do not support cloud discovery metadata, generate the aliases from authority host.\"\n            );\n            return Authority.createCloudDiscoveryMetadataFromHost(\n                this.hostnameAndPort\n            );\n        }\n\n        // Check if network response was provided in config\n        if (this.authorityOptions.cloudDiscoveryMetadata) {\n            this.logger.verbose(\n                \"The cloud discovery metadata has been provided as a network response, in the config.\"\n            );\n            try {\n                this.logger.verbose(\n                    \"Attempting to parse the cloud discovery metadata.\"\n                );\n                const parsedResponse = JSON.parse(\n                    this.authorityOptions.cloudDiscoveryMetadata\n                ) as CloudInstanceDiscoveryResponse;\n                const metadata = getCloudDiscoveryMetadataFromNetworkResponse(\n                    parsedResponse.metadata,\n                    this.hostnameAndPort\n                );\n                this.logger.verbose(\"Parsed the cloud discovery metadata.\");\n                if (metadata) {\n                    this.logger.verbose(\n                        \"There is returnable metadata attached to the parsed cloud discovery metadata.\"\n                    );\n                    return metadata;\n                } else {\n                    this.logger.verbose(\n                        \"There is no metadata attached to the parsed cloud discovery metadata.\"\n                    );\n                }\n            } catch (e) {\n                this.logger.verbose(\n                    \"Unable to parse the cloud discovery metadata. Throwing Invalid Cloud Discovery Metadata Error.\"\n                );\n                throw createClientConfigurationError(\n                    ClientConfigurationErrorCodes.invalidCloudDiscoveryMetadata\n                );\n            }\n        }\n\n        // If cloudDiscoveryMetadata is empty or does not contain the host, check knownAuthorities\n        if (this.isInKnownAuthorities()) {\n            this.logger.verbose(\n                \"The host is included in knownAuthorities. Creating new cloud discovery metadata from the host.\"\n            );\n            return Authority.createCloudDiscoveryMetadataFromHost(\n                this.hostnameAndPort\n            );\n        }\n\n        return null;\n    }\n\n    /**\n     * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config\n     *\n     * @param hasHardcodedMetadata boolean\n     */\n    private async getCloudDiscoveryMetadataFromNetwork(): Promise<CloudDiscoveryMetadata | null> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork,\n            this.correlationId\n        );\n        const instanceDiscoveryEndpoint = `${Constants.AAD_INSTANCE_DISCOVERY_ENDPT}${this.canonicalAuthority}oauth2/v2.0/authorize`;\n        const options: ImdsOptions = {};\n\n        /*\n         * TODO: Add a timeout if the authority exists in our library's\n         * hardcoded list of metadata\n         */\n\n        let match = null;\n        try {\n            const response = await this.networkInterface.sendGetRequestAsync<\n                | CloudInstanceDiscoveryResponse\n                | CloudInstanceDiscoveryErrorResponse\n            >(instanceDiscoveryEndpoint, options);\n            let typedResponseBody:\n                | CloudInstanceDiscoveryResponse\n                | CloudInstanceDiscoveryErrorResponse;\n            let metadata: Array<CloudDiscoveryMetadata>;\n            if (isCloudInstanceDiscoveryResponse(response.body)) {\n                typedResponseBody =\n                    response.body as CloudInstanceDiscoveryResponse;\n                metadata = typedResponseBody.metadata;\n\n                this.logger.verbosePii(\n                    `tenant_discovery_endpoint is: ${typedResponseBody.tenant_discovery_endpoint}`\n                );\n            } else if (isCloudInstanceDiscoveryErrorResponse(response.body)) {\n                this.logger.warning(\n                    `A CloudInstanceDiscoveryErrorResponse was returned. The cloud instance discovery network request's status code is: ${response.status}`\n                );\n\n                typedResponseBody =\n                    response.body as CloudInstanceDiscoveryErrorResponse;\n                if (typedResponseBody.error === Constants.INVALID_INSTANCE) {\n                    this.logger.error(\n                        \"The CloudInstanceDiscoveryErrorResponse error is invalid_instance.\"\n                    );\n                    return null;\n                }\n\n                this.logger.warning(\n                    `The CloudInstanceDiscoveryErrorResponse error is ${typedResponseBody.error}`\n                );\n                this.logger.warning(\n                    `The CloudInstanceDiscoveryErrorResponse error description is ${typedResponseBody.error_description}`\n                );\n\n                this.logger.warning(\n                    \"Setting the value of the CloudInstanceDiscoveryMetadata (returned from the network) to []\"\n                );\n                metadata = [];\n            } else {\n                this.logger.error(\n                    \"AAD did not return a CloudInstanceDiscoveryResponse or CloudInstanceDiscoveryErrorResponse\"\n                );\n                return null;\n            }\n\n            this.logger.verbose(\n                \"Attempting to find a match between the developer's authority and the CloudInstanceDiscoveryMetadata returned from the network request.\"\n            );\n            match = getCloudDiscoveryMetadataFromNetworkResponse(\n                metadata,\n                this.hostnameAndPort\n            );\n        } catch (error) {\n            if (error instanceof AuthError) {\n                this.logger.error(\n                    `There was a network error while attempting to get the cloud discovery instance metadata.\\nError: ${error.errorCode}\\nError Description: ${error.errorMessage}`\n                );\n            } else {\n                const typedError = error as Error;\n                this.logger.error(\n                    `A non-MSALJS error was thrown while attempting to get the cloud instance discovery metadata.\\nError: ${typedError.name}\\nError Description: ${typedError.message}`\n                );\n            }\n\n            return null;\n        }\n\n        // Custom Domain scenario, host is trusted because Instance Discovery call succeeded\n        if (!match) {\n            this.logger.warning(\n                \"The developer's authority was not found within the CloudInstanceDiscoveryMetadata returned from the network request.\"\n            );\n            this.logger.verbose(\n                \"Creating custom Authority for custom domain scenario.\"\n            );\n\n            match = Authority.createCloudDiscoveryMetadataFromHost(\n                this.hostnameAndPort\n            );\n        }\n        return match;\n    }\n\n    /**\n     * Helper function to determine if this host is included in the knownAuthorities config option\n     */\n    private isInKnownAuthorities(): boolean {\n        const matches = this.authorityOptions.knownAuthorities.filter(\n            (authority) => {\n                return (\n                    authority &&\n                    UrlString.getDomainFromUrl(authority).toLowerCase() ===\n                        this.hostnameAndPort\n                );\n            }\n        );\n        return matches.length > 0;\n    }\n\n    /**\n     * helper function to populate the authority based on azureCloudOptions\n     * @param authorityString\n     * @param azureCloudOptions\n     */\n    static generateAuthority(\n        authorityString: string,\n        azureCloudOptions?: AzureCloudOptions\n    ): string {\n        let authorityAzureCloudInstance;\n\n        if (\n            azureCloudOptions &&\n            azureCloudOptions.azureCloudInstance !== AzureCloudInstance.None\n        ) {\n            const tenant = azureCloudOptions.tenant\n                ? azureCloudOptions.tenant\n                : Constants.DEFAULT_COMMON_TENANT;\n            authorityAzureCloudInstance = `${azureCloudOptions.azureCloudInstance}/${tenant}/`;\n        }\n\n        return authorityAzureCloudInstance\n            ? authorityAzureCloudInstance\n            : authorityString;\n    }\n\n    /**\n     * Creates cloud discovery metadata object from a given host\n     * @param host\n     */\n    static createCloudDiscoveryMetadataFromHost(\n        host: string\n    ): CloudDiscoveryMetadata {\n        return {\n            preferred_network: host,\n            preferred_cache: host,\n            aliases: [host],\n        };\n    }\n\n    /**\n     * helper function to generate environment from authority object\n     */\n    getPreferredCache(): string {\n        if (this.managedIdentity) {\n            return Constants.DEFAULT_AUTHORITY_HOST;\n        } else if (this.discoveryComplete()) {\n            return this.metadata.preferred_cache;\n        } else {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.endpointResolutionError\n            );\n        }\n    }\n\n    /**\n     * Returns whether or not the provided host is an alias of this authority instance\n     * @param host\n     */\n    isAlias(host: string): boolean {\n        return this.metadata.aliases.indexOf(host) > -1;\n    }\n\n    /**\n     * Returns whether or not the provided host is an alias of a known Microsoft authority for purposes of endpoint discovery\n     * @param host\n     */\n    isAliasOfKnownMicrosoftAuthority(host: string): boolean {\n        return InstanceDiscoveryMetadataAliases.has(host);\n    }\n\n    /**\n     * Checks whether the provided host is that of a public cloud authority\n     *\n     * @param authority string\n     * @returns bool\n     */\n    static isPublicCloudAuthority(host: string): boolean {\n        return Constants.KNOWN_PUBLIC_CLOUDS.indexOf(host) >= 0;\n    }\n\n    /**\n     * Rebuild the authority string with the region\n     *\n     * @param host string\n     * @param region string\n     */\n    static buildRegionalAuthorityString(\n        host: string,\n        region: string,\n        queryString?: string\n    ): string {\n        // Create and validate a Url string object with the initial authority string\n        const authorityUrlInstance = new UrlString(host);\n        authorityUrlInstance.validateAsUri();\n\n        const authorityUrlParts = authorityUrlInstance.getUrlComponents();\n\n        let hostNameAndPort = `${region}.${authorityUrlParts.HostNameAndPort}`;\n\n        if (this.isPublicCloudAuthority(authorityUrlParts.HostNameAndPort)) {\n            hostNameAndPort = `${region}.${Constants.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX}`;\n        }\n\n        // Include the query string portion of the url\n        const url = UrlString.constructAuthorityUriFromObject({\n            ...authorityUrlInstance.getUrlComponents(),\n            HostNameAndPort: hostNameAndPort,\n        }).urlString;\n\n        // Add the query string if a query string was provided\n        if (queryString) return `${url}?${queryString}`;\n\n        return url;\n    }\n\n    /**\n     * Replace the endpoints in the metadata object with their regional equivalents.\n     *\n     * @param metadata OpenIdConfigResponse\n     * @param azureRegion string\n     */\n    static replaceWithRegionalInformation(\n        metadata: OpenIdConfigResponse,\n        azureRegion: string\n    ): OpenIdConfigResponse {\n        const regionalMetadata = { ...metadata };\n        regionalMetadata.authorization_endpoint =\n            Authority.buildRegionalAuthorityString(\n                regionalMetadata.authorization_endpoint,\n                azureRegion\n            );\n\n        regionalMetadata.token_endpoint =\n            Authority.buildRegionalAuthorityString(\n                regionalMetadata.token_endpoint,\n                azureRegion\n            );\n\n        if (regionalMetadata.end_session_endpoint) {\n            regionalMetadata.end_session_endpoint =\n                Authority.buildRegionalAuthorityString(\n                    regionalMetadata.end_session_endpoint,\n                    azureRegion\n                );\n        }\n\n        return regionalMetadata;\n    }\n\n    /**\n     * Transform CIAM_AUTHORIY as per the below rules:\n     * If no path segments found and it is a CIAM authority (hostname ends with .ciamlogin.com), then transform it\n     *\n     * NOTE: The transformation path should go away once STS supports CIAM with the format: `tenantIdorDomain.ciamlogin.com`\n     * `ciamlogin.com` can also change in the future and we should accommodate the same\n     *\n     * @param authority\n     */\n    static transformCIAMAuthority(authority: string): string {\n        let ciamAuthority = authority;\n        const authorityUrl = new UrlString(authority);\n        const authorityUrlComponents = authorityUrl.getUrlComponents();\n\n        // check if transformation is needed\n        if (\n            authorityUrlComponents.PathSegments.length === 0 &&\n            authorityUrlComponents.HostNameAndPort.endsWith(\n                Constants.CIAM_AUTH_URL\n            )\n        ) {\n            const tenantIdOrDomain =\n                authorityUrlComponents.HostNameAndPort.split(\".\")[0];\n            ciamAuthority = `${ciamAuthority}${tenantIdOrDomain}${Constants.AAD_TENANT_DOMAIN_SUFFIX}`;\n        }\n\n        return ciamAuthority;\n    }\n}\n\n/**\n * Extract tenantId from authority\n */\nexport function getTenantFromAuthorityString(\n    authority: string\n): string | undefined {\n    const authorityUrl = new UrlString(authority);\n    const authorityUrlComponents = authorityUrl.getUrlComponents();\n    /**\n     * For credential matching purposes, tenantId is the last path segment of the authority URL:\n     *  AAD Authority - domain/tenantId -> Credentials are cached with realm = tenantId\n     *  B2C Authority - domain/{tenantId}?/.../policy -> Credentials are cached with realm = policy\n     *  tenantId is downcased because B2C policies can have mixed case but tfp claim is downcased\n     *\n     * Note that we may not have any path segments in certain OIDC scenarios.\n     */\n    const tenantId =\n        authorityUrlComponents.PathSegments.slice(-1)[0]?.toLowerCase();\n\n    switch (tenantId) {\n        case AADAuthorityConstants.COMMON:\n        case AADAuthorityConstants.ORGANIZATIONS:\n        case AADAuthorityConstants.CONSUMERS:\n            return undefined;\n        default:\n            return tenantId;\n    }\n}\n\nexport function formatAuthorityUri(authorityUri: string): string {\n    return authorityUri.endsWith(Constants.FORWARD_SLASH)\n        ? authorityUri\n        : `${authorityUri}${Constants.FORWARD_SLASH}`;\n}\n\nexport function buildStaticAuthorityOptions(\n    authOptions: Partial<AuthorityOptions>\n): StaticAuthorityOptions {\n    const rawCloudDiscoveryMetadata = authOptions.cloudDiscoveryMetadata;\n    let cloudDiscoveryMetadata: CloudInstanceDiscoveryResponse | undefined =\n        undefined;\n    if (rawCloudDiscoveryMetadata) {\n        try {\n            cloudDiscoveryMetadata = JSON.parse(rawCloudDiscoveryMetadata);\n        } catch (e) {\n            throw createClientConfigurationError(\n                ClientConfigurationErrorCodes.invalidCloudDiscoveryMetadata\n            );\n        }\n    }\n    return {\n        canonicalAuthority: authOptions.authority\n            ? formatAuthorityUri(authOptions.authority)\n            : undefined,\n        knownAuthorities: authOptions.knownAuthorities,\n        cloudDiscoveryMetadata: cloudDiscoveryMetadata,\n    };\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Authority, formatAuthorityUri } from \"./Authority\";\nimport { INetworkModule } from \"../network/INetworkModule\";\nimport {\n    createClientAuthError,\n    ClientAuthErrorCodes,\n} from \"../error/ClientAuthError\";\nimport { ICacheManager } from \"../cache/interface/ICacheManager\";\nimport { AuthorityOptions } from \"./AuthorityOptions\";\nimport { Logger } from \"../logger/Logger\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\nimport { invokeAsync } from \"../utils/FunctionWrappers\";\n\n/**\n * Create an authority object of the correct type based on the url\n * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\n *\n * Also performs endpoint discovery.\n *\n * @param authorityUri\n * @param networkClient\n * @param protocolMode\n * @internal\n */\nexport async function createDiscoveredInstance(\n    authorityUri: string,\n    networkClient: INetworkModule,\n    cacheManager: ICacheManager,\n    authorityOptions: AuthorityOptions,\n    logger: Logger,\n    correlationId: string,\n    performanceClient?: IPerformanceClient\n): Promise<Authority> {\n    performanceClient?.addQueueMeasurement(\n        PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance,\n        correlationId\n    );\n    const authorityUriFinal = Authority.transformCIAMAuthority(\n        formatAuthorityUri(authorityUri)\n    );\n\n    // Initialize authority and perform discovery endpoint check.\n    const acquireTokenAuthority: Authority = new Authority(\n        authorityUriFinal,\n        networkClient,\n        cacheManager,\n        authorityOptions,\n        logger,\n        correlationId,\n        performanceClient\n    );\n\n    try {\n        await invokeAsync(\n            acquireTokenAuthority.resolveEndpointsAsync.bind(\n                acquireTokenAuthority\n            ),\n            PerformanceEvents.AuthorityResolveEndpointsAsync,\n            logger,\n            performanceClient,\n            correlationId\n        )();\n        return acquireTokenAuthority;\n    } catch (e) {\n        throw createClientAuthError(\n            ClientAuthErrorCodes.endpointResolutionError\n        );\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    ClientAssertionCallback,\n    ClientAssertionConfig,\n} from \"../account/ClientCredentials\";\n\nexport async function getClientAssertion(\n    clientAssertion: string | ClientAssertionCallback,\n    clientId: string,\n    tokenEndpoint?: string\n): Promise<string> {\n    if (typeof clientAssertion === \"string\") {\n        return clientAssertion;\n    } else {\n        const config: ClientAssertionConfig = {\n            clientId: clientId,\n            tokenEndpoint: tokenEndpoint,\n        };\n        return clientAssertion(config);\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nexport const CLIENT_ID = \"client_id\";\nexport const REDIRECT_URI = \"redirect_uri\";\nexport const RESPONSE_TYPE = \"response_type\";\nexport const RESPONSE_MODE = \"response_mode\";\nexport const GRANT_TYPE = \"grant_type\";\nexport const CLAIMS = \"claims\";\nexport const SCOPE = \"scope\";\nexport const ERROR = \"error\";\nexport const ERROR_DESCRIPTION = \"error_description\";\nexport const ACCESS_TOKEN = \"access_token\";\nexport const ID_TOKEN = \"id_token\";\nexport const REFRESH_TOKEN = \"refresh_token\";\nexport const EXPIRES_IN = \"expires_in\";\nexport const REFRESH_TOKEN_EXPIRES_IN = \"refresh_token_expires_in\";\nexport const STATE = \"state\";\nexport const NONCE = \"nonce\";\nexport const PROMPT = \"prompt\";\nexport const SESSION_STATE = \"session_state\";\nexport const CLIENT_INFO = \"client_info\";\nexport const CODE = \"code\";\nexport const CODE_CHALLENGE = \"code_challenge\";\nexport const CODE_CHALLENGE_METHOD = \"code_challenge_method\";\nexport const CODE_VERIFIER = \"code_verifier\";\nexport const CLIENT_REQUEST_ID = \"client-request-id\";\nexport const X_CLIENT_SKU = \"x-client-SKU\";\nexport const X_CLIENT_VER = \"x-client-VER\";\nexport const X_CLIENT_OS = \"x-client-OS\";\nexport const X_CLIENT_CPU = \"x-client-CPU\";\nexport const X_CLIENT_CURR_TELEM = \"x-client-current-telemetry\";\nexport const X_CLIENT_LAST_TELEM = \"x-client-last-telemetry\";\nexport const X_MS_LIB_CAPABILITY = \"x-ms-lib-capability\";\nexport const X_APP_NAME = \"x-app-name\";\nexport const X_APP_VER = \"x-app-ver\";\nexport const POST_LOGOUT_URI = \"post_logout_redirect_uri\";\nexport const ID_TOKEN_HINT = \"id_token_hint\";\nexport const DEVICE_CODE = \"device_code\";\nexport const CLIENT_SECRET = \"client_secret\";\nexport const CLIENT_ASSERTION = \"client_assertion\";\nexport const CLIENT_ASSERTION_TYPE = \"client_assertion_type\";\nexport const TOKEN_TYPE = \"token_type\";\nexport const REQ_CNF = \"req_cnf\";\nexport const OBO_ASSERTION = \"assertion\";\nexport const REQUESTED_TOKEN_USE = \"requested_token_use\";\nexport const ON_BEHALF_OF = \"on_behalf_of\";\nexport const FOCI = \"foci\";\nexport const CCS_HEADER = \"X-AnchorMailbox\";\nexport const RETURN_SPA_CODE = \"return_spa_code\";\nexport const NATIVE_BROKER = \"nativebroker\";\nexport const LOGOUT_HINT = \"logout_hint\";\nexport const SID = \"sid\";\nexport const LOGIN_HINT = \"login_hint\";\nexport const DOMAIN_HINT = \"domain_hint\";\nexport const X_CLIENT_EXTRA_SKU = \"x-client-xtra-sku\";\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    ClientAuthErrorCodes,\n    createClientAuthError,\n} from \"../error/ClientAuthError\";\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest\";\nimport { ShrOptions, SignedHttpRequest } from \"./SignedHttpRequest\";\n\n/**\n * The PkceCodes type describes the structure\n * of objects that contain PKCE code\n * challenge and verifier pairs\n */\nexport type PkceCodes = {\n    verifier: string;\n    challenge: string;\n};\n\nexport type SignedHttpRequestParameters = Pick<\n    BaseAuthRequest,\n    | \"resourceRequestMethod\"\n    | \"resourceRequestUri\"\n    | \"shrClaims\"\n    | \"shrNonce\"\n    | \"shrOptions\"\n> & {\n    correlationId?: string;\n};\n\n/**\n * Interface for crypto functions used by library\n */\nexport interface ICrypto {\n    /**\n     * Creates a guid randomly.\n     */\n    createNewGuid(): string;\n    /**\n     * base64 Encode string\n     * @param input\n     */\n    base64Encode(input: string): string;\n    /**\n     * base64 decode string\n     * @param input\n     */\n    base64Decode(input: string): string;\n    /**\n     * base64 URL safe encoded string\n     */\n    base64UrlEncode(input: string): string;\n    /**\n     * Stringifies and base64Url encodes input public key\n     * @param inputKid\n     * @returns Base64Url encoded public key\n     */\n    encodeKid(inputKid: string): string;\n    /**\n     * Generates an JWK RSA S256 Thumbprint\n     * @param request\n     */\n    getPublicKeyThumbprint(\n        request: SignedHttpRequestParameters\n    ): Promise<string>;\n    /**\n     * Removes cryptographic keypair from key store matching the keyId passed in\n     * @param kid\n     */\n    removeTokenBindingKey(kid: string): Promise<boolean>;\n    /**\n     * Removes all cryptographic keys from IndexedDB storage\n     */\n    clearKeystore(): Promise<boolean>;\n    /**\n     * Returns a signed proof-of-possession token with a given acces token that contains a cnf claim with the required kid.\n     * @param accessToken\n     */\n    signJwt(\n        payload: SignedHttpRequest,\n        kid: string,\n        shrOptions?: ShrOptions,\n        correlationId?: string\n    ): Promise<string>;\n    /**\n     * Returns the SHA-256 hash of an input string\n     * @param plainText\n     */\n    hashString(plainText: string): Promise<string>;\n}\n\nexport const DEFAULT_CRYPTO_IMPLEMENTATION: ICrypto = {\n    createNewGuid: (): string => {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    },\n    base64Decode: (): string => {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    },\n    base64Encode: (): string => {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    },\n    base64UrlEncode: (): string => {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    },\n    encodeKid: (): string => {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    },\n    async getPublicKeyThumbprint(): Promise<string> {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    },\n    async removeTokenBindingKey(): Promise<boolean> {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    },\n    async clearKeystore(): Promise<boolean> {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    },\n    async signJwt(): Promise<string> {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    },\n    async hashString(): Promise<string> {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    },\n};\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { LoggerOptions } from \"../config/ClientConfiguration\";\nimport { Constants } from \"../utils/Constants\";\n\n/**\n * Options for logger messages.\n */\nexport type LoggerMessageOptions = {\n    logLevel: LogLevel;\n    containsPii?: boolean;\n    context?: string;\n    correlationId?: string;\n};\n\n/**\n * Log message level.\n */\nexport enum LogLevel {\n    Error,\n    Warning,\n    Info,\n    Verbose,\n    Trace,\n}\n\n/**\n * Callback to send the messages to.\n */\nexport interface ILoggerCallback {\n    (level: LogLevel, message: string, containsPii: boolean): void;\n}\n\n/**\n * Class which facilitates logging of messages to a specific place.\n */\nexport class Logger {\n    // Correlation ID for request, usually set by user.\n    private correlationId: string;\n\n    // Current log level, defaults to info.\n    private level: LogLevel = LogLevel.Info;\n\n    // Boolean describing whether PII logging is allowed.\n    private piiLoggingEnabled: boolean;\n\n    // Callback to send messages to.\n    private localCallback: ILoggerCallback;\n\n    // Package name implementing this logger\n    private packageName: string;\n\n    // Package version implementing this logger\n    private packageVersion: string;\n\n    constructor(\n        loggerOptions: LoggerOptions,\n        packageName?: string,\n        packageVersion?: string\n    ) {\n        const defaultLoggerCallback = () => {\n            return;\n        };\n        const setLoggerOptions =\n            loggerOptions || Logger.createDefaultLoggerOptions();\n        this.localCallback =\n            setLoggerOptions.loggerCallback || defaultLoggerCallback;\n        this.piiLoggingEnabled = setLoggerOptions.piiLoggingEnabled || false;\n        this.level =\n            typeof setLoggerOptions.logLevel === \"number\"\n                ? setLoggerOptions.logLevel\n                : LogLevel.Info;\n        this.correlationId =\n            setLoggerOptions.correlationId || Constants.EMPTY_STRING;\n        this.packageName = packageName || Constants.EMPTY_STRING;\n        this.packageVersion = packageVersion || Constants.EMPTY_STRING;\n    }\n\n    private static createDefaultLoggerOptions(): LoggerOptions {\n        return {\n            loggerCallback: () => {\n                // allow users to not set loggerCallback\n            },\n            piiLoggingEnabled: false,\n            logLevel: LogLevel.Info,\n        };\n    }\n\n    /**\n     * Create new Logger with existing configurations.\n     */\n    public clone(\n        packageName: string,\n        packageVersion: string,\n        correlationId?: string\n    ): Logger {\n        return new Logger(\n            {\n                loggerCallback: this.localCallback,\n                piiLoggingEnabled: this.piiLoggingEnabled,\n                logLevel: this.level,\n                correlationId: correlationId || this.correlationId,\n            },\n            packageName,\n            packageVersion\n        );\n    }\n\n    /**\n     * Log message with required options.\n     */\n    private logMessage(\n        logMessage: string,\n        options: LoggerMessageOptions\n    ): void {\n        if (\n            options.logLevel > this.level ||\n            (!this.piiLoggingEnabled && options.containsPii)\n        ) {\n            return;\n        }\n        const timestamp = new Date().toUTCString();\n\n        // Add correlationId to logs if set, correlationId provided on log messages take precedence\n        const logHeader = `[${timestamp}] : [${\n            options.correlationId || this.correlationId || \"\"\n        }]`;\n\n        const log = `${logHeader} : ${this.packageName}@${\n            this.packageVersion\n        } : ${LogLevel[options.logLevel]} - ${logMessage}`;\n        // debug(`msal:${LogLevel[options.logLevel]}${options.containsPii ? \"-Pii\": Constants.EMPTY_STRING}${options.context ? `:${options.context}` : Constants.EMPTY_STRING}`)(logMessage);\n        this.executeCallback(\n            options.logLevel,\n            log,\n            options.containsPii || false\n        );\n    }\n\n    /**\n     * Execute callback with message.\n     */\n    executeCallback(\n        level: LogLevel,\n        message: string,\n        containsPii: boolean\n    ): void {\n        if (this.localCallback) {\n            this.localCallback(level, message, containsPii);\n        }\n    }\n\n    /**\n     * Logs error messages.\n     */\n    error(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Error,\n            containsPii: false,\n            correlationId: correlationId || Constants.EMPTY_STRING,\n        });\n    }\n\n    /**\n     * Logs error messages with PII.\n     */\n    errorPii(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Error,\n            containsPii: true,\n            correlationId: correlationId || Constants.EMPTY_STRING,\n        });\n    }\n\n    /**\n     * Logs warning messages.\n     */\n    warning(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Warning,\n            containsPii: false,\n            correlationId: correlationId || Constants.EMPTY_STRING,\n        });\n    }\n\n    /**\n     * Logs warning messages with PII.\n     */\n    warningPii(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Warning,\n            containsPii: true,\n            correlationId: correlationId || Constants.EMPTY_STRING,\n        });\n    }\n\n    /**\n     * Logs info messages.\n     */\n    info(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Info,\n            containsPii: false,\n            correlationId: correlationId || Constants.EMPTY_STRING,\n        });\n    }\n\n    /**\n     * Logs info messages with PII.\n     */\n    infoPii(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Info,\n            containsPii: true,\n            correlationId: correlationId || Constants.EMPTY_STRING,\n        });\n    }\n\n    /**\n     * Logs verbose messages.\n     */\n    verbose(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Verbose,\n            containsPii: false,\n            correlationId: correlationId || Constants.EMPTY_STRING,\n        });\n    }\n\n    /**\n     * Logs verbose messages with PII.\n     */\n    verbosePii(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Verbose,\n            containsPii: true,\n            correlationId: correlationId || Constants.EMPTY_STRING,\n        });\n    }\n\n    /**\n     * Logs trace messages.\n     */\n    trace(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Trace,\n            containsPii: false,\n            correlationId: correlationId || Constants.EMPTY_STRING,\n        });\n    }\n\n    /**\n     * Logs trace messages with PII.\n     */\n    tracePii(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Trace,\n            containsPii: true,\n            correlationId: correlationId || Constants.EMPTY_STRING,\n        });\n    }\n\n    /**\n     * Returns whether PII Logging is enabled or not.\n     */\n    isPiiLoggingEnabled(): boolean {\n        return this.piiLoggingEnabled || false;\n    }\n}\n", "/* eslint-disable header/header */\nexport const name = \"@azure/msal-common\";\nexport const version = \"14.14.0\";\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    createClientConfigurationError,\n    ClientConfigurationErrorCodes,\n} from \"../error/ClientConfigurationError\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport {\n    ClientAuthErrorCodes,\n    createClientAuthError,\n} from \"../error/ClientAuthError\";\nimport { Constants, OIDC_SCOPES } from \"../utils/Constants\";\n\n/**\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\n * to ensure uniqueness of strings.\n */\nexport class ScopeSet {\n    // Scopes as a Set of strings\n    private scopes: Set<string>;\n\n    constructor(inputScopes: Array<string>) {\n        // Filter empty string and null/undefined array items\n        const scopeArr = inputScopes\n            ? StringUtils.trimArrayEntries([...inputScopes])\n            : [];\n        const filteredInput = scopeArr\n            ? StringUtils.removeEmptyStringsFromArray(scopeArr)\n            : [];\n\n        // Validate and filter scopes (validate function throws if validation fails)\n        this.validateInputScopes(filteredInput);\n\n        this.scopes = new Set<string>(); // Iterator in constructor not supported by IE11\n        filteredInput.forEach((scope) => this.scopes.add(scope));\n    }\n\n    /**\n     * Factory method to create ScopeSet from space-delimited string\n     * @param inputScopeString\n     * @param appClientId\n     * @param scopesRequired\n     */\n    static fromString(inputScopeString: string): ScopeSet {\n        const scopeString = inputScopeString || Constants.EMPTY_STRING;\n        const inputScopes: Array<string> = scopeString.split(\" \");\n        return new ScopeSet(inputScopes);\n    }\n\n    /**\n     * Creates the set of scopes to search for in cache lookups\n     * @param inputScopeString\n     * @returns\n     */\n    static createSearchScopes(inputScopeString: Array<string>): ScopeSet {\n        const scopeSet = new ScopeSet(inputScopeString);\n        if (!scopeSet.containsOnlyOIDCScopes()) {\n            scopeSet.removeOIDCScopes();\n        } else {\n            scopeSet.removeScope(Constants.OFFLINE_ACCESS_SCOPE);\n        }\n\n        return scopeSet;\n    }\n\n    /**\n     * Used to validate the scopes input parameter requested  by the developer.\n     * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\n     * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\n     */\n    private validateInputScopes(inputScopes: Array<string>): void {\n        // Check if scopes are required but not given or is an empty array\n        if (!inputScopes || inputScopes.length < 1) {\n            throw createClientConfigurationError(\n                ClientConfigurationErrorCodes.emptyInputScopesError\n            );\n        }\n    }\n\n    /**\n     * Check if a given scope is present in this set of scopes.\n     * @param scope\n     */\n    containsScope(scope: string): boolean {\n        const lowerCaseScopes = this.printScopesLowerCase().split(\" \");\n        const lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);\n        // compare lowercase scopes\n        return scope\n            ? lowerCaseScopesSet.scopes.has(scope.toLowerCase())\n            : false;\n    }\n\n    /**\n     * Check if a set of scopes is present in this set of scopes.\n     * @param scopeSet\n     */\n    containsScopeSet(scopeSet: ScopeSet): boolean {\n        if (!scopeSet || scopeSet.scopes.size <= 0) {\n            return false;\n        }\n\n        return (\n            this.scopes.size >= scopeSet.scopes.size &&\n            scopeSet.asArray().every((scope) => this.containsScope(scope))\n        );\n    }\n\n    /**\n     * Check if set of scopes contains only the defaults\n     */\n    containsOnlyOIDCScopes(): boolean {\n        let defaultScopeCount = 0;\n        OIDC_SCOPES.forEach((defaultScope: string) => {\n            if (this.containsScope(defaultScope)) {\n                defaultScopeCount += 1;\n            }\n        });\n\n        return this.scopes.size === defaultScopeCount;\n    }\n\n    /**\n     * Appends single scope if passed\n     * @param newScope\n     */\n    appendScope(newScope: string): void {\n        if (newScope) {\n            this.scopes.add(newScope.trim());\n        }\n    }\n\n    /**\n     * Appends multiple scopes if passed\n     * @param newScopes\n     */\n    appendScopes(newScopes: Array<string>): void {\n        try {\n            newScopes.forEach((newScope) => this.appendScope(newScope));\n        } catch (e) {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.cannotAppendScopeSet\n            );\n        }\n    }\n\n    /**\n     * Removes element from set of scopes.\n     * @param scope\n     */\n    removeScope(scope: string): void {\n        if (!scope) {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.cannotRemoveEmptyScope\n            );\n        }\n        this.scopes.delete(scope.trim());\n    }\n\n    /**\n     * Removes default scopes from set of scopes\n     * Primarily used to prevent cache misses if the default scopes are not returned from the server\n     */\n    removeOIDCScopes(): void {\n        OIDC_SCOPES.forEach((defaultScope: string) => {\n            this.scopes.delete(defaultScope);\n        });\n    }\n\n    /**\n     * Combines an array of scopes with the current set of scopes.\n     * @param otherScopes\n     */\n    unionScopeSets(otherScopes: ScopeSet): Set<string> {\n        if (!otherScopes) {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.emptyInputScopeSet\n            );\n        }\n        const unionScopes = new Set<string>(); // Iterator in constructor not supported in IE11\n        otherScopes.scopes.forEach((scope) =>\n            unionScopes.add(scope.toLowerCase())\n        );\n        this.scopes.forEach((scope) => unionScopes.add(scope.toLowerCase()));\n        return unionScopes;\n    }\n\n    /**\n     * Check if scopes intersect between this set and another.\n     * @param otherScopes\n     */\n    intersectingScopeSets(otherScopes: ScopeSet): boolean {\n        if (!otherScopes) {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.emptyInputScopeSet\n            );\n        }\n\n        // Do not allow OIDC scopes to be the only intersecting scopes\n        if (!otherScopes.containsOnlyOIDCScopes()) {\n            otherScopes.removeOIDCScopes();\n        }\n        const unionScopes = this.unionScopeSets(otherScopes);\n        const sizeOtherScopes = otherScopes.getScopeCount();\n        const sizeThisScopes = this.getScopeCount();\n        const sizeUnionScopes = unionScopes.size;\n        return sizeUnionScopes < sizeThisScopes + sizeOtherScopes;\n    }\n\n    /**\n     * Returns size of set of scopes.\n     */\n    getScopeCount(): number {\n        return this.scopes.size;\n    }\n\n    /**\n     * Returns the scopes as an array of string values\n     */\n    asArray(): Array<string> {\n        const array: Array<string> = [];\n        this.scopes.forEach((val) => array.push(val));\n        return array;\n    }\n\n    /**\n     * Prints scopes into a space-delimited string\n     */\n    printScopes(): string {\n        if (this.scopes) {\n            const scopeArr = this.asArray();\n            return scopeArr.join(\" \");\n        }\n        return Constants.EMPTY_STRING;\n    }\n\n    /**\n     * Prints scopes into a space-delimited lower-case string (used for caching)\n     */\n    printScopesLowerCase(): string {\n        return this.printScopes().toLowerCase();\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    createClientAuthError,\n    ClientAuthErrorCodes,\n} from \"../error/ClientAuthError\";\nimport { Separators, Constants } from \"../utils/Constants\";\n\n/**\n * Client info object which consists of two IDs. Need to add more info here.\n */\nexport type ClientInfo = {\n    uid: string;\n    utid: string;\n};\n\n/**\n * Function to build a client info object from server clientInfo string\n * @param rawClientInfo\n * @param crypto\n */\nexport function buildClientInfo(\n    rawClientInfo: string,\n    base64Decode: (input: string) => string\n): ClientInfo {\n    if (!rawClientInfo) {\n        throw createClientAuthError(ClientAuthErrorCodes.clientInfoEmptyError);\n    }\n\n    try {\n        const decodedClientInfo: string = base64Decode(rawClientInfo);\n        return JSON.parse(decodedClientInfo) as ClientInfo;\n    } catch (e) {\n        throw createClientAuthError(\n            ClientAuthErrorCodes.clientInfoDecodingError\n        );\n    }\n}\n\n/**\n * Function to build a client info object from cached homeAccountId string\n * @param homeAccountId\n */\nexport function buildClientInfoFromHomeAccountId(\n    homeAccountId: string\n): ClientInfo {\n    if (!homeAccountId) {\n        throw createClientAuthError(\n            ClientAuthErrorCodes.clientInfoDecodingError\n        );\n    }\n    const clientInfoParts: string[] = homeAccountId.split(\n        Separators.CLIENT_INFO_SEPARATOR,\n        2\n    );\n    return {\n        uid: clientInfoParts[0],\n        utid:\n            clientInfoParts.length < 2\n                ? Constants.EMPTY_STRING\n                : clientInfoParts[1],\n    };\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { TokenClaims } from \"./TokenClaims\";\n/**\n * Account object with the following signature:\n * - homeAccountId          - Home account identifier for this account object\n * - environment            - Entity which issued the token represented by the domain of the issuer (e.g. login.microsoftonline.com)\n * - tenantId               - Full tenant or organizational id that this account belongs to\n * - username               - preferred_username claim of the id_token that represents this account\n * - localAccountId         - Local, tenant-specific account identifer for this account object, usually used in legacy cases\n * - name                   - Full name for the account, including given name and family name\n * - idToken                - raw ID token\n * - idTokenClaims          - Object contains claims from ID token\n * - nativeAccountId        - The user's native account ID\n * - tenantProfiles         - Map of tenant profile objects for each tenant that the account has authenticated with in the browser\n */\nexport type AccountInfo = {\n    homeAccountId: string;\n    environment: string;\n    tenantId: string;\n    username: string;\n    localAccountId: string;\n    name?: string;\n    idToken?: string;\n    idTokenClaims?: TokenClaims & {\n        [key: string]:\n            | string\n            | number\n            | string[]\n            | object\n            | undefined\n            | unknown;\n    };\n    nativeAccountId?: string;\n    authorityType?: string;\n    tenantProfiles?: Map<string, TenantProfile>;\n};\n\n/**\n * Account details that vary across tenants for the same user\n */\nexport type TenantProfile = Pick<\n    AccountInfo,\n    \"tenantId\" | \"localAccountId\" | \"name\"\n> & {\n    /**\n     * - isHomeTenant           - True if this is the home tenant profile of the account, false if it's a guest tenant profile\n     */\n    isHomeTenant?: boolean;\n};\n\nexport type ActiveAccountFilters = {\n    homeAccountId: string;\n    localAccountId: string;\n    tenantId?: string;\n};\n\n/**\n * Returns true if tenantId matches the utid portion of homeAccountId\n * @param tenantId\n * @param homeAccountId\n * @returns\n */\nexport function tenantIdMatchesHomeTenant(\n    tenantId?: string,\n    homeAccountId?: string\n): boolean {\n    return (\n        !!tenantId &&\n        !!homeAccountId &&\n        tenantId === homeAccountId.split(\".\")[1]\n    );\n}\n\n/**\n * Build tenant profile\n * @param homeAccountId - Home account identifier for this account object\n * @param localAccountId - Local account identifer for this account object\n * @param tenantId - Full tenant or organizational id that this account belongs to\n * @param idTokenClaims - Claims from the ID token\n * @returns\n */\nexport function buildTenantProfile(\n    homeAccountId: string,\n    localAccountId: string,\n    tenantId: string,\n    idTokenClaims?: TokenClaims\n): TenantProfile {\n    if (idTokenClaims) {\n        const { oid, sub, tid, name, tfp, acr } = idTokenClaims;\n\n        /**\n         * Since there is no way to determine if the authority is AAD or B2C, we exhaust all the possible claims that can serve as tenant ID with the following precedence:\n         * tid - TenantID claim that identifies the tenant that issued the token in AAD. Expected in all AAD ID tokens, not present in B2C ID Tokens.\n         * tfp - Trust Framework Policy claim that identifies the policy that was used to authenticate the user. Functions as tenant for B2C scenarios.\n         * acr - Authentication Context Class Reference claim used only with older B2C policies. Fallback in case tfp is not present, but likely won't be present anyway.\n         */\n        const tenantId = tid || tfp || acr || \"\";\n\n        return {\n            tenantId: tenantId,\n            localAccountId: oid || sub || \"\",\n            name: name,\n            isHomeTenant: tenantIdMatchesHomeTenant(tenantId, homeAccountId),\n        };\n    } else {\n        return {\n            tenantId,\n            localAccountId,\n            isHomeTenant: tenantIdMatchesHomeTenant(tenantId, homeAccountId),\n        };\n    }\n}\n\n/**\n * Replaces account info that varies by tenant profile sourced from the ID token claims passed in with the tenant-specific account info\n * @param baseAccountInfo\n * @param idTokenClaims\n * @returns\n */\nexport function updateAccountTenantProfileData(\n    baseAccountInfo: AccountInfo,\n    tenantProfile?: TenantProfile,\n    idTokenClaims?: TokenClaims,\n    idTokenSecret?: string\n): AccountInfo {\n    let updatedAccountInfo = baseAccountInfo;\n    // Tenant Profile overrides passed in account info\n    if (tenantProfile) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { isHomeTenant, ...tenantProfileOverride } = tenantProfile;\n        updatedAccountInfo = { ...baseAccountInfo, ...tenantProfileOverride };\n    }\n\n    // ID token claims override passed in account info and tenant profile\n    if (idTokenClaims) {\n        // Ignore isHomeTenant, loginHint, and sid which are part of tenant profile but not base account info\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { isHomeTenant, ...claimsSourcedTenantProfile } =\n            buildTenantProfile(\n                baseAccountInfo.homeAccountId,\n                baseAccountInfo.localAccountId,\n                baseAccountInfo.tenantId,\n                idTokenClaims\n            );\n\n        updatedAccountInfo = {\n            ...updatedAccountInfo,\n            ...claimsSourcedTenantProfile,\n            idTokenClaims: idTokenClaims,\n            idToken: idTokenSecret,\n        };\n\n        return updatedAccountInfo;\n    }\n\n    return updatedAccountInfo;\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * Type which describes Id Token claims known by MSAL.\n */\nexport type TokenClaims = {\n    /**\n     * Audience\n     */\n    aud?: string;\n    /**\n     * Issuer\n     */\n    iss?: string;\n    /**\n     * Issued at\n     */\n    iat?: number;\n    /**\n     * Not valid before\n     */\n    nbf?: number;\n    /**\n     * Immutable object identifier, this ID uniquely identifies the user across applications\n     */\n    oid?: string;\n    /**\n     * Immutable subject identifier, this is a pairwise identifier - it is unique to a particular application ID\n     */\n    sub?: string;\n    /**\n     * Users' tenant or '9188040d-6c67-4c5b-b112-36a304b66dad' for personal accounts.\n     */\n    tid?: string;\n    /**\n     * Trusted Framework Policy (B2C) The name of the policy that was used to acquire the ID token.\n     */\n    tfp?: string;\n    /**\n     * Authentication Context Class Reference (B2C) Used only with older policies.\n     */\n    acr?: string;\n    ver?: string;\n    upn?: string;\n    preferred_username?: string;\n    login_hint?: string;\n    emails?: string[];\n    name?: string;\n    nonce?: string;\n    /**\n     * Expiration\n     */\n    exp?: number;\n    home_oid?: string;\n    sid?: string;\n    cloud_instance_host_name?: string;\n    cnf?: {\n        kid: string;\n    };\n    x5c_ca?: string[];\n    ts?: number;\n    at?: string;\n    u?: string;\n    p?: string;\n    m?: string;\n    roles?: string[];\n    amr?: string[];\n    idp?: string;\n    auth_time?: number;\n    /**\n     * \tRegion of the resource tenant\n     */\n    tenant_region_scope?: string;\n    tenant_region_sub_scope?: string;\n};\n\n/**\n * Gets tenantId from available ID token claims to set as credential realm with the following precedence:\n * 1. tid - if the token is acquired from an Azure AD tenant tid will be present\n * 2. tfp - if the token is acquired from a modern B2C tenant tfp should be present\n * 3. acr - if the token is acquired from a legacy B2C tenant acr should be present\n * Downcased to match the realm case-insensitive comparison requirements\n * @param idTokenClaims\n * @returns\n */\nexport function getTenantIdFromIdTokenClaims(\n    idTokenClaims?: TokenClaims\n): string | null {\n    if (idTokenClaims) {\n        const tenantId =\n            idTokenClaims.tid || idTokenClaims.tfp || idTokenClaims.acr;\n        return tenantId || null;\n    }\n    return null;\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { CacheAccountType, Separators } from \"../../utils/Constants\";\nimport { Authority } from \"../../authority/Authority\";\nimport { ICrypto } from \"../../crypto/ICrypto\";\nimport { ClientInfo, buildClientInfo } from \"../../account/ClientInfo\";\nimport {\n    AccountInfo,\n    TenantProfile,\n    buildTenantProfile,\n} from \"../../account/AccountInfo\";\nimport {\n    createClientAuthError,\n    ClientAuthErrorCodes,\n} from \"../../error/ClientAuthError\";\nimport { AuthorityType } from \"../../authority/AuthorityType\";\nimport { Logger } from \"../../logger/Logger\";\nimport {\n    TokenClaims,\n    getTenantIdFromIdTokenClaims,\n} from \"../../account/TokenClaims\";\nimport { ProtocolMode } from \"../../authority/ProtocolMode\";\n\n/**\n * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).\n *\n * Key : Value Schema\n *\n * Key: <home_account_id>-<environment>-<realm*>\n *\n * Value Schema:\n * {\n *      homeAccountId: home account identifier for the auth scheme,\n *      environment: entity that issued the token, represented as a full host\n *      realm: Full tenant or organizational identifier that the account belongs to\n *      localAccountId: Original tenant-specific accountID, usually used for legacy cases\n *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt\n *      authorityType: Accounts authority type as a string\n *      name: Full name for the account, including given name and family name,\n *      lastModificationTime: last time this entity was modified in the cache\n *      lastModificationApp:\n *      nativeAccountId: Account identifier on the native device\n *      tenantProfiles: Array of tenant profile objects for each tenant that the account has authenticated with in the browser\n * }\n * @internal\n */\nexport class AccountEntity {\n    homeAccountId: string;\n    environment: string;\n    realm: string;\n    localAccountId: string;\n    username: string;\n    authorityType: string;\n    clientInfo?: string;\n    name?: string;\n    lastModificationTime?: string;\n    lastModificationApp?: string;\n    cloudGraphHostName?: string;\n    msGraphHost?: string;\n    nativeAccountId?: string;\n    tenantProfiles?: Array<TenantProfile>;\n\n    /**\n     * Generate Account Id key component as per the schema: <home_account_id>-<environment>\n     */\n    generateAccountId(): string {\n        const accountId: Array<string> = [this.homeAccountId, this.environment];\n        return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n\n    /**\n     * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>\n     */\n    generateAccountKey(): string {\n        return AccountEntity.generateAccountCacheKey({\n            homeAccountId: this.homeAccountId,\n            environment: this.environment,\n            tenantId: this.realm,\n            username: this.username,\n            localAccountId: this.localAccountId,\n        });\n    }\n\n    /**\n     * Returns the AccountInfo interface for this account.\n     */\n    getAccountInfo(): AccountInfo {\n        return {\n            homeAccountId: this.homeAccountId,\n            environment: this.environment,\n            tenantId: this.realm,\n            username: this.username,\n            localAccountId: this.localAccountId,\n            name: this.name,\n            nativeAccountId: this.nativeAccountId,\n            authorityType: this.authorityType,\n            // Deserialize tenant profiles array into a Map\n            tenantProfiles: new Map(\n                (this.tenantProfiles || []).map((tenantProfile) => {\n                    return [tenantProfile.tenantId, tenantProfile];\n                })\n            ),\n        };\n    }\n\n    /**\n     * Returns true if the account entity is in single tenant format (outdated), false otherwise\n     */\n    isSingleTenant(): boolean {\n        return !this.tenantProfiles;\n    }\n\n    /**\n     * Generates account key from interface\n     * @param accountInterface\n     */\n    static generateAccountCacheKey(accountInterface: AccountInfo): string {\n        const homeTenantId = accountInterface.homeAccountId.split(\".\")[1];\n        const accountKey = [\n            accountInterface.homeAccountId,\n            accountInterface.environment || \"\",\n            homeTenantId || accountInterface.tenantId || \"\",\n        ];\n\n        return accountKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n\n    /**\n     * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.\n     * @param accountDetails\n     */\n    static createAccount(\n        accountDetails: {\n            homeAccountId: string;\n            idTokenClaims?: TokenClaims;\n            clientInfo?: string;\n            cloudGraphHostName?: string;\n            msGraphHost?: string;\n            environment?: string;\n            nativeAccountId?: string;\n            tenantProfiles?: Array<TenantProfile>;\n        },\n        authority: Authority,\n        base64Decode?: (input: string) => string\n    ): AccountEntity {\n        const account: AccountEntity = new AccountEntity();\n\n        if (authority.authorityType === AuthorityType.Adfs) {\n            account.authorityType = CacheAccountType.ADFS_ACCOUNT_TYPE;\n        } else if (authority.protocolMode === ProtocolMode.AAD) {\n            account.authorityType = CacheAccountType.MSSTS_ACCOUNT_TYPE;\n        } else {\n            account.authorityType = CacheAccountType.GENERIC_ACCOUNT_TYPE;\n        }\n\n        let clientInfo: ClientInfo | undefined;\n\n        if (accountDetails.clientInfo && base64Decode) {\n            clientInfo = buildClientInfo(\n                accountDetails.clientInfo,\n                base64Decode\n            );\n        }\n\n        account.clientInfo = accountDetails.clientInfo;\n        account.homeAccountId = accountDetails.homeAccountId;\n        account.nativeAccountId = accountDetails.nativeAccountId;\n\n        const env =\n            accountDetails.environment ||\n            (authority && authority.getPreferredCache());\n\n        if (!env) {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.invalidCacheEnvironment\n            );\n        }\n\n        account.environment = env;\n        // non AAD scenarios can have empty realm\n        account.realm =\n            clientInfo?.utid ||\n            getTenantIdFromIdTokenClaims(accountDetails.idTokenClaims) ||\n            \"\";\n\n        // How do you account for MSA CID here?\n        account.localAccountId =\n            clientInfo?.uid ||\n            accountDetails.idTokenClaims?.oid ||\n            accountDetails.idTokenClaims?.sub ||\n            \"\";\n\n        /*\n         * In B2C scenarios the emails claim is used instead of preferred_username and it is an array.\n         * In most cases it will contain a single email. This field should not be relied upon if a custom\n         * policy is configured to return more than 1 email.\n         */\n        const preferredUsername =\n            accountDetails.idTokenClaims?.preferred_username ||\n            accountDetails.idTokenClaims?.upn;\n        const email = accountDetails.idTokenClaims?.emails\n            ? accountDetails.idTokenClaims.emails[0]\n            : null;\n\n        account.username = preferredUsername || email || \"\";\n        account.name = accountDetails.idTokenClaims?.name || \"\";\n\n        account.cloudGraphHostName = accountDetails.cloudGraphHostName;\n        account.msGraphHost = accountDetails.msGraphHost;\n\n        if (accountDetails.tenantProfiles) {\n            account.tenantProfiles = accountDetails.tenantProfiles;\n        } else {\n            const tenantProfile = buildTenantProfile(\n                accountDetails.homeAccountId,\n                account.localAccountId,\n                account.realm,\n                accountDetails.idTokenClaims\n            );\n            account.tenantProfiles = [tenantProfile];\n        }\n\n        return account;\n    }\n\n    /**\n     * Creates an AccountEntity object from AccountInfo\n     * @param accountInfo\n     * @param cloudGraphHostName\n     * @param msGraphHost\n     * @returns\n     */\n    static createFromAccountInfo(\n        accountInfo: AccountInfo,\n        cloudGraphHostName?: string,\n        msGraphHost?: string\n    ): AccountEntity {\n        const account: AccountEntity = new AccountEntity();\n\n        account.authorityType =\n            accountInfo.authorityType || CacheAccountType.GENERIC_ACCOUNT_TYPE;\n        account.homeAccountId = accountInfo.homeAccountId;\n        account.localAccountId = accountInfo.localAccountId;\n        account.nativeAccountId = accountInfo.nativeAccountId;\n\n        account.realm = accountInfo.tenantId;\n        account.environment = accountInfo.environment;\n\n        account.username = accountInfo.username;\n        account.name = accountInfo.name;\n\n        account.cloudGraphHostName = cloudGraphHostName;\n        account.msGraphHost = msGraphHost;\n        // Serialize tenant profiles map into an array\n        account.tenantProfiles = Array.from(\n            accountInfo.tenantProfiles?.values() || []\n        );\n\n        return account;\n    }\n\n    /**\n     * Generate HomeAccountId from server response\n     * @param serverClientInfo\n     * @param authType\n     */\n    static generateHomeAccountId(\n        serverClientInfo: string,\n        authType: AuthorityType,\n        logger: Logger,\n        cryptoObj: ICrypto,\n        idTokenClaims?: TokenClaims\n    ): string {\n        // since ADFS/DSTS do not have tid and does not set client_info\n        if (\n            !(\n                authType === AuthorityType.Adfs ||\n                authType === AuthorityType.Dsts\n            )\n        ) {\n            // for cases where there is clientInfo\n            if (serverClientInfo) {\n                try {\n                    const clientInfo = buildClientInfo(\n                        serverClientInfo,\n                        cryptoObj.base64Decode\n                    );\n                    if (clientInfo.uid && clientInfo.utid) {\n                        return `${clientInfo.uid}.${clientInfo.utid}`;\n                    }\n                } catch (e) {}\n            }\n            logger.warning(\"No client info in response\");\n        }\n\n        // default to \"sub\" claim\n        return idTokenClaims?.sub || \"\";\n    }\n\n    /**\n     * Validates an entity: checks for all expected params\n     * @param entity\n     */\n    static isAccountEntity(entity: object): boolean {\n        if (!entity) {\n            return false;\n        }\n\n        return (\n            entity.hasOwnProperty(\"homeAccountId\") &&\n            entity.hasOwnProperty(\"environment\") &&\n            entity.hasOwnProperty(\"realm\") &&\n            entity.hasOwnProperty(\"localAccountId\") &&\n            entity.hasOwnProperty(\"username\") &&\n            entity.hasOwnProperty(\"authorityType\")\n        );\n    }\n\n    /**\n     * Helper function to determine whether 2 accountInfo objects represent the same account\n     * @param accountA\n     * @param accountB\n     * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality\n     */\n    static accountInfoIsEqual(\n        accountA: AccountInfo | null,\n        accountB: AccountInfo | null,\n        compareClaims?: boolean\n    ): boolean {\n        if (!accountA || !accountB) {\n            return false;\n        }\n\n        let claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false\n        if (compareClaims) {\n            const accountAClaims = (accountA.idTokenClaims ||\n                {}) as TokenClaims;\n            const accountBClaims = (accountB.idTokenClaims ||\n                {}) as TokenClaims;\n\n            // issued at timestamp and nonce are expected to change each time a new id token is acquired\n            claimsMatch =\n                accountAClaims.iat === accountBClaims.iat &&\n                accountAClaims.nonce === accountBClaims.nonce;\n        }\n\n        return (\n            accountA.homeAccountId === accountB.homeAccountId &&\n            accountA.localAccountId === accountB.localAccountId &&\n            accountA.username === accountB.username &&\n            accountA.tenantId === accountB.tenantId &&\n            accountA.environment === accountB.environment &&\n            accountA.nativeAccountId === accountB.nativeAccountId &&\n            claimsMatch\n        );\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nexport const cacheQuotaExceededErrorCode = \"cache_quota_exceeded\";\nexport const cacheUnknownErrorCode = \"cache_error_unknown\";\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport * as CacheErrorCodes from \"./CacheErrorCodes\";\nexport { CacheErrorCodes };\n\nexport const CacheErrorMessages = {\n    [CacheErrorCodes.cacheQuotaExceededErrorCode]:\n        \"Exceeded cache storage capacity.\",\n    [CacheErrorCodes.cacheUnknownErrorCode]:\n        \"Unexpected error occurred when using cache storage.\",\n};\n\n/**\n * Error thrown when there is an error with the cache\n */\nexport class CacheError extends Error {\n    /**\n     * Short string denoting error\n     */\n    errorCode: string;\n\n    /**\n     * Detailed description of error\n     */\n    errorMessage: string;\n\n    constructor(errorCode: string, errorMessage?: string) {\n        const message =\n            errorMessage ||\n            (CacheErrorMessages[errorCode]\n                ? CacheErrorMessages[errorCode]\n                : CacheErrorMessages[CacheErrorCodes.cacheUnknownErrorCode]);\n\n        super(`${errorCode}: ${message}`);\n        Object.setPrototypeOf(this, CacheError.prototype);\n\n        this.name = \"CacheError\";\n        this.errorCode = errorCode;\n        this.errorMessage = message;\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    AccountFilter,\n    CredentialFilter,\n    ValidCredentialType,\n    AppMetadataFilter,\n    AppMetadataCache,\n    TokenKeys,\n    TenantProfileFilter,\n} from \"./utils/CacheTypes\";\nimport { CacheRecord } from \"./entities/CacheRecord\";\nimport {\n    CredentialType,\n    APP_METADATA,\n    THE_FAMILY_ID,\n    AUTHORITY_METADATA_CONSTANTS,\n    AuthenticationScheme,\n    Separators,\n} from \"../utils/Constants\";\nimport { CredentialEntity } from \"./entities/CredentialEntity\";\nimport { generateCredentialKey } from \"./utils/CacheHelpers\";\nimport { ScopeSet } from \"../request/ScopeSet\";\nimport { AccountEntity } from \"./entities/AccountEntity\";\nimport { AccessTokenEntity } from \"./entities/AccessTokenEntity\";\nimport { IdTokenEntity } from \"./entities/IdTokenEntity\";\nimport { RefreshTokenEntity } from \"./entities/RefreshTokenEntity\";\nimport { ICacheManager } from \"./interface/ICacheManager\";\nimport {\n    createClientAuthError,\n    ClientAuthErrorCodes,\n} from \"../error/ClientAuthError\";\nimport {\n    AccountInfo,\n    TenantProfile,\n    tenantIdMatchesHomeTenant,\n    updateAccountTenantProfileData,\n} from \"../account/AccountInfo\";\nimport { AppMetadataEntity } from \"./entities/AppMetadataEntity\";\nimport { ServerTelemetryEntity } from \"./entities/ServerTelemetryEntity\";\nimport { ThrottlingEntity } from \"./entities/ThrottlingEntity\";\nimport { extractTokenClaims } from \"../account/AuthToken\";\nimport { ICrypto } from \"../crypto/ICrypto\";\nimport { AuthorityMetadataEntity } from \"./entities/AuthorityMetadataEntity\";\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest\";\nimport { Logger } from \"../logger/Logger\";\nimport { name, version } from \"../packageMetadata\";\nimport { StoreInCache } from \"../request/StoreInCache\";\nimport { getAliasesFromStaticSources } from \"../authority/AuthorityMetadata\";\nimport { StaticAuthorityOptions } from \"../authority/AuthorityOptions\";\nimport { TokenClaims } from \"../account/TokenClaims\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\nimport { CacheError, CacheErrorCodes } from \"../error/CacheError\";\n\n/**\n * Interface class which implement cache storage functions used by MSAL to perform validity checks, and store tokens.\n * @internal\n */\nexport abstract class CacheManager implements ICacheManager {\n    protected clientId: string;\n    protected cryptoImpl: ICrypto;\n    // Instance of logger for functions defined in the msal-common layer\n    private commonLogger: Logger;\n    private staticAuthorityOptions?: StaticAuthorityOptions;\n\n    constructor(\n        clientId: string,\n        cryptoImpl: ICrypto,\n        logger: Logger,\n        staticAuthorityOptions?: StaticAuthorityOptions\n    ) {\n        this.clientId = clientId;\n        this.cryptoImpl = cryptoImpl;\n        this.commonLogger = logger.clone(name, version);\n        this.staticAuthorityOptions = staticAuthorityOptions;\n    }\n\n    /**\n     * fetch the account entity from the platform cache\n     *  @param accountKey\n     */\n    abstract getAccount(\n        accountKey: string,\n        logger?: Logger\n    ): AccountEntity | null;\n\n    /**\n     * Returns deserialized account if found in the cache, otherwiser returns null\n     */\n    abstract getCachedAccountEntity(accountKey: string): AccountEntity | null;\n\n    /**\n     * set account entity in the platform cache\n     * @param account\n     */\n    abstract setAccount(account: AccountEntity): void;\n\n    /**\n     * remove account entity from the platform cache if it's outdated\n     */\n    abstract removeOutdatedAccount(accountKey: string): void;\n\n    /**\n     * fetch the idToken entity from the platform cache\n     * @param idTokenKey\n     */\n    abstract getIdTokenCredential(idTokenKey: string): IdTokenEntity | null;\n\n    /**\n     * set idToken entity to the platform cache\n     * @param idToken\n     */\n    abstract setIdTokenCredential(idToken: IdTokenEntity): void;\n\n    /**\n     * fetch the idToken entity from the platform cache\n     * @param accessTokenKey\n     */\n    abstract getAccessTokenCredential(\n        accessTokenKey: string\n    ): AccessTokenEntity | null;\n\n    /**\n     * set idToken entity to the platform cache\n     * @param accessToken\n     */\n    abstract setAccessTokenCredential(accessToken: AccessTokenEntity): void;\n\n    /**\n     * fetch the idToken entity from the platform cache\n     * @param refreshTokenKey\n     */\n    abstract getRefreshTokenCredential(\n        refreshTokenKey: string\n    ): RefreshTokenEntity | null;\n\n    /**\n     * set idToken entity to the platform cache\n     * @param refreshToken\n     */\n    abstract setRefreshTokenCredential(refreshToken: RefreshTokenEntity): void;\n\n    /**\n     * fetch appMetadata entity from the platform cache\n     * @param appMetadataKey\n     */\n    abstract getAppMetadata(appMetadataKey: string): AppMetadataEntity | null;\n\n    /**\n     * set appMetadata entity to the platform cache\n     * @param appMetadata\n     */\n    abstract setAppMetadata(appMetadata: AppMetadataEntity): void;\n\n    /**\n     * fetch server telemetry entity from the platform cache\n     * @param serverTelemetryKey\n     */\n    abstract getServerTelemetry(\n        serverTelemetryKey: string\n    ): ServerTelemetryEntity | null;\n\n    /**\n     * set server telemetry entity to the platform cache\n     * @param serverTelemetryKey\n     * @param serverTelemetry\n     */\n    abstract setServerTelemetry(\n        serverTelemetryKey: string,\n        serverTelemetry: ServerTelemetryEntity\n    ): void;\n\n    /**\n     * fetch cloud discovery metadata entity from the platform cache\n     * @param key\n     */\n    abstract getAuthorityMetadata(key: string): AuthorityMetadataEntity | null;\n\n    /**\n     *\n     */\n    abstract getAuthorityMetadataKeys(): Array<string>;\n\n    /**\n     * set cloud discovery metadata entity to the platform cache\n     * @param key\n     * @param value\n     */\n    abstract setAuthorityMetadata(\n        key: string,\n        value: AuthorityMetadataEntity\n    ): void;\n\n    /**\n     * fetch throttling entity from the platform cache\n     * @param throttlingCacheKey\n     */\n    abstract getThrottlingCache(\n        throttlingCacheKey: string\n    ): ThrottlingEntity | null;\n\n    /**\n     * set throttling entity to the platform cache\n     * @param throttlingCacheKey\n     * @param throttlingCache\n     */\n    abstract setThrottlingCache(\n        throttlingCacheKey: string,\n        throttlingCache: ThrottlingEntity\n    ): void;\n\n    /**\n     * Function to remove an item from cache given its key.\n     * @param key\n     */\n    abstract removeItem(key: string): void;\n\n    /**\n     * Function which retrieves all current keys from the cache.\n     */\n    abstract getKeys(): string[];\n\n    /**\n     * Function which retrieves all account keys from the cache\n     */\n    abstract getAccountKeys(): string[];\n\n    /**\n     * Function which retrieves all token keys from the cache\n     */\n    abstract getTokenKeys(): TokenKeys;\n\n    /**\n     * Function which clears cache.\n     */\n    abstract clear(): Promise<void>;\n\n    /**\n     * Function which updates an outdated credential cache key\n     */\n    abstract updateCredentialCacheKey(\n        currentCacheKey: string,\n        credential: ValidCredentialType\n    ): string;\n\n    /**\n     * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.\n     * @param accountFilter - (Optional) filter to narrow down the accounts returned\n     * @returns Array of AccountInfo objects in cache\n     */\n    getAllAccounts(accountFilter?: AccountFilter): AccountInfo[] {\n        return this.buildTenantProfiles(\n            this.getAccountsFilteredBy(accountFilter || {}),\n            accountFilter\n        );\n    }\n\n    /**\n     * Gets first tenanted AccountInfo object found based on provided filters\n     */\n    getAccountInfoFilteredBy(accountFilter: AccountFilter): AccountInfo | null {\n        const allAccounts = this.getAllAccounts(accountFilter);\n        if (allAccounts.length > 1) {\n            // If one or more accounts are found, prioritize accounts that have an ID token\n            const sortedAccounts = allAccounts.sort((account) => {\n                return account.idTokenClaims ? -1 : 1;\n            });\n            return sortedAccounts[0];\n        } else if (allAccounts.length === 1) {\n            // If only one account is found, return it regardless of whether a matching ID token was found\n            return allAccounts[0];\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns a single matching\n     * @param accountFilter\n     * @returns\n     */\n    getBaseAccountInfo(accountFilter: AccountFilter): AccountInfo | null {\n        const accountEntities = this.getAccountsFilteredBy(accountFilter);\n        if (accountEntities.length > 0) {\n            return accountEntities[0].getAccountInfo();\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Matches filtered account entities with cached ID tokens that match the tenant profile-specific account filters\n     * and builds the account info objects from the matching ID token's claims\n     * @param cachedAccounts\n     * @param accountFilter\n     * @returns Array of AccountInfo objects that match account and tenant profile filters\n     */\n    private buildTenantProfiles(\n        cachedAccounts: AccountEntity[],\n        accountFilter?: AccountFilter\n    ): AccountInfo[] {\n        return cachedAccounts.flatMap((accountEntity) => {\n            return this.getTenantProfilesFromAccountEntity(\n                accountEntity,\n                accountFilter?.tenantId,\n                accountFilter\n            );\n        });\n    }\n\n    private getTenantedAccountInfoByFilter(\n        accountInfo: AccountInfo,\n        tokenKeys: TokenKeys,\n        tenantProfile: TenantProfile,\n        tenantProfileFilter?: TenantProfileFilter\n    ): AccountInfo | null {\n        let tenantedAccountInfo: AccountInfo | null = null;\n        let idTokenClaims: TokenClaims | undefined;\n\n        if (tenantProfileFilter) {\n            if (\n                !this.tenantProfileMatchesFilter(\n                    tenantProfile,\n                    tenantProfileFilter\n                )\n            ) {\n                return null;\n            }\n        }\n\n        const idToken = this.getIdToken(\n            accountInfo,\n            tokenKeys,\n            tenantProfile.tenantId\n        );\n\n        if (idToken) {\n            idTokenClaims = extractTokenClaims(\n                idToken.secret,\n                this.cryptoImpl.base64Decode\n            );\n\n            if (\n                !this.idTokenClaimsMatchTenantProfileFilter(\n                    idTokenClaims,\n                    tenantProfileFilter\n                )\n            ) {\n                // ID token sourced claims don't match so this tenant profile is not a match\n                return null;\n            }\n        }\n\n        // Expand tenant profile into account info based on matching tenant profile and if available matching ID token claims\n        tenantedAccountInfo = updateAccountTenantProfileData(\n            accountInfo,\n            tenantProfile,\n            idTokenClaims,\n            idToken?.secret\n        );\n\n        return tenantedAccountInfo;\n    }\n\n    private getTenantProfilesFromAccountEntity(\n        accountEntity: AccountEntity,\n        targetTenantId?: string,\n        tenantProfileFilter?: TenantProfileFilter\n    ): AccountInfo[] {\n        const accountInfo = accountEntity.getAccountInfo();\n        let searchTenantProfiles: Map<string, TenantProfile> =\n            accountInfo.tenantProfiles || new Map<string, TenantProfile>();\n        const tokenKeys = this.getTokenKeys();\n\n        // If a tenant ID was provided, only return the tenant profile for that tenant ID if it exists\n        if (targetTenantId) {\n            const tenantProfile = searchTenantProfiles.get(targetTenantId);\n            if (tenantProfile) {\n                // Reduce search field to just this tenant profile\n                searchTenantProfiles = new Map<string, TenantProfile>([\n                    [targetTenantId, tenantProfile],\n                ]);\n            } else {\n                // No tenant profile for search tenant ID, return empty array\n                return [];\n            }\n        }\n\n        const matchingTenantProfiles: AccountInfo[] = [];\n        searchTenantProfiles.forEach((tenantProfile: TenantProfile) => {\n            const tenantedAccountInfo = this.getTenantedAccountInfoByFilter(\n                accountInfo,\n                tokenKeys,\n                tenantProfile,\n                tenantProfileFilter\n            );\n            if (tenantedAccountInfo) {\n                matchingTenantProfiles.push(tenantedAccountInfo);\n            }\n        });\n\n        return matchingTenantProfiles;\n    }\n\n    private tenantProfileMatchesFilter(\n        tenantProfile: TenantProfile,\n        tenantProfileFilter: TenantProfileFilter\n    ): boolean {\n        if (\n            !!tenantProfileFilter.localAccountId &&\n            !this.matchLocalAccountIdFromTenantProfile(\n                tenantProfile,\n                tenantProfileFilter.localAccountId\n            )\n        ) {\n            return false;\n        }\n\n        if (\n            !!tenantProfileFilter.name &&\n            !(tenantProfile.name === tenantProfileFilter.name)\n        ) {\n            return false;\n        }\n\n        if (\n            tenantProfileFilter.isHomeTenant !== undefined &&\n            !(tenantProfile.isHomeTenant === tenantProfileFilter.isHomeTenant)\n        ) {\n            return false;\n        }\n\n        return true;\n    }\n\n    private idTokenClaimsMatchTenantProfileFilter(\n        idTokenClaims: TokenClaims,\n        tenantProfileFilter?: TenantProfileFilter\n    ): boolean {\n        // Tenant Profile filtering\n        if (tenantProfileFilter) {\n            if (\n                !!tenantProfileFilter.localAccountId &&\n                !this.matchLocalAccountIdFromTokenClaims(\n                    idTokenClaims,\n                    tenantProfileFilter.localAccountId\n                )\n            ) {\n                return false;\n            }\n\n            if (\n                !!tenantProfileFilter.loginHint &&\n                !this.matchLoginHintFromTokenClaims(\n                    idTokenClaims,\n                    tenantProfileFilter.loginHint\n                )\n            ) {\n                return false;\n            }\n\n            if (\n                !!tenantProfileFilter.username &&\n                !this.matchUsername(\n                    idTokenClaims.preferred_username,\n                    tenantProfileFilter.username\n                )\n            ) {\n                return false;\n            }\n\n            if (\n                !!tenantProfileFilter.name &&\n                !this.matchName(idTokenClaims, tenantProfileFilter.name)\n            ) {\n                return false;\n            }\n\n            if (\n                !!tenantProfileFilter.sid &&\n                !this.matchSid(idTokenClaims, tenantProfileFilter.sid)\n            ) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * saves a cache record\n     * @param cacheRecord {CacheRecord}\n     * @param storeInCache {?StoreInCache}\n     * @param correlationId {?string} correlation id\n     */\n    async saveCacheRecord(\n        cacheRecord: CacheRecord,\n        storeInCache?: StoreInCache,\n        correlationId?: string\n    ): Promise<void> {\n        if (!cacheRecord) {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.invalidCacheRecord\n            );\n        }\n\n        try {\n            if (!!cacheRecord.account) {\n                this.setAccount(cacheRecord.account);\n            }\n\n            if (!!cacheRecord.idToken && storeInCache?.idToken !== false) {\n                this.setIdTokenCredential(cacheRecord.idToken);\n            }\n\n            if (\n                !!cacheRecord.accessToken &&\n                storeInCache?.accessToken !== false\n            ) {\n                await this.saveAccessToken(cacheRecord.accessToken);\n            }\n\n            if (\n                !!cacheRecord.refreshToken &&\n                storeInCache?.refreshToken !== false\n            ) {\n                this.setRefreshTokenCredential(cacheRecord.refreshToken);\n            }\n\n            if (!!cacheRecord.appMetadata) {\n                this.setAppMetadata(cacheRecord.appMetadata);\n            }\n        } catch (e: unknown) {\n            this.commonLogger?.error(`CacheManager.saveCacheRecord: failed`);\n            if (e instanceof Error) {\n                this.commonLogger?.errorPii(\n                    `CacheManager.saveCacheRecord: ${e.message}`,\n                    correlationId\n                );\n\n                if (\n                    e.name === \"QuotaExceededError\" ||\n                    e.name === \"NS_ERROR_DOM_QUOTA_REACHED\" ||\n                    e.message.includes(\"exceeded the quota\")\n                ) {\n                    this.commonLogger?.error(\n                        `CacheManager.saveCacheRecord: exceeded storage quota`,\n                        correlationId\n                    );\n                    throw new CacheError(\n                        CacheErrorCodes.cacheQuotaExceededErrorCode\n                    );\n                } else {\n                    throw new CacheError(e.name, e.message);\n                }\n            } else {\n                this.commonLogger?.errorPii(\n                    `CacheManager.saveCacheRecord: ${e}`,\n                    correlationId\n                );\n                throw new CacheError(CacheErrorCodes.cacheUnknownErrorCode);\n            }\n        }\n    }\n\n    /**\n     * saves access token credential\n     * @param credential\n     */\n    private async saveAccessToken(\n        credential: AccessTokenEntity\n    ): Promise<void> {\n        const accessTokenFilter: CredentialFilter = {\n            clientId: credential.clientId,\n            credentialType: credential.credentialType,\n            environment: credential.environment,\n            homeAccountId: credential.homeAccountId,\n            realm: credential.realm,\n            tokenType: credential.tokenType,\n            requestedClaimsHash: credential.requestedClaimsHash,\n        };\n\n        const tokenKeys = this.getTokenKeys();\n        const currentScopes = ScopeSet.fromString(credential.target);\n\n        const removedAccessTokens: Array<Promise<void>> = [];\n        tokenKeys.accessToken.forEach((key) => {\n            if (\n                !this.accessTokenKeyMatchesFilter(key, accessTokenFilter, false)\n            ) {\n                return;\n            }\n\n            const tokenEntity = this.getAccessTokenCredential(key);\n\n            if (\n                tokenEntity &&\n                this.credentialMatchesFilter(tokenEntity, accessTokenFilter)\n            ) {\n                const tokenScopeSet = ScopeSet.fromString(tokenEntity.target);\n                if (tokenScopeSet.intersectingScopeSets(currentScopes)) {\n                    removedAccessTokens.push(this.removeAccessToken(key));\n                }\n            }\n        });\n        await Promise.all(removedAccessTokens);\n        this.setAccessTokenCredential(credential);\n    }\n\n    /**\n     * Retrieve account entities matching all provided tenant-agnostic filters; if no filter is set, get all account entities in the cache\n     * Not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\n     * @param accountFilter - An object containing Account properties to filter by\n     */\n    getAccountsFilteredBy(accountFilter: AccountFilter): AccountEntity[] {\n        const allAccountKeys = this.getAccountKeys();\n        const matchingAccounts: AccountEntity[] = [];\n        allAccountKeys.forEach((cacheKey) => {\n            if (!this.isAccountKey(cacheKey, accountFilter.homeAccountId)) {\n                // Don't parse value if the key doesn't match the account filters\n                return;\n            }\n\n            const entity: AccountEntity | null = this.getAccount(\n                cacheKey,\n                this.commonLogger\n            );\n\n            // Match base account fields\n\n            if (!entity) {\n                return;\n            }\n\n            if (\n                !!accountFilter.homeAccountId &&\n                !this.matchHomeAccountId(entity, accountFilter.homeAccountId)\n            ) {\n                return;\n            }\n\n            if (\n                !!accountFilter.username &&\n                !this.matchUsername(entity.username, accountFilter.username)\n            ) {\n                return;\n            }\n\n            if (\n                !!accountFilter.environment &&\n                !this.matchEnvironment(entity, accountFilter.environment)\n            ) {\n                return;\n            }\n\n            if (\n                !!accountFilter.realm &&\n                !this.matchRealm(entity, accountFilter.realm)\n            ) {\n                return;\n            }\n\n            if (\n                !!accountFilter.nativeAccountId &&\n                !this.matchNativeAccountId(\n                    entity,\n                    accountFilter.nativeAccountId\n                )\n            ) {\n                return;\n            }\n\n            if (\n                !!accountFilter.authorityType &&\n                !this.matchAuthorityType(entity, accountFilter.authorityType)\n            ) {\n                return;\n            }\n\n            // If at least one tenant profile matches the tenant profile filter, add the account to the list of matching accounts\n            const tenantProfileFilter: TenantProfileFilter = {\n                localAccountId: accountFilter?.localAccountId,\n                name: accountFilter?.name,\n            };\n\n            const matchingTenantProfiles = entity.tenantProfiles?.filter(\n                (tenantProfile: TenantProfile) => {\n                    return this.tenantProfileMatchesFilter(\n                        tenantProfile,\n                        tenantProfileFilter\n                    );\n                }\n            );\n\n            if (matchingTenantProfiles && matchingTenantProfiles.length === 0) {\n                // No tenant profile for this account matches filter, don't add to list of matching accounts\n                return;\n            }\n\n            matchingAccounts.push(entity);\n        });\n\n        return matchingAccounts;\n    }\n\n    /**\n     * Returns true if the given key matches our account key schema. Also matches homeAccountId and/or tenantId if provided\n     * @param key\n     * @param homeAccountId\n     * @param tenantId\n     * @returns\n     */\n    isAccountKey(\n        key: string,\n        homeAccountId?: string,\n        tenantId?: string\n    ): boolean {\n        if (key.split(Separators.CACHE_KEY_SEPARATOR).length < 3) {\n            // Account cache keys contain 3 items separated by '-' (each item may also contain '-')\n            return false;\n        }\n\n        if (\n            homeAccountId &&\n            !key.toLowerCase().includes(homeAccountId.toLowerCase())\n        ) {\n            return false;\n        }\n\n        if (tenantId && !key.toLowerCase().includes(tenantId.toLowerCase())) {\n            return false;\n        }\n\n        // Do not check environment as aliasing can cause false negatives\n\n        return true;\n    }\n\n    /**\n     * Returns true if the given key matches our credential key schema.\n     * @param key\n     */\n    isCredentialKey(key: string): boolean {\n        if (key.split(Separators.CACHE_KEY_SEPARATOR).length < 6) {\n            // Credential cache keys contain 6 items separated by '-' (each item may also contain '-')\n            return false;\n        }\n\n        const lowerCaseKey = key.toLowerCase();\n        // Credential keys must indicate what credential type they represent\n        if (\n            lowerCaseKey.indexOf(CredentialType.ID_TOKEN.toLowerCase()) ===\n                -1 &&\n            lowerCaseKey.indexOf(CredentialType.ACCESS_TOKEN.toLowerCase()) ===\n                -1 &&\n            lowerCaseKey.indexOf(\n                CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()\n            ) === -1 &&\n            lowerCaseKey.indexOf(CredentialType.REFRESH_TOKEN.toLowerCase()) ===\n                -1\n        ) {\n            return false;\n        }\n\n        if (\n            lowerCaseKey.indexOf(CredentialType.REFRESH_TOKEN.toLowerCase()) >\n            -1\n        ) {\n            // Refresh tokens must contain the client id or family id\n            const clientIdValidation = `${CredentialType.REFRESH_TOKEN}${Separators.CACHE_KEY_SEPARATOR}${this.clientId}${Separators.CACHE_KEY_SEPARATOR}`;\n            const familyIdValidation = `${CredentialType.REFRESH_TOKEN}${Separators.CACHE_KEY_SEPARATOR}${THE_FAMILY_ID}${Separators.CACHE_KEY_SEPARATOR}`;\n            if (\n                lowerCaseKey.indexOf(clientIdValidation.toLowerCase()) === -1 &&\n                lowerCaseKey.indexOf(familyIdValidation.toLowerCase()) === -1\n            ) {\n                return false;\n            }\n        } else if (lowerCaseKey.indexOf(this.clientId.toLowerCase()) === -1) {\n            // Tokens must contain the clientId\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Returns whether or not the given credential entity matches the filter\n     * @param entity\n     * @param filter\n     * @returns\n     */\n    credentialMatchesFilter(\n        entity: ValidCredentialType,\n        filter: CredentialFilter\n    ): boolean {\n        if (!!filter.clientId && !this.matchClientId(entity, filter.clientId)) {\n            return false;\n        }\n\n        if (\n            !!filter.userAssertionHash &&\n            !this.matchUserAssertionHash(entity, filter.userAssertionHash)\n        ) {\n            return false;\n        }\n\n        /*\n         * homeAccountId can be undefined, and we want to filter out cached items that have a homeAccountId of \"\"\n         * because we don't want a client_credential request to return a cached token that has a homeAccountId\n         */\n        if (\n            typeof filter.homeAccountId === \"string\" &&\n            !this.matchHomeAccountId(entity, filter.homeAccountId)\n        ) {\n            return false;\n        }\n\n        if (\n            !!filter.environment &&\n            !this.matchEnvironment(entity, filter.environment)\n        ) {\n            return false;\n        }\n\n        if (!!filter.realm && !this.matchRealm(entity, filter.realm)) {\n            return false;\n        }\n\n        if (\n            !!filter.credentialType &&\n            !this.matchCredentialType(entity, filter.credentialType)\n        ) {\n            return false;\n        }\n\n        if (!!filter.familyId && !this.matchFamilyId(entity, filter.familyId)) {\n            return false;\n        }\n\n        /*\n         * idTokens do not have \"target\", target specific refreshTokens do exist for some types of authentication\n         * Resource specific refresh tokens case will be added when the support is deemed necessary\n         */\n        if (!!filter.target && !this.matchTarget(entity, filter.target)) {\n            return false;\n        }\n\n        // If request OR cached entity has requested Claims Hash, check if they match\n        if (filter.requestedClaimsHash || entity.requestedClaimsHash) {\n            // Don't match if either is undefined or they are different\n            if (entity.requestedClaimsHash !== filter.requestedClaimsHash) {\n                return false;\n            }\n        }\n\n        // Access Token with Auth Scheme specific matching\n        if (\n            entity.credentialType ===\n            CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME\n        ) {\n            if (\n                !!filter.tokenType &&\n                !this.matchTokenType(entity, filter.tokenType)\n            ) {\n                return false;\n            }\n\n            // KeyId (sshKid) in request must match cached SSH certificate keyId because SSH cert is bound to a specific key\n            if (filter.tokenType === AuthenticationScheme.SSH) {\n                if (filter.keyId && !this.matchKeyId(entity, filter.keyId)) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * retrieve appMetadata matching all provided filters; if no filter is set, get all appMetadata\n     * @param filter\n     */\n    getAppMetadataFilteredBy(filter: AppMetadataFilter): AppMetadataCache {\n        const allCacheKeys = this.getKeys();\n        const matchingAppMetadata: AppMetadataCache = {};\n\n        allCacheKeys.forEach((cacheKey) => {\n            // don't parse any non-appMetadata type cache entities\n            if (!this.isAppMetadata(cacheKey)) {\n                return;\n            }\n\n            // Attempt retrieval\n            const entity = this.getAppMetadata(cacheKey);\n\n            if (!entity) {\n                return;\n            }\n\n            if (\n                !!filter.environment &&\n                !this.matchEnvironment(entity, filter.environment)\n            ) {\n                return;\n            }\n\n            if (\n                !!filter.clientId &&\n                !this.matchClientId(entity, filter.clientId)\n            ) {\n                return;\n            }\n\n            matchingAppMetadata[cacheKey] = entity;\n        });\n\n        return matchingAppMetadata;\n    }\n\n    /**\n     * retrieve authorityMetadata that contains a matching alias\n     * @param filter\n     */\n    getAuthorityMetadataByAlias(host: string): AuthorityMetadataEntity | null {\n        const allCacheKeys = this.getAuthorityMetadataKeys();\n        let matchedEntity = null;\n\n        allCacheKeys.forEach((cacheKey) => {\n            // don't parse any non-authorityMetadata type cache entities\n            if (\n                !this.isAuthorityMetadata(cacheKey) ||\n                cacheKey.indexOf(this.clientId) === -1\n            ) {\n                return;\n            }\n\n            // Attempt retrieval\n            const entity = this.getAuthorityMetadata(cacheKey);\n\n            if (!entity) {\n                return;\n            }\n\n            if (entity.aliases.indexOf(host) === -1) {\n                return;\n            }\n\n            matchedEntity = entity;\n        });\n\n        return matchedEntity;\n    }\n\n    /**\n     * Removes all accounts and related tokens from cache.\n     */\n    async removeAllAccounts(): Promise<void> {\n        const allAccountKeys = this.getAccountKeys();\n        const removedAccounts: Array<Promise<void>> = [];\n\n        allAccountKeys.forEach((cacheKey) => {\n            removedAccounts.push(this.removeAccount(cacheKey));\n        });\n\n        await Promise.all(removedAccounts);\n    }\n\n    /**\n     * Removes the account and related tokens for a given account key\n     * @param account\n     */\n    async removeAccount(accountKey: string): Promise<void> {\n        const account = this.getAccount(accountKey, this.commonLogger);\n        if (!account) {\n            return;\n        }\n        await this.removeAccountContext(account);\n        this.removeItem(accountKey);\n    }\n\n    /**\n     * Removes credentials associated with the provided account\n     * @param account\n     */\n    async removeAccountContext(account: AccountEntity): Promise<void> {\n        const allTokenKeys = this.getTokenKeys();\n        const accountId = account.generateAccountId();\n        const removedCredentials: Array<Promise<void>> = [];\n\n        allTokenKeys.idToken.forEach((key) => {\n            if (key.indexOf(accountId) === 0) {\n                this.removeIdToken(key);\n            }\n        });\n\n        allTokenKeys.accessToken.forEach((key) => {\n            if (key.indexOf(accountId) === 0) {\n                removedCredentials.push(this.removeAccessToken(key));\n            }\n        });\n\n        allTokenKeys.refreshToken.forEach((key) => {\n            if (key.indexOf(accountId) === 0) {\n                this.removeRefreshToken(key);\n            }\n        });\n\n        await Promise.all(removedCredentials);\n    }\n\n    /**\n     * Migrates a single-tenant account and all it's associated alternate cross-tenant account objects in the\n     * cache into a condensed multi-tenant account object with tenant profiles.\n     * @param accountKey\n     * @param accountEntity\n     * @param logger\n     * @returns\n     */\n    protected updateOutdatedCachedAccount(\n        accountKey: string,\n        accountEntity: AccountEntity | null,\n        logger?: Logger\n    ): AccountEntity | null {\n        // Only update if account entity is defined and has no tenantProfiles object (is outdated)\n        if (accountEntity && accountEntity.isSingleTenant()) {\n            this.commonLogger?.verbose(\n                \"updateOutdatedCachedAccount: Found a single-tenant (outdated) account entity in the cache, migrating to multi-tenant account entity\"\n            );\n\n            // Get keys of all accounts belonging to user\n            const matchingAccountKeys = this.getAccountKeys().filter(\n                (key: string) => {\n                    return key.startsWith(accountEntity.homeAccountId);\n                }\n            );\n\n            // Get all account entities belonging to user\n            const accountsToMerge: AccountEntity[] = [];\n            matchingAccountKeys.forEach((key: string) => {\n                const account = this.getCachedAccountEntity(key);\n                if (account) {\n                    accountsToMerge.push(account);\n                }\n            });\n\n            // Set base account to home account if available, any account if not\n            const baseAccount =\n                accountsToMerge.find((account) => {\n                    return tenantIdMatchesHomeTenant(\n                        account.realm,\n                        account.homeAccountId\n                    );\n                }) || accountsToMerge[0];\n\n            // Populate tenant profiles built from each account entity belonging to the user\n            baseAccount.tenantProfiles = accountsToMerge.map(\n                (account: AccountEntity) => {\n                    return {\n                        tenantId: account.realm,\n                        localAccountId: account.localAccountId,\n                        name: account.name,\n                        isHomeTenant: tenantIdMatchesHomeTenant(\n                            account.realm,\n                            account.homeAccountId\n                        ),\n                    };\n                }\n            );\n\n            const updatedAccount = CacheManager.toObject(new AccountEntity(), {\n                ...baseAccount,\n            });\n\n            const newAccountKey = updatedAccount.generateAccountKey();\n\n            // Clear cache of legacy account objects that have been collpsed into tenant profiles\n            matchingAccountKeys.forEach((key: string) => {\n                if (key !== newAccountKey) {\n                    this.removeOutdatedAccount(accountKey);\n                }\n            });\n\n            // Cache updated account object\n            this.setAccount(updatedAccount);\n            logger?.verbose(\"Updated an outdated account entity in the cache\");\n            return updatedAccount;\n        }\n\n        // No update is necessary\n        return accountEntity;\n    }\n\n    /**\n     * returns a boolean if the given credential is removed\n     * @param credential\n     */\n    async removeAccessToken(key: string): Promise<void> {\n        const credential = this.getAccessTokenCredential(key);\n        if (!credential) {\n            return;\n        }\n\n        // Remove Token Binding Key from key store for PoP Tokens Credentials\n        if (\n            credential.credentialType.toLowerCase() ===\n            CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()\n        ) {\n            if (credential.tokenType === AuthenticationScheme.POP) {\n                const accessTokenWithAuthSchemeEntity =\n                    credential as AccessTokenEntity;\n                const kid = accessTokenWithAuthSchemeEntity.keyId;\n\n                if (kid) {\n                    try {\n                        await this.cryptoImpl.removeTokenBindingKey(kid);\n                    } catch (error) {\n                        throw createClientAuthError(\n                            ClientAuthErrorCodes.bindingKeyNotRemoved\n                        );\n                    }\n                }\n            }\n        }\n\n        return this.removeItem(key);\n    }\n\n    /**\n     * Removes all app metadata objects from cache.\n     */\n    removeAppMetadata(): boolean {\n        const allCacheKeys = this.getKeys();\n        allCacheKeys.forEach((cacheKey) => {\n            if (this.isAppMetadata(cacheKey)) {\n                this.removeItem(cacheKey);\n            }\n        });\n\n        return true;\n    }\n\n    /**\n     * Retrieve AccountEntity from cache\n     * @param account\n     */\n    readAccountFromCache(account: AccountInfo): AccountEntity | null {\n        const accountKey: string =\n            AccountEntity.generateAccountCacheKey(account);\n        return this.getAccount(accountKey, this.commonLogger);\n    }\n\n    /**\n     * Retrieve IdTokenEntity from cache\n     * @param account {AccountInfo}\n     * @param tokenKeys {?TokenKeys}\n     * @param targetRealm {?string}\n     * @param performanceClient {?IPerformanceClient}\n     * @param correlationId {?string}\n     */\n    getIdToken(\n        account: AccountInfo,\n        tokenKeys?: TokenKeys,\n        targetRealm?: string,\n        performanceClient?: IPerformanceClient,\n        correlationId?: string\n    ): IdTokenEntity | null {\n        this.commonLogger.trace(\"CacheManager - getIdToken called\");\n        const idTokenFilter: CredentialFilter = {\n            homeAccountId: account.homeAccountId,\n            environment: account.environment,\n            credentialType: CredentialType.ID_TOKEN,\n            clientId: this.clientId,\n            realm: targetRealm,\n        };\n\n        const idTokenMap: Map<string, IdTokenEntity> = this.getIdTokensByFilter(\n            idTokenFilter,\n            tokenKeys\n        );\n\n        const numIdTokens = idTokenMap.size;\n\n        if (numIdTokens < 1) {\n            this.commonLogger.info(\"CacheManager:getIdToken - No token found\");\n            return null;\n        } else if (numIdTokens > 1) {\n            let tokensToBeRemoved: Map<string, IdTokenEntity> = idTokenMap;\n            // Multiple tenant profiles and no tenant specified, pick home account\n            if (!targetRealm) {\n                const homeIdTokenMap: Map<string, IdTokenEntity> = new Map<\n                    string,\n                    IdTokenEntity\n                >();\n                idTokenMap.forEach((idToken, key) => {\n                    if (idToken.realm === account.tenantId) {\n                        homeIdTokenMap.set(key, idToken);\n                    }\n                });\n                const numHomeIdTokens = homeIdTokenMap.size;\n                if (numHomeIdTokens < 1) {\n                    this.commonLogger.info(\n                        \"CacheManager:getIdToken - Multiple ID tokens found for account but none match account entity tenant id, returning first result\"\n                    );\n                    return idTokenMap.values().next().value;\n                } else if (numHomeIdTokens === 1) {\n                    this.commonLogger.info(\n                        \"CacheManager:getIdToken - Multiple ID tokens found for account, defaulting to home tenant profile\"\n                    );\n                    return homeIdTokenMap.values().next().value;\n                } else {\n                    // Multiple ID tokens for home tenant profile, remove all and return null\n                    tokensToBeRemoved = homeIdTokenMap;\n                }\n            }\n            // Multiple tokens for a single tenant profile, remove all and return null\n            this.commonLogger.info(\n                \"CacheManager:getIdToken - Multiple matching ID tokens found, clearing them\"\n            );\n            tokensToBeRemoved.forEach((idToken, key) => {\n                this.removeIdToken(key);\n            });\n            if (performanceClient && correlationId) {\n                performanceClient.addFields(\n                    { multiMatchedID: idTokenMap.size },\n                    correlationId\n                );\n            }\n            return null;\n        }\n\n        this.commonLogger.info(\"CacheManager:getIdToken - Returning ID token\");\n        return idTokenMap.values().next().value;\n    }\n\n    /**\n     * Gets all idTokens matching the given filter\n     * @param filter\n     * @returns\n     */\n    getIdTokensByFilter(\n        filter: CredentialFilter,\n        tokenKeys?: TokenKeys\n    ): Map<string, IdTokenEntity> {\n        const idTokenKeys =\n            (tokenKeys && tokenKeys.idToken) || this.getTokenKeys().idToken;\n\n        const idTokens: Map<string, IdTokenEntity> = new Map<\n            string,\n            IdTokenEntity\n        >();\n        idTokenKeys.forEach((key) => {\n            if (\n                !this.idTokenKeyMatchesFilter(key, {\n                    clientId: this.clientId,\n                    ...filter,\n                })\n            ) {\n                return;\n            }\n            const idToken = this.getIdTokenCredential(key);\n            if (idToken && this.credentialMatchesFilter(idToken, filter)) {\n                idTokens.set(key, idToken);\n            }\n        });\n\n        return idTokens;\n    }\n\n    /**\n     * Validate the cache key against filter before retrieving and parsing cache value\n     * @param key\n     * @param filter\n     * @returns\n     */\n    idTokenKeyMatchesFilter(\n        inputKey: string,\n        filter: CredentialFilter\n    ): boolean {\n        const key = inputKey.toLowerCase();\n        if (\n            filter.clientId &&\n            key.indexOf(filter.clientId.toLowerCase()) === -1\n        ) {\n            return false;\n        }\n\n        if (\n            filter.homeAccountId &&\n            key.indexOf(filter.homeAccountId.toLowerCase()) === -1\n        ) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Removes idToken from the cache\n     * @param key\n     */\n    removeIdToken(key: string): void {\n        this.removeItem(key);\n    }\n\n    /**\n     * Removes refresh token from the cache\n     * @param key\n     */\n    removeRefreshToken(key: string): void {\n        this.removeItem(key);\n    }\n\n    /**\n     * Retrieve AccessTokenEntity from cache\n     * @param account {AccountInfo}\n     * @param request {BaseAuthRequest}\n     * @param tokenKeys {?TokenKeys}\n     * @param performanceClient {?IPerformanceClient}\n     * @param correlationId {?string}\n     */\n    getAccessToken(\n        account: AccountInfo,\n        request: BaseAuthRequest,\n        tokenKeys?: TokenKeys,\n        targetRealm?: string,\n        performanceClient?: IPerformanceClient,\n        correlationId?: string\n    ): AccessTokenEntity | null {\n        this.commonLogger.trace(\"CacheManager - getAccessToken called\");\n        const scopes = ScopeSet.createSearchScopes(request.scopes);\n        const authScheme =\n            request.authenticationScheme || AuthenticationScheme.BEARER;\n        /*\n         * Distinguish between Bearer and PoP/SSH token cache types\n         * Cast to lowercase to handle \"bearer\" from ADFS\n         */\n        const credentialType =\n            authScheme &&\n            authScheme.toLowerCase() !==\n                AuthenticationScheme.BEARER.toLowerCase()\n                ? CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME\n                : CredentialType.ACCESS_TOKEN;\n\n        const accessTokenFilter: CredentialFilter = {\n            homeAccountId: account.homeAccountId,\n            environment: account.environment,\n            credentialType: credentialType,\n            clientId: this.clientId,\n            realm: targetRealm || account.tenantId,\n            target: scopes,\n            tokenType: authScheme,\n            keyId: request.sshKid,\n            requestedClaimsHash: request.requestedClaimsHash,\n        };\n\n        const accessTokenKeys =\n            (tokenKeys && tokenKeys.accessToken) ||\n            this.getTokenKeys().accessToken;\n        const accessTokens: AccessTokenEntity[] = [];\n\n        accessTokenKeys.forEach((key) => {\n            // Validate key\n            if (\n                this.accessTokenKeyMatchesFilter(key, accessTokenFilter, true)\n            ) {\n                const accessToken = this.getAccessTokenCredential(key);\n\n                // Validate value\n                if (\n                    accessToken &&\n                    this.credentialMatchesFilter(accessToken, accessTokenFilter)\n                ) {\n                    accessTokens.push(accessToken);\n                }\n            }\n        });\n\n        const numAccessTokens = accessTokens.length;\n        if (numAccessTokens < 1) {\n            this.commonLogger.info(\n                \"CacheManager:getAccessToken - No token found\"\n            );\n            return null;\n        } else if (numAccessTokens > 1) {\n            this.commonLogger.info(\n                \"CacheManager:getAccessToken - Multiple access tokens found, clearing them\"\n            );\n            accessTokens.forEach((accessToken) => {\n                void this.removeAccessToken(generateCredentialKey(accessToken));\n            });\n            if (performanceClient && correlationId) {\n                performanceClient.addFields(\n                    { multiMatchedAT: accessTokens.length },\n                    correlationId\n                );\n            }\n            return null;\n        }\n\n        this.commonLogger.info(\n            \"CacheManager:getAccessToken - Returning access token\"\n        );\n        return accessTokens[0];\n    }\n\n    /**\n     * Validate the cache key against filter before retrieving and parsing cache value\n     * @param key\n     * @param filter\n     * @param keyMustContainAllScopes\n     * @returns\n     */\n    accessTokenKeyMatchesFilter(\n        inputKey: string,\n        filter: CredentialFilter,\n        keyMustContainAllScopes: boolean\n    ): boolean {\n        const key = inputKey.toLowerCase();\n        if (\n            filter.clientId &&\n            key.indexOf(filter.clientId.toLowerCase()) === -1\n        ) {\n            return false;\n        }\n\n        if (\n            filter.homeAccountId &&\n            key.indexOf(filter.homeAccountId.toLowerCase()) === -1\n        ) {\n            return false;\n        }\n\n        if (filter.realm && key.indexOf(filter.realm.toLowerCase()) === -1) {\n            return false;\n        }\n\n        if (\n            filter.requestedClaimsHash &&\n            key.indexOf(filter.requestedClaimsHash.toLowerCase()) === -1\n        ) {\n            return false;\n        }\n\n        if (filter.target) {\n            const scopes = filter.target.asArray();\n            for (let i = 0; i < scopes.length; i++) {\n                if (\n                    keyMustContainAllScopes &&\n                    !key.includes(scopes[i].toLowerCase())\n                ) {\n                    // When performing a cache lookup a missing scope would be a cache miss\n                    return false;\n                } else if (\n                    !keyMustContainAllScopes &&\n                    key.includes(scopes[i].toLowerCase())\n                ) {\n                    // When performing a cache write, any token with a subset of requested scopes should be replaced\n                    return true;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Gets all access tokens matching the filter\n     * @param filter\n     * @returns\n     */\n    getAccessTokensByFilter(filter: CredentialFilter): AccessTokenEntity[] {\n        const tokenKeys = this.getTokenKeys();\n\n        const accessTokens: AccessTokenEntity[] = [];\n        tokenKeys.accessToken.forEach((key) => {\n            if (!this.accessTokenKeyMatchesFilter(key, filter, true)) {\n                return;\n            }\n\n            const accessToken = this.getAccessTokenCredential(key);\n            if (\n                accessToken &&\n                this.credentialMatchesFilter(accessToken, filter)\n            ) {\n                accessTokens.push(accessToken);\n            }\n        });\n\n        return accessTokens;\n    }\n\n    /**\n     * Helper to retrieve the appropriate refresh token from cache\n     * @param account {AccountInfo}\n     * @param familyRT {boolean}\n     * @param tokenKeys {?TokenKeys}\n     * @param performanceClient {?IPerformanceClient}\n     * @param correlationId {?string}\n     */\n    getRefreshToken(\n        account: AccountInfo,\n        familyRT: boolean,\n        tokenKeys?: TokenKeys,\n        performanceClient?: IPerformanceClient,\n        correlationId?: string\n    ): RefreshTokenEntity | null {\n        this.commonLogger.trace(\"CacheManager - getRefreshToken called\");\n        const id = familyRT ? THE_FAMILY_ID : undefined;\n        const refreshTokenFilter: CredentialFilter = {\n            homeAccountId: account.homeAccountId,\n            environment: account.environment,\n            credentialType: CredentialType.REFRESH_TOKEN,\n            clientId: this.clientId,\n            familyId: id,\n        };\n\n        const refreshTokenKeys =\n            (tokenKeys && tokenKeys.refreshToken) ||\n            this.getTokenKeys().refreshToken;\n        const refreshTokens: RefreshTokenEntity[] = [];\n\n        refreshTokenKeys.forEach((key) => {\n            // Validate key\n            if (this.refreshTokenKeyMatchesFilter(key, refreshTokenFilter)) {\n                const refreshToken = this.getRefreshTokenCredential(key);\n                // Validate value\n                if (\n                    refreshToken &&\n                    this.credentialMatchesFilter(\n                        refreshToken,\n                        refreshTokenFilter\n                    )\n                ) {\n                    refreshTokens.push(refreshToken);\n                }\n            }\n        });\n\n        const numRefreshTokens = refreshTokens.length;\n        if (numRefreshTokens < 1) {\n            this.commonLogger.info(\n                \"CacheManager:getRefreshToken - No refresh token found.\"\n            );\n            return null;\n        }\n        // address the else case after remove functions address environment aliases\n\n        if (numRefreshTokens > 1 && performanceClient && correlationId) {\n            performanceClient.addFields(\n                { multiMatchedRT: numRefreshTokens },\n                correlationId\n            );\n        }\n\n        this.commonLogger.info(\n            \"CacheManager:getRefreshToken - returning refresh token\"\n        );\n        return refreshTokens[0] as RefreshTokenEntity;\n    }\n\n    /**\n     * Validate the cache key against filter before retrieving and parsing cache value\n     * @param key\n     * @param filter\n     */\n    refreshTokenKeyMatchesFilter(\n        inputKey: string,\n        filter: CredentialFilter\n    ): boolean {\n        const key = inputKey.toLowerCase();\n        if (\n            filter.familyId &&\n            key.indexOf(filter.familyId.toLowerCase()) === -1\n        ) {\n            return false;\n        }\n\n        // If familyId is used, clientId is not in the key\n        if (\n            !filter.familyId &&\n            filter.clientId &&\n            key.indexOf(filter.clientId.toLowerCase()) === -1\n        ) {\n            return false;\n        }\n\n        if (\n            filter.homeAccountId &&\n            key.indexOf(filter.homeAccountId.toLowerCase()) === -1\n        ) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Retrieve AppMetadataEntity from cache\n     */\n    readAppMetadataFromCache(environment: string): AppMetadataEntity | null {\n        const appMetadataFilter: AppMetadataFilter = {\n            environment,\n            clientId: this.clientId,\n        };\n\n        const appMetadata: AppMetadataCache =\n            this.getAppMetadataFilteredBy(appMetadataFilter);\n        const appMetadataEntries: AppMetadataEntity[] = Object.keys(\n            appMetadata\n        ).map((key) => appMetadata[key]);\n\n        const numAppMetadata = appMetadataEntries.length;\n        if (numAppMetadata < 1) {\n            return null;\n        } else if (numAppMetadata > 1) {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.multipleMatchingAppMetadata\n            );\n        }\n\n        return appMetadataEntries[0] as AppMetadataEntity;\n    }\n\n    /**\n     * Return the family_id value associated  with FOCI\n     * @param environment\n     * @param clientId\n     */\n    isAppMetadataFOCI(environment: string): boolean {\n        const appMetadata = this.readAppMetadataFromCache(environment);\n        return !!(appMetadata && appMetadata.familyId === THE_FAMILY_ID);\n    }\n\n    /**\n     * helper to match account ids\n     * @param value\n     * @param homeAccountId\n     */\n    private matchHomeAccountId(\n        entity: AccountEntity | CredentialEntity,\n        homeAccountId: string\n    ): boolean {\n        return !!(\n            typeof entity.homeAccountId === \"string\" &&\n            homeAccountId === entity.homeAccountId\n        );\n    }\n\n    /**\n     * helper to match account ids\n     * @param entity\n     * @param localAccountId\n     * @returns\n     */\n    private matchLocalAccountIdFromTokenClaims(\n        tokenClaims: TokenClaims,\n        localAccountId: string\n    ): boolean {\n        const idTokenLocalAccountId = tokenClaims.oid || tokenClaims.sub;\n        return localAccountId === idTokenLocalAccountId;\n    }\n\n    private matchLocalAccountIdFromTenantProfile(\n        tenantProfile: TenantProfile,\n        localAccountId: string\n    ): boolean {\n        return tenantProfile.localAccountId === localAccountId;\n    }\n\n    /**\n     * helper to match names\n     * @param entity\n     * @param name\n     * @returns true if the downcased name properties are present and match in the filter and the entity\n     */\n    private matchName(claims: TokenClaims, name: string): boolean {\n        return !!(name.toLowerCase() === claims.name?.toLowerCase());\n    }\n\n    /**\n     * helper to match usernames\n     * @param entity\n     * @param username\n     * @returns\n     */\n    private matchUsername(\n        cachedUsername?: string,\n        filterUsername?: string\n    ): boolean {\n        return !!(\n            cachedUsername &&\n            typeof cachedUsername === \"string\" &&\n            filterUsername?.toLowerCase() === cachedUsername.toLowerCase()\n        );\n    }\n\n    /**\n     * helper to match assertion\n     * @param value\n     * @param oboAssertion\n     */\n    private matchUserAssertionHash(\n        entity: CredentialEntity,\n        userAssertionHash: string\n    ): boolean {\n        return !!(\n            entity.userAssertionHash &&\n            userAssertionHash === entity.userAssertionHash\n        );\n    }\n\n    /**\n     * helper to match environment\n     * @param value\n     * @param environment\n     */\n    private matchEnvironment(\n        entity: AccountEntity | CredentialEntity | AppMetadataEntity,\n        environment: string\n    ): boolean {\n        // Check static authority options first for cases where authority metadata has not been resolved and cached yet\n        if (this.staticAuthorityOptions) {\n            const staticAliases = getAliasesFromStaticSources(\n                this.staticAuthorityOptions,\n                this.commonLogger\n            );\n            if (\n                staticAliases.includes(environment) &&\n                staticAliases.includes(entity.environment)\n            ) {\n                return true;\n            }\n        }\n\n        // Query metadata cache if no static authority configuration has aliases that match enviroment\n        const cloudMetadata = this.getAuthorityMetadataByAlias(environment);\n        if (\n            cloudMetadata &&\n            cloudMetadata.aliases.indexOf(entity.environment) > -1\n        ) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * helper to match credential type\n     * @param entity\n     * @param credentialType\n     */\n    private matchCredentialType(\n        entity: CredentialEntity,\n        credentialType: string\n    ): boolean {\n        return (\n            entity.credentialType &&\n            credentialType.toLowerCase() === entity.credentialType.toLowerCase()\n        );\n    }\n\n    /**\n     * helper to match client ids\n     * @param entity\n     * @param clientId\n     */\n    private matchClientId(\n        entity: CredentialEntity | AppMetadataEntity,\n        clientId: string\n    ): boolean {\n        return !!(entity.clientId && clientId === entity.clientId);\n    }\n\n    /**\n     * helper to match family ids\n     * @param entity\n     * @param familyId\n     */\n    private matchFamilyId(\n        entity: CredentialEntity | AppMetadataEntity,\n        familyId: string\n    ): boolean {\n        return !!(entity.familyId && familyId === entity.familyId);\n    }\n\n    /**\n     * helper to match realm\n     * @param entity\n     * @param realm\n     */\n    private matchRealm(\n        entity: AccountEntity | CredentialEntity,\n        realm: string\n    ): boolean {\n        return !!(entity.realm?.toLowerCase() === realm.toLowerCase());\n    }\n\n    /**\n     * helper to match nativeAccountId\n     * @param entity\n     * @param nativeAccountId\n     * @returns boolean indicating the match result\n     */\n    private matchNativeAccountId(\n        entity: AccountEntity,\n        nativeAccountId: string\n    ): boolean {\n        return !!(\n            entity.nativeAccountId && nativeAccountId === entity.nativeAccountId\n        );\n    }\n\n    /**\n     * helper to match loginHint which can be either:\n     * 1. login_hint ID token claim\n     * 2. username in cached account object\n     * 3. upn in ID token claims\n     * @param entity\n     * @param loginHint\n     * @returns\n     */\n    private matchLoginHintFromTokenClaims(\n        tokenClaims: TokenClaims,\n        loginHint: string\n    ): boolean {\n        if (tokenClaims.login_hint === loginHint) {\n            return true;\n        }\n\n        if (tokenClaims.preferred_username === loginHint) {\n            return true;\n        }\n\n        if (tokenClaims.upn === loginHint) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Helper to match sid\n     * @param entity\n     * @param sid\n     * @returns true if the sid claim is present and matches the filter\n     */\n    private matchSid(idTokenClaims: TokenClaims, sid: string): boolean {\n        return idTokenClaims.sid === sid;\n    }\n\n    private matchAuthorityType(\n        entity: AccountEntity,\n        authorityType: string\n    ): boolean {\n        return !!(\n            entity.authorityType &&\n            authorityType.toLowerCase() === entity.authorityType.toLowerCase()\n        );\n    }\n\n    /**\n     * Returns true if the target scopes are a subset of the current entity's scopes, false otherwise.\n     * @param entity\n     * @param target\n     */\n    private matchTarget(entity: CredentialEntity, target: ScopeSet): boolean {\n        const isNotAccessTokenCredential =\n            entity.credentialType !== CredentialType.ACCESS_TOKEN &&\n            entity.credentialType !==\n                CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\n\n        if (isNotAccessTokenCredential || !entity.target) {\n            return false;\n        }\n\n        const entityScopeSet: ScopeSet = ScopeSet.fromString(entity.target);\n\n        return entityScopeSet.containsScopeSet(target);\n    }\n\n    /**\n     * Returns true if the credential's tokenType or Authentication Scheme matches the one in the request, false otherwise\n     * @param entity\n     * @param tokenType\n     */\n    private matchTokenType(\n        entity: CredentialEntity,\n        tokenType: AuthenticationScheme\n    ): boolean {\n        return !!(entity.tokenType && entity.tokenType === tokenType);\n    }\n\n    /**\n     * Returns true if the credential's keyId matches the one in the request, false otherwise\n     * @param entity\n     * @param keyId\n     */\n    private matchKeyId(entity: CredentialEntity, keyId: string): boolean {\n        return !!(entity.keyId && entity.keyId === keyId);\n    }\n\n    /**\n     * returns if a given cache entity is of the type appmetadata\n     * @param key\n     */\n    private isAppMetadata(key: string): boolean {\n        return key.indexOf(APP_METADATA) !== -1;\n    }\n\n    /**\n     * returns if a given cache entity is of the type authoritymetadata\n     * @param key\n     */\n    protected isAuthorityMetadata(key: string): boolean {\n        return key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) !== -1;\n    }\n\n    /**\n     * returns cache key used for cloud instance metadata\n     */\n    generateAuthorityMetadataCacheKey(authority: string): string {\n        return `${AUTHORITY_METADATA_CONSTANTS.CACHE_KEY}-${this.clientId}-${authority}`;\n    }\n\n    /**\n     * Helper to convert serialized data to object\n     * @param obj\n     * @param json\n     */\n    static toObject<T>(obj: T, json: object): T {\n        for (const propertyName in json) {\n            obj[propertyName] = json[propertyName];\n        }\n        return obj;\n    }\n}\n\n/** @internal */\nexport class DefaultStorageClass extends CacheManager {\n    setAccount(): void {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    }\n    getAccount(): AccountEntity {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    }\n    getCachedAccountEntity(): AccountEntity | null {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    }\n    setIdTokenCredential(): void {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    }\n    getIdTokenCredential(): IdTokenEntity {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    }\n    setAccessTokenCredential(): void {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    }\n    getAccessTokenCredential(): AccessTokenEntity {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    }\n    setRefreshTokenCredential(): void {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    }\n    getRefreshTokenCredential(): RefreshTokenEntity {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    }\n    setAppMetadata(): void {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    }\n    getAppMetadata(): AppMetadataEntity {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    }\n    setServerTelemetry(): void {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    }\n    getServerTelemetry(): ServerTelemetryEntity {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    }\n    setAuthorityMetadata(): void {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    }\n    getAuthorityMetadata(): AuthorityMetadataEntity | null {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    }\n    getAuthorityMetadataKeys(): Array<string> {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    }\n    setThrottlingCache(): void {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    }\n    getThrottlingCache(): ThrottlingEntity {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    }\n    removeItem(): boolean {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    }\n    getKeys(): string[] {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    }\n    getAccountKeys(): string[] {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    }\n    getTokenKeys(): TokenKeys {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    }\n    async clear(): Promise<void> {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    }\n    updateCredentialCacheKey(): string {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    }\n    removeOutdatedAccount(): void {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { INetworkModule } from \"../network/INetworkModule\";\nimport { DEFAULT_CRYPTO_IMPLEMENTATION, ICrypto } from \"../crypto/ICrypto\";\nimport { ILoggerCallback, Logger, LogLevel } from \"../logger/Logger\";\nimport {\n    Constants,\n    DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,\n} from \"../utils/Constants\";\nimport { version } from \"../packageMetadata\";\nimport { Authority } from \"../authority/Authority\";\nimport { AzureCloudInstance } from \"../authority/AuthorityOptions\";\nimport { CacheManager, DefaultStorageClass } from \"../cache/CacheManager\";\nimport { ServerTelemetryManager } from \"../telemetry/server/ServerTelemetryManager\";\nimport { ICachePlugin } from \"../cache/interface/ICachePlugin\";\nimport { ISerializableTokenCache } from \"../cache/interface/ISerializableTokenCache\";\nimport { ClientCredentials } from \"../account/ClientCredentials\";\nimport { ProtocolMode } from \"../authority/ProtocolMode\";\nimport {\n    ClientAuthErrorCodes,\n    createClientAuthError,\n} from \"../error/ClientAuthError\";\n\n/**\n * Use the configuration object to configure MSAL Modules and initialize the base interfaces for MSAL.\n *\n * This object allows you to configure important elements of MSAL functionality:\n * - authOptions                - Authentication for application\n * - cryptoInterface            - Implementation of crypto functions\n * - libraryInfo                - Library metadata\n * - telemetry                  - Telemetry options and data\n * - loggerOptions              - Logging for application\n * - networkInterface           - Network implementation\n * - storageInterface           - Storage implementation\n * - systemOptions              - Additional library options\n * - clientCredentials          - Credentials options for confidential clients\n * @internal\n */\nexport type ClientConfiguration = {\n    authOptions: AuthOptions;\n    systemOptions?: SystemOptions;\n    loggerOptions?: LoggerOptions;\n    cacheOptions?: CacheOptions;\n    storageInterface?: CacheManager;\n    networkInterface?: INetworkModule;\n    cryptoInterface?: ICrypto;\n    clientCredentials?: ClientCredentials;\n    libraryInfo?: LibraryInfo;\n    telemetry?: TelemetryOptions;\n    serverTelemetryManager?: ServerTelemetryManager | null;\n    persistencePlugin?: ICachePlugin | null;\n    serializableCache?: ISerializableTokenCache | null;\n};\n\nexport type CommonClientConfiguration = {\n    authOptions: Required<AuthOptions>;\n    systemOptions: Required<SystemOptions>;\n    loggerOptions: Required<LoggerOptions>;\n    cacheOptions: Required<CacheOptions>;\n    storageInterface: CacheManager;\n    networkInterface: INetworkModule;\n    cryptoInterface: Required<ICrypto>;\n    libraryInfo: LibraryInfo;\n    telemetry: Required<TelemetryOptions>;\n    serverTelemetryManager: ServerTelemetryManager | null;\n    clientCredentials: ClientCredentials;\n    persistencePlugin: ICachePlugin | null;\n    serializableCache: ISerializableTokenCache | null;\n};\n\n/**\n * Use this to configure the auth options in the ClientConfiguration object\n *\n * - clientId                    - Client ID of your app registered with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview in Microsoft Identity Platform\n * - authority                   - You can configure a specific authority, defaults to \" \" or \"https://login.microsoftonline.com/common\"\n * - knownAuthorities            - An array of URIs that are known to be valid. Used in B2C scenarios.\n * - cloudDiscoveryMetadata      - A string containing the cloud discovery response. Used in AAD scenarios.\n * - clientCapabilities          - Array of capabilities which will be added to the claims.access_token.xms_cc request property on every network request.\n * - protocolMode                - Enum that represents the protocol that msal follows. Used for configuring proper endpoints.\n * - skipAuthorityMetadataCache      - A flag to choose whether to use or not use the local metadata cache during authority initialization. Defaults to false.\n * @internal\n */\nexport type AuthOptions = {\n    clientId: string;\n    authority: Authority;\n    clientCapabilities?: Array<string>;\n    azureCloudOptions?: AzureCloudOptions;\n    skipAuthorityMetadataCache?: boolean;\n};\n\n/**\n * Use this to configure token renewal info in the Configuration object\n *\n * - tokenRenewalOffsetSeconds    - Sets the window of offset needed to renew the token before expiry\n */\nexport type SystemOptions = {\n    tokenRenewalOffsetSeconds?: number;\n    preventCorsPreflight?: boolean;\n};\n\n/**\n *  Use this to configure the logging that MSAL does, by configuring logger options in the Configuration object\n *\n * - loggerCallback                - Callback for logger\n * - piiLoggingEnabled             - Sets whether pii logging is enabled\n * - logLevel                      - Sets the level at which logging happens\n * - correlationId                 - Sets the correlationId printed by the logger\n */\nexport type LoggerOptions = {\n    loggerCallback?: ILoggerCallback;\n    piiLoggingEnabled?: boolean;\n    logLevel?: LogLevel;\n    correlationId?: string;\n};\n\n/**\n *  Use this to configure credential cache preferences in the ClientConfiguration object\n *\n * - claimsBasedCachingEnabled   - Sets whether tokens should be cached based on the claims hash. Default is false.\n */\nexport type CacheOptions = {\n    claimsBasedCachingEnabled?: boolean;\n};\n\n/**\n * Library-specific options\n */\nexport type LibraryInfo = {\n    sku: string;\n    version: string;\n    cpu: string;\n    os: string;\n};\n\n/**\n * AzureCloudInstance specific options\n *\n * - azureCloudInstance             - string enum providing short notation for soverign and public cloud authorities\n * - tenant                         - provision to provide the tenant info\n */\nexport type AzureCloudOptions = {\n    azureCloudInstance: AzureCloudInstance;\n    tenant?: string;\n};\n\nexport type TelemetryOptions = {\n    application: ApplicationTelemetry;\n};\n\n/**\n * Telemetry information sent on request\n * - appName: Unique string name of an application\n * - appVersion: Version of the application using MSAL\n */\nexport type ApplicationTelemetry = {\n    appName: string;\n    appVersion: string;\n};\n\nexport const DEFAULT_SYSTEM_OPTIONS: Required<SystemOptions> = {\n    tokenRenewalOffsetSeconds: DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,\n    preventCorsPreflight: false,\n};\n\nconst DEFAULT_LOGGER_IMPLEMENTATION: Required<LoggerOptions> = {\n    loggerCallback: () => {\n        // allow users to not set loggerCallback\n    },\n    piiLoggingEnabled: false,\n    logLevel: LogLevel.Info,\n    correlationId: Constants.EMPTY_STRING,\n};\n\nconst DEFAULT_CACHE_OPTIONS: Required<CacheOptions> = {\n    claimsBasedCachingEnabled: false,\n};\n\nconst DEFAULT_NETWORK_IMPLEMENTATION: INetworkModule = {\n    async sendGetRequestAsync<T>(): Promise<T> {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    },\n    async sendPostRequestAsync<T>(): Promise<T> {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    },\n};\n\nconst DEFAULT_LIBRARY_INFO: LibraryInfo = {\n    sku: Constants.SKU,\n    version: version,\n    cpu: Constants.EMPTY_STRING,\n    os: Constants.EMPTY_STRING,\n};\n\nconst DEFAULT_CLIENT_CREDENTIALS: ClientCredentials = {\n    clientSecret: Constants.EMPTY_STRING,\n    clientAssertion: undefined,\n};\n\nconst DEFAULT_AZURE_CLOUD_OPTIONS: AzureCloudOptions = {\n    azureCloudInstance: AzureCloudInstance.None,\n    tenant: `${Constants.DEFAULT_COMMON_TENANT}`,\n};\n\nconst DEFAULT_TELEMETRY_OPTIONS: Required<TelemetryOptions> = {\n    application: {\n        appName: \"\",\n        appVersion: \"\",\n    },\n};\n\n/**\n * Function that sets the default options when not explicitly configured from app developer\n *\n * @param Configuration\n *\n * @returns Configuration\n */\nexport function buildClientConfiguration({\n    authOptions: userAuthOptions,\n    systemOptions: userSystemOptions,\n    loggerOptions: userLoggerOption,\n    cacheOptions: userCacheOptions,\n    storageInterface: storageImplementation,\n    networkInterface: networkImplementation,\n    cryptoInterface: cryptoImplementation,\n    clientCredentials: clientCredentials,\n    libraryInfo: libraryInfo,\n    telemetry: telemetry,\n    serverTelemetryManager: serverTelemetryManager,\n    persistencePlugin: persistencePlugin,\n    serializableCache: serializableCache,\n}: ClientConfiguration): CommonClientConfiguration {\n    const loggerOptions = {\n        ...DEFAULT_LOGGER_IMPLEMENTATION,\n        ...userLoggerOption,\n    };\n\n    return {\n        authOptions: buildAuthOptions(userAuthOptions),\n        systemOptions: { ...DEFAULT_SYSTEM_OPTIONS, ...userSystemOptions },\n        loggerOptions: loggerOptions,\n        cacheOptions: { ...DEFAULT_CACHE_OPTIONS, ...userCacheOptions },\n        storageInterface:\n            storageImplementation ||\n            new DefaultStorageClass(\n                userAuthOptions.clientId,\n                DEFAULT_CRYPTO_IMPLEMENTATION,\n                new Logger(loggerOptions)\n            ),\n        networkInterface:\n            networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,\n        cryptoInterface: cryptoImplementation || DEFAULT_CRYPTO_IMPLEMENTATION,\n        clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,\n        libraryInfo: { ...DEFAULT_LIBRARY_INFO, ...libraryInfo },\n        telemetry: { ...DEFAULT_TELEMETRY_OPTIONS, ...telemetry },\n        serverTelemetryManager: serverTelemetryManager || null,\n        persistencePlugin: persistencePlugin || null,\n        serializableCache: serializableCache || null,\n    };\n}\n\n/**\n * Construct authoptions from the client and platform passed values\n * @param authOptions\n */\nfunction buildAuthOptions(authOptions: AuthOptions): Required<AuthOptions> {\n    return {\n        clientCapabilities: [],\n        azureCloudOptions: DEFAULT_AZURE_CLOUD_OPTIONS,\n        skipAuthorityMetadataCache: false,\n        ...authOptions,\n    };\n}\n\n/**\n * Returns true if config has protocolMode set to ProtocolMode.OIDC, false otherwise\n * @param ClientConfiguration\n */\nexport function isOidcProtocolMode(config: ClientConfiguration): boolean {\n    return (\n        config.authOptions.authority.options.protocolMode === ProtocolMode.OIDC\n    );\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError } from \"./AuthError\";\n\n/**\n * Error thrown when there is an error with the server code, for example, unavailability.\n */\nexport class ServerError extends AuthError {\n    /**\n     * Server error number;\n     */\n    readonly errorNo?: string;\n\n    /**\n     * Http status number;\n     */\n    readonly status?: number;\n\n    constructor(\n        errorCode?: string,\n        errorMessage?: string,\n        subError?: string,\n        errorNo?: string,\n        status?: number\n    ) {\n        super(errorCode, errorMessage, subError);\n        this.name = \"ServerError\";\n        this.errorNo = errorNo;\n        this.status = status;\n\n        Object.setPrototypeOf(this, ServerError.prototype);\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { NetworkResponse } from \"./NetworkManager\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport {\n    HeaderNames,\n    ThrottlingConstants,\n    Constants,\n} from \"../utils/Constants\";\nimport { CacheManager } from \"../cache/CacheManager\";\nimport { ServerError } from \"../error/ServerError\";\nimport { RequestThumbprint } from \"./RequestThumbprint\";\nimport { ThrottlingEntity } from \"../cache/entities/ThrottlingEntity\";\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest\";\n\n/** @internal */\nexport class ThrottlingUtils {\n    /**\n     * Prepares a RequestThumbprint to be stored as a key.\n     * @param thumbprint\n     */\n    static generateThrottlingStorageKey(thumbprint: RequestThumbprint): string {\n        return `${ThrottlingConstants.THROTTLING_PREFIX}.${JSON.stringify(\n            thumbprint\n        )}`;\n    }\n\n    /**\n     * Performs necessary throttling checks before a network request.\n     * @param cacheManager\n     * @param thumbprint\n     */\n    static preProcess(\n        cacheManager: CacheManager,\n        thumbprint: RequestThumbprint\n    ): void {\n        const key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\n        const value = cacheManager.getThrottlingCache(key);\n\n        if (value) {\n            if (value.throttleTime < Date.now()) {\n                cacheManager.removeItem(key);\n                return;\n            }\n            throw new ServerError(\n                value.errorCodes?.join(\" \") || Constants.EMPTY_STRING,\n                value.errorMessage,\n                value.subError\n            );\n        }\n    }\n\n    /**\n     * Performs necessary throttling checks after a network request.\n     * @param cacheManager\n     * @param thumbprint\n     * @param response\n     */\n    static postProcess(\n        cacheManager: CacheManager,\n        thumbprint: RequestThumbprint,\n        response: NetworkResponse<ServerAuthorizationTokenResponse>\n    ): void {\n        if (\n            ThrottlingUtils.checkResponseStatus(response) ||\n            ThrottlingUtils.checkResponseForRetryAfter(response)\n        ) {\n            const thumbprintValue: ThrottlingEntity = {\n                throttleTime: ThrottlingUtils.calculateThrottleTime(\n                    parseInt(response.headers[HeaderNames.RETRY_AFTER])\n                ),\n                error: response.body.error,\n                errorCodes: response.body.error_codes,\n                errorMessage: response.body.error_description,\n                subError: response.body.suberror,\n            };\n            cacheManager.setThrottlingCache(\n                ThrottlingUtils.generateThrottlingStorageKey(thumbprint),\n                thumbprintValue\n            );\n        }\n    }\n\n    /**\n     * Checks a NetworkResponse object's status codes against 429 or 5xx\n     * @param response\n     */\n    static checkResponseStatus(\n        response: NetworkResponse<ServerAuthorizationTokenResponse>\n    ): boolean {\n        return (\n            response.status === 429 ||\n            (response.status >= 500 && response.status < 600)\n        );\n    }\n\n    /**\n     * Checks a NetworkResponse object's RetryAfter header\n     * @param response\n     */\n    static checkResponseForRetryAfter(\n        response: NetworkResponse<ServerAuthorizationTokenResponse>\n    ): boolean {\n        if (response.headers) {\n            return (\n                response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) &&\n                (response.status < 200 || response.status >= 300)\n            );\n        }\n        return false;\n    }\n\n    /**\n     * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\n     * @param throttleTime\n     */\n    static calculateThrottleTime(throttleTime: number): number {\n        const time = throttleTime <= 0 ? 0 : throttleTime;\n\n        const currentSeconds = Date.now() / 1000;\n        return Math.floor(\n            Math.min(\n                currentSeconds +\n                    (time || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS),\n                currentSeconds +\n                    ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS\n            ) * 1000\n        );\n    }\n\n    static removeThrottle(\n        cacheManager: CacheManager,\n        clientId: string,\n        request: BaseAuthRequest,\n        homeAccountIdentifier?: string\n    ): void {\n        const thumbprint: RequestThumbprint = {\n            clientId: clientId,\n            authority: request.authority,\n            scopes: request.scopes,\n            homeAccountIdentifier: homeAccountIdentifier,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid,\n        };\n\n        const key = this.generateThrottlingStorageKey(thumbprint);\n        cacheManager.removeItem(key);\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { INetworkModule, NetworkRequestOptions } from \"./INetworkModule\";\nimport { RequestThumbprint } from \"./RequestThumbprint\";\nimport { ThrottlingUtils } from \"./ThrottlingUtils\";\nimport { CacheManager } from \"../cache/CacheManager\";\nimport { AuthError } from \"../error/AuthError\";\nimport {\n    ClientAuthErrorCodes,\n    createClientAuthError,\n} from \"../error/ClientAuthError\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\n\nexport type NetworkResponse<T> = {\n    headers: Record<string, string>;\n    body: T;\n    status: number;\n};\n\nexport type UrlToHttpRequestOptions = {\n    protocol: string;\n    hostname: string;\n    hash: string;\n    search: string;\n    pathname: string;\n    path: string;\n    href: string;\n    port?: number;\n    auth?: string;\n};\n\n/** @internal */\nexport class NetworkManager {\n    private networkClient: INetworkModule;\n    private cacheManager: CacheManager;\n\n    constructor(networkClient: INetworkModule, cacheManager: CacheManager) {\n        this.networkClient = networkClient;\n        this.cacheManager = cacheManager;\n    }\n\n    /**\n     * Wraps sendPostRequestAsync with necessary preflight and postflight logic\n     * @param thumbprint\n     * @param tokenEndpoint\n     * @param options\n     */\n    async sendPostRequest<T extends ServerAuthorizationTokenResponse>(\n        thumbprint: RequestThumbprint,\n        tokenEndpoint: string,\n        options: NetworkRequestOptions\n    ): Promise<NetworkResponse<T>> {\n        ThrottlingUtils.preProcess(this.cacheManager, thumbprint);\n\n        let response;\n        try {\n            response = await this.networkClient.sendPostRequestAsync<T>(\n                tokenEndpoint,\n                options\n            );\n        } catch (e) {\n            if (e instanceof AuthError) {\n                throw e;\n            } else {\n                throw createClientAuthError(ClientAuthErrorCodes.networkError);\n            }\n        }\n\n        ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response);\n\n        return response;\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nexport type CcsCredential = {\n    credential: string;\n    type: CcsCredentialType;\n};\n\nexport const CcsCredentialType = {\n    HOME_ACCOUNT_ID: \"home_account_id\",\n    UPN: \"UPN\",\n} as const;\nexport type CcsCredentialType =\n    (typeof CcsCredentialType)[keyof typeof CcsCredentialType];\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    createClientConfigurationError,\n    ClientConfigurationErrorCodes,\n} from \"../error/ClientConfigurationError\";\nimport { PromptValue, CodeChallengeMethodValues } from \"../utils/Constants\";\n\n/**\n * Validates server consumable params from the \"request\" objects\n */\nexport class RequestValidator {\n    /**\n     * Utility to check if the `redirectUri` in the request is a non-null value\n     * @param redirectUri\n     */\n    static validateRedirectUri(redirectUri: string): void {\n        if (!redirectUri) {\n            throw createClientConfigurationError(\n                ClientConfigurationErrorCodes.redirectUriEmpty\n            );\n        }\n    }\n\n    /**\n     * Utility to validate prompt sent by the user in the request\n     * @param prompt\n     */\n    static validatePrompt(prompt: string): void {\n        const promptValues = [];\n\n        for (const value in PromptValue) {\n            promptValues.push(PromptValue[value]);\n        }\n\n        if (promptValues.indexOf(prompt) < 0) {\n            throw createClientConfigurationError(\n                ClientConfigurationErrorCodes.invalidPromptValue\n            );\n        }\n    }\n\n    static validateClaims(claims: string): void {\n        try {\n            JSON.parse(claims);\n        } catch (e) {\n            throw createClientConfigurationError(\n                ClientConfigurationErrorCodes.invalidClaims\n            );\n        }\n    }\n\n    /**\n     * Utility to validate code_challenge and code_challenge_method\n     * @param codeChallenge\n     * @param codeChallengeMethod\n     */\n    static validateCodeChallengeParams(\n        codeChallenge: string,\n        codeChallengeMethod: string\n    ): void {\n        if (!codeChallenge || !codeChallengeMethod) {\n            throw createClientConfigurationError(\n                ClientConfigurationErrorCodes.pkceParamsMissing\n            );\n        } else {\n            this.validateCodeChallengeMethod(codeChallengeMethod);\n        }\n    }\n\n    /**\n     * Utility to validate code_challenge_method\n     * @param codeChallengeMethod\n     */\n    static validateCodeChallengeMethod(codeChallengeMethod: string): void {\n        if (\n            [\n                CodeChallengeMethodValues.PLAIN,\n                CodeChallengeMethodValues.S256,\n            ].indexOf(codeChallengeMethod) < 0\n        ) {\n            throw createClientConfigurationError(\n                ClientConfigurationErrorCodes.invalidCodeChallengeMethod\n            );\n        }\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    Constants,\n    ResponseMode,\n    CLIENT_INFO,\n    AuthenticationScheme,\n    ClaimsRequestKeys,\n    PasswordGrantConstants,\n    OIDC_DEFAULT_SCOPES,\n    ThrottlingConstants,\n    HeaderNames,\n} from \"../utils/Constants\";\nimport * as AADServerParamKeys from \"../constants/AADServerParamKeys\";\nimport { ScopeSet } from \"./ScopeSet\";\nimport {\n    createClientConfigurationError,\n    ClientConfigurationErrorCodes,\n} from \"../error/ClientConfigurationError\";\nimport { StringDict } from \"../utils/MsalTypes\";\nimport { RequestValidator } from \"./RequestValidator\";\nimport {\n    ApplicationTelemetry,\n    LibraryInfo,\n} from \"../config/ClientConfiguration\";\nimport { ServerTelemetryManager } from \"../telemetry/server/ServerTelemetryManager\";\nimport { ClientInfo } from \"../account/ClientInfo\";\n\n/** @internal */\nexport class RequestParameterBuilder {\n    private parameters: Map<string, string>;\n\n    constructor() {\n        this.parameters = new Map<string, string>();\n    }\n\n    /**\n     * add response_type = code\n     */\n    addResponseTypeCode(): void {\n        this.parameters.set(\n            AADServerParamKeys.RESPONSE_TYPE,\n            encodeURIComponent(Constants.CODE_RESPONSE_TYPE)\n        );\n    }\n\n    /**\n     * add response_type = token id_token\n     */\n    addResponseTypeForTokenAndIdToken(): void {\n        this.parameters.set(\n            AADServerParamKeys.RESPONSE_TYPE,\n            encodeURIComponent(\n                `${Constants.TOKEN_RESPONSE_TYPE} ${Constants.ID_TOKEN_RESPONSE_TYPE}`\n            )\n        );\n    }\n\n    /**\n     * add response_mode. defaults to query.\n     * @param responseMode\n     */\n    addResponseMode(responseMode?: ResponseMode): void {\n        this.parameters.set(\n            AADServerParamKeys.RESPONSE_MODE,\n            encodeURIComponent(responseMode ? responseMode : ResponseMode.QUERY)\n        );\n    }\n\n    /**\n     * Add flag to indicate STS should attempt to use WAM if available\n     */\n    addNativeBroker(): void {\n        this.parameters.set(\n            AADServerParamKeys.NATIVE_BROKER,\n            encodeURIComponent(\"1\")\n        );\n    }\n\n    /**\n     * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\n     * @param scopeSet\n     * @param addOidcScopes\n     */\n    addScopes(\n        scopes: string[],\n        addOidcScopes: boolean = true,\n        defaultScopes: Array<string> = OIDC_DEFAULT_SCOPES\n    ): void {\n        // Always add openid to the scopes when adding OIDC scopes\n        if (\n            addOidcScopes &&\n            !defaultScopes.includes(\"openid\") &&\n            !scopes.includes(\"openid\")\n        ) {\n            defaultScopes.push(\"openid\");\n        }\n        const requestScopes = addOidcScopes\n            ? [...(scopes || []), ...defaultScopes]\n            : scopes || [];\n        const scopeSet = new ScopeSet(requestScopes);\n        this.parameters.set(\n            AADServerParamKeys.SCOPE,\n            encodeURIComponent(scopeSet.printScopes())\n        );\n    }\n\n    /**\n     * add clientId\n     * @param clientId\n     */\n    addClientId(clientId: string): void {\n        this.parameters.set(\n            AADServerParamKeys.CLIENT_ID,\n            encodeURIComponent(clientId)\n        );\n    }\n\n    /**\n     * add redirect_uri\n     * @param redirectUri\n     */\n    addRedirectUri(redirectUri: string): void {\n        RequestValidator.validateRedirectUri(redirectUri);\n        this.parameters.set(\n            AADServerParamKeys.REDIRECT_URI,\n            encodeURIComponent(redirectUri)\n        );\n    }\n\n    /**\n     * add post logout redirectUri\n     * @param redirectUri\n     */\n    addPostLogoutRedirectUri(redirectUri: string): void {\n        RequestValidator.validateRedirectUri(redirectUri);\n        this.parameters.set(\n            AADServerParamKeys.POST_LOGOUT_URI,\n            encodeURIComponent(redirectUri)\n        );\n    }\n\n    /**\n     * add id_token_hint to logout request\n     * @param idTokenHint\n     */\n    addIdTokenHint(idTokenHint: string): void {\n        this.parameters.set(\n            AADServerParamKeys.ID_TOKEN_HINT,\n            encodeURIComponent(idTokenHint)\n        );\n    }\n\n    /**\n     * add domain_hint\n     * @param domainHint\n     */\n    addDomainHint(domainHint: string): void {\n        this.parameters.set(\n            AADServerParamKeys.DOMAIN_HINT,\n            encodeURIComponent(domainHint)\n        );\n    }\n\n    /**\n     * add login_hint\n     * @param loginHint\n     */\n    addLoginHint(loginHint: string): void {\n        this.parameters.set(\n            AADServerParamKeys.LOGIN_HINT,\n            encodeURIComponent(loginHint)\n        );\n    }\n\n    /**\n     * Adds the CCS (Cache Credential Service) query parameter for login_hint\n     * @param loginHint\n     */\n    addCcsUpn(loginHint: string): void {\n        this.parameters.set(\n            HeaderNames.CCS_HEADER,\n            encodeURIComponent(`UPN:${loginHint}`)\n        );\n    }\n\n    /**\n     * Adds the CCS (Cache Credential Service) query parameter for account object\n     * @param loginHint\n     */\n    addCcsOid(clientInfo: ClientInfo): void {\n        this.parameters.set(\n            HeaderNames.CCS_HEADER,\n            encodeURIComponent(`Oid:${clientInfo.uid}@${clientInfo.utid}`)\n        );\n    }\n\n    /**\n     * add sid\n     * @param sid\n     */\n    addSid(sid: string): void {\n        this.parameters.set(AADServerParamKeys.SID, encodeURIComponent(sid));\n    }\n\n    /**\n     * add claims\n     * @param claims\n     */\n    addClaims(claims?: string, clientCapabilities?: Array<string>): void {\n        const mergedClaims = this.addClientCapabilitiesToClaims(\n            claims,\n            clientCapabilities\n        );\n        RequestValidator.validateClaims(mergedClaims);\n        this.parameters.set(\n            AADServerParamKeys.CLAIMS,\n            encodeURIComponent(mergedClaims)\n        );\n    }\n\n    /**\n     * add correlationId\n     * @param correlationId\n     */\n    addCorrelationId(correlationId: string): void {\n        this.parameters.set(\n            AADServerParamKeys.CLIENT_REQUEST_ID,\n            encodeURIComponent(correlationId)\n        );\n    }\n\n    /**\n     * add library info query params\n     * @param libraryInfo\n     */\n    addLibraryInfo(libraryInfo: LibraryInfo): void {\n        // Telemetry Info\n        this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);\n        this.parameters.set(\n            AADServerParamKeys.X_CLIENT_VER,\n            libraryInfo.version\n        );\n        if (libraryInfo.os) {\n            this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);\n        }\n        if (libraryInfo.cpu) {\n            this.parameters.set(\n                AADServerParamKeys.X_CLIENT_CPU,\n                libraryInfo.cpu\n            );\n        }\n    }\n\n    /**\n     * Add client telemetry parameters\n     * @param appTelemetry\n     */\n    addApplicationTelemetry(appTelemetry: ApplicationTelemetry): void {\n        if (appTelemetry?.appName) {\n            this.parameters.set(\n                AADServerParamKeys.X_APP_NAME,\n                appTelemetry.appName\n            );\n        }\n\n        if (appTelemetry?.appVersion) {\n            this.parameters.set(\n                AADServerParamKeys.X_APP_VER,\n                appTelemetry.appVersion\n            );\n        }\n    }\n\n    /**\n     * add prompt\n     * @param prompt\n     */\n    addPrompt(prompt: string): void {\n        RequestValidator.validatePrompt(prompt);\n        this.parameters.set(\n            `${AADServerParamKeys.PROMPT}`,\n            encodeURIComponent(prompt)\n        );\n    }\n\n    /**\n     * add state\n     * @param state\n     */\n    addState(state: string): void {\n        if (state) {\n            this.parameters.set(\n                AADServerParamKeys.STATE,\n                encodeURIComponent(state)\n            );\n        }\n    }\n\n    /**\n     * add nonce\n     * @param nonce\n     */\n    addNonce(nonce: string): void {\n        this.parameters.set(\n            AADServerParamKeys.NONCE,\n            encodeURIComponent(nonce)\n        );\n    }\n\n    /**\n     * add code_challenge and code_challenge_method\n     * - throw if either of them are not passed\n     * @param codeChallenge\n     * @param codeChallengeMethod\n     */\n    addCodeChallengeParams(\n        codeChallenge: string,\n        codeChallengeMethod: string\n    ): void {\n        RequestValidator.validateCodeChallengeParams(\n            codeChallenge,\n            codeChallengeMethod\n        );\n        if (codeChallenge && codeChallengeMethod) {\n            this.parameters.set(\n                AADServerParamKeys.CODE_CHALLENGE,\n                encodeURIComponent(codeChallenge)\n            );\n            this.parameters.set(\n                AADServerParamKeys.CODE_CHALLENGE_METHOD,\n                encodeURIComponent(codeChallengeMethod)\n            );\n        } else {\n            throw createClientConfigurationError(\n                ClientConfigurationErrorCodes.pkceParamsMissing\n            );\n        }\n    }\n\n    /**\n     * add the `authorization_code` passed by the user to exchange for a token\n     * @param code\n     */\n    addAuthorizationCode(code: string): void {\n        this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));\n    }\n\n    /**\n     * add the `authorization_code` passed by the user to exchange for a token\n     * @param code\n     */\n    addDeviceCode(code: string): void {\n        this.parameters.set(\n            AADServerParamKeys.DEVICE_CODE,\n            encodeURIComponent(code)\n        );\n    }\n\n    /**\n     * add the `refreshToken` passed by the user\n     * @param refreshToken\n     */\n    addRefreshToken(refreshToken: string): void {\n        this.parameters.set(\n            AADServerParamKeys.REFRESH_TOKEN,\n            encodeURIComponent(refreshToken)\n        );\n    }\n\n    /**\n     * add the `code_verifier` passed by the user to exchange for a token\n     * @param codeVerifier\n     */\n    addCodeVerifier(codeVerifier: string): void {\n        this.parameters.set(\n            AADServerParamKeys.CODE_VERIFIER,\n            encodeURIComponent(codeVerifier)\n        );\n    }\n\n    /**\n     * add client_secret\n     * @param clientSecret\n     */\n    addClientSecret(clientSecret: string): void {\n        this.parameters.set(\n            AADServerParamKeys.CLIENT_SECRET,\n            encodeURIComponent(clientSecret)\n        );\n    }\n\n    /**\n     * add clientAssertion for confidential client flows\n     * @param clientAssertion\n     */\n    addClientAssertion(clientAssertion: string): void {\n        if (clientAssertion) {\n            this.parameters.set(\n                AADServerParamKeys.CLIENT_ASSERTION,\n                encodeURIComponent(clientAssertion)\n            );\n        }\n    }\n\n    /**\n     * add clientAssertionType for confidential client flows\n     * @param clientAssertionType\n     */\n    addClientAssertionType(clientAssertionType: string): void {\n        if (clientAssertionType) {\n            this.parameters.set(\n                AADServerParamKeys.CLIENT_ASSERTION_TYPE,\n                encodeURIComponent(clientAssertionType)\n            );\n        }\n    }\n\n    /**\n     * add OBO assertion for confidential client flows\n     * @param clientAssertion\n     */\n    addOboAssertion(oboAssertion: string): void {\n        this.parameters.set(\n            AADServerParamKeys.OBO_ASSERTION,\n            encodeURIComponent(oboAssertion)\n        );\n    }\n\n    /**\n     * add grant type\n     * @param grantType\n     */\n    addRequestTokenUse(tokenUse: string): void {\n        this.parameters.set(\n            AADServerParamKeys.REQUESTED_TOKEN_USE,\n            encodeURIComponent(tokenUse)\n        );\n    }\n\n    /**\n     * add grant type\n     * @param grantType\n     */\n    addGrantType(grantType: string): void {\n        this.parameters.set(\n            AADServerParamKeys.GRANT_TYPE,\n            encodeURIComponent(grantType)\n        );\n    }\n\n    /**\n     * add client info\n     *\n     */\n    addClientInfo(): void {\n        this.parameters.set(CLIENT_INFO, \"1\");\n    }\n\n    /**\n     * add extraQueryParams\n     * @param eQParams\n     */\n    addExtraQueryParameters(eQParams: StringDict): void {\n        Object.entries(eQParams).forEach(([key, value]) => {\n            if (!this.parameters.has(key) && value) {\n                this.parameters.set(key, value);\n            }\n        });\n    }\n\n    addClientCapabilitiesToClaims(\n        claims?: string,\n        clientCapabilities?: Array<string>\n    ): string {\n        let mergedClaims: object;\n\n        // Parse provided claims into JSON object or initialize empty object\n        if (!claims) {\n            mergedClaims = {};\n        } else {\n            try {\n                mergedClaims = JSON.parse(claims);\n            } catch (e) {\n                throw createClientConfigurationError(\n                    ClientConfigurationErrorCodes.invalidClaims\n                );\n            }\n        }\n\n        if (clientCapabilities && clientCapabilities.length > 0) {\n            if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)) {\n                // Add access_token key to claims object\n                mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\n            }\n\n            // Add xms_cc claim with provided clientCapabilities to access_token key\n            mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][\n                ClaimsRequestKeys.XMS_CC\n            ] = {\n                values: clientCapabilities,\n            };\n        }\n\n        return JSON.stringify(mergedClaims);\n    }\n\n    /**\n     * adds `username` for Password Grant flow\n     * @param username\n     */\n    addUsername(username: string): void {\n        this.parameters.set(\n            PasswordGrantConstants.username,\n            encodeURIComponent(username)\n        );\n    }\n\n    /**\n     * adds `password` for Password Grant flow\n     * @param password\n     */\n    addPassword(password: string): void {\n        this.parameters.set(\n            PasswordGrantConstants.password,\n            encodeURIComponent(password)\n        );\n    }\n\n    /**\n     * add pop_jwk to query params\n     * @param cnfString\n     */\n    addPopToken(cnfString: string): void {\n        if (cnfString) {\n            this.parameters.set(\n                AADServerParamKeys.TOKEN_TYPE,\n                AuthenticationScheme.POP\n            );\n            this.parameters.set(\n                AADServerParamKeys.REQ_CNF,\n                encodeURIComponent(cnfString)\n            );\n        }\n    }\n\n    /**\n     * add SSH JWK and key ID to query params\n     */\n    addSshJwk(sshJwkString: string): void {\n        if (sshJwkString) {\n            this.parameters.set(\n                AADServerParamKeys.TOKEN_TYPE,\n                AuthenticationScheme.SSH\n            );\n            this.parameters.set(\n                AADServerParamKeys.REQ_CNF,\n                encodeURIComponent(sshJwkString)\n            );\n        }\n    }\n\n    /**\n     * add server telemetry fields\n     * @param serverTelemetryManager\n     */\n    addServerTelemetry(serverTelemetryManager: ServerTelemetryManager): void {\n        this.parameters.set(\n            AADServerParamKeys.X_CLIENT_CURR_TELEM,\n            serverTelemetryManager.generateCurrentRequestHeaderValue()\n        );\n        this.parameters.set(\n            AADServerParamKeys.X_CLIENT_LAST_TELEM,\n            serverTelemetryManager.generateLastRequestHeaderValue()\n        );\n    }\n\n    /**\n     * Adds parameter that indicates to the server that throttling is supported\n     */\n    addThrottling(): void {\n        this.parameters.set(\n            AADServerParamKeys.X_MS_LIB_CAPABILITY,\n            ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE\n        );\n    }\n\n    /**\n     * Adds logout_hint parameter for \"silent\" logout which prevent server account picker\n     */\n    addLogoutHint(logoutHint: string): void {\n        this.parameters.set(\n            AADServerParamKeys.LOGOUT_HINT,\n            encodeURIComponent(logoutHint)\n        );\n    }\n\n    /**\n     * Utility to create a URL from the params map\n     */\n    createQueryString(): string {\n        const queryParameterArray: Array<string> = new Array<string>();\n\n        this.parameters.forEach((value, key) => {\n            queryParameterArray.push(`${key}=${value}`);\n        });\n\n        return queryParameterArray.join(\"&\");\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    ClientConfiguration,\n    buildClientConfiguration,\n    CommonClientConfiguration,\n} from \"../config/ClientConfiguration\";\nimport { INetworkModule } from \"../network/INetworkModule\";\nimport { NetworkManager, NetworkResponse } from \"../network/NetworkManager\";\nimport { ICrypto } from \"../crypto/ICrypto\";\nimport { Authority } from \"../authority/Authority\";\nimport { Logger } from \"../logger/Logger\";\nimport { Constants, HeaderNames } from \"../utils/Constants\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { CacheManager } from \"../cache/CacheManager\";\nimport { ServerTelemetryManager } from \"../telemetry/server/ServerTelemetryManager\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { version, name } from \"../packageMetadata\";\nimport { CcsCredential, CcsCredentialType } from \"../account/CcsCredential\";\nimport { buildClientInfoFromHomeAccountId } from \"../account/ClientInfo\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest\";\nimport { createDiscoveredInstance } from \"../authority/AuthorityFactory\";\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\n\n/**\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\n * @internal\n */\nexport abstract class BaseClient {\n    // Logger object\n    public logger: Logger;\n\n    // Application config\n    protected config: CommonClientConfiguration;\n\n    // Crypto Interface\n    protected cryptoUtils: ICrypto;\n\n    // Storage Interface\n    protected cacheManager: CacheManager;\n\n    // Network Interface\n    protected networkClient: INetworkModule;\n\n    // Server Telemetry Manager\n    protected serverTelemetryManager: ServerTelemetryManager | null;\n\n    // Network Manager\n    protected networkManager: NetworkManager;\n\n    // Default authority object\n    public authority: Authority;\n\n    // Performance telemetry client\n    protected performanceClient?: IPerformanceClient;\n\n    protected constructor(\n        configuration: ClientConfiguration,\n        performanceClient?: IPerformanceClient\n    ) {\n        // Set the configuration\n        this.config = buildClientConfiguration(configuration);\n\n        // Initialize the logger\n        this.logger = new Logger(this.config.loggerOptions, name, version);\n\n        // Initialize crypto\n        this.cryptoUtils = this.config.cryptoInterface;\n\n        // Initialize storage interface\n        this.cacheManager = this.config.storageInterface;\n\n        // Set the network interface\n        this.networkClient = this.config.networkInterface;\n\n        // Set the NetworkManager\n        this.networkManager = new NetworkManager(\n            this.networkClient,\n            this.cacheManager\n        );\n\n        // Set TelemetryManager\n        this.serverTelemetryManager = this.config.serverTelemetryManager;\n\n        // set Authority\n        this.authority = this.config.authOptions.authority;\n\n        // set performance telemetry client\n        this.performanceClient = performanceClient;\n    }\n\n    /**\n     * Creates default headers for requests to token endpoint\n     */\n    protected createTokenRequestHeaders(\n        ccsCred?: CcsCredential\n    ): Record<string, string> {\n        const headers: Record<string, string> = {};\n        headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;\n        if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\n            switch (ccsCred.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(\n                            ccsCred.credential\n                        );\n                        headers[\n                            HeaderNames.CCS_HEADER\n                        ] = `Oid:${clientInfo.uid}@${clientInfo.utid}`;\n                    } catch (e) {\n                        this.logger.verbose(\n                            \"Could not parse home account ID for CCS Header: \" +\n                                e\n                        );\n                    }\n                    break;\n                case CcsCredentialType.UPN:\n                    headers[\n                        HeaderNames.CCS_HEADER\n                    ] = `UPN: ${ccsCred.credential}`;\n                    break;\n            }\n        }\n        return headers;\n    }\n\n    /**\n     * Http post to token endpoint\n     * @param tokenEndpoint\n     * @param queryString\n     * @param headers\n     * @param thumbprint\n     */\n    protected async executePostToTokenEndpoint(\n        tokenEndpoint: string,\n        queryString: string,\n        headers: Record<string, string>,\n        thumbprint: RequestThumbprint,\n        correlationId: string,\n        queuedEvent?: string\n    ): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\n        if (queuedEvent) {\n            this.performanceClient?.addQueueMeasurement(\n                queuedEvent,\n                correlationId\n            );\n        }\n\n        const response =\n            await this.networkManager.sendPostRequest<ServerAuthorizationTokenResponse>(\n                thumbprint,\n                tokenEndpoint,\n                { body: queryString, headers: headers }\n            );\n        this.performanceClient?.addFields(\n            {\n                refreshTokenSize: response.body.refresh_token?.length || 0,\n                httpVerToken:\n                    response.headers?.[HeaderNames.X_MS_HTTP_VERSION] || \"\",\n            },\n            correlationId\n        );\n\n        if (\n            this.config.serverTelemetryManager &&\n            response.status < 500 &&\n            response.status !== 429\n        ) {\n            // Telemetry data successfully logged by server, clear Telemetry cache\n            this.config.serverTelemetryManager.clearTelemetryCache();\n        }\n\n        return response;\n    }\n\n    /**\n     * Updates the authority object of the client. Endpoint discovery must be completed.\n     * @param updatedAuthority\n     */\n    async updateAuthority(\n        cloudInstanceHostname: string,\n        correlationId: string\n    ): Promise<void> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.UpdateTokenEndpointAuthority,\n            correlationId\n        );\n        const cloudInstanceAuthorityUri = `https://${cloudInstanceHostname}/${this.authority.tenant}/`;\n        const cloudInstanceAuthority = await createDiscoveredInstance(\n            cloudInstanceAuthorityUri,\n            this.networkClient,\n            this.cacheManager,\n            this.authority.options,\n            this.logger,\n            correlationId,\n            this.performanceClient\n        );\n        this.authority = cloudInstanceAuthority;\n    }\n\n    /**\n     * Creates query string for the /token request\n     * @param request\n     */\n    createTokenQueryParameters(request: BaseAuthRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        if (request.tokenQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(\n                request.tokenQueryParameters\n            );\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n// Codes defined by MSAL\nexport const noTokensFound = \"no_tokens_found\";\nexport const nativeAccountUnavailable = \"native_account_unavailable\";\nexport const refreshTokenExpired = \"refresh_token_expired\";\n\n// Codes potentially returned by server\nexport const interactionRequired = \"interaction_required\";\nexport const consentRequired = \"consent_required\";\nexport const loginRequired = \"login_required\";\nexport const badToken = \"bad_token\";\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Constants } from \"../utils/Constants\";\nimport { AuthError } from \"./AuthError\";\nimport * as InteractionRequiredAuthErrorCodes from \"./InteractionRequiredAuthErrorCodes\";\nexport { InteractionRequiredAuthErrorCodes };\n\n/**\n * InteractionRequiredServerErrorMessage contains string constants used by error codes and messages returned by the server indicating interaction is required\n */\nexport const InteractionRequiredServerErrorMessage = [\n    InteractionRequiredAuthErrorCodes.interactionRequired,\n    InteractionRequiredAuthErrorCodes.consentRequired,\n    InteractionRequiredAuthErrorCodes.loginRequired,\n    InteractionRequiredAuthErrorCodes.badToken,\n];\n\nexport const InteractionRequiredAuthSubErrorMessage = [\n    \"message_only\",\n    \"additional_action\",\n    \"basic_action\",\n    \"user_password_expired\",\n    \"consent_required\",\n    \"bad_token\",\n];\n\nconst InteractionRequiredAuthErrorMessages = {\n    [InteractionRequiredAuthErrorCodes.noTokensFound]:\n        \"No refresh token found in the cache. Please sign-in.\",\n    [InteractionRequiredAuthErrorCodes.nativeAccountUnavailable]:\n        \"The requested account is not available in the native broker. It may have been deleted or logged out. Please sign-in again using an interactive API.\",\n    [InteractionRequiredAuthErrorCodes.refreshTokenExpired]:\n        \"Refresh token has expired.\",\n    [InteractionRequiredAuthErrorCodes.badToken]:\n        \"Identity provider returned bad_token due to an expired or invalid refresh token. Please invoke an interactive API to resolve.\",\n};\n\n/**\n * Interaction required errors defined by the SDK\n * @deprecated Use InteractionRequiredAuthErrorCodes instead\n */\nexport const InteractionRequiredAuthErrorMessage = {\n    noTokensFoundError: {\n        code: InteractionRequiredAuthErrorCodes.noTokensFound,\n        desc: InteractionRequiredAuthErrorMessages[\n            InteractionRequiredAuthErrorCodes.noTokensFound\n        ],\n    },\n    native_account_unavailable: {\n        code: InteractionRequiredAuthErrorCodes.nativeAccountUnavailable,\n        desc: InteractionRequiredAuthErrorMessages[\n            InteractionRequiredAuthErrorCodes.nativeAccountUnavailable\n        ],\n    },\n    bad_token: {\n        code: InteractionRequiredAuthErrorCodes.badToken,\n        desc: InteractionRequiredAuthErrorMessages[\n            InteractionRequiredAuthErrorCodes.badToken\n        ],\n    },\n};\n\n/**\n * Error thrown when user interaction is required.\n */\nexport class InteractionRequiredAuthError extends AuthError {\n    /**\n     * The time the error occured at\n     */\n    timestamp: string;\n\n    /**\n     * TraceId associated with the error\n     */\n    traceId: string;\n\n    /**\n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/docs/claims-challenge.md\n     *\n     * A string with extra claims needed for the token request to succeed\n     * web site: redirect the user to the authorization page and set the extra claims\n     * web api: include the claims in the WWW-Authenticate header that are sent back to the client so that it knows to request a token with the extra claims\n     * desktop application or browser context: include the claims when acquiring the token interactively\n     * app to app context (client_credentials): include the claims in the AcquireTokenByClientCredential request\n     */\n    claims: string;\n\n    /**\n     * Server error number;\n     */\n    readonly errorNo?: string;\n\n    constructor(\n        errorCode?: string,\n        errorMessage?: string,\n        subError?: string,\n        timestamp?: string,\n        traceId?: string,\n        correlationId?: string,\n        claims?: string,\n        errorNo?: string\n    ) {\n        super(errorCode, errorMessage, subError);\n        Object.setPrototypeOf(this, InteractionRequiredAuthError.prototype);\n\n        this.timestamp = timestamp || Constants.EMPTY_STRING;\n        this.traceId = traceId || Constants.EMPTY_STRING;\n        this.correlationId = correlationId || Constants.EMPTY_STRING;\n        this.claims = claims || Constants.EMPTY_STRING;\n        this.name = \"InteractionRequiredAuthError\";\n        this.errorNo = errorNo;\n    }\n}\n\n/**\n * Helper function used to determine if an error thrown by the server requires interaction to resolve\n * @param errorCode\n * @param errorString\n * @param subError\n */\nexport function isInteractionRequiredError(\n    errorCode?: string,\n    errorString?: string,\n    subError?: string\n): boolean {\n    const isInteractionRequiredErrorCode =\n        !!errorCode &&\n        InteractionRequiredServerErrorMessage.indexOf(errorCode) > -1;\n    const isInteractionRequiredSubError =\n        !!subError &&\n        InteractionRequiredAuthSubErrorMessage.indexOf(subError) > -1;\n    const isInteractionRequiredErrorDesc =\n        !!errorString &&\n        InteractionRequiredServerErrorMessage.some((irErrorCode) => {\n            return errorString.indexOf(irErrorCode) > -1;\n        });\n\n    return (\n        isInteractionRequiredErrorCode ||\n        isInteractionRequiredErrorDesc ||\n        isInteractionRequiredSubError\n    );\n}\n\n/**\n * Creates an InteractionRequiredAuthError\n */\nexport function createInteractionRequiredAuthError(\n    errorCode: string\n): InteractionRequiredAuthError {\n    return new InteractionRequiredAuthError(\n        errorCode,\n        InteractionRequiredAuthErrorMessages[errorCode]\n    );\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Constants } from \"./Constants\";\nimport { ICrypto } from \"../crypto/ICrypto\";\nimport {\n    ClientAuthErrorCodes,\n    createClientAuthError,\n} from \"../error/ClientAuthError\";\n\n/**\n * Type which defines the object that is stringified, encoded and sent in the state value.\n * Contains the following:\n * - id - unique identifier for this request\n * - ts - timestamp for the time the request was made. Used to ensure that token expiration is not calculated incorrectly.\n * - platformState - string value sent from the platform.\n */\nexport type LibraryStateObject = {\n    id: string;\n    meta?: Record<string, string>;\n};\n\n/**\n * Type which defines the stringified and encoded object sent to the service in the authorize request.\n */\nexport type RequestStateObject = {\n    userRequestState: string;\n    libraryState: LibraryStateObject;\n};\n\n/**\n * Class which provides helpers for OAuth 2.0 protocol specific values\n */\nexport class ProtocolUtils {\n    /**\n     * Appends user state with random guid, or returns random guid.\n     * @param userState\n     * @param randomGuid\n     */\n    static setRequestState(\n        cryptoObj: ICrypto,\n        userState?: string,\n        meta?: Record<string, string>\n    ): string {\n        const libraryState = ProtocolUtils.generateLibraryState(\n            cryptoObj,\n            meta\n        );\n        return userState\n            ? `${libraryState}${Constants.RESOURCE_DELIM}${userState}`\n            : libraryState;\n    }\n\n    /**\n     * Generates the state value used by the common library.\n     * @param randomGuid\n     * @param cryptoObj\n     */\n    static generateLibraryState(\n        cryptoObj: ICrypto,\n        meta?: Record<string, string>\n    ): string {\n        if (!cryptoObj) {\n            throw createClientAuthError(ClientAuthErrorCodes.noCryptoObject);\n        }\n\n        // Create a state object containing a unique id and the timestamp of the request creation\n        const stateObj: LibraryStateObject = {\n            id: cryptoObj.createNewGuid(),\n        };\n\n        if (meta) {\n            stateObj.meta = meta;\n        }\n\n        const stateString = JSON.stringify(stateObj);\n\n        return cryptoObj.base64Encode(stateString);\n    }\n\n    /**\n     * Parses the state into the RequestStateObject, which contains the LibraryState info and the state passed by the user.\n     * @param state\n     * @param cryptoObj\n     */\n    static parseRequestState(\n        cryptoObj: ICrypto,\n        state: string\n    ): RequestStateObject {\n        if (!cryptoObj) {\n            throw createClientAuthError(ClientAuthErrorCodes.noCryptoObject);\n        }\n\n        if (!state) {\n            throw createClientAuthError(ClientAuthErrorCodes.invalidState);\n        }\n\n        try {\n            // Split the state between library state and user passed state and decode them separately\n            const splitState = state.split(Constants.RESOURCE_DELIM);\n            const libraryState = splitState[0];\n            const userState =\n                splitState.length > 1\n                    ? splitState.slice(1).join(Constants.RESOURCE_DELIM)\n                    : Constants.EMPTY_STRING;\n            const libraryStateString = cryptoObj.base64Decode(libraryState);\n            const libraryStateObj = JSON.parse(\n                libraryStateString\n            ) as LibraryStateObject;\n            return {\n                userRequestState: userState || Constants.EMPTY_STRING,\n                libraryState: libraryStateObj,\n            };\n        } catch (e) {\n            throw createClientAuthError(ClientAuthErrorCodes.invalidState);\n        }\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ICrypto, SignedHttpRequestParameters } from \"./ICrypto\";\nimport * as TimeUtils from \"../utils/TimeUtils\";\nimport { UrlString } from \"../url/UrlString\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\nimport { invokeAsync } from \"../utils/FunctionWrappers\";\nimport { Logger } from \"../logger/Logger\";\n\n/**\n * See eSTS docs for more info.\n * - A kid element, with the value containing an RFC 7638-compliant JWK thumbprint that is base64 encoded.\n * -  xms_ksl element, representing the storage location of the key's secret component on the client device. One of two values:\n *      - sw: software storage\n *      - uhw: hardware storage\n */\ntype ReqCnf = {\n    kid: string;\n    xms_ksl: KeyLocation;\n};\n\nexport type ReqCnfData = {\n    kid: string;\n    reqCnfString: string;\n};\n\nconst KeyLocation = {\n    SW: \"sw\",\n    UHW: \"uhw\",\n} as const;\nexport type KeyLocation = (typeof KeyLocation)[keyof typeof KeyLocation];\n\n/** @internal */\nexport class PopTokenGenerator {\n    private cryptoUtils: ICrypto;\n    private performanceClient?: IPerformanceClient;\n\n    constructor(cryptoUtils: ICrypto, performanceClient?: IPerformanceClient) {\n        this.cryptoUtils = cryptoUtils;\n        this.performanceClient = performanceClient;\n    }\n\n    /**\n     * Generates the req_cnf validated at the RP in the POP protocol for SHR parameters\n     * and returns an object containing the keyid, the full req_cnf string and the req_cnf string hash\n     * @param request\n     * @returns\n     */\n    async generateCnf(\n        request: SignedHttpRequestParameters,\n        logger: Logger\n    ): Promise<ReqCnfData> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.PopTokenGenerateCnf,\n            request.correlationId\n        );\n\n        const reqCnf = await invokeAsync(\n            this.generateKid.bind(this),\n            PerformanceEvents.PopTokenGenerateCnf,\n            logger,\n            this.performanceClient,\n            request.correlationId\n        )(request);\n        const reqCnfString: string = this.cryptoUtils.base64UrlEncode(\n            JSON.stringify(reqCnf)\n        );\n\n        return {\n            kid: reqCnf.kid,\n            reqCnfString,\n        };\n    }\n\n    /**\n     * Generates key_id for a SHR token request\n     * @param request\n     * @returns\n     */\n    async generateKid(request: SignedHttpRequestParameters): Promise<ReqCnf> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.PopTokenGenerateKid,\n            request.correlationId\n        );\n\n        const kidThumbprint = await this.cryptoUtils.getPublicKeyThumbprint(\n            request\n        );\n\n        return {\n            kid: kidThumbprint,\n            xms_ksl: KeyLocation.SW,\n        };\n    }\n\n    /**\n     * Signs the POP access_token with the local generated key-pair\n     * @param accessToken\n     * @param request\n     * @returns\n     */\n    async signPopToken(\n        accessToken: string,\n        keyId: string,\n        request: SignedHttpRequestParameters\n    ): Promise<string> {\n        return this.signPayload(accessToken, keyId, request);\n    }\n\n    /**\n     * Utility function to generate the signed JWT for an access_token\n     * @param payload\n     * @param kid\n     * @param request\n     * @param claims\n     * @returns\n     */\n    async signPayload(\n        payload: string,\n        keyId: string,\n        request: SignedHttpRequestParameters,\n        claims?: object\n    ): Promise<string> {\n        // Deconstruct request to extract SHR parameters\n        const {\n            resourceRequestMethod,\n            resourceRequestUri,\n            shrClaims,\n            shrNonce,\n            shrOptions,\n        } = request;\n\n        const resourceUrlString = resourceRequestUri\n            ? new UrlString(resourceRequestUri)\n            : undefined;\n        const resourceUrlComponents = resourceUrlString?.getUrlComponents();\n        return this.cryptoUtils.signJwt(\n            {\n                at: payload,\n                ts: TimeUtils.nowSeconds(),\n                m: resourceRequestMethod?.toUpperCase(),\n                u: resourceUrlComponents?.HostNameAndPort,\n                nonce: shrNonce || this.cryptoUtils.createNewGuid(),\n                p: resourceUrlComponents?.AbsolutePath,\n                q: resourceUrlComponents?.QueryString\n                    ? [[], resourceUrlComponents.QueryString]\n                    : undefined,\n                client_claims: shrClaims || undefined,\n                ...claims,\n            },\n            keyId,\n            shrOptions,\n            request.correlationId\n        );\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ISerializableTokenCache } from \"../interface/ISerializableTokenCache\";\n\n/**\n * This class instance helps track the memory changes facilitating\n * decisions to read from and write to the persistent cache\n */ export class TokenCacheContext {\n    /**\n     * boolean indicating cache change\n     */\n    hasChanged: boolean;\n    /**\n     * serializable token cache interface\n     */\n    cache: ISerializableTokenCache;\n\n    constructor(tokenCache: ISerializableTokenCache, hasChanged: boolean) {\n        this.cache = tokenCache;\n        this.hasChanged = hasChanged;\n    }\n\n    /**\n     * boolean which indicates the changes in cache\n     */\n    get cacheHasChanged(): boolean {\n        return this.hasChanged;\n    }\n\n    /**\n     * function to retrieve the token cache\n     */\n    get tokenCache(): ISerializableTokenCache {\n        return this.cache;\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ServerAuthorizationTokenResponse } from \"./ServerAuthorizationTokenResponse\";\nimport { ICrypto } from \"../crypto/ICrypto\";\nimport {\n    ClientAuthErrorCodes,\n    createClientAuthError,\n} from \"../error/ClientAuthError\";\nimport { ServerAuthorizationCodeResponse } from \"./ServerAuthorizationCodeResponse\";\nimport { Logger } from \"../logger/Logger\";\nimport { ServerError } from \"../error/ServerError\";\nimport { ScopeSet } from \"../request/ScopeSet\";\nimport { AuthenticationResult } from \"./AuthenticationResult\";\nimport { AccountEntity } from \"../cache/entities/AccountEntity\";\nimport { Authority } from \"../authority/Authority\";\nimport { IdTokenEntity } from \"../cache/entities/IdTokenEntity\";\nimport { AccessTokenEntity } from \"../cache/entities/AccessTokenEntity\";\nimport { RefreshTokenEntity } from \"../cache/entities/RefreshTokenEntity\";\nimport {\n    InteractionRequiredAuthError,\n    isInteractionRequiredError,\n} from \"../error/InteractionRequiredAuthError\";\nimport { CacheRecord } from \"../cache/entities/CacheRecord\";\nimport { CacheManager } from \"../cache/CacheManager\";\nimport { ProtocolUtils, RequestStateObject } from \"../utils/ProtocolUtils\";\nimport {\n    AuthenticationScheme,\n    Constants,\n    THE_FAMILY_ID,\n    HttpStatus,\n} from \"../utils/Constants\";\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator\";\nimport { AppMetadataEntity } from \"../cache/entities/AppMetadataEntity\";\nimport { ICachePlugin } from \"../cache/interface/ICachePlugin\";\nimport { TokenCacheContext } from \"../cache/persistence/TokenCacheContext\";\nimport { ISerializableTokenCache } from \"../cache/interface/ISerializableTokenCache\";\nimport { AuthorizationCodePayload } from \"./AuthorizationCodePayload\";\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\nimport { checkMaxAge, extractTokenClaims } from \"../account/AuthToken\";\nimport {\n    TokenClaims,\n    getTenantIdFromIdTokenClaims,\n} from \"../account/TokenClaims\";\nimport {\n    AccountInfo,\n    buildTenantProfile,\n    updateAccountTenantProfileData,\n} from \"../account/AccountInfo\";\nimport * as CacheHelpers from \"../cache/utils/CacheHelpers\";\n\nfunction parseServerErrorNo(\n    serverResponse: ServerAuthorizationCodeResponse\n): string | undefined {\n    const errorCodePrefix = \"code=\";\n    const errorCodePrefixIndex =\n        serverResponse.error_uri?.lastIndexOf(errorCodePrefix);\n    return errorCodePrefixIndex && errorCodePrefixIndex >= 0\n        ? serverResponse.error_uri?.substring(\n              errorCodePrefixIndex + errorCodePrefix.length\n          )\n        : undefined;\n}\n\n/**\n * Class that handles response parsing.\n * @internal\n */\nexport class ResponseHandler {\n    private clientId: string;\n    private cacheStorage: CacheManager;\n    private cryptoObj: ICrypto;\n    private logger: Logger;\n    private homeAccountIdentifier: string;\n    private serializableCache: ISerializableTokenCache | null;\n    private persistencePlugin: ICachePlugin | null;\n    private performanceClient?: IPerformanceClient;\n\n    constructor(\n        clientId: string,\n        cacheStorage: CacheManager,\n        cryptoObj: ICrypto,\n        logger: Logger,\n        serializableCache: ISerializableTokenCache | null,\n        persistencePlugin: ICachePlugin | null,\n        performanceClient?: IPerformanceClient\n    ) {\n        this.clientId = clientId;\n        this.cacheStorage = cacheStorage;\n        this.cryptoObj = cryptoObj;\n        this.logger = logger;\n        this.serializableCache = serializableCache;\n        this.persistencePlugin = persistencePlugin;\n        this.performanceClient = performanceClient;\n    }\n\n    /**\n     * Function which validates server authorization code response.\n     * @param serverResponseHash\n     * @param requestState\n     * @param cryptoObj\n     */\n    validateServerAuthorizationCodeResponse(\n        serverResponse: ServerAuthorizationCodeResponse,\n        requestState: string\n    ): void {\n        if (!serverResponse.state || !requestState) {\n            throw serverResponse.state\n                ? createClientAuthError(\n                      ClientAuthErrorCodes.stateNotFound,\n                      \"Cached State\"\n                  )\n                : createClientAuthError(\n                      ClientAuthErrorCodes.stateNotFound,\n                      \"Server State\"\n                  );\n        }\n\n        let decodedServerResponseState: string;\n        let decodedRequestState: string;\n\n        try {\n            decodedServerResponseState = decodeURIComponent(\n                serverResponse.state\n            );\n        } catch (e) {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.invalidState,\n                serverResponse.state\n            );\n        }\n\n        try {\n            decodedRequestState = decodeURIComponent(requestState);\n        } catch (e) {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.invalidState,\n                serverResponse.state\n            );\n        }\n\n        if (decodedServerResponseState !== decodedRequestState) {\n            throw createClientAuthError(ClientAuthErrorCodes.stateMismatch);\n        }\n\n        // Check for error\n        if (\n            serverResponse.error ||\n            serverResponse.error_description ||\n            serverResponse.suberror\n        ) {\n            const serverErrorNo = parseServerErrorNo(serverResponse);\n            if (\n                isInteractionRequiredError(\n                    serverResponse.error,\n                    serverResponse.error_description,\n                    serverResponse.suberror\n                )\n            ) {\n                throw new InteractionRequiredAuthError(\n                    serverResponse.error || \"\",\n                    serverResponse.error_description,\n                    serverResponse.suberror,\n                    serverResponse.timestamp || \"\",\n                    serverResponse.trace_id || \"\",\n                    serverResponse.correlation_id || \"\",\n                    serverResponse.claims || \"\",\n                    serverErrorNo\n                );\n            }\n\n            throw new ServerError(\n                serverResponse.error || \"\",\n                serverResponse.error_description,\n                serverResponse.suberror,\n                serverErrorNo\n            );\n        }\n    }\n\n    /**\n     * Function which validates server authorization token response.\n     * @param serverResponse\n     * @param refreshAccessToken\n     */\n    validateTokenResponse(\n        serverResponse: ServerAuthorizationTokenResponse,\n        refreshAccessToken?: boolean\n    ): void {\n        // Check for error\n        if (\n            serverResponse.error ||\n            serverResponse.error_description ||\n            serverResponse.suberror\n        ) {\n            const errString = `Error(s): ${\n                serverResponse.error_codes || Constants.NOT_AVAILABLE\n            } - Timestamp: ${\n                serverResponse.timestamp || Constants.NOT_AVAILABLE\n            } - Description: ${\n                serverResponse.error_description || Constants.NOT_AVAILABLE\n            } - Correlation ID: ${\n                serverResponse.correlation_id || Constants.NOT_AVAILABLE\n            } - Trace ID: ${\n                serverResponse.trace_id || Constants.NOT_AVAILABLE\n            }`;\n            const serverErrorNo = serverResponse.error_codes?.length\n                ? serverResponse.error_codes[0]\n                : undefined;\n            const serverError = new ServerError(\n                serverResponse.error,\n                errString,\n                serverResponse.suberror,\n                serverErrorNo,\n                serverResponse.status\n            );\n\n            // check if 500 error\n            if (\n                refreshAccessToken &&\n                serverResponse.status &&\n                serverResponse.status >= HttpStatus.SERVER_ERROR_RANGE_START &&\n                serverResponse.status <= HttpStatus.SERVER_ERROR_RANGE_END\n            ) {\n                this.logger.warning(\n                    `executeTokenRequest:validateTokenResponse - AAD is currently unavailable and the access token is unable to be refreshed.\\n${serverError}`\n                );\n\n                // don't throw an exception, but alert the user via a log that the token was unable to be refreshed\n                return;\n                // check if 400 error\n            } else if (\n                refreshAccessToken &&\n                serverResponse.status &&\n                serverResponse.status >= HttpStatus.CLIENT_ERROR_RANGE_START &&\n                serverResponse.status <= HttpStatus.CLIENT_ERROR_RANGE_END\n            ) {\n                this.logger.warning(\n                    `executeTokenRequest:validateTokenResponse - AAD is currently available but is unable to refresh the access token.\\n${serverError}`\n                );\n\n                // don't throw an exception, but alert the user via a log that the token was unable to be refreshed\n                return;\n            }\n\n            if (\n                isInteractionRequiredError(\n                    serverResponse.error,\n                    serverResponse.error_description,\n                    serverResponse.suberror\n                )\n            ) {\n                throw new InteractionRequiredAuthError(\n                    serverResponse.error,\n                    serverResponse.error_description,\n                    serverResponse.suberror,\n                    serverResponse.timestamp || Constants.EMPTY_STRING,\n                    serverResponse.trace_id || Constants.EMPTY_STRING,\n                    serverResponse.correlation_id || Constants.EMPTY_STRING,\n                    serverResponse.claims || Constants.EMPTY_STRING,\n                    serverErrorNo\n                );\n            }\n\n            throw serverError;\n        }\n    }\n\n    /**\n     * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.\n     * @param serverTokenResponse\n     * @param authority\n     */\n    async handleServerTokenResponse(\n        serverTokenResponse: ServerAuthorizationTokenResponse,\n        authority: Authority,\n        reqTimestamp: number,\n        request: BaseAuthRequest,\n        authCodePayload?: AuthorizationCodePayload,\n        userAssertionHash?: string,\n        handlingRefreshTokenResponse?: boolean,\n        forceCacheRefreshTokenResponse?: boolean,\n        serverRequestId?: string\n    ): Promise<AuthenticationResult> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.HandleServerTokenResponse,\n            serverTokenResponse.correlation_id\n        );\n\n        // create an idToken object (not entity)\n        let idTokenClaims: TokenClaims | undefined;\n        if (serverTokenResponse.id_token) {\n            idTokenClaims = extractTokenClaims(\n                serverTokenResponse.id_token || Constants.EMPTY_STRING,\n                this.cryptoObj.base64Decode\n            );\n\n            // token nonce check (TODO: Add a warning if no nonce is given?)\n            if (authCodePayload && authCodePayload.nonce) {\n                if (idTokenClaims.nonce !== authCodePayload.nonce) {\n                    throw createClientAuthError(\n                        ClientAuthErrorCodes.nonceMismatch\n                    );\n                }\n            }\n\n            // token max_age check\n            if (request.maxAge || request.maxAge === 0) {\n                const authTime = idTokenClaims.auth_time;\n                if (!authTime) {\n                    throw createClientAuthError(\n                        ClientAuthErrorCodes.authTimeNotFound\n                    );\n                }\n\n                checkMaxAge(authTime, request.maxAge);\n            }\n        }\n\n        // generate homeAccountId\n        this.homeAccountIdentifier = AccountEntity.generateHomeAccountId(\n            serverTokenResponse.client_info || Constants.EMPTY_STRING,\n            authority.authorityType,\n            this.logger,\n            this.cryptoObj,\n            idTokenClaims\n        );\n\n        // save the response tokens\n        let requestStateObj: RequestStateObject | undefined;\n        if (!!authCodePayload && !!authCodePayload.state) {\n            requestStateObj = ProtocolUtils.parseRequestState(\n                this.cryptoObj,\n                authCodePayload.state\n            );\n        }\n\n        // Add keyId from request to serverTokenResponse if defined\n        serverTokenResponse.key_id =\n            serverTokenResponse.key_id || request.sshKid || undefined;\n\n        const cacheRecord = this.generateCacheRecord(\n            serverTokenResponse,\n            authority,\n            reqTimestamp,\n            request,\n            idTokenClaims,\n            userAssertionHash,\n            authCodePayload\n        );\n        let cacheContext;\n        try {\n            if (this.persistencePlugin && this.serializableCache) {\n                this.logger.verbose(\n                    \"Persistence enabled, calling beforeCacheAccess\"\n                );\n                cacheContext = new TokenCacheContext(\n                    this.serializableCache,\n                    true\n                );\n                await this.persistencePlugin.beforeCacheAccess(cacheContext);\n            }\n            /*\n             * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.\n             * If not present, we should return null, as it's the case that another application called removeAccount in between\n             * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal, unless explicitly flagged by\n             * the developer, as in the case of refresh token flow used in ADAL Node to MSAL Node migration.\n             */\n            if (\n                handlingRefreshTokenResponse &&\n                !forceCacheRefreshTokenResponse &&\n                cacheRecord.account\n            ) {\n                const key = cacheRecord.account.generateAccountKey();\n                const account = this.cacheStorage.getAccount(key, this.logger);\n                if (!account) {\n                    this.logger.warning(\n                        \"Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache\"\n                    );\n                    return await ResponseHandler.generateAuthenticationResult(\n                        this.cryptoObj,\n                        authority,\n                        cacheRecord,\n                        false,\n                        request,\n                        idTokenClaims,\n                        requestStateObj,\n                        undefined,\n                        serverRequestId\n                    );\n                }\n            }\n            await this.cacheStorage.saveCacheRecord(\n                cacheRecord,\n                request.storeInCache,\n                request.correlationId\n            );\n        } finally {\n            if (\n                this.persistencePlugin &&\n                this.serializableCache &&\n                cacheContext\n            ) {\n                this.logger.verbose(\n                    \"Persistence enabled, calling afterCacheAccess\"\n                );\n                await this.persistencePlugin.afterCacheAccess(cacheContext);\n            }\n        }\n\n        return ResponseHandler.generateAuthenticationResult(\n            this.cryptoObj,\n            authority,\n            cacheRecord,\n            false,\n            request,\n            idTokenClaims,\n            requestStateObj,\n            serverTokenResponse,\n            serverRequestId\n        );\n    }\n\n    /**\n     * Generates CacheRecord\n     * @param serverTokenResponse\n     * @param idTokenObj\n     * @param authority\n     */\n    private generateCacheRecord(\n        serverTokenResponse: ServerAuthorizationTokenResponse,\n        authority: Authority,\n        reqTimestamp: number,\n        request: BaseAuthRequest,\n        idTokenClaims?: TokenClaims,\n        userAssertionHash?: string,\n        authCodePayload?: AuthorizationCodePayload\n    ): CacheRecord {\n        const env = authority.getPreferredCache();\n        if (!env) {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.invalidCacheEnvironment\n            );\n        }\n\n        const claimsTenantId = getTenantIdFromIdTokenClaims(idTokenClaims);\n\n        // IdToken: non AAD scenarios can have empty realm\n        let cachedIdToken: IdTokenEntity | undefined;\n        let cachedAccount: AccountEntity | undefined;\n        if (serverTokenResponse.id_token && !!idTokenClaims) {\n            cachedIdToken = CacheHelpers.createIdTokenEntity(\n                this.homeAccountIdentifier,\n                env,\n                serverTokenResponse.id_token,\n                this.clientId,\n                claimsTenantId || \"\"\n            );\n\n            cachedAccount = buildAccountToCache(\n                this.cacheStorage,\n                authority,\n                this.homeAccountIdentifier,\n                this.cryptoObj.base64Decode,\n                idTokenClaims,\n                serverTokenResponse.client_info,\n                env,\n                claimsTenantId,\n                authCodePayload,\n                undefined, // nativeAccountId\n                this.logger\n            );\n        }\n\n        // AccessToken\n        let cachedAccessToken: AccessTokenEntity | null = null;\n        if (serverTokenResponse.access_token) {\n            // If scopes not returned in server response, use request scopes\n            const responseScopes = serverTokenResponse.scope\n                ? ScopeSet.fromString(serverTokenResponse.scope)\n                : new ScopeSet(request.scopes || []);\n\n            /*\n             * Use timestamp calculated before request\n             * Server may return timestamps as strings, parse to numbers if so.\n             */\n            const expiresIn: number =\n                (typeof serverTokenResponse.expires_in === \"string\"\n                    ? parseInt(serverTokenResponse.expires_in, 10)\n                    : serverTokenResponse.expires_in) || 0;\n            const extExpiresIn: number =\n                (typeof serverTokenResponse.ext_expires_in === \"string\"\n                    ? parseInt(serverTokenResponse.ext_expires_in, 10)\n                    : serverTokenResponse.ext_expires_in) || 0;\n            const refreshIn: number | undefined =\n                (typeof serverTokenResponse.refresh_in === \"string\"\n                    ? parseInt(serverTokenResponse.refresh_in, 10)\n                    : serverTokenResponse.refresh_in) || undefined;\n            const tokenExpirationSeconds = reqTimestamp + expiresIn;\n            const extendedTokenExpirationSeconds =\n                tokenExpirationSeconds + extExpiresIn;\n            const refreshOnSeconds =\n                refreshIn && refreshIn > 0\n                    ? reqTimestamp + refreshIn\n                    : undefined;\n\n            // non AAD scenarios can have empty realm\n            cachedAccessToken = CacheHelpers.createAccessTokenEntity(\n                this.homeAccountIdentifier,\n                env,\n                serverTokenResponse.access_token,\n                this.clientId,\n                claimsTenantId || authority.tenant || \"\",\n                responseScopes.printScopes(),\n                tokenExpirationSeconds,\n                extendedTokenExpirationSeconds,\n                this.cryptoObj.base64Decode,\n                refreshOnSeconds,\n                serverTokenResponse.token_type,\n                userAssertionHash,\n                serverTokenResponse.key_id,\n                request.claims,\n                request.requestedClaimsHash\n            );\n        }\n\n        // refreshToken\n        let cachedRefreshToken: RefreshTokenEntity | null = null;\n        if (serverTokenResponse.refresh_token) {\n            let rtExpiresOn: number | undefined;\n            if (serverTokenResponse.refresh_token_expires_in) {\n                const rtExpiresIn: number =\n                    typeof serverTokenResponse.refresh_token_expires_in ===\n                    \"string\"\n                        ? parseInt(\n                              serverTokenResponse.refresh_token_expires_in,\n                              10\n                          )\n                        : serverTokenResponse.refresh_token_expires_in;\n                rtExpiresOn = reqTimestamp + rtExpiresIn;\n            }\n            cachedRefreshToken = CacheHelpers.createRefreshTokenEntity(\n                this.homeAccountIdentifier,\n                env,\n                serverTokenResponse.refresh_token,\n                this.clientId,\n                serverTokenResponse.foci,\n                userAssertionHash,\n                rtExpiresOn\n            );\n        }\n\n        // appMetadata\n        let cachedAppMetadata: AppMetadataEntity | null = null;\n        if (serverTokenResponse.foci) {\n            cachedAppMetadata = {\n                clientId: this.clientId,\n                environment: env,\n                familyId: serverTokenResponse.foci,\n            };\n        }\n\n        return {\n            account: cachedAccount,\n            idToken: cachedIdToken,\n            accessToken: cachedAccessToken,\n            refreshToken: cachedRefreshToken,\n            appMetadata: cachedAppMetadata,\n        };\n    }\n\n    /**\n     * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.\n     *\n     * Optionally takes a state string that is set as-is in the response.\n     *\n     * @param cacheRecord\n     * @param idTokenObj\n     * @param fromTokenCache\n     * @param stateString\n     */\n    static async generateAuthenticationResult(\n        cryptoObj: ICrypto,\n        authority: Authority,\n        cacheRecord: CacheRecord,\n        fromTokenCache: boolean,\n        request: BaseAuthRequest,\n        idTokenClaims?: TokenClaims,\n        requestState?: RequestStateObject,\n        serverTokenResponse?: ServerAuthorizationTokenResponse,\n        requestId?: string\n    ): Promise<AuthenticationResult> {\n        let accessToken: string = Constants.EMPTY_STRING;\n        let responseScopes: Array<string> = [];\n        let expiresOn: Date | null = null;\n        let extExpiresOn: Date | undefined;\n        let refreshOn: Date | undefined;\n        let familyId: string = Constants.EMPTY_STRING;\n\n        if (cacheRecord.accessToken) {\n            /*\n             * if the request object has `popKid` property, `signPopToken` will be set to false and\n             * the token will be returned unsigned\n             */\n            if (\n                cacheRecord.accessToken.tokenType ===\n                    AuthenticationScheme.POP &&\n                !request.popKid\n            ) {\n                const popTokenGenerator: PopTokenGenerator =\n                    new PopTokenGenerator(cryptoObj);\n                const { secret, keyId } = cacheRecord.accessToken;\n\n                if (!keyId) {\n                    throw createClientAuthError(\n                        ClientAuthErrorCodes.keyIdMissing\n                    );\n                }\n\n                accessToken = await popTokenGenerator.signPopToken(\n                    secret,\n                    keyId,\n                    request\n                );\n            } else {\n                accessToken = cacheRecord.accessToken.secret;\n            }\n            responseScopes = ScopeSet.fromString(\n                cacheRecord.accessToken.target\n            ).asArray();\n            expiresOn = new Date(\n                Number(cacheRecord.accessToken.expiresOn) * 1000\n            );\n            extExpiresOn = new Date(\n                Number(cacheRecord.accessToken.extendedExpiresOn) * 1000\n            );\n            if (cacheRecord.accessToken.refreshOn) {\n                refreshOn = new Date(\n                    Number(cacheRecord.accessToken.refreshOn) * 1000\n                );\n            }\n        }\n\n        if (cacheRecord.appMetadata) {\n            familyId =\n                cacheRecord.appMetadata.familyId === THE_FAMILY_ID\n                    ? THE_FAMILY_ID\n                    : \"\";\n        }\n        const uid = idTokenClaims?.oid || idTokenClaims?.sub || \"\";\n        const tid = idTokenClaims?.tid || \"\";\n\n        // for hybrid + native bridge enablement, send back the native account Id\n        if (serverTokenResponse?.spa_accountid && !!cacheRecord.account) {\n            cacheRecord.account.nativeAccountId =\n                serverTokenResponse?.spa_accountid;\n        }\n\n        const accountInfo: AccountInfo | null = cacheRecord.account\n            ? updateAccountTenantProfileData(\n                  cacheRecord.account.getAccountInfo(),\n                  undefined, // tenantProfile optional\n                  idTokenClaims,\n                  cacheRecord.idToken?.secret\n              )\n            : null;\n\n        return {\n            authority: authority.canonicalAuthority,\n            uniqueId: uid,\n            tenantId: tid,\n            scopes: responseScopes,\n            account: accountInfo,\n            idToken: cacheRecord?.idToken?.secret || \"\",\n            idTokenClaims: idTokenClaims || {},\n            accessToken: accessToken,\n            fromCache: fromTokenCache,\n            expiresOn: expiresOn,\n            extExpiresOn: extExpiresOn,\n            refreshOn: refreshOn,\n            correlationId: request.correlationId,\n            requestId: requestId || Constants.EMPTY_STRING,\n            familyId: familyId,\n            tokenType:\n                cacheRecord.accessToken?.tokenType || Constants.EMPTY_STRING,\n            state: requestState\n                ? requestState.userRequestState\n                : Constants.EMPTY_STRING,\n            cloudGraphHostName:\n                cacheRecord.account?.cloudGraphHostName ||\n                Constants.EMPTY_STRING,\n            msGraphHost:\n                cacheRecord.account?.msGraphHost || Constants.EMPTY_STRING,\n            code: serverTokenResponse?.spa_code,\n            fromNativeBroker: false,\n        };\n    }\n}\n\nexport function buildAccountToCache(\n    cacheStorage: CacheManager,\n    authority: Authority,\n    homeAccountId: string,\n    base64Decode: (input: string) => string,\n    idTokenClaims?: TokenClaims,\n    clientInfo?: string,\n    environment?: string,\n    claimsTenantId?: string | null,\n    authCodePayload?: AuthorizationCodePayload,\n    nativeAccountId?: string,\n    logger?: Logger\n): AccountEntity {\n    logger?.verbose(\"setCachedAccount called\");\n\n    // Check if base account is already cached\n    const accountKeys = cacheStorage.getAccountKeys();\n    const baseAccountKey = accountKeys.find((accountKey: string) => {\n        return accountKey.startsWith(homeAccountId);\n    });\n\n    let cachedAccount: AccountEntity | null = null;\n    if (baseAccountKey) {\n        cachedAccount = cacheStorage.getAccount(baseAccountKey, logger);\n    }\n\n    const baseAccount =\n        cachedAccount ||\n        AccountEntity.createAccount(\n            {\n                homeAccountId,\n                idTokenClaims,\n                clientInfo,\n                environment,\n                cloudGraphHostName: authCodePayload?.cloud_graph_host_name,\n                msGraphHost: authCodePayload?.msgraph_host,\n                nativeAccountId: nativeAccountId,\n            },\n            authority,\n            base64Decode\n        );\n\n    const tenantProfiles = baseAccount.tenantProfiles || [];\n    const tenantId = claimsTenantId || baseAccount.realm;\n    if (\n        tenantId &&\n        !tenantProfiles.find((tenantProfile) => {\n            return tenantProfile.tenantId === tenantId;\n        })\n    ) {\n        const newTenantProfile = buildTenantProfile(\n            homeAccountId,\n            baseAccount.localAccountId,\n            tenantId,\n            idTokenClaims\n        );\n        tenantProfiles.push(newTenantProfile);\n    }\n    baseAccount.tenantProfiles = tenantProfiles;\n\n    return baseAccount;\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BaseClient } from \"./BaseClient\";\nimport { CommonAuthorizationUrlRequest } from \"../request/CommonAuthorizationUrlRequest\";\nimport { CommonAuthorizationCodeRequest } from \"../request/CommonAuthorizationCodeRequest\";\nimport { Authority } from \"../authority/Authority\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport {\n    GrantType,\n    AuthenticationScheme,\n    PromptValue,\n    Separators,\n    HeaderNames,\n} from \"../utils/Constants\";\nimport * as AADServerParamKeys from \"../constants/AADServerParamKeys\";\nimport {\n    ClientConfiguration,\n    isOidcProtocolMode,\n} from \"../config/ClientConfiguration\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { NetworkResponse } from \"../network/NetworkManager\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport {\n    ClientAuthErrorCodes,\n    createClientAuthError,\n} from \"../error/ClientAuthError\";\nimport { UrlString } from \"../url/UrlString\";\nimport { ServerAuthorizationCodeResponse } from \"../response/ServerAuthorizationCodeResponse\";\nimport { CommonEndSessionRequest } from \"../request/CommonEndSessionRequest\";\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { AuthorizationCodePayload } from \"../response/AuthorizationCodePayload\";\nimport * as TimeUtils from \"../utils/TimeUtils\";\nimport { AccountInfo } from \"../account/AccountInfo\";\nimport {\n    buildClientInfoFromHomeAccountId,\n    buildClientInfo,\n} from \"../account/ClientInfo\";\nimport { CcsCredentialType, CcsCredential } from \"../account/CcsCredential\";\nimport {\n    createClientConfigurationError,\n    ClientConfigurationErrorCodes,\n} from \"../error/ClientConfigurationError\";\nimport { RequestValidator } from \"../request/RequestValidator\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\nimport { invokeAsync } from \"../utils/FunctionWrappers\";\nimport { ClientAssertion } from \"../account/ClientCredentials\";\nimport { getClientAssertion } from \"../utils/ClientAssertionUtils\";\n\n/**\n * Oauth2.0 Authorization Code client\n * @internal\n */\nexport class AuthorizationCodeClient extends BaseClient {\n    // Flag to indicate if client is for hybrid spa auth code redemption\n    protected includeRedirectUri: boolean = true;\n    private oidcDefaultScopes;\n\n    constructor(\n        configuration: ClientConfiguration,\n        performanceClient?: IPerformanceClient\n    ) {\n        super(configuration, performanceClient);\n        this.oidcDefaultScopes =\n            this.config.authOptions.authority.options.OIDCOptions?.defaultScopes;\n    }\n\n    /**\n     * Creates the URL of the authorization request letting the user input credentials and consent to the\n     * application. The URL target the /authorize endpoint of the authority configured in the\n     * application object.\n     *\n     * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\n     * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\n     * acquireToken(AuthorizationCodeRequest)\n     * @param request\n     */\n    async getAuthCodeUrl(\n        request: CommonAuthorizationUrlRequest\n    ): Promise<string> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.GetAuthCodeUrl,\n            request.correlationId\n        );\n\n        const queryString = await invokeAsync(\n            this.createAuthCodeUrlQueryString.bind(this),\n            PerformanceEvents.AuthClientCreateQueryString,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(request);\n\n        return UrlString.appendQueryString(\n            this.authority.authorizationEndpoint,\n            queryString\n        );\n    }\n\n    /**\n     * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\n     * authorization_code_grant\n     * @param request\n     */\n    async acquireToken(\n        request: CommonAuthorizationCodeRequest,\n        authCodePayload?: AuthorizationCodePayload\n    ): Promise<AuthenticationResult> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.AuthClientAcquireToken,\n            request.correlationId\n        );\n\n        if (!request.code) {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.requestCannotBeMade\n            );\n        }\n\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response = await invokeAsync(\n            this.executeTokenRequest.bind(this),\n            PerformanceEvents.AuthClientExecuteTokenRequest,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(this.authority, request);\n\n        // Retrieve requestId from response headers\n        const requestId = response.headers?.[HeaderNames.X_MS_REQUEST_ID];\n\n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            this.config.serializableCache,\n            this.config.persistencePlugin,\n            this.performanceClient\n        );\n\n        // Validate response. This function throws a server error if an error is returned by the server.\n        responseHandler.validateTokenResponse(response.body);\n\n        return invokeAsync(\n            responseHandler.handleServerTokenResponse.bind(responseHandler),\n            PerformanceEvents.HandleServerTokenResponse,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(\n            response.body,\n            this.authority,\n            reqTimestamp,\n            request,\n            authCodePayload,\n            undefined,\n            undefined,\n            undefined,\n            requestId\n        );\n    }\n\n    /**\n     * Handles the hash fragment response from public client code request. Returns a code response used by\n     * the client to exchange for a token in acquireToken.\n     * @param hashFragment\n     */\n    handleFragmentResponse(\n        serverParams: ServerAuthorizationCodeResponse,\n        cachedState: string\n    ): AuthorizationCodePayload {\n        // Handle responses.\n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            null,\n            null\n        );\n\n        // Get code response\n        responseHandler.validateServerAuthorizationCodeResponse(\n            serverParams,\n            cachedState\n        );\n\n        // throw when there is no auth code in the response\n        if (!serverParams.code) {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.authorizationCodeMissingFromServerResponse\n            );\n        }\n\n        return serverParams as AuthorizationCodePayload;\n    }\n\n    /**\n     * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.\n     * Default behaviour is to redirect the user to `window.location.href`.\n     * @param authorityUri\n     */\n    getLogoutUri(logoutRequest: CommonEndSessionRequest): string {\n        // Throw error if logoutRequest is null/undefined\n        if (!logoutRequest) {\n            throw createClientConfigurationError(\n                ClientConfigurationErrorCodes.logoutRequestEmpty\n            );\n        }\n        const queryString = this.createLogoutUrlQueryString(logoutRequest);\n\n        // Construct logout URI\n        return UrlString.appendQueryString(\n            this.authority.endSessionEndpoint,\n            queryString\n        );\n    }\n\n    /**\n     * Executes POST request to token endpoint\n     * @param authority\n     * @param request\n     */\n    private async executeTokenRequest(\n        authority: Authority,\n        request: CommonAuthorizationCodeRequest\n    ): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.AuthClientExecuteTokenRequest,\n            request.correlationId\n        );\n\n        const queryParametersString = this.createTokenQueryParameters(request);\n        const endpoint = UrlString.appendQueryString(\n            authority.tokenEndpoint,\n            queryParametersString\n        );\n\n        const requestBody = await invokeAsync(\n            this.createTokenRequestBody.bind(this),\n            PerformanceEvents.AuthClientCreateTokenRequestBody,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(request);\n\n        let ccsCredential: CcsCredential | undefined = undefined;\n        if (request.clientInfo) {\n            try {\n                const clientInfo = buildClientInfo(\n                    request.clientInfo,\n                    this.cryptoUtils.base64Decode\n                );\n                ccsCredential = {\n                    credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\n                    type: CcsCredentialType.HOME_ACCOUNT_ID,\n                };\n            } catch (e) {\n                this.logger.verbose(\n                    \"Could not parse client info for CCS Header: \" + e\n                );\n            }\n        }\n        const headers: Record<string, string> = this.createTokenRequestHeaders(\n            ccsCredential || request.ccsCredential\n        );\n\n        const thumbprint: RequestThumbprint = {\n            clientId:\n                request.tokenBodyParameters?.clientId ||\n                this.config.authOptions.clientId,\n            authority: authority.canonicalAuthority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid,\n        };\n\n        return invokeAsync(\n            this.executePostToTokenEndpoint.bind(this),\n            PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(\n            endpoint,\n            requestBody,\n            headers,\n            thumbprint,\n            request.correlationId,\n            PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint\n        );\n    }\n\n    /**\n     * Generates a map for all the params to be sent to the service\n     * @param request\n     */\n    private async createTokenRequestBody(\n        request: CommonAuthorizationCodeRequest\n    ): Promise<string> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.AuthClientCreateTokenRequestBody,\n            request.correlationId\n        );\n\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(\n            request.tokenBodyParameters?.[AADServerParamKeys.CLIENT_ID] ||\n                this.config.authOptions.clientId\n        );\n\n        /*\n         * For hybrid spa flow, there will be a code but no verifier\n         * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI\n         */\n        if (!this.includeRedirectUri) {\n            // Just validate\n            RequestValidator.validateRedirectUri(request.redirectUri);\n        } else {\n            // Validate and include redirect uri\n            parameterBuilder.addRedirectUri(request.redirectUri);\n        }\n\n        // Add scope array, parameter builder will add default scopes and dedupe\n        parameterBuilder.addScopes(\n            request.scopes,\n            true,\n            this.oidcDefaultScopes\n        );\n\n        // add code: user set, not validated\n        parameterBuilder.addAuthorizationCode(request.code);\n\n        // Add library metadata\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        parameterBuilder.addApplicationTelemetry(\n            this.config.telemetry.application\n        );\n        parameterBuilder.addThrottling();\n\n        if (this.serverTelemetryManager && !isOidcProtocolMode(this.config)) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n\n        // add code_verifier if passed\n        if (request.codeVerifier) {\n            parameterBuilder.addCodeVerifier(request.codeVerifier);\n        }\n\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(\n                this.config.clientCredentials.clientSecret\n            );\n        }\n\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion: ClientAssertion =\n                this.config.clientCredentials.clientAssertion;\n\n            parameterBuilder.addClientAssertion(\n                await getClientAssertion(\n                    clientAssertion.assertion,\n                    this.config.authOptions.clientId,\n                    request.resourceRequestUri\n                )\n            );\n            parameterBuilder.addClientAssertionType(\n                clientAssertion.assertionType\n            );\n        }\n\n        parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\n        parameterBuilder.addClientInfo();\n\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\n            const popTokenGenerator = new PopTokenGenerator(\n                this.cryptoUtils,\n                this.performanceClient\n            );\n\n            let reqCnfData;\n            if (!request.popKid) {\n                const generatedReqCnfData = await invokeAsync(\n                    popTokenGenerator.generateCnf.bind(popTokenGenerator),\n                    PerformanceEvents.PopTokenGenerateCnf,\n                    this.logger,\n                    this.performanceClient,\n                    request.correlationId\n                )(request, this.logger);\n                reqCnfData = generatedReqCnfData.reqCnfString;\n            } else {\n                reqCnfData = this.cryptoUtils.encodeKid(request.popKid);\n            }\n\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n            parameterBuilder.addPopToken(reqCnfData);\n        } else if (request.authenticationScheme === AuthenticationScheme.SSH) {\n            if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n            } else {\n                throw createClientConfigurationError(\n                    ClientConfigurationErrorCodes.missingSshJwk\n                );\n            }\n        }\n\n        const correlationId =\n            request.correlationId ||\n            this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n\n        if (\n            !StringUtils.isEmptyObj(request.claims) ||\n            (this.config.authOptions.clientCapabilities &&\n                this.config.authOptions.clientCapabilities.length > 0)\n        ) {\n            parameterBuilder.addClaims(\n                request.claims,\n                this.config.authOptions.clientCapabilities\n            );\n        }\n\n        let ccsCred: CcsCredential | undefined = undefined;\n        if (request.clientInfo) {\n            try {\n                const clientInfo = buildClientInfo(\n                    request.clientInfo,\n                    this.cryptoUtils.base64Decode\n                );\n                ccsCred = {\n                    credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\n                    type: CcsCredentialType.HOME_ACCOUNT_ID,\n                };\n            } catch (e) {\n                this.logger.verbose(\n                    \"Could not parse client info for CCS Header: \" + e\n                );\n            }\n        } else {\n            ccsCred = request.ccsCredential;\n        }\n\n        // Adds these as parameters in the request instead of headers to prevent CORS preflight request\n        if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\n            switch (ccsCred.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(\n                            ccsCred.credential\n                        );\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\n                            \"Could not parse home account ID for CCS Header: \" +\n                                e\n                        );\n                    }\n                    break;\n                case CcsCredentialType.UPN:\n                    parameterBuilder.addCcsUpn(ccsCred.credential);\n                    break;\n            }\n        }\n\n        if (request.tokenBodyParameters) {\n            parameterBuilder.addExtraQueryParameters(\n                request.tokenBodyParameters\n            );\n        }\n\n        // Add hybrid spa parameters if not already provided\n        if (\n            request.enableSpaAuthorizationCode &&\n            (!request.tokenBodyParameters ||\n                !request.tokenBodyParameters[\n                    AADServerParamKeys.RETURN_SPA_CODE\n                ])\n        ) {\n            parameterBuilder.addExtraQueryParameters({\n                [AADServerParamKeys.RETURN_SPA_CODE]: \"1\",\n            });\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\n     * @param request\n     */\n    private async createAuthCodeUrlQueryString(\n        request: CommonAuthorizationUrlRequest\n    ): Promise<string> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.AuthClientCreateQueryString,\n            request.correlationId\n        );\n\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(\n            request.extraQueryParameters?.[AADServerParamKeys.CLIENT_ID] ||\n                this.config.authOptions.clientId\n        );\n\n        const requestScopes = [\n            ...(request.scopes || []),\n            ...(request.extraScopesToConsent || []),\n        ];\n        parameterBuilder.addScopes(requestScopes, true, this.oidcDefaultScopes);\n\n        // validate the redirectUri (to be a non null value)\n        parameterBuilder.addRedirectUri(request.redirectUri);\n\n        // generate the correlationId if not set by the user and add\n        const correlationId =\n            request.correlationId ||\n            this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n\n        // add response_mode. If not passed in it defaults to query.\n        parameterBuilder.addResponseMode(request.responseMode);\n\n        // add response_type = code\n        parameterBuilder.addResponseTypeCode();\n\n        // add library info parameters\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        if (!isOidcProtocolMode(this.config)) {\n            parameterBuilder.addApplicationTelemetry(\n                this.config.telemetry.application\n            );\n        }\n\n        // add client_info=1\n        parameterBuilder.addClientInfo();\n\n        if (request.codeChallenge && request.codeChallengeMethod) {\n            parameterBuilder.addCodeChallengeParams(\n                request.codeChallenge,\n                request.codeChallengeMethod\n            );\n        }\n\n        if (request.prompt) {\n            parameterBuilder.addPrompt(request.prompt);\n        }\n\n        if (request.domainHint) {\n            parameterBuilder.addDomainHint(request.domainHint);\n        }\n\n        // Add sid or loginHint with preference for login_hint claim (in request) -> sid -> loginHint (upn/email) -> username of AccountInfo object\n        if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\n            // AAD will throw if prompt=select_account is passed with an account hint\n            if (request.sid && request.prompt === PromptValue.NONE) {\n                // SessionID is only used in silent calls\n                this.logger.verbose(\n                    \"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\"\n                );\n                parameterBuilder.addSid(request.sid);\n            } else if (request.account) {\n                const accountSid = this.extractAccountSid(request.account);\n                let accountLoginHintClaim = this.extractLoginHint(\n                    request.account\n                );\n\n                if (accountLoginHintClaim && request.domainHint) {\n                    this.logger.warning(\n                        `AuthorizationCodeClient.createAuthCodeUrlQueryString: \"domainHint\" param is set, skipping opaque \"login_hint\" claim. Please consider not passing domainHint`\n                    );\n                    accountLoginHintClaim = null;\n                }\n\n                // If login_hint claim is present, use it over sid/username\n                if (accountLoginHintClaim) {\n                    this.logger.verbose(\n                        \"createAuthCodeUrlQueryString: login_hint claim present on account\"\n                    );\n                    parameterBuilder.addLoginHint(accountLoginHintClaim);\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(\n                            request.account.homeAccountId\n                        );\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\n                            \"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\"\n                        );\n                    }\n                } else if (accountSid && request.prompt === PromptValue.NONE) {\n                    /*\n                     * If account and loginHint are provided, we will check account first for sid before adding loginHint\n                     * SessionId is only used in silent calls\n                     */\n                    this.logger.verbose(\n                        \"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\"\n                    );\n                    parameterBuilder.addSid(accountSid);\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(\n                            request.account.homeAccountId\n                        );\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\n                            \"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\"\n                        );\n                    }\n                } else if (request.loginHint) {\n                    this.logger.verbose(\n                        \"createAuthCodeUrlQueryString: Adding login_hint from request\"\n                    );\n                    parameterBuilder.addLoginHint(request.loginHint);\n                    parameterBuilder.addCcsUpn(request.loginHint);\n                } else if (request.account.username) {\n                    // Fallback to account username if provided\n                    this.logger.verbose(\n                        \"createAuthCodeUrlQueryString: Adding login_hint from account\"\n                    );\n                    parameterBuilder.addLoginHint(request.account.username);\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(\n                            request.account.homeAccountId\n                        );\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\n                            \"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\"\n                        );\n                    }\n                }\n            } else if (request.loginHint) {\n                this.logger.verbose(\n                    \"createAuthCodeUrlQueryString: No account, adding login_hint from request\"\n                );\n                parameterBuilder.addLoginHint(request.loginHint);\n                parameterBuilder.addCcsUpn(request.loginHint);\n            }\n        } else {\n            this.logger.verbose(\n                \"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\"\n            );\n        }\n\n        if (request.nonce) {\n            parameterBuilder.addNonce(request.nonce);\n        }\n\n        if (request.state) {\n            parameterBuilder.addState(request.state);\n        }\n\n        if (\n            request.claims ||\n            (this.config.authOptions.clientCapabilities &&\n                this.config.authOptions.clientCapabilities.length > 0)\n        ) {\n            parameterBuilder.addClaims(\n                request.claims,\n                this.config.authOptions.clientCapabilities\n            );\n        }\n\n        if (request.extraQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(\n                request.extraQueryParameters\n            );\n        }\n\n        if (request.nativeBroker) {\n            // signal ests that this is a WAM call\n            parameterBuilder.addNativeBroker();\n\n            // pass the req_cnf for POP\n            if (request.authenticationScheme === AuthenticationScheme.POP) {\n                const popTokenGenerator = new PopTokenGenerator(\n                    this.cryptoUtils\n                );\n\n                // req_cnf is always sent as a string for SPAs\n                let reqCnfData;\n                if (!request.popKid) {\n                    const generatedReqCnfData = await invokeAsync(\n                        popTokenGenerator.generateCnf.bind(popTokenGenerator),\n                        PerformanceEvents.PopTokenGenerateCnf,\n                        this.logger,\n                        this.performanceClient,\n                        request.correlationId\n                    )(request, this.logger);\n                    reqCnfData = generatedReqCnfData.reqCnfString;\n                } else {\n                    reqCnfData = this.cryptoUtils.encodeKid(request.popKid);\n                }\n                parameterBuilder.addPopToken(reqCnfData);\n            }\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * This API validates the `EndSessionRequest` and creates a URL\n     * @param request\n     */\n    private createLogoutUrlQueryString(\n        request: CommonEndSessionRequest\n    ): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        if (request.postLogoutRedirectUri) {\n            parameterBuilder.addPostLogoutRedirectUri(\n                request.postLogoutRedirectUri\n            );\n        }\n\n        if (request.correlationId) {\n            parameterBuilder.addCorrelationId(request.correlationId);\n        }\n\n        if (request.idTokenHint) {\n            parameterBuilder.addIdTokenHint(request.idTokenHint);\n        }\n\n        if (request.state) {\n            parameterBuilder.addState(request.state);\n        }\n\n        if (request.logoutHint) {\n            parameterBuilder.addLogoutHint(request.logoutHint);\n        }\n\n        if (request.extraQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(\n                request.extraQueryParameters\n            );\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\n     * @param account\n     */\n    private extractAccountSid(account: AccountInfo): string | null {\n        return account.idTokenClaims?.sid || null;\n    }\n\n    private extractLoginHint(account: AccountInfo): string | null {\n        return account.idTokenClaims?.login_hint || null;\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    ClientConfiguration,\n    isOidcProtocolMode,\n} from \"../config/ClientConfiguration\";\nimport { BaseClient } from \"./BaseClient\";\nimport { CommonRefreshTokenRequest } from \"../request/CommonRefreshTokenRequest\";\nimport { Authority } from \"../authority/Authority\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport {\n    GrantType,\n    AuthenticationScheme,\n    Errors,\n    HeaderNames,\n} from \"../utils/Constants\";\nimport * as AADServerParamKeys from \"../constants/AADServerParamKeys\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { NetworkResponse } from \"../network/NetworkManager\";\nimport { CommonSilentFlowRequest } from \"../request/CommonSilentFlowRequest\";\nimport {\n    createClientConfigurationError,\n    ClientConfigurationErrorCodes,\n} from \"../error/ClientConfigurationError\";\nimport {\n    createClientAuthError,\n    ClientAuthErrorCodes,\n} from \"../error/ClientAuthError\";\nimport { ServerError } from \"../error/ServerError\";\nimport * as TimeUtils from \"../utils/TimeUtils\";\nimport { UrlString } from \"../url/UrlString\";\nimport { CcsCredentialType } from \"../account/CcsCredential\";\nimport { buildClientInfoFromHomeAccountId } from \"../account/ClientInfo\";\nimport {\n    InteractionRequiredAuthError,\n    InteractionRequiredAuthErrorCodes,\n    createInteractionRequiredAuthError,\n} from \"../error/InteractionRequiredAuthError\";\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\nimport { invoke, invokeAsync } from \"../utils/FunctionWrappers\";\nimport { generateCredentialKey } from \"../cache/utils/CacheHelpers\";\nimport { ClientAssertion } from \"../account/ClientCredentials\";\nimport { getClientAssertion } from \"../utils/ClientAssertionUtils\";\n\nconst DEFAULT_REFRESH_TOKEN_EXPIRATION_OFFSET_SECONDS = 300; // 5 Minutes\n\n/**\n * OAuth2.0 refresh token client\n * @internal\n */\nexport class RefreshTokenClient extends BaseClient {\n    constructor(\n        configuration: ClientConfiguration,\n        performanceClient?: IPerformanceClient\n    ) {\n        super(configuration, performanceClient);\n    }\n    public async acquireToken(\n        request: CommonRefreshTokenRequest\n    ): Promise<AuthenticationResult> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.RefreshTokenClientAcquireToken,\n            request.correlationId\n        );\n\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response = await invokeAsync(\n            this.executeTokenRequest.bind(this),\n            PerformanceEvents.RefreshTokenClientExecuteTokenRequest,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(request, this.authority);\n\n        // Retrieve requestId from response headers\n        const requestId = response.headers?.[HeaderNames.X_MS_REQUEST_ID];\n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            this.config.serializableCache,\n            this.config.persistencePlugin\n        );\n        responseHandler.validateTokenResponse(response.body);\n\n        return invokeAsync(\n            responseHandler.handleServerTokenResponse.bind(responseHandler),\n            PerformanceEvents.HandleServerTokenResponse,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(\n            response.body,\n            this.authority,\n            reqTimestamp,\n            request,\n            undefined,\n            undefined,\n            true,\n            request.forceCache,\n            requestId\n        );\n    }\n\n    /**\n     * Gets cached refresh token and attaches to request, then calls acquireToken API\n     * @param request\n     */\n    public async acquireTokenByRefreshToken(\n        request: CommonSilentFlowRequest\n    ): Promise<AuthenticationResult> {\n        // Cannot renew token if no request object is given.\n        if (!request) {\n            throw createClientConfigurationError(\n                ClientConfigurationErrorCodes.tokenRequestEmpty\n            );\n        }\n\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken,\n            request.correlationId\n        );\n\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n        if (!request.account) {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.noAccountInSilentRequest\n            );\n        }\n\n        // try checking if FOCI is enabled for the given application\n        const isFOCI = this.cacheManager.isAppMetadataFOCI(\n            request.account.environment\n        );\n\n        // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\n        if (isFOCI) {\n            try {\n                return await invokeAsync(\n                    this.acquireTokenWithCachedRefreshToken.bind(this),\n                    PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken,\n                    this.logger,\n                    this.performanceClient,\n                    request.correlationId\n                )(request, true);\n            } catch (e) {\n                const noFamilyRTInCache =\n                    e instanceof InteractionRequiredAuthError &&\n                    e.errorCode ===\n                        InteractionRequiredAuthErrorCodes.noTokensFound;\n                const clientMismatchErrorWithFamilyRT =\n                    e instanceof ServerError &&\n                    e.errorCode === Errors.INVALID_GRANT_ERROR &&\n                    e.subError === Errors.CLIENT_MISMATCH_ERROR;\n\n                // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\n                if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\n                    return invokeAsync(\n                        this.acquireTokenWithCachedRefreshToken.bind(this),\n                        PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken,\n                        this.logger,\n                        this.performanceClient,\n                        request.correlationId\n                    )(request, false);\n                    // throw in all other cases\n                } else {\n                    throw e;\n                }\n            }\n        }\n        // fall back to application refresh token acquisition\n        return invokeAsync(\n            this.acquireTokenWithCachedRefreshToken.bind(this),\n            PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(request, false);\n    }\n\n    /**\n     * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\n     * @param request\n     */\n    private async acquireTokenWithCachedRefreshToken(\n        request: CommonSilentFlowRequest,\n        foci: boolean\n    ) {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken,\n            request.correlationId\n        );\n\n        // fetches family RT or application RT based on FOCI value\n        const refreshToken = invoke(\n            this.cacheManager.getRefreshToken.bind(this.cacheManager),\n            PerformanceEvents.CacheManagerGetRefreshToken,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(\n            request.account,\n            foci,\n            undefined,\n            this.performanceClient,\n            request.correlationId\n        );\n\n        if (!refreshToken) {\n            throw createInteractionRequiredAuthError(\n                InteractionRequiredAuthErrorCodes.noTokensFound\n            );\n        }\n\n        if (\n            refreshToken.expiresOn &&\n            TimeUtils.isTokenExpired(\n                refreshToken.expiresOn,\n                request.refreshTokenExpirationOffsetSeconds ||\n                    DEFAULT_REFRESH_TOKEN_EXPIRATION_OFFSET_SECONDS\n            )\n        ) {\n            throw createInteractionRequiredAuthError(\n                InteractionRequiredAuthErrorCodes.refreshTokenExpired\n            );\n        }\n        // attach cached RT size to the current measurement\n\n        const refreshTokenRequest: CommonRefreshTokenRequest = {\n            ...request,\n            refreshToken: refreshToken.secret,\n            authenticationScheme:\n                request.authenticationScheme || AuthenticationScheme.BEARER,\n            ccsCredential: {\n                credential: request.account.homeAccountId,\n                type: CcsCredentialType.HOME_ACCOUNT_ID,\n            },\n        };\n\n        try {\n            return await invokeAsync(\n                this.acquireToken.bind(this),\n                PerformanceEvents.RefreshTokenClientAcquireToken,\n                this.logger,\n                this.performanceClient,\n                request.correlationId\n            )(refreshTokenRequest);\n        } catch (e) {\n            if (\n                e instanceof InteractionRequiredAuthError &&\n                e.subError === InteractionRequiredAuthErrorCodes.badToken\n            ) {\n                // Remove bad refresh token from cache\n                this.logger.verbose(\n                    \"acquireTokenWithRefreshToken: bad refresh token, removing from cache\"\n                );\n                const badRefreshTokenKey = generateCredentialKey(refreshToken);\n                this.cacheManager.removeRefreshToken(badRefreshTokenKey);\n            }\n\n            throw e;\n        }\n    }\n\n    /**\n     * Constructs the network message and makes a NW call to the underlying secure token service\n     * @param request\n     * @param authority\n     */\n    private async executeTokenRequest(\n        request: CommonRefreshTokenRequest,\n        authority: Authority\n    ): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.RefreshTokenClientExecuteTokenRequest,\n            request.correlationId\n        );\n\n        const queryParametersString = this.createTokenQueryParameters(request);\n        const endpoint = UrlString.appendQueryString(\n            authority.tokenEndpoint,\n            queryParametersString\n        );\n\n        const requestBody = await invokeAsync(\n            this.createTokenRequestBody.bind(this),\n            PerformanceEvents.RefreshTokenClientCreateTokenRequestBody,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(request);\n        const headers: Record<string, string> = this.createTokenRequestHeaders(\n            request.ccsCredential\n        );\n        const thumbprint: RequestThumbprint = {\n            clientId:\n                request.tokenBodyParameters?.clientId ||\n                this.config.authOptions.clientId,\n            authority: authority.canonicalAuthority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid,\n        };\n\n        return invokeAsync(\n            this.executePostToTokenEndpoint.bind(this),\n            PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(\n            endpoint,\n            requestBody,\n            headers,\n            thumbprint,\n            request.correlationId,\n            PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint\n        );\n    }\n\n    /**\n     * Helper function to create the token request body\n     * @param request\n     */\n    private async createTokenRequestBody(\n        request: CommonRefreshTokenRequest\n    ): Promise<string> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.RefreshTokenClientCreateTokenRequestBody,\n            request.correlationId\n        );\n\n        const correlationId = request.correlationId;\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(\n            request.tokenBodyParameters?.[AADServerParamKeys.CLIENT_ID] ||\n                this.config.authOptions.clientId\n        );\n\n        if (request.redirectUri) {\n            parameterBuilder.addRedirectUri(request.redirectUri);\n        }\n\n        parameterBuilder.addScopes(\n            request.scopes,\n            true,\n            this.config.authOptions.authority.options.OIDCOptions?.defaultScopes\n        );\n\n        parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\n\n        parameterBuilder.addClientInfo();\n\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        parameterBuilder.addApplicationTelemetry(\n            this.config.telemetry.application\n        );\n        parameterBuilder.addThrottling();\n\n        if (this.serverTelemetryManager && !isOidcProtocolMode(this.config)) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n\n        parameterBuilder.addCorrelationId(correlationId);\n\n        parameterBuilder.addRefreshToken(request.refreshToken);\n\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(\n                this.config.clientCredentials.clientSecret\n            );\n        }\n\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion: ClientAssertion =\n                this.config.clientCredentials.clientAssertion;\n\n            parameterBuilder.addClientAssertion(\n                await getClientAssertion(\n                    clientAssertion.assertion,\n                    this.config.authOptions.clientId,\n                    request.resourceRequestUri\n                )\n            );\n            parameterBuilder.addClientAssertionType(\n                clientAssertion.assertionType\n            );\n        }\n\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\n            const popTokenGenerator = new PopTokenGenerator(\n                this.cryptoUtils,\n                this.performanceClient\n            );\n\n            let reqCnfData;\n            if (!request.popKid) {\n                const generatedReqCnfData = await invokeAsync(\n                    popTokenGenerator.generateCnf.bind(popTokenGenerator),\n                    PerformanceEvents.PopTokenGenerateCnf,\n                    this.logger,\n                    this.performanceClient,\n                    request.correlationId\n                )(request, this.logger);\n\n                reqCnfData = generatedReqCnfData.reqCnfString;\n            } else {\n                reqCnfData = this.cryptoUtils.encodeKid(request.popKid);\n            }\n\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n            parameterBuilder.addPopToken(reqCnfData);\n        } else if (request.authenticationScheme === AuthenticationScheme.SSH) {\n            if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n            } else {\n                throw createClientConfigurationError(\n                    ClientConfigurationErrorCodes.missingSshJwk\n                );\n            }\n        }\n\n        if (\n            !StringUtils.isEmptyObj(request.claims) ||\n            (this.config.authOptions.clientCapabilities &&\n                this.config.authOptions.clientCapabilities.length > 0)\n        ) {\n            parameterBuilder.addClaims(\n                request.claims,\n                this.config.authOptions.clientCapabilities\n            );\n        }\n\n        if (\n            this.config.systemOptions.preventCorsPreflight &&\n            request.ccsCredential\n        ) {\n            switch (request.ccsCredential.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(\n                            request.ccsCredential.credential\n                        );\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\n                            \"Could not parse home account ID for CCS Header: \" +\n                                e\n                        );\n                    }\n                    break;\n                case CcsCredentialType.UPN:\n                    parameterBuilder.addCcsUpn(\n                        request.ccsCredential.credential\n                    );\n                    break;\n            }\n        }\n\n        if (request.tokenBodyParameters) {\n            parameterBuilder.addExtraQueryParameters(\n                request.tokenBodyParameters\n            );\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BaseClient } from \"./BaseClient\";\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { CommonSilentFlowRequest } from \"../request/CommonSilentFlowRequest\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport * as TimeUtils from \"../utils/TimeUtils\";\nimport { RefreshTokenClient } from \"./RefreshTokenClient\";\nimport {\n    ClientAuthError,\n    ClientAuthErrorCodes,\n    createClientAuthError,\n} from \"../error/ClientAuthError\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { CacheRecord } from \"../cache/entities/CacheRecord\";\nimport { CacheOutcome, OIDC_DEFAULT_SCOPES } from \"../utils/Constants\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { checkMaxAge, extractTokenClaims } from \"../account/AuthToken\";\nimport { TokenClaims } from \"../account/TokenClaims\";\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\nimport { invokeAsync } from \"../utils/FunctionWrappers\";\nimport { getTenantFromAuthorityString } from \"../authority/Authority\";\n\n/** @internal */\nexport class SilentFlowClient extends BaseClient {\n    constructor(\n        configuration: ClientConfiguration,\n        performanceClient?: IPerformanceClient\n    ) {\n        super(configuration, performanceClient);\n    }\n\n    /**\n     * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew\n     * the given token and returns the renewed token\n     * @param request\n     */\n    async acquireToken(\n        request: CommonSilentFlowRequest\n    ): Promise<AuthenticationResult> {\n        try {\n            const [authResponse, cacheOutcome] = await this.acquireCachedToken({\n                ...request,\n                scopes: request.scopes?.length\n                    ? request.scopes\n                    : [...OIDC_DEFAULT_SCOPES],\n            });\n\n            // if the token is not expired but must be refreshed; get a new one in the background\n            if (cacheOutcome === CacheOutcome.PROACTIVELY_REFRESHED) {\n                this.logger.info(\n                    \"SilentFlowClient:acquireCachedToken - Cached access token's refreshOn property has been exceeded'. It's not expired, but must be refreshed.\"\n                );\n\n                // refresh the access token in the background\n                const refreshTokenClient = new RefreshTokenClient(\n                    this.config,\n                    this.performanceClient\n                );\n\n                refreshTokenClient\n                    .acquireTokenByRefreshToken(request)\n                    .catch(() => {\n                        // do nothing, this is running in the background and no action is to be taken upon success or failure\n                    });\n            }\n\n            // return the cached token\n            return authResponse;\n        } catch (e) {\n            if (\n                e instanceof ClientAuthError &&\n                e.errorCode === ClientAuthErrorCodes.tokenRefreshRequired\n            ) {\n                const refreshTokenClient = new RefreshTokenClient(\n                    this.config,\n                    this.performanceClient\n                );\n                return refreshTokenClient.acquireTokenByRefreshToken(request);\n            } else {\n                throw e;\n            }\n        }\n    }\n\n    /**\n     * Retrieves token from cache or throws an error if it must be refreshed.\n     * @param request\n     */\n    async acquireCachedToken(\n        request: CommonSilentFlowRequest\n    ): Promise<[AuthenticationResult, CacheOutcome]> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.SilentFlowClientAcquireCachedToken,\n            request.correlationId\n        );\n        let lastCacheOutcome: CacheOutcome = CacheOutcome.NOT_APPLICABLE;\n\n        if (\n            request.forceRefresh ||\n            (!this.config.cacheOptions.claimsBasedCachingEnabled &&\n                !StringUtils.isEmptyObj(request.claims))\n        ) {\n            // Must refresh due to present force_refresh flag.\n            this.setCacheOutcome(\n                CacheOutcome.FORCE_REFRESH_OR_CLAIMS,\n                request.correlationId\n            );\n            throw createClientAuthError(\n                ClientAuthErrorCodes.tokenRefreshRequired\n            );\n        }\n\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n        if (!request.account) {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.noAccountInSilentRequest\n            );\n        }\n\n        const requestTenantId =\n            request.account.tenantId ||\n            getTenantFromAuthorityString(request.authority);\n        const tokenKeys = this.cacheManager.getTokenKeys();\n        const cachedAccessToken = this.cacheManager.getAccessToken(\n            request.account,\n            request,\n            tokenKeys,\n            requestTenantId,\n            this.performanceClient,\n            request.correlationId\n        );\n\n        if (!cachedAccessToken) {\n            // must refresh due to non-existent access_token\n            this.setCacheOutcome(\n                CacheOutcome.NO_CACHED_ACCESS_TOKEN,\n                request.correlationId\n            );\n            throw createClientAuthError(\n                ClientAuthErrorCodes.tokenRefreshRequired\n            );\n        } else if (\n            TimeUtils.wasClockTurnedBack(cachedAccessToken.cachedAt) ||\n            TimeUtils.isTokenExpired(\n                cachedAccessToken.expiresOn,\n                this.config.systemOptions.tokenRenewalOffsetSeconds\n            )\n        ) {\n            // must refresh due to the expires_in value\n            this.setCacheOutcome(\n                CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED,\n                request.correlationId\n            );\n            throw createClientAuthError(\n                ClientAuthErrorCodes.tokenRefreshRequired\n            );\n        } else if (\n            cachedAccessToken.refreshOn &&\n            TimeUtils.isTokenExpired(cachedAccessToken.refreshOn, 0)\n        ) {\n            // must refresh (in the background) due to the refresh_in value\n            lastCacheOutcome = CacheOutcome.PROACTIVELY_REFRESHED;\n\n            // don't throw ClientAuthError.createRefreshRequiredError(), return cached token instead\n        }\n\n        const environment =\n            request.authority || this.authority.getPreferredCache();\n        const cacheRecord: CacheRecord = {\n            account: this.cacheManager.readAccountFromCache(request.account),\n            accessToken: cachedAccessToken,\n            idToken: this.cacheManager.getIdToken(\n                request.account,\n                tokenKeys,\n                requestTenantId,\n                this.performanceClient,\n                request.correlationId\n            ),\n            refreshToken: null,\n            appMetadata:\n                this.cacheManager.readAppMetadataFromCache(environment),\n        };\n\n        this.setCacheOutcome(lastCacheOutcome, request.correlationId);\n\n        if (this.config.serverTelemetryManager) {\n            this.config.serverTelemetryManager.incrementCacheHits();\n        }\n\n        return [\n            await invokeAsync(\n                this.generateResultFromCacheRecord.bind(this),\n                PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord,\n                this.logger,\n                this.performanceClient,\n                request.correlationId\n            )(cacheRecord, request),\n            lastCacheOutcome,\n        ];\n    }\n\n    private setCacheOutcome(\n        cacheOutcome: CacheOutcome,\n        correlationId: string\n    ): void {\n        this.serverTelemetryManager?.setCacheOutcome(cacheOutcome);\n        this.performanceClient?.addFields(\n            {\n                cacheOutcome: cacheOutcome,\n            },\n            correlationId\n        );\n        if (cacheOutcome !== CacheOutcome.NOT_APPLICABLE) {\n            this.logger.info(\n                `Token refresh is required due to cache outcome: ${cacheOutcome}`\n            );\n        }\n    }\n\n    /**\n     * Helper function to build response object from the CacheRecord\n     * @param cacheRecord\n     */\n    private async generateResultFromCacheRecord(\n        cacheRecord: CacheRecord,\n        request: CommonSilentFlowRequest\n    ): Promise<AuthenticationResult> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord,\n            request.correlationId\n        );\n        let idTokenClaims: TokenClaims | undefined;\n        if (cacheRecord.idToken) {\n            idTokenClaims = extractTokenClaims(\n                cacheRecord.idToken.secret,\n                this.config.cryptoInterface.base64Decode\n            );\n        }\n\n        // token max_age check\n        if (request.maxAge || request.maxAge === 0) {\n            const authTime = idTokenClaims?.auth_time;\n            if (!authTime) {\n                throw createClientAuthError(\n                    ClientAuthErrorCodes.authTimeNotFound\n                );\n            }\n\n            checkMaxAge(authTime, request.maxAge);\n        }\n\n        return ResponseHandler.generateAuthenticationResult(\n            this.cryptoUtils,\n            this.authority,\n            cacheRecord,\n            true,\n            request,\n            idTokenClaims\n        );\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    ClientAuthErrorCodes,\n    createClientAuthError,\n} from \"../error/ClientAuthError\";\nimport { NetworkResponse } from \"./NetworkManager\";\n\n/**\n * Options allowed by network request APIs.\n */\nexport type NetworkRequestOptions = {\n    headers?: Record<string, string>;\n    body?: string;\n};\n\n/**\n * Client network interface to send backend requests.\n * @interface\n */\nexport interface INetworkModule {\n    /**\n     * Interface function for async network \"GET\" requests. Based on the Fetch standard: https://fetch.spec.whatwg.org/\n     * @param url\n     * @param requestParams\n     * @param enableCaching\n     */\n    sendGetRequestAsync<T>(\n        url: string,\n        options?: NetworkRequestOptions,\n        timeout?: number\n    ): Promise<NetworkResponse<T>>;\n\n    /**\n     * Interface function for async network \"POST\" requests. Based on the Fetch standard: https://fetch.spec.whatwg.org/\n     * @param url\n     * @param requestParams\n     * @param enableCaching\n     */\n    sendPostRequestAsync<T>(\n        url: string,\n        options?: NetworkRequestOptions\n    ): Promise<NetworkResponse<T>>;\n}\n\nexport const StubbedNetworkModule: INetworkModule = {\n    sendGetRequestAsync: () => {\n        return Promise.reject(\n            createClientAuthError(ClientAuthErrorCodes.methodNotImplemented)\n        );\n    },\n    sendPostRequestAsync: () => {\n        return Promise.reject(\n            createClientAuthError(ClientAuthErrorCodes.methodNotImplemented)\n        );\n    },\n};\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nexport const missingKidError = \"missing_kid_error\";\nexport const missingAlgError = \"missing_alg_error\";\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError } from \"./AuthError\";\nimport * as JoseHeaderErrorCodes from \"./JoseHeaderErrorCodes\";\nexport { JoseHeaderErrorCodes };\n\nexport const JoseHeaderErrorMessages = {\n    [JoseHeaderErrorCodes.missingKidError]:\n        \"The JOSE Header for the requested JWT, JWS or JWK object requires a keyId to be configured as the 'kid' header claim. No 'kid' value was provided.\",\n    [JoseHeaderErrorCodes.missingAlgError]:\n        \"The JOSE Header for the requested JWT, JWS or JWK object requires an algorithm to be specified as the 'alg' header claim. No 'alg' value was provided.\",\n};\n\n/**\n * Error thrown when there is an error in the client code running on the browser.\n */\nexport class JoseHeaderError extends AuthError {\n    constructor(errorCode: string, errorMessage?: string) {\n        super(errorCode, errorMessage);\n        this.name = \"JoseHeaderError\";\n\n        Object.setPrototypeOf(this, JoseHeaderError.prototype);\n    }\n}\n\n/** Returns JoseHeaderError object */\nexport function createJoseHeaderError(code: string): JoseHeaderError {\n    return new JoseHeaderError(code, JoseHeaderErrorMessages[code]);\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    JoseHeaderErrorCodes,\n    createJoseHeaderError,\n} from \"../error/JoseHeaderError\";\nimport { JsonWebTokenTypes } from \"../utils/Constants\";\n\nexport type JoseHeaderOptions = {\n    typ?: JsonWebTokenTypes;\n    alg?: string;\n    kid?: string;\n};\n\n/** @internal */\nexport class JoseHeader {\n    public typ?: JsonWebTokenTypes;\n    public alg?: string;\n    public kid?: string;\n\n    constructor(options: JoseHeaderOptions) {\n        this.typ = options.typ;\n        this.alg = options.alg;\n        this.kid = options.kid;\n    }\n\n    /**\n     * Builds SignedHttpRequest formatted JOSE Header from the\n     * JOSE Header options provided or previously set on the object and returns\n     * the stringified header object.\n     * Throws if keyId or algorithm aren't provided since they are required for Access Token Binding.\n     * @param shrHeaderOptions\n     * @returns\n     */\n    static getShrHeaderString(shrHeaderOptions: JoseHeaderOptions): string {\n        // KeyID is required on the SHR header\n        if (!shrHeaderOptions.kid) {\n            throw createJoseHeaderError(JoseHeaderErrorCodes.missingKidError);\n        }\n\n        // Alg is required on the SHR header\n        if (!shrHeaderOptions.alg) {\n            throw createJoseHeaderError(JoseHeaderErrorCodes.missingAlgError);\n        }\n\n        const shrHeader = new JoseHeader({\n            // Access Token PoP headers must have type pop, but the type header can be overriden for special cases\n            typ: shrHeaderOptions.typ || JsonWebTokenTypes.Pop,\n            kid: shrHeaderOptions.kid,\n            alg: shrHeaderOptions.alg,\n        });\n\n        return JSON.stringify(shrHeader);\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    createClientConfigurationError,\n    ClientConfigurationErrorCodes,\n} from \"../error/ClientConfigurationError\";\nimport { Constants, HeaderNames } from \"../utils/Constants\";\n\ntype WWWAuthenticateChallenges = {\n    nonce?: string;\n};\n\ntype AuthenticationInfoChallenges = {\n    nextnonce?: string;\n};\n\n/**\n * This is a helper class that parses supported HTTP response authentication headers to extract and return\n * header challenge values that can be used outside the basic authorization flows.\n */\nexport class AuthenticationHeaderParser {\n    private headers: Record<string, string>;\n\n    constructor(headers: Record<string, string>) {\n        this.headers = headers;\n    }\n\n    /**\n     * This method parses the SHR nonce value out of either the Authentication-Info or WWW-Authenticate authentication headers.\n     * @returns\n     */\n    getShrNonce(): string {\n        // Attempt to parse nonce from Authentiacation-Info\n        const authenticationInfo = this.headers[HeaderNames.AuthenticationInfo];\n        if (authenticationInfo) {\n            const authenticationInfoChallenges =\n                this.parseChallenges<AuthenticationInfoChallenges>(\n                    authenticationInfo\n                );\n            if (authenticationInfoChallenges.nextnonce) {\n                return authenticationInfoChallenges.nextnonce;\n            }\n            throw createClientConfigurationError(\n                ClientConfigurationErrorCodes.invalidAuthenticationHeader\n            );\n        }\n\n        // Attempt to parse nonce from WWW-Authenticate\n        const wwwAuthenticate = this.headers[HeaderNames.WWWAuthenticate];\n        if (wwwAuthenticate) {\n            const wwwAuthenticateChallenges =\n                this.parseChallenges<WWWAuthenticateChallenges>(\n                    wwwAuthenticate\n                );\n            if (wwwAuthenticateChallenges.nonce) {\n                return wwwAuthenticateChallenges.nonce;\n            }\n            throw createClientConfigurationError(\n                ClientConfigurationErrorCodes.invalidAuthenticationHeader\n            );\n        }\n\n        // If neither header is present, throw missing headers error\n        throw createClientConfigurationError(\n            ClientConfigurationErrorCodes.missingNonceAuthenticationHeader\n        );\n    }\n\n    /**\n     * Parses an HTTP header's challenge set into a key/value map.\n     * @param header\n     * @returns\n     */\n    private parseChallenges<T>(header: string): T {\n        const schemeSeparator = header.indexOf(\" \");\n        const challenges = header.substr(schemeSeparator + 1).split(\",\");\n        const challengeMap = {} as T;\n\n        challenges.forEach((challenge: string) => {\n            const [key, value] = challenge.split(\"=\");\n            // Remove escaped quotation marks (', \") from challenge string to keep only the challenge value\n            challengeMap[key] = unescape(\n                value.replace(/['\"]+/g, Constants.EMPTY_STRING)\n            );\n        });\n\n        return challengeMap;\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    SERVER_TELEM_CONSTANTS,\n    Separators,\n    CacheOutcome,\n    Constants,\n    RegionDiscoverySources,\n    RegionDiscoveryOutcomes,\n} from \"../../utils/Constants\";\nimport { CacheManager } from \"../../cache/CacheManager\";\nimport { AuthError } from \"../../error/AuthError\";\nimport { ServerTelemetryRequest } from \"./ServerTelemetryRequest\";\nimport { ServerTelemetryEntity } from \"../../cache/entities/ServerTelemetryEntity\";\nimport { RegionDiscoveryMetadata } from \"../../authority/RegionDiscoveryMetadata\";\n\nconst skuGroupSeparator = \",\";\nconst skuValueSeparator = \"|\";\n\ntype SkuParams = {\n    libraryName?: string;\n    libraryVersion?: string;\n    extensionName?: string;\n    extensionVersion?: string;\n    skus?: string;\n};\n\nfunction makeExtraSkuString(params: SkuParams): string {\n    const {\n        skus,\n        libraryName,\n        libraryVersion,\n        extensionName,\n        extensionVersion,\n    } = params;\n    const skuMap: Map<number, (string | undefined)[]> = new Map([\n        [0, [libraryName, libraryVersion]],\n        [2, [extensionName, extensionVersion]],\n    ]);\n    let skuArr: string[] = [];\n\n    if (skus?.length) {\n        skuArr = skus.split(skuGroupSeparator);\n\n        // Ignore invalid input sku param\n        if (skuArr.length < 4) {\n            return skus;\n        }\n    } else {\n        skuArr = Array.from({ length: 4 }, () => skuValueSeparator);\n    }\n\n    skuMap.forEach((value, key) => {\n        if (value.length === 2 && value[0]?.length && value[1]?.length) {\n            setSku({\n                skuArr,\n                index: key,\n                skuName: value[0],\n                skuVersion: value[1],\n            });\n        }\n    });\n\n    return skuArr.join(skuGroupSeparator);\n}\n\nfunction setSku(params: {\n    skuArr: string[];\n    index: number;\n    skuName: string;\n    skuVersion: string;\n}): void {\n    const { skuArr, index, skuName, skuVersion } = params;\n    if (index >= skuArr.length) {\n        return;\n    }\n    skuArr[index] = [skuName, skuVersion].join(skuValueSeparator);\n}\n\n/** @internal */\nexport class ServerTelemetryManager {\n    private cacheManager: CacheManager;\n    private apiId: number;\n    private correlationId: string;\n    private telemetryCacheKey: string;\n    private wrapperSKU: String;\n    private wrapperVer: String;\n    private regionUsed: string | undefined;\n    private regionSource: RegionDiscoverySources | undefined;\n    private regionOutcome: RegionDiscoveryOutcomes | undefined;\n    private cacheOutcome: CacheOutcome = CacheOutcome.NOT_APPLICABLE;\n\n    constructor(\n        telemetryRequest: ServerTelemetryRequest,\n        cacheManager: CacheManager\n    ) {\n        this.cacheManager = cacheManager;\n        this.apiId = telemetryRequest.apiId;\n        this.correlationId = telemetryRequest.correlationId;\n        this.wrapperSKU = telemetryRequest.wrapperSKU || Constants.EMPTY_STRING;\n        this.wrapperVer = telemetryRequest.wrapperVer || Constants.EMPTY_STRING;\n\n        this.telemetryCacheKey =\n            SERVER_TELEM_CONSTANTS.CACHE_KEY +\n            Separators.CACHE_KEY_SEPARATOR +\n            telemetryRequest.clientId;\n    }\n\n    /**\n     * API to add MSER Telemetry to request\n     */\n    generateCurrentRequestHeaderValue(): string {\n        const request = `${this.apiId}${SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR}${this.cacheOutcome}`;\n        const platformFieldsArr = [this.wrapperSKU, this.wrapperVer];\n        const nativeBrokerErrorCode = this.getNativeBrokerErrorCode();\n        if (nativeBrokerErrorCode?.length) {\n            platformFieldsArr.push(`broker_error=${nativeBrokerErrorCode}`);\n        }\n        const platformFields = platformFieldsArr.join(\n            SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR\n        );\n        const regionDiscoveryFields = this.getRegionDiscoveryFields();\n        const requestWithRegionDiscoveryFields = [\n            request,\n            regionDiscoveryFields,\n        ].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n\n        return [\n            SERVER_TELEM_CONSTANTS.SCHEMA_VERSION,\n            requestWithRegionDiscoveryFields,\n            platformFields,\n        ].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n    }\n\n    /**\n     * API to add MSER Telemetry for the last failed request\n     */\n    generateLastRequestHeaderValue(): string {\n        const lastRequests = this.getLastRequests();\n\n        const maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n        const failedRequests = lastRequests.failedRequests\n            .slice(0, 2 * maxErrors)\n            .join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        const errors = lastRequests.errors\n            .slice(0, maxErrors)\n            .join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        const errorCount = lastRequests.errors.length;\n\n        // Indicate whether this header contains all data or partial data\n        const overflow =\n            maxErrors < errorCount\n                ? SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE\n                : SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;\n        const platformFields = [errorCount, overflow].join(\n            SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR\n        );\n\n        return [\n            SERVER_TELEM_CONSTANTS.SCHEMA_VERSION,\n            lastRequests.cacheHits,\n            failedRequests,\n            errors,\n            platformFields,\n        ].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n    }\n\n    /**\n     * API to cache token failures for MSER data capture\n     * @param error\n     */\n    cacheFailedRequest(error: unknown): void {\n        const lastRequests = this.getLastRequests();\n        if (\n            lastRequests.errors.length >=\n            SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS\n        ) {\n            // Remove a cached error to make room, first in first out\n            lastRequests.failedRequests.shift(); // apiId\n            lastRequests.failedRequests.shift(); // correlationId\n            lastRequests.errors.shift();\n        }\n\n        lastRequests.failedRequests.push(this.apiId, this.correlationId);\n\n        if (error instanceof Error && !!error && error.toString()) {\n            if (error instanceof AuthError) {\n                if (error.subError) {\n                    lastRequests.errors.push(error.subError);\n                } else if (error.errorCode) {\n                    lastRequests.errors.push(error.errorCode);\n                } else {\n                    lastRequests.errors.push(error.toString());\n                }\n            } else {\n                lastRequests.errors.push(error.toString());\n            }\n        } else {\n            lastRequests.errors.push(SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);\n        }\n\n        this.cacheManager.setServerTelemetry(\n            this.telemetryCacheKey,\n            lastRequests\n        );\n\n        return;\n    }\n\n    /**\n     * Update server telemetry cache entry by incrementing cache hit counter\n     */\n    incrementCacheHits(): number {\n        const lastRequests = this.getLastRequests();\n        lastRequests.cacheHits += 1;\n\n        this.cacheManager.setServerTelemetry(\n            this.telemetryCacheKey,\n            lastRequests\n        );\n        return lastRequests.cacheHits;\n    }\n\n    /**\n     * Get the server telemetry entity from cache or initialize a new one\n     */\n    getLastRequests(): ServerTelemetryEntity {\n        const initialValue: ServerTelemetryEntity = {\n            failedRequests: [],\n            errors: [],\n            cacheHits: 0,\n        };\n        const lastRequests = this.cacheManager.getServerTelemetry(\n            this.telemetryCacheKey\n        ) as ServerTelemetryEntity;\n\n        return lastRequests || initialValue;\n    }\n\n    /**\n     * Remove server telemetry cache entry\n     */\n    clearTelemetryCache(): void {\n        const lastRequests = this.getLastRequests();\n        const numErrorsFlushed =\n            ServerTelemetryManager.maxErrorsToSend(lastRequests);\n        const errorCount = lastRequests.errors.length;\n        if (numErrorsFlushed === errorCount) {\n            // All errors were sent on last request, clear Telemetry cache\n            this.cacheManager.removeItem(this.telemetryCacheKey);\n        } else {\n            // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed\n            const serverTelemEntity: ServerTelemetryEntity = {\n                failedRequests: lastRequests.failedRequests.slice(\n                    numErrorsFlushed * 2\n                ), // failedRequests contains 2 items for each error\n                errors: lastRequests.errors.slice(numErrorsFlushed),\n                cacheHits: 0,\n            };\n\n            this.cacheManager.setServerTelemetry(\n                this.telemetryCacheKey,\n                serverTelemEntity\n            );\n        }\n    }\n\n    /**\n     * Returns the maximum number of errors that can be flushed to the server in the next network request\n     * @param serverTelemetryEntity\n     */\n    static maxErrorsToSend(\n        serverTelemetryEntity: ServerTelemetryEntity\n    ): number {\n        let i;\n        let maxErrors = 0;\n        let dataSize = 0;\n        const errorCount = serverTelemetryEntity.errors.length;\n        for (i = 0; i < errorCount; i++) {\n            // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs\n            const apiId =\n                serverTelemetryEntity.failedRequests[2 * i] ||\n                Constants.EMPTY_STRING;\n            const correlationId =\n                serverTelemetryEntity.failedRequests[2 * i + 1] ||\n                Constants.EMPTY_STRING;\n            const errorCode =\n                serverTelemetryEntity.errors[i] || Constants.EMPTY_STRING;\n\n            // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators\n            dataSize +=\n                apiId.toString().length +\n                correlationId.toString().length +\n                errorCode.length +\n                3;\n\n            if (dataSize < SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {\n                // Adding this entry to the header would still keep header size below the limit\n                maxErrors += 1;\n            } else {\n                break;\n            }\n        }\n\n        return maxErrors;\n    }\n\n    /**\n     * Get the region discovery fields\n     *\n     * @returns string\n     */\n    getRegionDiscoveryFields(): string {\n        const regionDiscoveryFields: string[] = [];\n\n        regionDiscoveryFields.push(this.regionUsed || Constants.EMPTY_STRING);\n        regionDiscoveryFields.push(this.regionSource || Constants.EMPTY_STRING);\n        regionDiscoveryFields.push(\n            this.regionOutcome || Constants.EMPTY_STRING\n        );\n\n        return regionDiscoveryFields.join(\",\");\n    }\n\n    /**\n     * Update the region discovery metadata\n     *\n     * @param regionDiscoveryMetadata\n     * @returns void\n     */\n    updateRegionDiscoveryMetadata(\n        regionDiscoveryMetadata: RegionDiscoveryMetadata\n    ): void {\n        this.regionUsed = regionDiscoveryMetadata.region_used;\n        this.regionSource = regionDiscoveryMetadata.region_source;\n        this.regionOutcome = regionDiscoveryMetadata.region_outcome;\n    }\n\n    /**\n     * Set cache outcome\n     */\n    setCacheOutcome(cacheOutcome: CacheOutcome): void {\n        this.cacheOutcome = cacheOutcome;\n    }\n\n    setNativeBrokerErrorCode(errorCode: string): void {\n        const lastRequests = this.getLastRequests();\n        lastRequests.nativeBrokerErrorCode = errorCode;\n        this.cacheManager.setServerTelemetry(\n            this.telemetryCacheKey,\n            lastRequests\n        );\n    }\n\n    getNativeBrokerErrorCode(): string | undefined {\n        return this.getLastRequests().nativeBrokerErrorCode;\n    }\n\n    clearNativeBrokerErrorCode(): void {\n        const lastRequests = this.getLastRequests();\n        delete lastRequests.nativeBrokerErrorCode;\n        this.cacheManager.setServerTelemetry(\n            this.telemetryCacheKey,\n            lastRequests\n        );\n    }\n\n    static makeExtraSkuString(params: SkuParams): string {\n        return makeExtraSkuString(params);\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    IPerformanceClient,\n    InProgressPerformanceEvent,\n} from \"./IPerformanceClient\";\nimport { IPerformanceMeasurement } from \"./IPerformanceMeasurement\";\nimport { PerformanceEvent, PerformanceEventStatus } from \"./PerformanceEvent\";\n\nexport class StubPerformanceMeasurement implements IPerformanceMeasurement {\n    startMeasurement(): void {\n        return;\n    }\n    endMeasurement(): void {\n        return;\n    }\n    flushMeasurement(): number | null {\n        return null;\n    }\n}\n\nexport class StubPerformanceClient implements IPerformanceClient {\n    generateId(): string {\n        return \"callback-id\";\n    }\n\n    startMeasurement(\n        measureName: string,\n        correlationId?: string | undefined\n    ): InProgressPerformanceEvent {\n        return {\n            end: () => null,\n            discard: () => {},\n            add: () => {},\n            increment: () => {},\n            event: {\n                eventId: this.generateId(),\n                status: PerformanceEventStatus.InProgress,\n                authority: \"\",\n                libraryName: \"\",\n                libraryVersion: \"\",\n                clientId: \"\",\n                name: measureName,\n                startTimeMs: Date.now(),\n                correlationId: correlationId || \"\",\n            },\n            measurement: new StubPerformanceMeasurement(),\n        };\n    }\n\n    startPerformanceMeasurement(): IPerformanceMeasurement {\n        return new StubPerformanceMeasurement();\n    }\n    calculateQueuedTime(): number {\n        return 0;\n    }\n\n    addQueueMeasurement(): void {\n        return;\n    }\n\n    setPreQueueTime(): void {\n        return;\n    }\n\n    endMeasurement(): PerformanceEvent | null {\n        return null;\n    }\n\n    discardMeasurements(): void {\n        return;\n    }\n\n    removePerformanceCallback(): boolean {\n        return true;\n    }\n\n    addPerformanceCallback(): string {\n        return \"\";\n    }\n\n    emitEvents(): void {\n        return;\n    }\n\n    addFields(): void {\n        return;\n    }\n\n    incrementFields(): void {\n        return;\n    }\n\n    cacheEventByCorrelationId(): void {\n        return;\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ApplicationTelemetry } from \"../../config/ClientConfiguration\";\nimport { Logger } from \"../../logger/Logger\";\nimport {\n    InProgressPerformanceEvent,\n    IPerformanceClient,\n    PerformanceCallbackFunction,\n    QueueMeasurement,\n} from \"./IPerformanceClient\";\nimport {\n    IntFields,\n    PerformanceEvent,\n    PerformanceEventAbbreviations,\n    PerformanceEventContext,\n    PerformanceEvents,\n    PerformanceEventStackedContext,\n    PerformanceEventStatus,\n} from \"./PerformanceEvent\";\nimport { IPerformanceMeasurement } from \"./IPerformanceMeasurement\";\nimport { StubPerformanceMeasurement } from \"./StubPerformanceClient\";\nimport { AuthError } from \"../../error/AuthError\";\nimport { CacheError } from \"../../error/CacheError\";\nimport { ServerError } from \"../../error/ServerError\";\nimport { InteractionRequiredAuthError } from \"../../error/InteractionRequiredAuthError\";\n\nexport interface PreQueueEvent {\n    name: PerformanceEvents;\n    time: number;\n}\n\n/**\n * Starts context by adding payload to the stack\n * @param event {PerformanceEvent}\n * @param abbreviations {Map<string, string>} event name abbreviations\n * @param stack {?PerformanceEventStackedContext[]} stack\n */\nexport function startContext(\n    event: PerformanceEvent,\n    abbreviations: Map<string, string>,\n    stack?: PerformanceEventStackedContext[]\n): void {\n    if (!stack) {\n        return;\n    }\n\n    stack.push({\n        name: abbreviations.get(event.name) || event.name,\n    });\n}\n\n/**\n * Ends context by removing payload from the stack and returning parent or self, if stack is empty, payload\n *\n * @param event {PerformanceEvent}\n * @param abbreviations {Map<string, string>} event name abbreviations\n * @param stack {?PerformanceEventStackedContext[]} stack\n * @param error {?unknown} error\n */\nexport function endContext(\n    event: PerformanceEvent,\n    abbreviations: Map<string, string>,\n    stack?: PerformanceEventStackedContext[],\n    error?: unknown\n): PerformanceEventContext | undefined {\n    if (!stack?.length) {\n        return;\n    }\n\n    const peek = (stack: PerformanceEventStackedContext[]) => {\n        return stack.length ? stack[stack.length - 1] : undefined;\n    };\n\n    const abbrEventName = abbreviations.get(event.name) || event.name;\n    const top = peek(stack);\n    if (top?.name !== abbrEventName) {\n        return;\n    }\n\n    const current = stack?.pop();\n    if (!current) {\n        return;\n    }\n\n    const errorCode =\n        error instanceof AuthError\n            ? error.errorCode\n            : error instanceof Error\n            ? error.name\n            : undefined;\n    const subErr = error instanceof AuthError ? error.subError : undefined;\n\n    if (errorCode && current.childErr !== errorCode) {\n        current.err = errorCode;\n        if (subErr) {\n            current.subErr = subErr;\n        }\n    }\n\n    delete current.name;\n    delete current.childErr;\n\n    const context: PerformanceEventContext = {\n        ...current,\n        dur: event.durationMs,\n    };\n\n    if (!event.success) {\n        context.fail = 1;\n    }\n\n    const parent = peek(stack);\n    if (!parent) {\n        return { [abbrEventName]: context };\n    }\n\n    if (errorCode) {\n        parent.childErr = errorCode;\n    }\n\n    let childName: string;\n    if (!parent[abbrEventName]) {\n        childName = abbrEventName;\n    } else {\n        const siblings = Object.keys(parent).filter((key) =>\n            key.startsWith(abbrEventName)\n        ).length;\n        childName = `${abbrEventName}_${siblings + 1}`;\n    }\n    parent[childName] = context;\n    return parent;\n}\n\n/**\n * Adds error name and stack trace to the telemetry event\n * @param error {Error}\n * @param logger {Logger}\n * @param event {PerformanceEvent}\n * @param stackMaxSize {number} max error stack size to capture\n */\nexport function addError(\n    error: unknown,\n    logger: Logger,\n    event: PerformanceEvent,\n    stackMaxSize: number = 5\n): void {\n    if (!(error instanceof Error)) {\n        logger.trace(\n            \"PerformanceClient.addErrorStack: Input error is not instance of Error\",\n            event.correlationId\n        );\n        return;\n    } else if (error instanceof AuthError) {\n        event.errorCode = error.errorCode;\n        event.subErrorCode = error.subError;\n        if (\n            error instanceof ServerError ||\n            error instanceof InteractionRequiredAuthError\n        ) {\n            event.serverErrorNo = error.errorNo;\n        }\n        return;\n    } else if (error instanceof CacheError) {\n        event.errorCode = error.errorCode;\n        return;\n    } else if (event.errorStack?.length) {\n        logger.trace(\n            \"PerformanceClient.addErrorStack: Stack already exist\",\n            event.correlationId\n        );\n        return;\n    } else if (!error.stack?.length) {\n        logger.trace(\n            \"PerformanceClient.addErrorStack: Input stack is empty\",\n            event.correlationId\n        );\n        return;\n    }\n\n    if (error.stack) {\n        event.errorStack = compactStack(error.stack, stackMaxSize);\n    }\n    event.errorName = error.name;\n}\n\n/**\n * Compacts error stack into array by fetching N first entries\n * @param stack {string} error stack\n * @param stackMaxSize {number} max error stack size to capture\n * @returns {string[]}\n */\nexport function compactStack(stack: string, stackMaxSize: number): string[] {\n    if (stackMaxSize < 0) {\n        return [];\n    }\n\n    const stackArr = stack.split(\"\\n\") || [];\n    if (stackArr.length < 2) {\n        return [];\n    }\n\n    const res = [];\n    // Get top N stack lines\n    for (\n        // Skip first line as it may contain PII data\n        let ix = Math.max(stackArr.length - stackMaxSize - 1, 1);\n        ix < stackArr.length;\n        ix++\n    ) {\n        const line = stackArr[ix];\n        if (res.length >= stackMaxSize) {\n            break;\n        }\n        res.push(compactStackLine(line));\n    }\n    return res;\n}\n\n/**\n * Compacts error stack line by shortening file path\n * Example: https://localhost/msal-common/src/authority/Authority.js:100:1 -> Authority.js:100:1\n * @param line {string} stack line\n * @returns {string}\n */\nexport function compactStackLine(line: string): string {\n    const filePathIx = line.lastIndexOf(\" \") + 1;\n    if (filePathIx < 1) {\n        return line;\n    }\n    const filePath = line.substring(filePathIx);\n\n    let fileNameIx = filePath.lastIndexOf(\"/\");\n    fileNameIx = fileNameIx < 0 ? filePath.lastIndexOf(\"\\\\\") : fileNameIx;\n\n    if (fileNameIx >= 0) {\n        return (\n            line.substring(0, filePathIx) +\n            \"(\" +\n            filePath.substring(fileNameIx + 1) +\n            (filePath.charAt(filePath.length - 1) === \")\" ? \"\" : \")\")\n        ).trimStart();\n    }\n\n    return line.trimStart();\n}\n\nexport abstract class PerformanceClient implements IPerformanceClient {\n    protected authority: string;\n    protected libraryName: string;\n    protected libraryVersion: string;\n    protected applicationTelemetry: ApplicationTelemetry;\n    protected clientId: string;\n    protected logger: Logger;\n    protected callbacks: Map<string, PerformanceCallbackFunction>;\n\n    /**\n     * Multiple events with the same correlation id.\n     * @protected\n     * @type {Map<string, PerformanceEvent>}\n     */\n    protected eventsByCorrelationId: Map<string, PerformanceEvent>;\n\n    /**\n     * Map of pre-queue times by correlation Id\n     *\n     * @protected\n     * @type {Map<string, PreQueueEvent>}\n     */\n    protected preQueueTimeByCorrelationId: Map<string, PreQueueEvent>;\n\n    /**\n     * Map of queue measurements by correlation Id\n     *\n     * @protected\n     * @type {Map<string, Array<QueueMeasurement>>}\n     */\n    protected queueMeasurements: Map<string, Array<QueueMeasurement>>;\n\n    protected intFields: Set<string>;\n\n    /**\n     * Map of stacked events by correlation id.\n     *\n     * @protected\n     */\n    protected eventStack: Map<string, PerformanceEventStackedContext[]>;\n\n    /**\n     * Event name abbreviations\n     *\n     * @protected\n     */\n    protected abbreviations: Map<string, string>;\n\n    /**\n     * Creates an instance of PerformanceClient,\n     * an abstract class containing core performance telemetry logic.\n     *\n     * @constructor\n     * @param {string} clientId Client ID of the application\n     * @param {string} authority Authority used by the application\n     * @param {Logger} logger Logger used by the application\n     * @param {string} libraryName Name of the library\n     * @param {string} libraryVersion Version of the library\n     * @param {ApplicationTelemetry} applicationTelemetry application name and version\n     * @param {Set<String>} intFields integer fields to be truncated\n     * @param {Map<string, string>} abbreviations event name abbreviations\n     */\n    constructor(\n        clientId: string,\n        authority: string,\n        logger: Logger,\n        libraryName: string,\n        libraryVersion: string,\n        applicationTelemetry: ApplicationTelemetry,\n        intFields?: Set<string>,\n        abbreviations?: Map<string, string>\n    ) {\n        this.authority = authority;\n        this.libraryName = libraryName;\n        this.libraryVersion = libraryVersion;\n        this.applicationTelemetry = applicationTelemetry;\n        this.clientId = clientId;\n        this.logger = logger;\n        this.callbacks = new Map();\n        this.eventsByCorrelationId = new Map();\n        this.eventStack = new Map();\n        this.queueMeasurements = new Map();\n        this.preQueueTimeByCorrelationId = new Map();\n        this.intFields = intFields || new Set();\n        for (const item of IntFields) {\n            this.intFields.add(item);\n        }\n        this.abbreviations = abbreviations || new Map();\n        for (const [key, value] of PerformanceEventAbbreviations) {\n            this.abbreviations.set(key, value);\n        }\n    }\n\n    /**\n     * Generates and returns a unique id, typically a guid.\n     *\n     * @abstract\n     * @returns {string}\n     */\n    abstract generateId(): string;\n\n    /**\n     * Starts and returns an platform-specific implementation of IPerformanceMeasurement.\n     * Note: this function can be changed to abstract at the next major version bump.\n     *\n     * @param {string} measureName\n     * @param {string} correlationId\n     * @returns {IPerformanceMeasurement}\n     * @deprecated This method will be removed in the next major version\n     */\n    startPerformanceMeasurement(\n        measureName: string, // eslint-disable-line @typescript-eslint/no-unused-vars\n        correlationId: string // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): IPerformanceMeasurement {\n        return {} as IPerformanceMeasurement;\n    }\n\n    /**\n     * Sets pre-queue time by correlation Id\n     *\n     * @abstract\n     * @param {PerformanceEvents} eventName\n     * @param {string} correlationId\n     * @returns\n     */\n    abstract setPreQueueTime(\n        eventName: PerformanceEvents,\n        correlationId?: string\n    ): void;\n\n    /**\n     * Gets map of pre-queue times by correlation Id\n     *\n     * @param {PerformanceEvents} eventName\n     * @param {string} correlationId\n     * @returns {number}\n     */\n    getPreQueueTime(eventName: string, correlationId: string): number | void {\n        const preQueueEvent: PreQueueEvent | undefined =\n            this.preQueueTimeByCorrelationId.get(correlationId);\n\n        if (!preQueueEvent) {\n            this.logger.trace(\n                `PerformanceClient.getPreQueueTime: no pre-queue times found for correlationId: ${correlationId}, unable to add queue measurement`\n            );\n            return;\n        } else if (preQueueEvent.name !== eventName) {\n            this.logger.trace(\n                `PerformanceClient.getPreQueueTime: no pre-queue time found for ${eventName}, unable to add queue measurement`\n            );\n            return;\n        }\n\n        return preQueueEvent.time;\n    }\n\n    /**\n     * Calculates the difference between current time and time when function was queued.\n     * Note: It is possible to have 0 as the queue time if the current time and the queued time was the same.\n     *\n     * @param {number} preQueueTime\n     * @param {number} currentTime\n     * @returns {number}\n     */\n    calculateQueuedTime(preQueueTime: number, currentTime: number): number {\n        if (preQueueTime < 1) {\n            this.logger.trace(\n                `PerformanceClient: preQueueTime should be a positive integer and not ${preQueueTime}`\n            );\n            return 0;\n        }\n\n        if (currentTime < 1) {\n            this.logger.trace(\n                `PerformanceClient: currentTime should be a positive integer and not ${currentTime}`\n            );\n            return 0;\n        }\n\n        if (currentTime < preQueueTime) {\n            this.logger.trace(\n                \"PerformanceClient: currentTime is less than preQueueTime, check how time is being retrieved\"\n            );\n            return 0;\n        }\n\n        return currentTime - preQueueTime;\n    }\n\n    /**\n     * Adds queue measurement time to QueueMeasurements array for given correlation ID.\n     *\n     * @param {PerformanceEvents} eventName\n     * @param {?string} correlationId\n     * @param {?number} queueTime\n     * @param {?boolean} manuallyCompleted - indicator for manually completed queue measurements\n     * @returns\n     */\n    addQueueMeasurement(\n        eventName: string,\n        correlationId?: string,\n        queueTime?: number,\n        manuallyCompleted?: boolean\n    ): void {\n        if (!correlationId) {\n            this.logger.trace(\n                `PerformanceClient.addQueueMeasurement: correlationId not provided for ${eventName}, cannot add queue measurement`\n            );\n            return;\n        }\n\n        if (queueTime === 0) {\n            // Possible for there to be no queue time after calculation\n            this.logger.trace(\n                `PerformanceClient.addQueueMeasurement: queue time provided for ${eventName} is ${queueTime}`\n            );\n        } else if (!queueTime) {\n            this.logger.trace(\n                `PerformanceClient.addQueueMeasurement: no queue time provided for ${eventName}`\n            );\n            return;\n        }\n\n        const queueMeasurement: QueueMeasurement = {\n            eventName,\n            // Always default queue time to 0 for manually completed (improperly instrumented)\n            queueTime: manuallyCompleted ? 0 : queueTime,\n            manuallyCompleted,\n        };\n\n        // Adds to existing correlation Id if present in queueMeasurements\n        const existingMeasurements = this.queueMeasurements.get(correlationId);\n        if (existingMeasurements) {\n            existingMeasurements.push(queueMeasurement);\n            this.queueMeasurements.set(correlationId, existingMeasurements);\n        } else {\n            // Sets new correlation Id if not present in queueMeasurements\n            this.logger.trace(\n                `PerformanceClient.addQueueMeasurement: adding correlationId ${correlationId} to queue measurements`\n            );\n            const measurementArray = [queueMeasurement];\n            this.queueMeasurements.set(correlationId, measurementArray);\n        }\n        // Delete processed pre-queue event.\n        this.preQueueTimeByCorrelationId.delete(correlationId);\n    }\n\n    /**\n     * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\n     *\n     * @param {PerformanceEvents} measureName\n     * @param {?string} [correlationId]\n     * @returns {InProgressPerformanceEvent}\n     */\n    startMeasurement(\n        measureName: string,\n        correlationId?: string\n    ): InProgressPerformanceEvent {\n        // Generate a placeholder correlation if the request does not provide one\n        const eventCorrelationId = correlationId || this.generateId();\n        if (!correlationId) {\n            this.logger.info(\n                `PerformanceClient: No correlation id provided for ${measureName}, generating`,\n                eventCorrelationId\n            );\n        }\n\n        this.logger.trace(\n            `PerformanceClient: Performance measurement started for ${measureName}`,\n            eventCorrelationId\n        );\n\n        const inProgressEvent: PerformanceEvent = {\n            eventId: this.generateId(),\n            status: PerformanceEventStatus.InProgress,\n            authority: this.authority,\n            libraryName: this.libraryName,\n            libraryVersion: this.libraryVersion,\n            clientId: this.clientId,\n            name: measureName,\n            startTimeMs: Date.now(),\n            correlationId: eventCorrelationId,\n            appName: this.applicationTelemetry?.appName,\n            appVersion: this.applicationTelemetry?.appVersion,\n        };\n\n        // Store in progress events so they can be discarded if not ended properly\n        this.cacheEventByCorrelationId(inProgressEvent);\n        startContext(\n            inProgressEvent,\n            this.abbreviations,\n            this.eventStack.get(eventCorrelationId)\n        );\n\n        // Return the event and functions the caller can use to properly end/flush the measurement\n        return {\n            end: (\n                event?: Partial<PerformanceEvent>,\n                error?: unknown\n            ): PerformanceEvent | null => {\n                return this.endMeasurement(\n                    {\n                        // Initial set of event properties\n                        ...inProgressEvent,\n                        // Properties set when event ends\n                        ...event,\n                    },\n                    error\n                );\n            },\n            discard: () => {\n                return this.discardMeasurements(inProgressEvent.correlationId);\n            },\n            add: (fields: { [key: string]: {} | undefined }) => {\n                return this.addFields(fields, inProgressEvent.correlationId);\n            },\n            increment: (fields: { [key: string]: number | undefined }) => {\n                return this.incrementFields(\n                    fields,\n                    inProgressEvent.correlationId\n                );\n            },\n            event: inProgressEvent,\n            measurement: new StubPerformanceMeasurement(),\n        };\n    }\n\n    /**\n     * Stops measuring the performance for an operation. Should only be called directly by PerformanceClient classes,\n     * as consumers should instead use the function returned by startMeasurement.\n     * Adds a new field named as \"[event name]DurationMs\" for sub-measurements, completes and emits an event\n     * otherwise.\n     *\n     * @param {PerformanceEvent} event\n     * @param {unknown} error\n     * @returns {(PerformanceEvent | null)}\n     */\n    endMeasurement(\n        event: PerformanceEvent,\n        error?: unknown\n    ): PerformanceEvent | null {\n        const rootEvent: PerformanceEvent | undefined =\n            this.eventsByCorrelationId.get(event.correlationId);\n        if (!rootEvent) {\n            this.logger.trace(\n                `PerformanceClient: Measurement not found for ${event.eventId}`,\n                event.correlationId\n            );\n            return null;\n        }\n\n        const isRoot = event.eventId === rootEvent.eventId;\n        let queueInfo = {\n            totalQueueTime: 0,\n            totalQueueCount: 0,\n            manuallyCompletedCount: 0,\n        };\n\n        event.durationMs = Math.round(\n            event.durationMs || this.getDurationMs(event.startTimeMs)\n        );\n\n        const context = JSON.stringify(\n            endContext(\n                event,\n                this.abbreviations,\n                this.eventStack.get(rootEvent.correlationId),\n                error\n            )\n        );\n\n        if (isRoot) {\n            queueInfo = this.getQueueInfo(event.correlationId);\n            this.discardMeasurements(rootEvent.correlationId);\n        } else {\n            rootEvent.incompleteSubMeasurements?.delete(event.eventId);\n        }\n\n        this.logger.trace(\n            `PerformanceClient: Performance measurement ended for ${event.name}: ${event.durationMs} ms`,\n            event.correlationId\n        );\n\n        // Add sub-measurement attribute to root event.\n        if (!isRoot) {\n            rootEvent[event.name + \"DurationMs\"] = Math.floor(event.durationMs);\n            return { ...rootEvent };\n        }\n\n        if (error) {\n            addError(error, this.logger, rootEvent);\n        }\n\n        let finalEvent: PerformanceEvent = { ...rootEvent, ...event };\n        let incompleteSubsCount: number = 0;\n        // Incomplete sub-measurements are discarded. They are likely an instrumentation bug that should be fixed.\n        finalEvent.incompleteSubMeasurements?.forEach((subMeasurement) => {\n            this.logger.trace(\n                `PerformanceClient: Incomplete submeasurement ${subMeasurement.name} found for ${event.name}`,\n                finalEvent.correlationId\n            );\n            incompleteSubsCount++;\n        });\n        finalEvent.incompleteSubMeasurements = undefined;\n\n        finalEvent = {\n            ...finalEvent,\n            queuedTimeMs: queueInfo.totalQueueTime,\n            queuedCount: queueInfo.totalQueueCount,\n            queuedManuallyCompletedCount: queueInfo.manuallyCompletedCount,\n            status: PerformanceEventStatus.Completed,\n            incompleteSubsCount,\n            context,\n        };\n        this.truncateIntegralFields(finalEvent);\n        this.emitEvents([finalEvent], event.correlationId);\n\n        return finalEvent;\n    }\n\n    /**\n     * Saves extra information to be emitted when the measurements are flushed\n     * @param fields\n     * @param correlationId\n     */\n    addFields(\n        fields: { [key: string]: {} | undefined },\n        correlationId: string\n    ): void {\n        this.logger.trace(\"PerformanceClient: Updating static fields\");\n        const event = this.eventsByCorrelationId.get(correlationId);\n        if (event) {\n            this.eventsByCorrelationId.set(correlationId, {\n                ...event,\n                ...fields,\n            });\n        } else {\n            this.logger.trace(\n                \"PerformanceClient: Event not found for\",\n                correlationId\n            );\n        }\n    }\n\n    /**\n     * Increment counters to be emitted when the measurements are flushed\n     * @param fields {string[]}\n     * @param correlationId {string} correlation identifier\n     */\n    incrementFields(\n        fields: { [key: string]: number | undefined },\n        correlationId: string\n    ): void {\n        this.logger.trace(\"PerformanceClient: Updating counters\");\n        const event = this.eventsByCorrelationId.get(correlationId);\n        if (event) {\n            for (const counter in fields) {\n                if (!event.hasOwnProperty(counter)) {\n                    event[counter] = 0;\n                } else if (isNaN(Number(event[counter]))) {\n                    return;\n                }\n                event[counter] += fields[counter];\n            }\n        } else {\n            this.logger.trace(\n                \"PerformanceClient: Event not found for\",\n                correlationId\n            );\n        }\n    }\n\n    /**\n     * Upserts event into event cache.\n     * First key is the correlation id, second key is the event id.\n     * Allows for events to be grouped by correlation id,\n     * and to easily allow for properties on them to be updated.\n     *\n     * @private\n     * @param {PerformanceEvent} event\n     */\n    protected cacheEventByCorrelationId(event: PerformanceEvent): void {\n        const rootEvent = this.eventsByCorrelationId.get(event.correlationId);\n        if (rootEvent) {\n            this.logger.trace(\n                `PerformanceClient: Performance measurement for ${event.name} added/updated`,\n                event.correlationId\n            );\n            rootEvent.incompleteSubMeasurements =\n                rootEvent.incompleteSubMeasurements || new Map();\n            rootEvent.incompleteSubMeasurements.set(event.eventId, {\n                name: event.name,\n                startTimeMs: event.startTimeMs,\n            });\n        } else {\n            this.logger.trace(\n                `PerformanceClient: Performance measurement for ${event.name} started`,\n                event.correlationId\n            );\n            this.eventsByCorrelationId.set(event.correlationId, { ...event });\n            this.eventStack.set(event.correlationId, []);\n        }\n    }\n\n    private getQueueInfo(correlationId: string): {\n        totalQueueTime: number;\n        totalQueueCount: number;\n        manuallyCompletedCount: number;\n    } {\n        const queueMeasurementForCorrelationId =\n            this.queueMeasurements.get(correlationId);\n        if (!queueMeasurementForCorrelationId) {\n            this.logger.trace(\n                `PerformanceClient: no queue measurements found for for correlationId: ${correlationId}`\n            );\n        }\n\n        let totalQueueTime = 0;\n        let totalQueueCount = 0;\n        let manuallyCompletedCount = 0;\n        queueMeasurementForCorrelationId?.forEach((measurement) => {\n            totalQueueTime += measurement.queueTime;\n            totalQueueCount++;\n            manuallyCompletedCount += measurement.manuallyCompleted ? 1 : 0;\n        });\n\n        return {\n            totalQueueTime,\n            totalQueueCount,\n            manuallyCompletedCount,\n        };\n    }\n\n    /**\n     * Removes measurements and aux data for a given correlation id.\n     *\n     * @param {string} correlationId\n     */\n    discardMeasurements(correlationId: string): void {\n        this.logger.trace(\n            \"PerformanceClient: Performance measurements discarded\",\n            correlationId\n        );\n        this.eventsByCorrelationId.delete(correlationId);\n\n        this.logger.trace(\n            \"PerformanceClient: QueueMeasurements discarded\",\n            correlationId\n        );\n        this.queueMeasurements.delete(correlationId);\n\n        this.logger.trace(\n            \"PerformanceClient: Pre-queue times discarded\",\n            correlationId\n        );\n        this.preQueueTimeByCorrelationId.delete(correlationId);\n\n        this.logger.trace(\n            \"PerformanceClient: Event stack discarded\",\n            correlationId\n        );\n        this.eventStack.delete(correlationId);\n    }\n\n    /**\n     * Registers a callback function to receive performance events.\n     *\n     * @param {PerformanceCallbackFunction} callback\n     * @returns {string}\n     */\n    addPerformanceCallback(callback: PerformanceCallbackFunction): string {\n        for (const [id, cb] of this.callbacks) {\n            if (cb.toString() === callback.toString()) {\n                this.logger.warning(\n                    `PerformanceClient: Performance callback is already registered with id: ${id}`\n                );\n                return id;\n            }\n        }\n\n        const callbackId = this.generateId();\n        this.callbacks.set(callbackId, callback);\n        this.logger.verbose(\n            `PerformanceClient: Performance callback registered with id: ${callbackId}`\n        );\n\n        return callbackId;\n    }\n\n    /**\n     * Removes a callback registered with addPerformanceCallback.\n     *\n     * @param {string} callbackId\n     * @returns {boolean}\n     */\n    removePerformanceCallback(callbackId: string): boolean {\n        const result = this.callbacks.delete(callbackId);\n\n        if (result) {\n            this.logger.verbose(\n                `PerformanceClient: Performance callback ${callbackId} removed.`\n            );\n        } else {\n            this.logger.verbose(\n                `PerformanceClient: Performance callback ${callbackId} not removed.`\n            );\n        }\n\n        return result;\n    }\n\n    /**\n     * Emits events to all registered callbacks.\n     *\n     * @param {PerformanceEvent[]} events\n     * @param {?string} [correlationId]\n     */\n    emitEvents(events: PerformanceEvent[], correlationId: string): void {\n        this.logger.verbose(\n            \"PerformanceClient: Emitting performance events\",\n            correlationId\n        );\n\n        this.callbacks.forEach(\n            (callback: PerformanceCallbackFunction, callbackId: string) => {\n                this.logger.trace(\n                    `PerformanceClient: Emitting event to callback ${callbackId}`,\n                    correlationId\n                );\n                callback.apply(null, [events]);\n            }\n        );\n    }\n\n    /**\n     * Enforce truncation of integral fields in performance event.\n     * @param {PerformanceEvent} event performance event to update.\n     */\n    private truncateIntegralFields(event: PerformanceEvent): void {\n        this.intFields.forEach((key) => {\n            if (key in event && typeof event[key] === \"number\") {\n                event[key] = Math.floor(event[key]);\n            }\n        });\n    }\n\n    /**\n     * Returns event duration in milliseconds\n     * @param startTimeMs {number}\n     * @returns {number}\n     */\n    private getDurationMs(startTimeMs: number): number {\n        const durationMs = Date.now() - startTimeMs;\n        // Handle clock skew\n        return durationMs < 0 ? durationMs : 0;\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nexport const pkceNotCreated = \"pkce_not_created\";\nexport const cryptoNonExistent = \"crypto_nonexistent\";\nexport const emptyNavigateUri = \"empty_navigate_uri\";\nexport const hashEmptyError = \"hash_empty_error\";\nexport const noStateInHash = \"no_state_in_hash\";\nexport const hashDoesNotContainKnownProperties =\n    \"hash_does_not_contain_known_properties\";\nexport const unableToParseState = \"unable_to_parse_state\";\nexport const stateInteractionTypeMismatch = \"state_interaction_type_mismatch\";\nexport const interactionInProgress = \"interaction_in_progress\";\nexport const popupWindowError = \"popup_window_error\";\nexport const emptyWindowError = \"empty_window_error\";\nexport const userCancelled = \"user_cancelled\";\nexport const monitorPopupTimeout = \"monitor_popup_timeout\";\nexport const monitorWindowTimeout = \"monitor_window_timeout\";\nexport const redirectInIframe = \"redirect_in_iframe\";\nexport const blockIframeReload = \"block_iframe_reload\";\nexport const blockNestedPopups = \"block_nested_popups\";\nexport const iframeClosedPrematurely = \"iframe_closed_prematurely\";\nexport const silentLogoutUnsupported = \"silent_logout_unsupported\";\nexport const noAccountError = \"no_account_error\";\nexport const silentPromptValueError = \"silent_prompt_value_error\";\nexport const noTokenRequestCacheError = \"no_token_request_cache_error\";\nexport const unableToParseTokenRequestCacheError =\n    \"unable_to_parse_token_request_cache_error\";\nexport const noCachedAuthorityError = \"no_cached_authority_error\";\nexport const authRequestNotSetError = \"auth_request_not_set_error\";\nexport const invalidCacheType = \"invalid_cache_type\";\nexport const nonBrowserEnvironment = \"non_browser_environment\";\nexport const databaseNotOpen = \"database_not_open\";\nexport const noNetworkConnectivity = \"no_network_connectivity\";\nexport const postRequestFailed = \"post_request_failed\";\nexport const getRequestFailed = \"get_request_failed\";\nexport const failedToParseResponse = \"failed_to_parse_response\";\nexport const unableToLoadToken = \"unable_to_load_token\";\nexport const cryptoKeyNotFound = \"crypto_key_not_found\";\nexport const authCodeRequired = \"auth_code_required\";\nexport const authCodeOrNativeAccountIdRequired =\n    \"auth_code_or_nativeAccountId_required\";\nexport const spaCodeAndNativeAccountIdPresent =\n    \"spa_code_and_nativeAccountId_present\";\nexport const databaseUnavailable = \"database_unavailable\";\nexport const unableToAcquireTokenFromNativePlatform =\n    \"unable_to_acquire_token_from_native_platform\";\nexport const nativeHandshakeTimeout = \"native_handshake_timeout\";\nexport const nativeExtensionNotInstalled = \"native_extension_not_installed\";\nexport const nativeConnectionNotEstablished =\n    \"native_connection_not_established\";\nexport const uninitializedPublicClientApplication =\n    \"uninitialized_public_client_application\";\nexport const nativePromptNotSupported = \"native_prompt_not_supported\";\nexport const invalidBase64String = \"invalid_base64_string\";\nexport const invalidPopTokenRequest = \"invalid_pop_token_request\";\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError } from \"@azure/msal-common\";\nimport * as BrowserAuthErrorCodes from \"./BrowserAuthErrorCodes\";\nexport { BrowserAuthErrorCodes }; // Allow importing as \"BrowserAuthErrorCodes\"\n\nconst ErrorLink = \"For more visit: aka.ms/msaljs/browser-errors\";\n\n/**\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\n */\nexport const BrowserAuthErrorMessages = {\n    [BrowserAuthErrorCodes.pkceNotCreated]:\n        \"The PKCE code challenge and verifier could not be generated.\",\n    [BrowserAuthErrorCodes.cryptoNonExistent]:\n        \"The crypto object or function is not available.\",\n    [BrowserAuthErrorCodes.emptyNavigateUri]:\n        \"Navigation URI is empty. Please check stack trace for more info.\",\n    [BrowserAuthErrorCodes.hashEmptyError]: `Hash value cannot be processed because it is empty. Please verify that your redirectUri is not clearing the hash. ${ErrorLink}`,\n    [BrowserAuthErrorCodes.noStateInHash]:\n        \"Hash does not contain state. Please verify that the request originated from msal.\",\n    [BrowserAuthErrorCodes.hashDoesNotContainKnownProperties]: `Hash does not contain known properites. Please verify that your redirectUri is not changing the hash.  ${ErrorLink}`,\n    [BrowserAuthErrorCodes.unableToParseState]:\n        \"Unable to parse state. Please verify that the request originated from msal.\",\n    [BrowserAuthErrorCodes.stateInteractionTypeMismatch]:\n        \"Hash contains state but the interaction type does not match the caller.\",\n    [BrowserAuthErrorCodes.interactionInProgress]: `Interaction is currently in progress. Please ensure that this interaction has been completed before calling an interactive API.   ${ErrorLink}`,\n    [BrowserAuthErrorCodes.popupWindowError]:\n        \"Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser.\",\n    [BrowserAuthErrorCodes.emptyWindowError]:\n        \"window.open returned null or undefined window object.\",\n    [BrowserAuthErrorCodes.userCancelled]: \"User cancelled the flow.\",\n    [BrowserAuthErrorCodes.monitorPopupTimeout]: `Token acquisition in popup failed due to timeout.  ${ErrorLink}`,\n    [BrowserAuthErrorCodes.monitorWindowTimeout]: `Token acquisition in iframe failed due to timeout.  ${ErrorLink}`,\n    [BrowserAuthErrorCodes.redirectInIframe]:\n        \"Redirects are not supported for iframed or brokered applications. Please ensure you are using MSAL.js in a top frame of the window if using the redirect APIs, or use the popup APIs.\",\n    [BrowserAuthErrorCodes.blockIframeReload]: `Request was blocked inside an iframe because MSAL detected an authentication response.  ${ErrorLink}`,\n    [BrowserAuthErrorCodes.blockNestedPopups]:\n        \"Request was blocked inside a popup because MSAL detected it was running in a popup.\",\n    [BrowserAuthErrorCodes.iframeClosedPrematurely]:\n        \"The iframe being monitored was closed prematurely.\",\n    [BrowserAuthErrorCodes.silentLogoutUnsupported]:\n        \"Silent logout not supported. Please call logoutRedirect or logoutPopup instead.\",\n    [BrowserAuthErrorCodes.noAccountError]:\n        \"No account object provided to acquireTokenSilent and no active account has been set. Please call setActiveAccount or provide an account on the request.\",\n    [BrowserAuthErrorCodes.silentPromptValueError]:\n        \"The value given for the prompt value is not valid for silent requests - must be set to 'none' or 'no_session'.\",\n    [BrowserAuthErrorCodes.noTokenRequestCacheError]:\n        \"No token request found in cache.\",\n    [BrowserAuthErrorCodes.unableToParseTokenRequestCacheError]:\n        \"The cached token request could not be parsed.\",\n    [BrowserAuthErrorCodes.noCachedAuthorityError]:\n        \"No cached authority found.\",\n    [BrowserAuthErrorCodes.authRequestNotSetError]:\n        \"Auth Request not set. Please ensure initiateAuthRequest was called from the InteractionHandler\",\n    [BrowserAuthErrorCodes.invalidCacheType]: \"Invalid cache type\",\n    [BrowserAuthErrorCodes.nonBrowserEnvironment]:\n        \"Login and token requests are not supported in non-browser environments.\",\n    [BrowserAuthErrorCodes.databaseNotOpen]: \"Database is not open!\",\n    [BrowserAuthErrorCodes.noNetworkConnectivity]:\n        \"No network connectivity. Check your internet connection.\",\n    [BrowserAuthErrorCodes.postRequestFailed]:\n        \"Network request failed: If the browser threw a CORS error, check that the redirectUri is registered in the Azure App Portal as type 'SPA'\",\n    [BrowserAuthErrorCodes.getRequestFailed]:\n        \"Network request failed. Please check the network trace to determine root cause.\",\n    [BrowserAuthErrorCodes.failedToParseResponse]:\n        \"Failed to parse network response. Check network trace.\",\n    [BrowserAuthErrorCodes.unableToLoadToken]: \"Error loading token to cache.\",\n    [BrowserAuthErrorCodes.cryptoKeyNotFound]:\n        \"Cryptographic Key or Keypair not found in browser storage.\",\n    [BrowserAuthErrorCodes.authCodeRequired]:\n        \"An authorization code must be provided (as the `code` property on the request) to this flow.\",\n    [BrowserAuthErrorCodes.authCodeOrNativeAccountIdRequired]:\n        \"An authorization code or nativeAccountId must be provided to this flow.\",\n    [BrowserAuthErrorCodes.spaCodeAndNativeAccountIdPresent]:\n        \"Request cannot contain both spa code and native account id.\",\n    [BrowserAuthErrorCodes.databaseUnavailable]:\n        \"IndexedDB, which is required for persistent cryptographic key storage, is unavailable. This may be caused by browser privacy features which block persistent storage in third-party contexts.\",\n    [BrowserAuthErrorCodes.unableToAcquireTokenFromNativePlatform]: `Unable to acquire token from native platform.  ${ErrorLink}`,\n    [BrowserAuthErrorCodes.nativeHandshakeTimeout]:\n        \"Timed out while attempting to establish connection to browser extension\",\n    [BrowserAuthErrorCodes.nativeExtensionNotInstalled]:\n        \"Native extension is not installed. If you think this is a mistake call the initialize function.\",\n    [BrowserAuthErrorCodes.nativeConnectionNotEstablished]: `Connection to native platform has not been established. Please install a compatible browser extension and run initialize().  ${ErrorLink}`,\n    [BrowserAuthErrorCodes.uninitializedPublicClientApplication]: `You must call and await the initialize function before attempting to call any other MSAL API.  ${ErrorLink}`,\n    [BrowserAuthErrorCodes.nativePromptNotSupported]:\n        \"The provided prompt is not supported by the native platform. This request should be routed to the web based flow.\",\n    [BrowserAuthErrorCodes.invalidBase64String]:\n        \"Invalid base64 encoded string.\",\n    [BrowserAuthErrorCodes.invalidPopTokenRequest]:\n        \"Invalid PoP token request. The request should not have both a popKid value and signPopToken set to true.\",\n};\n\n/**\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\n * @deprecated Use exported BrowserAuthErrorCodes instead.\n * In your app you can do :\n * ```\n * import { BrowserAuthErrorCodes } from \"@azure/msal-browser\";\n * ```\n */\nexport const BrowserAuthErrorMessage = {\n    pkceNotGenerated: {\n        code: BrowserAuthErrorCodes.pkceNotCreated,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.pkceNotCreated],\n    },\n    cryptoDoesNotExist: {\n        code: BrowserAuthErrorCodes.cryptoNonExistent,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.cryptoNonExistent],\n    },\n    emptyNavigateUriError: {\n        code: BrowserAuthErrorCodes.emptyNavigateUri,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.emptyNavigateUri],\n    },\n    hashEmptyError: {\n        code: BrowserAuthErrorCodes.hashEmptyError,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.hashEmptyError],\n    },\n    hashDoesNotContainStateError: {\n        code: BrowserAuthErrorCodes.noStateInHash,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.noStateInHash],\n    },\n    hashDoesNotContainKnownPropertiesError: {\n        code: BrowserAuthErrorCodes.hashDoesNotContainKnownProperties,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.hashDoesNotContainKnownProperties\n        ],\n    },\n    unableToParseStateError: {\n        code: BrowserAuthErrorCodes.unableToParseState,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.unableToParseState\n        ],\n    },\n    stateInteractionTypeMismatchError: {\n        code: BrowserAuthErrorCodes.stateInteractionTypeMismatch,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.stateInteractionTypeMismatch\n        ],\n    },\n    interactionInProgress: {\n        code: BrowserAuthErrorCodes.interactionInProgress,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.interactionInProgress\n        ],\n    },\n    popupWindowError: {\n        code: BrowserAuthErrorCodes.popupWindowError,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.popupWindowError],\n    },\n    emptyWindowError: {\n        code: BrowserAuthErrorCodes.emptyWindowError,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.emptyWindowError],\n    },\n    userCancelledError: {\n        code: BrowserAuthErrorCodes.userCancelled,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.userCancelled],\n    },\n    monitorPopupTimeoutError: {\n        code: BrowserAuthErrorCodes.monitorPopupTimeout,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.monitorPopupTimeout\n        ],\n    },\n    monitorIframeTimeoutError: {\n        code: BrowserAuthErrorCodes.monitorWindowTimeout,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.monitorWindowTimeout\n        ],\n    },\n    redirectInIframeError: {\n        code: BrowserAuthErrorCodes.redirectInIframe,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.redirectInIframe],\n    },\n    blockTokenRequestsInHiddenIframeError: {\n        code: BrowserAuthErrorCodes.blockIframeReload,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.blockIframeReload],\n    },\n    blockAcquireTokenInPopupsError: {\n        code: BrowserAuthErrorCodes.blockNestedPopups,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.blockNestedPopups],\n    },\n    iframeClosedPrematurelyError: {\n        code: BrowserAuthErrorCodes.iframeClosedPrematurely,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.iframeClosedPrematurely\n        ],\n    },\n    silentLogoutUnsupportedError: {\n        code: BrowserAuthErrorCodes.silentLogoutUnsupported,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.silentLogoutUnsupported\n        ],\n    },\n    noAccountError: {\n        code: BrowserAuthErrorCodes.noAccountError,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.noAccountError],\n    },\n    silentPromptValueError: {\n        code: BrowserAuthErrorCodes.silentPromptValueError,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.silentPromptValueError\n        ],\n    },\n    noTokenRequestCacheError: {\n        code: BrowserAuthErrorCodes.noTokenRequestCacheError,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.noTokenRequestCacheError\n        ],\n    },\n    unableToParseTokenRequestCacheError: {\n        code: BrowserAuthErrorCodes.unableToParseTokenRequestCacheError,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.unableToParseTokenRequestCacheError\n        ],\n    },\n    noCachedAuthorityError: {\n        code: BrowserAuthErrorCodes.noCachedAuthorityError,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.noCachedAuthorityError\n        ],\n    },\n    authRequestNotSet: {\n        code: BrowserAuthErrorCodes.authRequestNotSetError,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.authRequestNotSetError\n        ],\n    },\n    invalidCacheType: {\n        code: BrowserAuthErrorCodes.invalidCacheType,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.invalidCacheType],\n    },\n    notInBrowserEnvironment: {\n        code: BrowserAuthErrorCodes.nonBrowserEnvironment,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.nonBrowserEnvironment\n        ],\n    },\n    databaseNotOpen: {\n        code: BrowserAuthErrorCodes.databaseNotOpen,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.databaseNotOpen],\n    },\n    noNetworkConnectivity: {\n        code: BrowserAuthErrorCodes.noNetworkConnectivity,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.noNetworkConnectivity\n        ],\n    },\n    postRequestFailed: {\n        code: BrowserAuthErrorCodes.postRequestFailed,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.postRequestFailed],\n    },\n    getRequestFailed: {\n        code: BrowserAuthErrorCodes.getRequestFailed,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.getRequestFailed],\n    },\n    failedToParseNetworkResponse: {\n        code: BrowserAuthErrorCodes.failedToParseResponse,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.failedToParseResponse\n        ],\n    },\n    unableToLoadTokenError: {\n        code: BrowserAuthErrorCodes.unableToLoadToken,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.unableToLoadToken],\n    },\n    signingKeyNotFoundInStorage: {\n        code: BrowserAuthErrorCodes.cryptoKeyNotFound,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.cryptoKeyNotFound],\n    },\n    authCodeRequired: {\n        code: BrowserAuthErrorCodes.authCodeRequired,\n        desc: BrowserAuthErrorMessages[BrowserAuthErrorCodes.authCodeRequired],\n    },\n    authCodeOrNativeAccountRequired: {\n        code: BrowserAuthErrorCodes.authCodeOrNativeAccountIdRequired,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.authCodeOrNativeAccountIdRequired\n        ],\n    },\n    spaCodeAndNativeAccountPresent: {\n        code: BrowserAuthErrorCodes.spaCodeAndNativeAccountIdPresent,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.spaCodeAndNativeAccountIdPresent\n        ],\n    },\n    databaseUnavailable: {\n        code: BrowserAuthErrorCodes.databaseUnavailable,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.databaseUnavailable\n        ],\n    },\n    unableToAcquireTokenFromNativePlatform: {\n        code: BrowserAuthErrorCodes.unableToAcquireTokenFromNativePlatform,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.unableToAcquireTokenFromNativePlatform\n        ],\n    },\n    nativeHandshakeTimeout: {\n        code: BrowserAuthErrorCodes.nativeHandshakeTimeout,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.nativeHandshakeTimeout\n        ],\n    },\n    nativeExtensionNotInstalled: {\n        code: BrowserAuthErrorCodes.nativeExtensionNotInstalled,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.nativeExtensionNotInstalled\n        ],\n    },\n    nativeConnectionNotEstablished: {\n        code: BrowserAuthErrorCodes.nativeConnectionNotEstablished,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.nativeConnectionNotEstablished\n        ],\n    },\n    uninitializedPublicClientApplication: {\n        code: BrowserAuthErrorCodes.uninitializedPublicClientApplication,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.uninitializedPublicClientApplication\n        ],\n    },\n    nativePromptNotSupported: {\n        code: BrowserAuthErrorCodes.nativePromptNotSupported,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.nativePromptNotSupported\n        ],\n    },\n    invalidBase64StringError: {\n        code: BrowserAuthErrorCodes.invalidBase64String,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.invalidBase64String\n        ],\n    },\n    invalidPopTokenRequest: {\n        code: BrowserAuthErrorCodes.invalidPopTokenRequest,\n        desc: BrowserAuthErrorMessages[\n            BrowserAuthErrorCodes.invalidPopTokenRequest\n        ],\n    },\n};\n\n/**\n * Browser library error class thrown by the MSAL.js library for SPAs\n */\nexport class BrowserAuthError extends AuthError {\n    constructor(errorCode: string) {\n        super(errorCode, BrowserAuthErrorMessages[errorCode]);\n\n        Object.setPrototypeOf(this, BrowserAuthError.prototype);\n        this.name = \"BrowserAuthError\";\n    }\n}\n\nexport function createBrowserAuthError(errorCode: string): BrowserAuthError {\n    return new BrowserAuthError(errorCode);\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { OIDC_DEFAULT_SCOPES } from \"@azure/msal-common\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\n\n/**\n * Constants\n */\nexport const BrowserConstants = {\n    /**\n     * Interaction in progress cache value\n     */\n    INTERACTION_IN_PROGRESS_VALUE: \"interaction_in_progress\",\n    /**\n     * Invalid grant error code\n     */\n    INVALID_GRANT_ERROR: \"invalid_grant\",\n    /**\n     * Default popup window width\n     */\n    POPUP_WIDTH: 483,\n    /**\n     * Default popup window height\n     */\n    POPUP_HEIGHT: 600,\n    /**\n     * Name of the popup window starts with\n     */\n    POPUP_NAME_PREFIX: \"msal\",\n    /**\n     * Default popup monitor poll interval in milliseconds\n     */\n    DEFAULT_POLL_INTERVAL_MS: 30,\n    /**\n     * Msal-browser SKU\n     */\n    MSAL_SKU: \"msal.js.browser\",\n};\n\nexport const NativeConstants = {\n    CHANNEL_ID: \"53ee284d-920a-4b59-9d30-a60315b26836\",\n    PREFERRED_EXTENSION_ID: \"ppnbnpeolgkicgegkbkbjmhlideopiji\",\n    MATS_TELEMETRY: \"MATS\",\n};\n\nexport const NativeExtensionMethod = {\n    HandshakeRequest: \"Handshake\",\n    HandshakeResponse: \"HandshakeResponse\",\n    GetToken: \"GetToken\",\n    Response: \"Response\",\n} as const;\nexport type NativeExtensionMethod =\n    (typeof NativeExtensionMethod)[keyof typeof NativeExtensionMethod];\n\nexport const BrowserCacheLocation = {\n    LocalStorage: \"localStorage\",\n    SessionStorage: \"sessionStorage\",\n    MemoryStorage: \"memoryStorage\",\n} as const;\nexport type BrowserCacheLocation =\n    (typeof BrowserCacheLocation)[keyof typeof BrowserCacheLocation];\n\n/**\n * HTTP Request types supported by MSAL.\n */\nexport const HTTP_REQUEST_TYPE = {\n    GET: \"GET\",\n    POST: \"POST\",\n} as const;\nexport type HTTP_REQUEST_TYPE =\n    (typeof HTTP_REQUEST_TYPE)[keyof typeof HTTP_REQUEST_TYPE];\n\n/**\n * Temporary cache keys for MSAL, deleted after any request.\n */\nexport const TemporaryCacheKeys = {\n    AUTHORITY: \"authority\",\n    ACQUIRE_TOKEN_ACCOUNT: \"acquireToken.account\",\n    SESSION_STATE: \"session.state\",\n    REQUEST_STATE: \"request.state\",\n    NONCE_IDTOKEN: \"nonce.id_token\",\n    ORIGIN_URI: \"request.origin\",\n    RENEW_STATUS: \"token.renew.status\",\n    URL_HASH: \"urlHash\",\n    REQUEST_PARAMS: \"request.params\",\n    SCOPES: \"scopes\",\n    INTERACTION_STATUS_KEY: \"interaction.status\",\n    CCS_CREDENTIAL: \"ccs.credential\",\n    CORRELATION_ID: \"request.correlationId\",\n    NATIVE_REQUEST: \"request.native\",\n    REDIRECT_CONTEXT: \"request.redirect.context\",\n} as const;\nexport type TemporaryCacheKeys =\n    (typeof TemporaryCacheKeys)[keyof typeof TemporaryCacheKeys];\n\nexport const StaticCacheKeys = {\n    ACCOUNT_KEYS: \"msal.account.keys\",\n    TOKEN_KEYS: \"msal.token.keys\",\n} as const;\nexport type StaticCacheKeys =\n    (typeof StaticCacheKeys)[keyof typeof StaticCacheKeys];\n\n/**\n * Cache keys stored in-memory\n */\nexport const InMemoryCacheKeys = {\n    WRAPPER_SKU: \"wrapper.sku\",\n    WRAPPER_VER: \"wrapper.version\",\n} as const;\nexport type InMemoryCacheKeys =\n    (typeof InMemoryCacheKeys)[keyof typeof InMemoryCacheKeys];\n\n/**\n * API Codes for Telemetry purposes.\n * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs\n * 0-99 Silent Flow\n * 800-899 Auth Code Flow\n */\nexport const ApiId = {\n    acquireTokenRedirect: 861,\n    acquireTokenPopup: 862,\n    ssoSilent: 863,\n    acquireTokenSilent_authCode: 864,\n    handleRedirectPromise: 865,\n    acquireTokenByCode: 866,\n    acquireTokenSilent_silentFlow: 61,\n    logout: 961,\n    logoutPopup: 962,\n} as const;\nexport type ApiId = (typeof ApiId)[keyof typeof ApiId];\n\n/*\n * Interaction type of the API - used for state and telemetry\n */\nexport enum InteractionType {\n    Redirect = \"redirect\",\n    Popup = \"popup\",\n    Silent = \"silent\",\n    None = \"none\",\n}\n\n/**\n * Types of interaction currently in progress.\n * Used in events in wrapper libraries to invoke functions when certain interaction is in progress or all interactions are complete.\n */\nexport const InteractionStatus = {\n    /**\n     * Initial status before interaction occurs\n     */\n    Startup: \"startup\",\n    /**\n     * Status set when all login calls occuring\n     */\n    Login: \"login\",\n    /**\n     * Status set when logout call occuring\n     */\n    Logout: \"logout\",\n    /**\n     * Status set for acquireToken calls\n     */\n    AcquireToken: \"acquireToken\",\n    /**\n     * Status set for ssoSilent calls\n     */\n    SsoSilent: \"ssoSilent\",\n    /**\n     * Status set when handleRedirect in progress\n     */\n    HandleRedirect: \"handleRedirect\",\n    /**\n     * Status set when interaction is complete\n     */\n    None: \"none\",\n} as const;\nexport type InteractionStatus =\n    (typeof InteractionStatus)[keyof typeof InteractionStatus];\n\nexport const DEFAULT_REQUEST: RedirectRequest | PopupRequest = {\n    scopes: OIDC_DEFAULT_SCOPES,\n};\n\n/**\n * JWK Key Format string (Type MUST be defined for window crypto APIs)\n */\nexport const KEY_FORMAT_JWK = \"jwk\";\n\n// Supported wrapper SKUs\nexport const WrapperSKU = {\n    React: \"@azure/msal-react\",\n    Angular: \"@azure/msal-angular\",\n} as const;\nexport type WrapperSKU = (typeof WrapperSKU)[keyof typeof WrapperSKU];\n\n// DatabaseStorage Constants\nexport const DB_NAME = \"msal.db\";\nexport const DB_VERSION = 1;\nexport const DB_TABLE_NAME = `${DB_NAME}.keys`;\n\nexport const CacheLookupPolicy = {\n    /*\n     * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired\n     * or cannot be found the refresh token will be used to acquire a new one. Finally, if the refresh token\n     * is expired acquireTokenSilent will attempt to acquire new access and refresh tokens.\n     */\n    Default: 0, // 0 is falsy, is equivalent to not passing in a CacheLookupPolicy\n    /*\n     * acquireTokenSilent will only look for access tokens in the cache. It will not attempt to renew access or\n     * refresh tokens.\n     */\n    AccessToken: 1,\n    /*\n     * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired or\n     * cannot be found, the refresh token will be used to acquire a new one. If the refresh token is expired, it\n     * will not be renewed and acquireTokenSilent will fail.\n     */\n    AccessTokenAndRefreshToken: 2,\n    /*\n     * acquireTokenSilent will not attempt to retrieve access tokens from the cache and will instead attempt to\n     * exchange the cached refresh token for a new access token. If the refresh token is expired, it will not be\n     * renewed and acquireTokenSilent will fail.\n     */\n    RefreshToken: 3,\n    /*\n     * acquireTokenSilent will not look in the cache for the access token. It will go directly to network with the\n     * cached refresh token. If the refresh token is expired an attempt will be made to renew it. This is equivalent to\n     * setting \"forceRefresh: true\".\n     */\n    RefreshTokenAndNetwork: 4,\n    /*\n     * acquireTokenSilent will attempt to renew both access and refresh tokens. It will not look in the cache. This will\n     * always fail if 3rd party cookies are blocked by the browser.\n     */\n    Skip: 5,\n} as const;\nexport type CacheLookupPolicy =\n    (typeof CacheLookupPolicy)[keyof typeof CacheLookupPolicy];\n\nexport const iFrameRenewalPolicies: CacheLookupPolicy[] = [\n    CacheLookupPolicy.Default,\n    CacheLookupPolicy.Skip,\n    CacheLookupPolicy.RefreshTokenAndNetwork,\n];\n\nexport const LOG_LEVEL_CACHE_KEY = \"msal.browser.log.level\";\nexport const LOG_PII_CACHE_KEY = \"msal.browser.log.pii\";\n\nexport const BROWSER_PERF_ENABLED_KEY = \"msal.browser.performance.enabled\";\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * Class which exposes APIs to encode plaintext to base64 encoded string. See here for implementation details:\n * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64\n */\n\n/**\n * Returns URL Safe b64 encoded string from a plaintext string.\n * @param input\n */\nexport function urlEncode(input: string): string {\n    return encodeURIComponent(\n        base64Encode(input)\n            .replace(/=/g, \"\")\n            .replace(/\\+/g, \"-\")\n            .replace(/\\//g, \"_\")\n    );\n}\n\n/**\n * Returns URL Safe b64 encoded string from an int8Array.\n * @param inputArr\n */\nexport function urlEncodeArr(inputArr: Uint8Array): string {\n    return base64EncArr(inputArr)\n        .replace(/=/g, \"\")\n        .replace(/\\+/g, \"-\")\n        .replace(/\\//g, \"_\");\n}\n\n/**\n * Returns b64 encoded string from plaintext string.\n * @param input\n */\nexport function base64Encode(input: string): string {\n    return base64EncArr(new TextEncoder().encode(input));\n}\n\n/**\n * Base64 encode byte array\n * @param aBytes\n */\nfunction base64EncArr(aBytes: Uint8Array): string {\n    const binString = Array.from(aBytes, (x) => String.fromCodePoint(x)).join(\n        \"\"\n    );\n    return btoa(binString);\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport {\n    IPerformanceClient,\n    Logger,\n    PerformanceEvents,\n} from \"@azure/msal-common\";\nimport { KEY_FORMAT_JWK } from \"../utils/BrowserConstants\";\nimport { urlEncodeArr } from \"../encode/Base64Encode\";\n\n/**\n * This file defines functions used by the browser library to perform cryptography operations such as\n * hashing and encoding. It also has helper functions to validate the availability of specific APIs.\n */\n\n/**\n * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams\n */\n// RSA KeyGen Algorithm\nconst PKCS1_V15_KEYGEN_ALG = \"RSASSA-PKCS1-v1_5\";\n// SHA-256 hashing algorithm\nconst S256_HASH_ALG = \"SHA-256\";\n// MOD length for PoP tokens\nconst MODULUS_LENGTH = 2048;\n// Public Exponent\nconst PUBLIC_EXPONENT: Uint8Array = new Uint8Array([0x01, 0x00, 0x01]);\n// UUID hex digits\nconst UUID_CHARS = \"0123456789abcdef\";\n// Array to store UINT32 random value\nconst UINT32_ARR = new Uint32Array(1);\n\nconst keygenAlgorithmOptions: RsaHashedKeyGenParams = {\n    name: PKCS1_V15_KEYGEN_ALG,\n    hash: S256_HASH_ALG,\n    modulusLength: MODULUS_LENGTH,\n    publicExponent: PUBLIC_EXPONENT,\n};\n\n/**\n * Check whether browser crypto is available.\n */\nexport function validateCryptoAvailable(logger: Logger): void {\n    if (\"crypto\" in window) {\n        logger.verbose(\"BrowserCrypto: modern crypto interface available\");\n    } else {\n        logger.error(\"BrowserCrypto: crypto interface is unavailable\");\n        throw createBrowserAuthError(BrowserAuthErrorCodes.cryptoNonExistent);\n    }\n}\n\n/**\n * Returns a sha-256 hash of the given dataString as an ArrayBuffer.\n * @param dataString {string} data string\n * @param performanceClient {?IPerformanceClient}\n * @param correlationId {?string} correlation id\n */\nexport async function sha256Digest(\n    dataString: string,\n    performanceClient?: IPerformanceClient,\n    correlationId?: string\n): Promise<ArrayBuffer> {\n    performanceClient?.addQueueMeasurement(\n        PerformanceEvents.Sha256Digest,\n        correlationId\n    );\n    const encoder = new TextEncoder();\n    const data = encoder.encode(dataString);\n    return window.crypto.subtle.digest(\n        S256_HASH_ALG,\n        data\n    ) as Promise<ArrayBuffer>;\n}\n\n/**\n * Populates buffer with cryptographically random values.\n * @param dataBuffer\n */\nexport function getRandomValues(dataBuffer: Uint8Array): Uint8Array {\n    return window.crypto.getRandomValues(dataBuffer);\n}\n\n/**\n * Returns random Uint32 value.\n * @returns {number}\n */\nfunction getRandomUint32(): number {\n    window.crypto.getRandomValues(UINT32_ARR);\n    return UINT32_ARR[0];\n}\n\n/**\n * Creates a UUID v7 from the current timestamp.\n * Implementation relies on the system clock to guarantee increasing order of generated identifiers.\n * @returns {number}\n */\nexport function createNewGuid(): string {\n    const currentTimestamp = Date.now();\n    const baseRand = getRandomUint32() * 0x400 + (getRandomUint32() & 0x3ff);\n\n    // Result byte array\n    const bytes = new Uint8Array(16);\n    // A 12-bit `rand_a` field value\n    const randA = Math.trunc(baseRand / 2 ** 30);\n    // The higher 30 bits of 62-bit `rand_b` field value\n    const randBHi = baseRand & (2 ** 30 - 1);\n    // The lower 32 bits of 62-bit `rand_b` field value\n    const randBLo = getRandomUint32();\n\n    bytes[0] = currentTimestamp / 2 ** 40;\n    bytes[1] = currentTimestamp / 2 ** 32;\n    bytes[2] = currentTimestamp / 2 ** 24;\n    bytes[3] = currentTimestamp / 2 ** 16;\n    bytes[4] = currentTimestamp / 2 ** 8;\n    bytes[5] = currentTimestamp;\n    bytes[6] = 0x70 | (randA >>> 8);\n    bytes[7] = randA;\n    bytes[8] = 0x80 | (randBHi >>> 24);\n    bytes[9] = randBHi >>> 16;\n    bytes[10] = randBHi >>> 8;\n    bytes[11] = randBHi;\n    bytes[12] = randBLo >>> 24;\n    bytes[13] = randBLo >>> 16;\n    bytes[14] = randBLo >>> 8;\n    bytes[15] = randBLo;\n\n    let text = \"\";\n    for (let i = 0; i < bytes.length; i++) {\n        text += UUID_CHARS.charAt(bytes[i] >>> 4);\n        text += UUID_CHARS.charAt(bytes[i] & 0xf);\n        if (i === 3 || i === 5 || i === 7 || i === 9) {\n            text += \"-\";\n        }\n    }\n    return text;\n}\n\n/**\n * Generates a keypair based on current keygen algorithm config.\n * @param extractable\n * @param usages\n */\nexport async function generateKeyPair(\n    extractable: boolean,\n    usages: Array<KeyUsage>\n): Promise<CryptoKeyPair> {\n    return window.crypto.subtle.generateKey(\n        keygenAlgorithmOptions,\n        extractable,\n        usages\n    ) as Promise<CryptoKeyPair>;\n}\n\n/**\n * Export key as Json Web Key (JWK)\n * @param key\n */\nexport async function exportJwk(key: CryptoKey): Promise<JsonWebKey> {\n    return window.crypto.subtle.exportKey(\n        KEY_FORMAT_JWK,\n        key\n    ) as Promise<JsonWebKey>;\n}\n\n/**\n * Imports key as Json Web Key (JWK), can set extractable and usages.\n * @param key\n * @param extractable\n * @param usages\n */\nexport async function importJwk(\n    key: JsonWebKey,\n    extractable: boolean,\n    usages: Array<KeyUsage>\n): Promise<CryptoKey> {\n    return window.crypto.subtle.importKey(\n        KEY_FORMAT_JWK,\n        key,\n        keygenAlgorithmOptions,\n        extractable,\n        usages\n    ) as Promise<CryptoKey>;\n}\n\n/**\n * Signs given data with given key\n * @param key\n * @param data\n */\nexport async function sign(\n    key: CryptoKey,\n    data: ArrayBuffer\n): Promise<ArrayBuffer> {\n    return window.crypto.subtle.sign(\n        keygenAlgorithmOptions,\n        key,\n        data\n    ) as Promise<ArrayBuffer>;\n}\n\n/**\n * Returns the SHA-256 hash of an input string\n * @param plainText\n */\nexport async function hashString(plainText: string): Promise<string> {\n    const hashBuffer: ArrayBuffer = await sha256Digest(plainText);\n    const hashBytes = new Uint8Array(hashBuffer);\n    return urlEncodeArr(hashBytes);\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nexport const storageNotSupported = \"storage_not_supported\";\nexport const stubbedPublicClientApplicationCalled =\n    \"stubbed_public_client_application_called\";\nexport const inMemRedirectUnavailable = \"in_mem_redirect_unavailable\";\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError } from \"@azure/msal-common\";\nimport * as BrowserConfigurationAuthErrorCodes from \"./BrowserConfigurationAuthErrorCodes\";\nexport { BrowserConfigurationAuthErrorCodes };\n\nexport const BrowserConfigurationAuthErrorMessages = {\n    [BrowserConfigurationAuthErrorCodes.storageNotSupported]:\n        \"Given storage configuration option was not supported.\",\n    [BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled]:\n        \"Stub instance of Public Client Application was called. If using msal-react, please ensure context is not used without a provider. For more visit: aka.ms/msaljs/browser-errors\",\n    [BrowserConfigurationAuthErrorCodes.inMemRedirectUnavailable]:\n        \"Redirect cannot be supported. In-memory storage was selected and storeAuthStateInCookie=false, which would cause the library to be unable to handle the incoming hash. If you would like to use the redirect API, please use session/localStorage or set storeAuthStateInCookie=true.\",\n};\n\n/**\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\n * @deprecated Use BrowserAuthErrorCodes instead\n */\nexport const BrowserConfigurationAuthErrorMessage = {\n    storageNotSupportedError: {\n        code: BrowserConfigurationAuthErrorCodes.storageNotSupported,\n        desc: BrowserConfigurationAuthErrorMessages[\n            BrowserConfigurationAuthErrorCodes.storageNotSupported\n        ],\n    },\n    stubPcaInstanceCalled: {\n        code: BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled,\n        desc: BrowserConfigurationAuthErrorMessages[\n            BrowserConfigurationAuthErrorCodes\n                .stubbedPublicClientApplicationCalled\n        ],\n    },\n    inMemRedirectUnavailable: {\n        code: BrowserConfigurationAuthErrorCodes.inMemRedirectUnavailable,\n        desc: BrowserConfigurationAuthErrorMessages[\n            BrowserConfigurationAuthErrorCodes.inMemRedirectUnavailable\n        ],\n    },\n};\n\n/**\n * Browser library error class thrown by the MSAL.js library for SPAs\n */\nexport class BrowserConfigurationAuthError extends AuthError {\n    constructor(errorCode: string, errorMessage?: string) {\n        super(errorCode, errorMessage);\n        this.name = \"BrowserConfigurationAuthError\";\n\n        Object.setPrototypeOf(this, BrowserConfigurationAuthError.prototype);\n    }\n}\n\nexport function createBrowserConfigurationAuthError(\n    errorCode: string\n): BrowserConfigurationAuthError {\n    return new BrowserConfigurationAuthError(\n        errorCode,\n        BrowserConfigurationAuthErrorMessages[errorCode]\n    );\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { UrlString, invoke, invokeAsync } from \"@azure/msal-common\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { BrowserConstants, BrowserCacheLocation } from \"./BrowserConstants\";\nimport * as BrowserCrypto from \"../crypto/BrowserCrypto\";\nimport {\n    BrowserConfigurationAuthErrorCodes,\n    createBrowserConfigurationAuthError,\n} from \"../error/BrowserConfigurationAuthError\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\n\n/**\n * Clears hash from window url.\n */\nexport function clearHash(contentWindow: Window): void {\n    // Office.js sets history.replaceState to null\n    contentWindow.location.hash = \"\";\n    if (typeof contentWindow.history.replaceState === \"function\") {\n        // Full removes \"#\" from url\n        contentWindow.history.replaceState(\n            null,\n            \"\",\n            `${contentWindow.location.origin}${contentWindow.location.pathname}${contentWindow.location.search}`\n        );\n    }\n}\n\n/**\n * Replaces current hash with hash from provided url\n */\nexport function replaceHash(url: string): void {\n    const urlParts = url.split(\"#\");\n    urlParts.shift(); // Remove part before the hash\n    window.location.hash = urlParts.length > 0 ? urlParts.join(\"#\") : \"\";\n}\n\n/**\n * Returns boolean of whether the current window is in an iframe or not.\n */\nexport function isInIframe(): boolean {\n    return window.parent !== window;\n}\n\n/**\n * Returns boolean of whether or not the current window is a popup opened by msal\n */\nexport function isInPopup(): boolean {\n    return (\n        typeof window !== \"undefined\" &&\n        !!window.opener &&\n        window.opener !== window &&\n        typeof window.name === \"string\" &&\n        window.name.indexOf(`${BrowserConstants.POPUP_NAME_PREFIX}.`) === 0\n    );\n}\n\n// #endregion\n\n/**\n * Returns current window URL as redirect uri\n */\nexport function getCurrentUri(): string {\n    return window.location.href.split(\"?\")[0].split(\"#\")[0];\n}\n\n/**\n * Gets the homepage url for the current window location.\n */\nexport function getHomepage(): string {\n    const currentUrl = new UrlString(window.location.href);\n    const urlComponents = currentUrl.getUrlComponents();\n    return `${urlComponents.Protocol}//${urlComponents.HostNameAndPort}/`;\n}\n\n/**\n * Throws error if we have completed an auth and are\n * attempting another auth request inside an iframe.\n */\nexport function blockReloadInHiddenIframes(): void {\n    const isResponseHash = UrlString.hashContainsKnownProperties(\n        window.location.hash\n    );\n    // return an error if called from the hidden iframe created by the msal js silent calls\n    if (isResponseHash && isInIframe()) {\n        throw createBrowserAuthError(BrowserAuthErrorCodes.blockIframeReload);\n    }\n}\n\n/**\n * Block redirect operations in iframes unless explicitly allowed\n * @param interactionType Interaction type for the request\n * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe\n */\nexport function blockRedirectInIframe(allowRedirectInIframe: boolean): void {\n    if (isInIframe() && !allowRedirectInIframe) {\n        // If we are not in top frame, we shouldn't redirect. This is also handled by the service.\n        throw createBrowserAuthError(BrowserAuthErrorCodes.redirectInIframe);\n    }\n}\n\n/**\n * Block redirectUri loaded in popup from calling AcquireToken APIs\n */\nexport function blockAcquireTokenInPopups(): void {\n    // Popups opened by msal popup APIs are given a name that starts with \"msal.\"\n    if (isInPopup()) {\n        throw createBrowserAuthError(BrowserAuthErrorCodes.blockNestedPopups);\n    }\n}\n\n/**\n * Throws error if token requests are made in non-browser environment\n * @param isBrowserEnvironment Flag indicating if environment is a browser.\n */\nexport function blockNonBrowserEnvironment(): void {\n    if (typeof window === \"undefined\") {\n        throw createBrowserAuthError(\n            BrowserAuthErrorCodes.nonBrowserEnvironment\n        );\n    }\n}\n\n/**\n * Throws error if initialize hasn't been called\n * @param initialized\n */\nexport function blockAPICallsBeforeInitialize(initialized: boolean): void {\n    if (!initialized) {\n        throw createBrowserAuthError(\n            BrowserAuthErrorCodes.uninitializedPublicClientApplication\n        );\n    }\n}\n\n/**\n * Helper to validate app environment before making an auth request\n * @param initialized\n */\nexport function preflightCheck(initialized: boolean): void {\n    // Block request if not in browser environment\n    blockNonBrowserEnvironment();\n\n    // Block auth requests inside a hidden iframe\n    blockReloadInHiddenIframes();\n\n    // Block redirectUri opened in a popup from calling MSAL APIs\n    blockAcquireTokenInPopups();\n\n    // Block token acquisition before initialize has been called\n    blockAPICallsBeforeInitialize(initialized);\n}\n\n/**\n * Helper to validate app enviornment before making redirect request\n * @param initialized\n * @param config\n */\nexport function redirectPreflightCheck(\n    initialized: boolean,\n    config: BrowserConfiguration\n): void {\n    preflightCheck(initialized);\n    blockRedirectInIframe(config.system.allowRedirectInIframe);\n    // Block redirects if memory storage is enabled but storeAuthStateInCookie is not\n    if (\n        config.cache.cacheLocation === BrowserCacheLocation.MemoryStorage &&\n        !config.cache.storeAuthStateInCookie\n    ) {\n        throw createBrowserConfigurationAuthError(\n            BrowserConfigurationAuthErrorCodes.inMemRedirectUnavailable\n        );\n    }\n}\n\n/**\n * Adds a preconnect link element to the header which begins DNS resolution and SSL connection in anticipation of the /token request\n * @param loginDomain Authority domain, including https protocol e.g. https://login.microsoftonline.com\n * @returns\n */\nexport function preconnect(authority: string): void {\n    const link = document.createElement(\"link\");\n    link.rel = \"preconnect\";\n    link.href = new URL(authority).origin;\n    link.crossOrigin = \"anonymous\";\n    document.head.appendChild(link);\n\n    // The browser will close connection if not used within a few seconds, remove element from the header after 10s\n    window.setTimeout(() => {\n        try {\n            document.head.removeChild(link);\n        } catch {}\n    }, 10000); // 10s Timeout\n}\n\n/**\n * Wrapper function that creates a UUID v7 from the current timestamp.\n * @returns {string}\n */\nexport function createGuid(): string {\n    return BrowserCrypto.createNewGuid();\n}\n\nexport { invoke };\nexport { invokeAsync };\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { INavigationClient } from \"./INavigationClient\";\nimport { NavigationOptions } from \"./NavigationOptions\";\n\nexport class NavigationClient implements INavigationClient {\n    /**\n     * Navigates to other pages within the same web application\n     * @param url\n     * @param options\n     */\n    navigateInternal(\n        url: string,\n        options: NavigationOptions\n    ): Promise<boolean> {\n        return NavigationClient.defaultNavigateWindow(url, options);\n    }\n\n    /**\n     * Navigates to other pages outside the web application i.e. the Identity Provider\n     * @param url\n     * @param options\n     */\n    navigateExternal(\n        url: string,\n        options: NavigationOptions\n    ): Promise<boolean> {\n        return NavigationClient.defaultNavigateWindow(url, options);\n    }\n\n    /**\n     * Default navigation implementation invoked by the internal and external functions\n     * @param url\n     * @param options\n     */\n    private static defaultNavigateWindow(\n        url: string,\n        options: NavigationOptions\n    ): Promise<boolean> {\n        if (options.noHistory) {\n            window.location.replace(url);\n        } else {\n            window.location.assign(url);\n        }\n\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve(true);\n            }, options.timeout);\n        });\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    Constants,\n    INetworkModule,\n    NetworkRequestOptions,\n    NetworkResponse,\n} from \"@azure/msal-common\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { HTTP_REQUEST_TYPE } from \"../utils/BrowserConstants\";\n\n/**\n * This class implements the Fetch API for GET and POST requests. See more here: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n */\nexport class FetchClient implements INetworkModule {\n    /**\n     * Fetch Client for REST endpoints - Get request\n     * @param url\n     * @param headers\n     * @param body\n     */\n    async sendGetRequestAsync<T>(\n        url: string,\n        options?: NetworkRequestOptions\n    ): Promise<NetworkResponse<T>> {\n        let response;\n        try {\n            response = await fetch(url, {\n                method: HTTP_REQUEST_TYPE.GET,\n                headers: this.getFetchHeaders(options),\n            });\n        } catch (e) {\n            if (window.navigator.onLine) {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.getRequestFailed\n                );\n            } else {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.noNetworkConnectivity\n                );\n            }\n        }\n\n        try {\n            return {\n                headers: this.getHeaderDict(response.headers),\n                body: (await response.json()) as T,\n                status: response.status,\n            };\n        } catch (e) {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.failedToParseResponse\n            );\n        }\n    }\n\n    /**\n     * Fetch Client for REST endpoints - Post request\n     * @param url\n     * @param headers\n     * @param body\n     */\n    async sendPostRequestAsync<T>(\n        url: string,\n        options?: NetworkRequestOptions\n    ): Promise<NetworkResponse<T>> {\n        const reqBody = (options && options.body) || Constants.EMPTY_STRING;\n\n        let response;\n        try {\n            response = await fetch(url, {\n                method: HTTP_REQUEST_TYPE.POST,\n                headers: this.getFetchHeaders(options),\n                body: reqBody,\n            });\n        } catch (e) {\n            if (window.navigator.onLine) {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.postRequestFailed\n                );\n            } else {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.noNetworkConnectivity\n                );\n            }\n        }\n\n        try {\n            return {\n                headers: this.getHeaderDict(response.headers),\n                body: (await response.json()) as T,\n                status: response.status,\n            };\n        } catch (e) {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.failedToParseResponse\n            );\n        }\n    }\n\n    /**\n     * Get Fetch API Headers object from string map\n     * @param inputHeaders\n     */\n    private getFetchHeaders(options?: NetworkRequestOptions): Headers {\n        const headers = new Headers();\n        if (!(options && options.headers)) {\n            return headers;\n        }\n        const optionsHeaders = options.headers;\n        Object.keys(optionsHeaders).forEach((key) => {\n            headers.append(key, optionsHeaders[key]);\n        });\n        return headers;\n    }\n\n    private getHeaderDict(headers: Headers): Record<string, string> {\n        const headerDict: Record<string, string> = {};\n        headers.forEach((value: string, key: string) => {\n            headerDict[key] = value;\n        });\n        return headerDict;\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    SystemOptions,\n    LoggerOptions,\n    INetworkModule,\n    DEFAULT_SYSTEM_OPTIONS,\n    Constants,\n    ProtocolMode,\n    OIDCOptions,\n    ServerResponseType,\n    LogLevel,\n    StubbedNetworkModule,\n    AzureCloudInstance,\n    AzureCloudOptions,\n    ApplicationTelemetry,\n    createClientConfigurationError,\n    ClientConfigurationErrorCodes,\n    IPerformanceClient,\n    StubPerformanceClient,\n    Logger,\n} from \"@azure/msal-common\";\nimport {\n    BrowserCacheLocation,\n    BrowserConstants,\n} from \"../utils/BrowserConstants\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { NavigationClient } from \"../navigation/NavigationClient\";\nimport { FetchClient } from \"../network/FetchClient\";\n\n// Default timeout for popup windows and iframes in milliseconds\nexport const DEFAULT_POPUP_TIMEOUT_MS = 60000;\nexport const DEFAULT_IFRAME_TIMEOUT_MS = 10000;\nexport const DEFAULT_REDIRECT_TIMEOUT_MS = 30000;\nexport const DEFAULT_NATIVE_BROKER_HANDSHAKE_TIMEOUT_MS = 2000;\n\n/**\n * Use this to configure the auth options in the Configuration object\n */\nexport type BrowserAuthOptions = {\n    /**\n     * Client ID of your app registered with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview in Microsoft Identity Platform\n     */\n    clientId: string;\n    /**\n     * You can configure a specific authority, defaults to \" \" or \"https://login.microsoftonline.com/common\"\n     */\n    authority?: string;\n    /**\n     * An array of URIs that are known to be valid. Used in B2C scenarios.\n     */\n    knownAuthorities?: Array<string>;\n    /**\n     * A string containing the cloud discovery response. Used in AAD scenarios.\n     */\n    cloudDiscoveryMetadata?: string;\n    /**\n     * A string containing the .well-known/openid-configuration endpoint response\n     */\n    authorityMetadata?: string;\n    /**\n     * The redirect URI where authentication responses can be received by your application. It must exactly match one of the redirect URIs registered in the Azure portal.\n     */\n    redirectUri?: string;\n    /**\n     * The redirect URI where the window navigates after a successful logout.\n     */\n    postLogoutRedirectUri?: string | null;\n    /**\n     * Boolean indicating whether to navigate to the original request URL after the auth server navigates to the redirect URL.\n     */\n    navigateToLoginRequestUrl?: boolean;\n    /**\n     * Array of capabilities which will be added to the claims.access_token.xms_cc request property on every network request.\n     */\n    clientCapabilities?: Array<string>;\n    /**\n     * Enum that represents the protocol that msal follows. Used for configuring proper endpoints.\n     */\n    protocolMode?: ProtocolMode;\n    /**\n     * Enum that configures options for the OIDC protocol mode.\n     */\n    OIDCOptions?: OIDCOptions;\n    /**\n     * Enum that represents the Azure Cloud to use.\n     */\n    azureCloudOptions?: AzureCloudOptions;\n    /**\n     * Flag of whether to use the local metadata cache\n     */\n    skipAuthorityMetadataCache?: boolean;\n    /**\n     * App supports nested app auth or not; defaults to\n     *\n     * @deprecated This flag is deprecated and will be removed in the next major version. createNestablePublicClientApplication should be used instead.\n     */\n    supportsNestedAppAuth?: boolean;\n};\n\n/** @internal */\nexport type InternalAuthOptions = Required<BrowserAuthOptions> & {\n    OIDCOptions: Required<OIDCOptions>;\n};\n\n/**\n * Use this to configure the below cache configuration options:\n */\nexport type CacheOptions = {\n    /**\n     * Used to specify the cacheLocation user wants to set. Valid values are \"localStorage\", \"sessionStorage\" and \"memoryStorage\".\n     */\n    cacheLocation?: BrowserCacheLocation | string;\n    /**\n     * Used to specify the temporaryCacheLocation user wants to set. Valid values are \"localStorage\", \"sessionStorage\" and \"memoryStorage\".\n     */\n    temporaryCacheLocation?: BrowserCacheLocation | string;\n    /**\n     * If set, MSAL stores the auth request state required for validation of the auth flows in the browser cookies. By default this flag is set to false.\n     */\n    storeAuthStateInCookie?: boolean;\n    /**\n     * If set, MSAL sets the \"Secure\" flag on cookies so they can only be sent over HTTPS. By default this flag is set to false.\n     */\n    secureCookies?: boolean;\n    /**\n     * If set, MSAL will attempt to migrate cache entries from older versions on initialization. By default this flag is set to true if cacheLocation is localStorage, otherwise false.\n     */\n    cacheMigrationEnabled?: boolean;\n    /**\n     * Flag that determines whether access tokens are stored based on requested claims\n     */\n    claimsBasedCachingEnabled?: boolean;\n};\n\nexport type BrowserSystemOptions = SystemOptions & {\n    /**\n     * Used to initialize the Logger object (See ClientConfiguration.ts)\n     */\n    loggerOptions?: LoggerOptions;\n    /**\n     * Network interface implementation\n     */\n    networkClient?: INetworkModule;\n    /**\n     * Override the methods used to navigate to other webpages. Particularly useful if you are using a client-side router\n     */\n    navigationClient?: INavigationClient;\n    /**\n     * Sets the timeout for waiting for a response hash in a popup. Will take precedence over loadFrameTimeout if both are set.\n     */\n    windowHashTimeout?: number;\n    /**\n     * Sets the timeout for waiting for a response hash in an iframe. Will take precedence over loadFrameTimeout if both are set.\n     */\n    iframeHashTimeout?: number;\n    /**\n     * Sets the timeout for waiting for a response hash in an iframe or popup\n     */\n    loadFrameTimeout?: number;\n    /**\n     * Maximum time the library should wait for a frame to load\n     * @deprecated This was previously needed for older browsers which are no longer supported by MSAL.js. This option will be removed in the next major version\n     */\n    navigateFrameWait?: number;\n    /**\n     * Time to wait for redirection to occur before resolving promise\n     */\n    redirectNavigationTimeout?: number;\n    /**\n     * Sets whether popups are opened asynchronously. By default, this flag is set to false. When set to false, blank popups are opened before anything else happens. When set to true, popups are opened when making the network request.\n     */\n    asyncPopups?: boolean;\n    /**\n     * Flag to enable redirect opertaions when the app is rendered in an iframe (to support scenarios such as embedded B2C login).\n     */\n    allowRedirectInIframe?: boolean;\n    /**\n     * Flag to enable native broker support (e.g. acquiring tokens from WAM on Windows)\n     */\n    allowNativeBroker?: boolean;\n    /**\n     * Sets the timeout for waiting for the native broker handshake to resolve\n     */\n    nativeBrokerHandshakeTimeout?: number;\n    /**\n     * Sets the interval length in milliseconds for polling the location attribute in popup windows (default is 30ms)\n     */\n    pollIntervalMilliseconds?: number;\n};\n\n/**\n * Telemetry Options\n */\nexport type BrowserTelemetryOptions = {\n    /**\n     * Telemetry information sent on request\n     * - appName: Unique string name of an application\n     * - appVersion: Version of the application using MSAL\n     */\n    application?: ApplicationTelemetry;\n\n    client?: IPerformanceClient;\n};\n\n/**\n * This object allows you to configure important elements of MSAL functionality and is passed into the constructor of PublicClientApplication\n */\nexport type Configuration = {\n    /**\n     * This is where you configure auth elements like clientID, authority used for authenticating against the Microsoft Identity Platform\n     */\n    auth: BrowserAuthOptions;\n    /**\n     * This is where you configure cache location and whether to store cache in cookies\n     */\n    cache?: CacheOptions;\n    /**\n     * This is where you can configure the network client, logger, token renewal offset\n     */\n    system?: BrowserSystemOptions;\n    /**\n     * This is where you can configure telemetry data and options\n     */\n    telemetry?: BrowserTelemetryOptions;\n};\n\n/** @internal */\nexport type BrowserConfiguration = {\n    auth: InternalAuthOptions;\n    cache: Required<CacheOptions>;\n    system: Required<BrowserSystemOptions>;\n    telemetry: Required<BrowserTelemetryOptions>;\n};\n\n/**\n * MSAL function that sets the default options when not explicitly configured from app developer\n *\n * @param auth\n * @param cache\n * @param system\n *\n * @returns Configuration object\n */\nexport function buildConfiguration(\n    {\n        auth: userInputAuth,\n        cache: userInputCache,\n        system: userInputSystem,\n        telemetry: userInputTelemetry,\n    }: Configuration,\n    isBrowserEnvironment: boolean\n): BrowserConfiguration {\n    // Default auth options for browser\n    const DEFAULT_AUTH_OPTIONS: InternalAuthOptions = {\n        clientId: Constants.EMPTY_STRING,\n        authority: `${Constants.DEFAULT_AUTHORITY}`,\n        knownAuthorities: [],\n        cloudDiscoveryMetadata: Constants.EMPTY_STRING,\n        authorityMetadata: Constants.EMPTY_STRING,\n        redirectUri: Constants.EMPTY_STRING,\n        postLogoutRedirectUri: Constants.EMPTY_STRING,\n        navigateToLoginRequestUrl: true,\n        clientCapabilities: [],\n        protocolMode: ProtocolMode.AAD,\n        OIDCOptions: {\n            serverResponseType: ServerResponseType.FRAGMENT,\n            defaultScopes: [\n                Constants.OPENID_SCOPE,\n                Constants.PROFILE_SCOPE,\n                Constants.OFFLINE_ACCESS_SCOPE,\n            ],\n        },\n        azureCloudOptions: {\n            azureCloudInstance: AzureCloudInstance.None,\n            tenant: Constants.EMPTY_STRING,\n        },\n        skipAuthorityMetadataCache: false,\n        supportsNestedAppAuth: false,\n    };\n\n    // Default cache options for browser\n    const DEFAULT_CACHE_OPTIONS: Required<CacheOptions> = {\n        cacheLocation: BrowserCacheLocation.SessionStorage,\n        temporaryCacheLocation: BrowserCacheLocation.SessionStorage,\n        storeAuthStateInCookie: false,\n        secureCookies: false,\n        // Default cache migration to true if cache location is localStorage since entries are preserved across tabs/windows. Migration has little to no benefit in sessionStorage and memoryStorage\n        cacheMigrationEnabled:\n            userInputCache &&\n            userInputCache.cacheLocation === BrowserCacheLocation.LocalStorage\n                ? true\n                : false,\n        claimsBasedCachingEnabled: false,\n    };\n\n    // Default logger options for browser\n    const DEFAULT_LOGGER_OPTIONS: LoggerOptions = {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        loggerCallback: (): void => {\n            // allow users to not set logger call back\n        },\n        logLevel: LogLevel.Info,\n        piiLoggingEnabled: false,\n    };\n\n    // Default system options for browser\n    const DEFAULT_BROWSER_SYSTEM_OPTIONS: Required<BrowserSystemOptions> = {\n        ...DEFAULT_SYSTEM_OPTIONS,\n        loggerOptions: DEFAULT_LOGGER_OPTIONS,\n        networkClient: isBrowserEnvironment\n            ? new FetchClient()\n            : StubbedNetworkModule,\n        navigationClient: new NavigationClient(),\n        loadFrameTimeout: 0,\n        // If loadFrameTimeout is provided, use that as default.\n        windowHashTimeout:\n            userInputSystem?.loadFrameTimeout || DEFAULT_POPUP_TIMEOUT_MS,\n        iframeHashTimeout:\n            userInputSystem?.loadFrameTimeout || DEFAULT_IFRAME_TIMEOUT_MS,\n        navigateFrameWait: 0,\n        redirectNavigationTimeout: DEFAULT_REDIRECT_TIMEOUT_MS,\n        asyncPopups: false,\n        allowRedirectInIframe: false,\n        allowNativeBroker: false,\n        nativeBrokerHandshakeTimeout:\n            userInputSystem?.nativeBrokerHandshakeTimeout ||\n            DEFAULT_NATIVE_BROKER_HANDSHAKE_TIMEOUT_MS,\n        pollIntervalMilliseconds: BrowserConstants.DEFAULT_POLL_INTERVAL_MS,\n    };\n\n    const providedSystemOptions: Required<BrowserSystemOptions> = {\n        ...DEFAULT_BROWSER_SYSTEM_OPTIONS,\n        ...userInputSystem,\n        loggerOptions: userInputSystem?.loggerOptions || DEFAULT_LOGGER_OPTIONS,\n    };\n\n    const DEFAULT_TELEMETRY_OPTIONS: Required<BrowserTelemetryOptions> = {\n        application: {\n            appName: Constants.EMPTY_STRING,\n            appVersion: Constants.EMPTY_STRING,\n        },\n        client: new StubPerformanceClient(),\n    };\n\n    // Throw an error if user has set OIDCOptions without being in OIDC protocol mode\n    if (\n        userInputAuth?.protocolMode !== ProtocolMode.OIDC &&\n        userInputAuth?.OIDCOptions\n    ) {\n        const logger = new Logger(providedSystemOptions.loggerOptions);\n        logger.warning(\n            JSON.stringify(\n                createClientConfigurationError(\n                    ClientConfigurationErrorCodes.cannotSetOIDCOptions\n                )\n            )\n        );\n    }\n\n    // Throw an error if user has set allowNativeBroker to true without being in AAD protocol mode\n    if (\n        userInputAuth?.protocolMode &&\n        userInputAuth.protocolMode !== ProtocolMode.AAD &&\n        providedSystemOptions?.allowNativeBroker\n    ) {\n        throw createClientConfigurationError(\n            ClientConfigurationErrorCodes.cannotAllowNativeBroker\n        );\n    }\n\n    const overlayedConfig: BrowserConfiguration = {\n        auth: {\n            ...DEFAULT_AUTH_OPTIONS,\n            ...userInputAuth,\n            OIDCOptions: {\n                ...DEFAULT_AUTH_OPTIONS.OIDCOptions,\n                ...userInputAuth?.OIDCOptions,\n            },\n        },\n        cache: { ...DEFAULT_CACHE_OPTIONS, ...userInputCache },\n        system: providedSystemOptions,\n        telemetry: { ...DEFAULT_TELEMETRY_OPTIONS, ...userInputTelemetry },\n    };\n\n    return overlayedConfig;\n}\n", "/* eslint-disable header/header */\nexport const name = \"@azure/msal-browser\";\nexport const version = \"3.20.0\";\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Logger, LogLevel } from \"@azure/msal-common\";\nimport {\n    BrowserConfiguration,\n    buildConfiguration,\n    Configuration,\n} from \"../config/Configuration\";\nimport { version, name } from \"../packageMetadata\";\nimport {\n    BrowserCacheLocation,\n    LOG_LEVEL_CACHE_KEY,\n    LOG_PII_CACHE_KEY,\n} from \"../utils/BrowserConstants\";\n\n/**\n * Base class for operating context\n * Operating contexts are contexts in which MSAL.js is being run\n * More than one operating context may be available at a time\n * It's important from a logging and telemetry point of view for us to be able to identify the operating context.\n * For example: Some operating contexts will pre-cache tokens impacting performance telemetry\n */\nexport abstract class BaseOperatingContext {\n    protected logger: Logger;\n    protected config: BrowserConfiguration;\n    protected available: boolean;\n    protected browserEnvironment: boolean;\n\n    protected static loggerCallback(level: LogLevel, message: string): void {\n        switch (level) {\n            case LogLevel.Error:\n                // eslint-disable-next-line no-console\n                console.error(message);\n                return;\n            case LogLevel.Info:\n                // eslint-disable-next-line no-console\n                console.info(message);\n                return;\n            case LogLevel.Verbose:\n                // eslint-disable-next-line no-console\n                console.debug(message);\n                return;\n            case LogLevel.Warning:\n                // eslint-disable-next-line no-console\n                console.warn(message);\n                return;\n            default:\n                // eslint-disable-next-line no-console\n                console.log(message);\n                return;\n        }\n    }\n\n    constructor(config: Configuration) {\n        /*\n         * If loaded in an environment where window is not available,\n         * set internal flag to false so that further requests fail.\n         * This is to support server-side rendering environments.\n         */\n        this.browserEnvironment = typeof window !== \"undefined\";\n        this.config = buildConfiguration(config, this.browserEnvironment);\n\n        let sessionStorage: Storage | undefined;\n        try {\n            sessionStorage = window[BrowserCacheLocation.SessionStorage];\n            // Mute errors if it's a non-browser environment or cookies are blocked.\n        } catch (e) {}\n\n        const logLevelKey = sessionStorage?.getItem(LOG_LEVEL_CACHE_KEY);\n        const piiLoggingKey = sessionStorage\n            ?.getItem(LOG_PII_CACHE_KEY)\n            ?.toLowerCase();\n\n        const piiLoggingEnabled =\n            piiLoggingKey === \"true\"\n                ? true\n                : piiLoggingKey === \"false\"\n                ? false\n                : undefined;\n        const loggerOptions = { ...this.config.system.loggerOptions };\n\n        const logLevel =\n            logLevelKey && Object.keys(LogLevel).includes(logLevelKey)\n                ? LogLevel[logLevelKey]\n                : undefined;\n        if (logLevel) {\n            loggerOptions.loggerCallback = BaseOperatingContext.loggerCallback;\n            loggerOptions.logLevel = logLevel;\n        }\n        if (piiLoggingEnabled !== undefined) {\n            loggerOptions.piiLoggingEnabled = piiLoggingEnabled;\n        }\n\n        this.logger = new Logger(loggerOptions, name, version);\n        this.available = false;\n    }\n\n    /**\n     * returns the name of the module containing the API controller associated with this operating context\n     */\n    abstract getModuleName(): string;\n\n    /**\n     * returns the string identifier of this operating context\n     */\n    abstract getId(): string;\n\n    /**\n     * returns a boolean indicating whether this operating context is present\n     */\n    abstract initialize(): Promise<boolean>;\n\n    /**\n     * Return the MSAL config\n     * @returns BrowserConfiguration\n     */\n    getConfig(): BrowserConfiguration {\n        return this.config;\n    }\n\n    /**\n     * Returns the MSAL Logger\n     * @returns Logger\n     */\n    getLogger(): Logger {\n        return this.logger;\n    }\n\n    isAvailable(): boolean {\n        return this.available;\n    }\n\n    isBrowserEnvironment(): boolean {\n        return this.browserEnvironment;\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nexport const BridgeStatusCode = {\n    UserInteractionRequired: \"USER_INTERACTION_REQUIRED\",\n    UserCancel: \"USER_CANCEL\",\n    NoNetwork: \"NO_NETWORK\",\n    TransientError: \"TRANSIENT_ERROR\",\n    PersistentError: \"PERSISTENT_ERROR\",\n    Disabled: \"DISABLED\",\n    AccountUnavailable: \"ACCOUNT_UNAVAILABLE\",\n    NestedAppAuthUnavailable: \"NESTED_APP_AUTH_UNAVAILABLE\", // NAA is unavailable in the current context, can retry with standard browser based auth\n} as const;\nexport type BridgeStatusCode =\n    (typeof BridgeStatusCode)[keyof typeof BridgeStatusCode];\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthBridge, AuthBridgeResponse } from \"./AuthBridge\";\nimport { AuthResult } from \"./AuthResult\";\nimport { BridgeCapabilities } from \"./BridgeCapabilities\";\nimport { AccountContext } from \"./BridgeAccountContext\";\nimport { BridgeError } from \"./BridgeError\";\nimport { BridgeRequest } from \"./BridgeRequest\";\nimport { BridgeRequestEnvelope, BridgeMethods } from \"./BridgeRequestEnvelope\";\nimport { BridgeResponseEnvelope } from \"./BridgeResponseEnvelope\";\nimport { BridgeStatusCode } from \"./BridgeStatusCode\";\nimport { IBridgeProxy } from \"./IBridgeProxy\";\nimport { InitContext } from \"./InitContext\";\nimport { TokenRequest } from \"./TokenRequest\";\nimport * as BrowserCrypto from \"../crypto/BrowserCrypto\";\n\ndeclare global {\n    interface Window {\n        nestedAppAuthBridge: AuthBridge;\n    }\n}\n\n/**\n * BridgeProxy\n * Provides a proxy for accessing a bridge to a host app and/or\n * platform broker\n */\nexport class BridgeProxy implements IBridgeProxy {\n    static bridgeRequests: BridgeRequest[] = [];\n    sdkName: string;\n    sdkVersion: string;\n    capabilities?: BridgeCapabilities;\n    accountContext?: AccountContext;\n\n    /**\n     * initializeNestedAppAuthBridge - Initializes the bridge to the host app\n     * @returns a promise that resolves to an InitializeBridgeResponse or rejects with an Error\n     * @remarks This method will be called by the create factory method\n     * @remarks If the bridge is not available, this method will throw an error\n     */\n    protected static async initializeNestedAppAuthBridge(): Promise<InitContext> {\n        if (window === undefined) {\n            throw new Error(\"window is undefined\");\n        }\n        if (window.nestedAppAuthBridge === undefined) {\n            throw new Error(\"window.nestedAppAuthBridge is undefined\");\n        }\n\n        try {\n            window.nestedAppAuthBridge.addEventListener(\n                \"message\",\n                (response: AuthBridgeResponse) => {\n                    const responsePayload =\n                        typeof response === \"string\" ? response : response.data;\n                    const responseEnvelope: BridgeResponseEnvelope =\n                        JSON.parse(responsePayload);\n                    const request = BridgeProxy.bridgeRequests.find(\n                        (element) =>\n                            element.requestId === responseEnvelope.requestId\n                    );\n                    if (request !== undefined) {\n                        BridgeProxy.bridgeRequests.splice(\n                            BridgeProxy.bridgeRequests.indexOf(request),\n                            1\n                        );\n                        if (responseEnvelope.success) {\n                            request.resolve(responseEnvelope);\n                        } else {\n                            request.reject(responseEnvelope.error);\n                        }\n                    }\n                }\n            );\n\n            const bridgeResponse = await new Promise<BridgeResponseEnvelope>(\n                (resolve, reject) => {\n                    const message: BridgeRequestEnvelope = {\n                        messageType: \"NestedAppAuthRequest\",\n                        method: \"GetInitContext\",\n                        requestId: BrowserCrypto.createNewGuid(),\n                        sendTime: Date.now(),\n                    };\n                    const request: BridgeRequest = {\n                        requestId: message.requestId,\n                        method: message.method,\n                        resolve: resolve,\n                        reject: reject,\n                    };\n                    BridgeProxy.bridgeRequests.push(request);\n                    window.nestedAppAuthBridge.postMessage(\n                        JSON.stringify(message)\n                    );\n                }\n            );\n\n            return BridgeProxy.validateBridgeResultOrThrow(\n                bridgeResponse.initContext\n            );\n        } catch (error) {\n            window.console.log(error);\n            throw error;\n        }\n    }\n\n    /**\n     * getTokenInteractive - Attempts to get a token interactively from the bridge\n     * @param request A token request\n     * @returns a promise that resolves to an auth result or rejects with a BridgeError\n     */\n    public getTokenInteractive(request: TokenRequest): Promise<AuthResult> {\n        return this.getToken(\"GetTokenPopup\", request);\n    }\n\n    /**\n     * getTokenSilent Attempts to get a token silently from the bridge\n     * @param request A token request\n     * @returns a promise that resolves to an auth result or rejects with a BridgeError\n     */\n    public getTokenSilent(request: TokenRequest): Promise<AuthResult> {\n        return this.getToken(\"GetToken\", request);\n    }\n\n    private async getToken(\n        requestType: BridgeMethods,\n        request: TokenRequest\n    ): Promise<AuthResult> {\n        const result = await this.sendRequest(requestType, {\n            tokenParams: request,\n        });\n        return {\n            token: BridgeProxy.validateBridgeResultOrThrow(result.token),\n            account: BridgeProxy.validateBridgeResultOrThrow(result.account),\n        };\n    }\n\n    public getHostCapabilities(): BridgeCapabilities | null {\n        return this.capabilities ?? null;\n    }\n\n    public getAccountContext(): AccountContext | null {\n        return this.accountContext ? this.accountContext : null;\n    }\n\n    /**\n     * A method used to send a request to the bridge\n     * @param request A token request\n     * @returns a promise that resolves to a response of provided type or rejects with a BridgeError\n     */\n    private sendRequest(\n        method: BridgeMethods,\n        requestParams?: Partial<BridgeRequestEnvelope>\n    ): Promise<BridgeResponseEnvelope> {\n        const message: BridgeRequestEnvelope = {\n            messageType: \"NestedAppAuthRequest\",\n            method: method,\n            requestId: BrowserCrypto.createNewGuid(),\n            sendTime: Date.now(),\n            ...requestParams,\n        };\n\n        const promise = new Promise<BridgeResponseEnvelope>(\n            (resolve, reject) => {\n                const request: BridgeRequest = {\n                    requestId: message.requestId,\n                    method: message.method,\n                    resolve: resolve,\n                    reject: reject,\n                };\n                BridgeProxy.bridgeRequests.push(request);\n                window.nestedAppAuthBridge.postMessage(JSON.stringify(message));\n            }\n        );\n\n        return promise;\n    }\n\n    private static validateBridgeResultOrThrow<T>(input: T | undefined): T {\n        if (input === undefined) {\n            const bridgeError: BridgeError = {\n                status: BridgeStatusCode.NestedAppAuthUnavailable,\n            };\n            throw bridgeError;\n        }\n        return input;\n    }\n\n    /**\n     * Private constructor for BridgeProxy\n     * @param sdkName The name of the SDK being used to make requests on behalf of the app\n     * @param sdkVersion The version of the SDK being used to make requests on behalf of the app\n     * @param capabilities The capabilities of the bridge / SDK / platform broker\n     */\n    private constructor(\n        sdkName: string,\n        sdkVersion: string,\n        accountContext?: AccountContext,\n        capabilities?: BridgeCapabilities\n    ) {\n        this.sdkName = sdkName;\n        this.sdkVersion = sdkVersion;\n        this.accountContext = accountContext;\n        this.capabilities = capabilities;\n    }\n\n    /**\n     * Factory method for creating an implementation of IBridgeProxy\n     * @returns A promise that resolves to a BridgeProxy implementation\n     */\n    public static async create(): Promise<IBridgeProxy> {\n        const response = await BridgeProxy.initializeNestedAppAuthBridge();\n        return new BridgeProxy(\n            response.sdkName,\n            response.sdkVersion,\n            response.accountContext,\n            response.capabilities\n        );\n    }\n}\n\nexport default BridgeProxy;\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BaseOperatingContext } from \"./BaseOperatingContext\";\nimport { IBridgeProxy } from \"../naa/IBridgeProxy\";\nimport { BridgeProxy } from \"../naa/BridgeProxy\";\nimport { AccountContext } from \"../naa/BridgeAccountContext\";\n\nexport class NestedAppOperatingContext extends BaseOperatingContext {\n    protected bridgeProxy: IBridgeProxy | undefined = undefined;\n    protected accountContext: AccountContext | null = null;\n\n    /*\n     * TODO: Once we have determine the bundling code return here to specify the name of the bundle\n     * containing the implementation for this operating context\n     */\n    static readonly MODULE_NAME: string = \"\";\n\n    /**\n     * Unique identifier for the operating context\n     */\n    static readonly ID: string = \"NestedAppOperatingContext\";\n\n    /**\n     * Return the module name.  Intended for use with import() to enable dynamic import\n     * of the implementation associated with this operating context\n     * @returns\n     */\n    getModuleName(): string {\n        return NestedAppOperatingContext.MODULE_NAME;\n    }\n\n    /**\n     * Returns the unique identifier for this operating context\n     * @returns string\n     */\n    getId(): string {\n        return NestedAppOperatingContext.ID;\n    }\n\n    /**\n     * Returns the current BridgeProxy\n     * @returns IBridgeProxy | undefined\n     */\n    getBridgeProxy(): IBridgeProxy | undefined {\n        return this.bridgeProxy;\n    }\n\n    /**\n     * Checks whether the operating context is available.\n     * Confirms that the code is running a browser rather.  This is required.\n     * @returns Promise<boolean> indicating whether this operating context is currently available.\n     */\n    async initialize(): Promise<boolean> {\n        /*\n         * TODO: Add implementation to check for presence of inject Nested App Auth Bridge JavaScript interface\n         *\n         */\n\n        try {\n            if (typeof window !== \"undefined\") {\n                const bridgeProxy: IBridgeProxy = await BridgeProxy.create();\n                /*\n                 * Because we want single sign on we expect the host app to provide the account context\n                 * with a min set of params that can be used to identify the account\n                 * this.account = nestedApp.getAccountByFilter(bridgeProxy.getAccountContext());\n                 */\n                this.accountContext = bridgeProxy.getAccountContext();\n                this.bridgeProxy = bridgeProxy;\n                this.available = bridgeProxy !== undefined;\n            }\n        } catch (ex) {\n            this.logger.infoPii(\n                `Could not initialize Nested App Auth bridge (${ex})`\n            );\n        }\n\n        this.logger.info(`Nested App Auth Bridge available: ${this.available}`);\n        return this.available;\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BaseOperatingContext } from \"./BaseOperatingContext\";\n\nexport class StandardOperatingContext extends BaseOperatingContext {\n    /*\n     * TODO: Once we have determine the bundling code return here to specify the name of the bundle\n     * containing the implementation for this operating context\n     */\n    static readonly MODULE_NAME: string = \"\";\n\n    /**\n     * Unique identifier for the operating context\n     */\n    static readonly ID: string = \"StandardOperatingContext\";\n\n    /**\n     * Return the module name.  Intended for use with import() to enable dynamic import\n     * of the implementation associated with this operating context\n     * @returns\n     */\n    getModuleName(): string {\n        return StandardOperatingContext.MODULE_NAME;\n    }\n\n    /**\n     * Returns the unique identifier for this operating context\n     * @returns string\n     */\n    getId(): string {\n        return StandardOperatingContext.ID;\n    }\n\n    /**\n     * Checks whether the operating context is available.\n     * Confirms that the code is running a browser rather.  This is required.\n     * @returns Promise<boolean> indicating whether this operating context is currently available.\n     */\n    async initialize(): Promise<boolean> {\n        this.available = typeof window !== \"undefined\";\n        return this.available;\n        /*\n         * NOTE: The standard context is available as long as there is a window.  If/when we split out WAM from Browser\n         * We can move the current contents of the initialize method to here and verify that the WAM extension is available\n         */\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    BrowserAuthErrorCodes,\n    createBrowserAuthError,\n} from \"../error/BrowserAuthError\";\n\n/**\n * Class which exposes APIs to decode base64 strings to plaintext. See here for implementation details:\n * https://developer.mozilla.org/en-US/docs/Glossary/Base64#the_unicode_problem\n */\n\n/**\n * Returns a URL-safe plaintext decoded string from b64 encoded input.\n * @param input\n */\nexport function base64Decode(input: string): string {\n    return new TextDecoder().decode(base64DecToArr(input));\n}\n\n/**\n * Decodes base64 into Uint8Array\n * @param base64String\n */\nfunction base64DecToArr(base64String: string): Uint8Array {\n    let encodedString = base64String.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (encodedString.length % 4) {\n        case 0:\n            break;\n        case 2:\n            encodedString += \"==\";\n            break;\n        case 3:\n            encodedString += \"=\";\n            break;\n        default:\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.invalidBase64String\n            );\n    }\n    const binString = atob(encodedString);\n    return Uint8Array.from(binString, (m) => m.codePointAt(0) || 0);\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { DB_NAME, DB_TABLE_NAME, DB_VERSION } from \"../utils/BrowserConstants\";\nimport { IAsyncStorage } from \"./IAsyncStorage\";\n\ninterface IDBOpenDBRequestEvent extends Event {\n    target: IDBOpenDBRequest & EventTarget;\n}\n\ninterface IDBOpenOnUpgradeNeededEvent extends IDBVersionChangeEvent {\n    target: IDBOpenDBRequest & EventTarget;\n}\n\ninterface IDBRequestEvent extends Event {\n    target: IDBRequest & EventTarget;\n}\n\n/**\n * Storage wrapper for IndexedDB storage in browsers: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\n */\nexport class DatabaseStorage<T> implements IAsyncStorage<T> {\n    private db: IDBDatabase | undefined;\n    private dbName: string;\n    private tableName: string;\n    private version: number;\n    private dbOpen: boolean;\n\n    constructor() {\n        this.dbName = DB_NAME;\n        this.version = DB_VERSION;\n        this.tableName = DB_TABLE_NAME;\n        this.dbOpen = false;\n    }\n\n    /**\n     * Opens IndexedDB instance.\n     */\n    async open(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const openDB = window.indexedDB.open(this.dbName, this.version);\n            openDB.addEventListener(\n                \"upgradeneeded\",\n                (e: IDBVersionChangeEvent) => {\n                    const event = e as IDBOpenOnUpgradeNeededEvent;\n                    event.target.result.createObjectStore(this.tableName);\n                }\n            );\n            openDB.addEventListener(\"success\", (e: Event) => {\n                const event = e as IDBOpenDBRequestEvent;\n                this.db = event.target.result;\n                this.dbOpen = true;\n                resolve();\n            });\n            openDB.addEventListener(\"error\", () =>\n                reject(\n                    createBrowserAuthError(\n                        BrowserAuthErrorCodes.databaseUnavailable\n                    )\n                )\n            );\n        });\n    }\n\n    /**\n     * Closes the connection to IndexedDB database when all pending transactions\n     * complete.\n     */\n    closeConnection(): void {\n        const db = this.db;\n        if (db && this.dbOpen) {\n            db.close();\n            this.dbOpen = false;\n        }\n    }\n\n    /**\n     * Opens database if it's not already open\n     */\n    private async validateDbIsOpen(): Promise<void> {\n        if (!this.dbOpen) {\n            return this.open();\n        }\n    }\n\n    /**\n     * Retrieves item from IndexedDB instance.\n     * @param key\n     */\n    async getItem(key: string): Promise<T | null> {\n        await this.validateDbIsOpen();\n        return new Promise<T>((resolve, reject) => {\n            // TODO: Add timeouts?\n            if (!this.db) {\n                return reject(\n                    createBrowserAuthError(\n                        BrowserAuthErrorCodes.databaseNotOpen\n                    )\n                );\n            }\n            const transaction = this.db.transaction(\n                [this.tableName],\n                \"readonly\"\n            );\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbGet = objectStore.get(key);\n\n            dbGet.addEventListener(\"success\", (e: Event) => {\n                const event = e as IDBRequestEvent;\n                this.closeConnection();\n                resolve(event.target.result);\n            });\n\n            dbGet.addEventListener(\"error\", (e: Event) => {\n                this.closeConnection();\n                reject(e);\n            });\n        });\n    }\n\n    /**\n     * Adds item to IndexedDB under given key\n     * @param key\n     * @param payload\n     */\n    async setItem(key: string, payload: T): Promise<void> {\n        await this.validateDbIsOpen();\n        return new Promise<void>((resolve: Function, reject: Function) => {\n            // TODO: Add timeouts?\n            if (!this.db) {\n                return reject(\n                    createBrowserAuthError(\n                        BrowserAuthErrorCodes.databaseNotOpen\n                    )\n                );\n            }\n            const transaction = this.db.transaction(\n                [this.tableName],\n                \"readwrite\"\n            );\n\n            const objectStore = transaction.objectStore(this.tableName);\n\n            const dbPut = objectStore.put(payload, key);\n\n            dbPut.addEventListener(\"success\", () => {\n                this.closeConnection();\n                resolve();\n            });\n\n            dbPut.addEventListener(\"error\", (e) => {\n                this.closeConnection();\n                reject(e);\n            });\n        });\n    }\n\n    /**\n     * Removes item from IndexedDB under given key\n     * @param key\n     */\n    async removeItem(key: string): Promise<void> {\n        await this.validateDbIsOpen();\n        return new Promise<void>((resolve: Function, reject: Function) => {\n            if (!this.db) {\n                return reject(\n                    createBrowserAuthError(\n                        BrowserAuthErrorCodes.databaseNotOpen\n                    )\n                );\n            }\n\n            const transaction = this.db.transaction(\n                [this.tableName],\n                \"readwrite\"\n            );\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbDelete = objectStore.delete(key);\n\n            dbDelete.addEventListener(\"success\", () => {\n                this.closeConnection();\n                resolve();\n            });\n\n            dbDelete.addEventListener(\"error\", (e) => {\n                this.closeConnection();\n                reject(e);\n            });\n        });\n    }\n\n    /**\n     * Get all the keys from the storage object as an iterable array of strings.\n     */\n    async getKeys(): Promise<string[]> {\n        await this.validateDbIsOpen();\n        return new Promise<string[]>((resolve: Function, reject: Function) => {\n            if (!this.db) {\n                return reject(\n                    createBrowserAuthError(\n                        BrowserAuthErrorCodes.databaseNotOpen\n                    )\n                );\n            }\n\n            const transaction = this.db.transaction(\n                [this.tableName],\n                \"readonly\"\n            );\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbGetKeys = objectStore.getAllKeys();\n\n            dbGetKeys.addEventListener(\"success\", (e: Event) => {\n                const event = e as IDBRequestEvent;\n                this.closeConnection();\n                resolve(event.target.result);\n            });\n\n            dbGetKeys.addEventListener(\"error\", (e: Event) => {\n                this.closeConnection();\n                reject(e);\n            });\n        });\n    }\n\n    /**\n     *\n     * Checks whether there is an object under the search key in the object store\n     */\n    async containsKey(key: string): Promise<boolean> {\n        await this.validateDbIsOpen();\n\n        return new Promise<boolean>((resolve: Function, reject: Function) => {\n            if (!this.db) {\n                return reject(\n                    createBrowserAuthError(\n                        BrowserAuthErrorCodes.databaseNotOpen\n                    )\n                );\n            }\n\n            const transaction = this.db.transaction(\n                [this.tableName],\n                \"readonly\"\n            );\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbContainsKey = objectStore.count(key);\n\n            dbContainsKey.addEventListener(\"success\", (e: Event) => {\n                const event = e as IDBRequestEvent;\n                this.closeConnection();\n                resolve(event.target.result === 1);\n            });\n\n            dbContainsKey.addEventListener(\"error\", (e: Event) => {\n                this.closeConnection();\n                reject(e);\n            });\n        });\n    }\n\n    /**\n     * Deletes the MSAL database. The database is deleted rather than cleared to make it possible\n     * for client applications to downgrade to a previous MSAL version without worrying about forward compatibility issues\n     * with IndexedDB database versions.\n     */\n    async deleteDatabase(): Promise<boolean> {\n        // Check if database being deleted exists\n\n        if (this.db && this.dbOpen) {\n            this.closeConnection();\n        }\n\n        return new Promise<boolean>((resolve: Function, reject: Function) => {\n            const deleteDbRequest = window.indexedDB.deleteDatabase(DB_NAME);\n            const id = setTimeout(() => reject(false), 200); // Reject if events aren't raised within 200ms\n            deleteDbRequest.addEventListener(\"success\", () => {\n                clearTimeout(id);\n                return resolve(true);\n            });\n            deleteDbRequest.addEventListener(\"blocked\", () => {\n                clearTimeout(id);\n                return resolve(true);\n            });\n            deleteDbRequest.addEventListener(\"error\", () => {\n                clearTimeout(id);\n                return reject(false);\n            });\n        });\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { IWindowStorage } from \"./IWindowStorage\";\n\nexport class MemoryStorage<T> implements IWindowStorage<T> {\n    private cache: Map<string, T>;\n\n    constructor() {\n        this.cache = new Map<string, T>();\n    }\n\n    getItem(key: string): T | null {\n        return this.cache.get(key) || null;\n    }\n\n    setItem(key: string, value: T): void {\n        this.cache.set(key, value);\n    }\n\n    removeItem(key: string): void {\n        this.cache.delete(key);\n    }\n\n    getKeys(): string[] {\n        const cacheKeys: string[] = [];\n        this.cache.forEach((value: T, key: string) => {\n            cacheKeys.push(key);\n        });\n        return cacheKeys;\n    }\n\n    containsKey(key: string): boolean {\n        return this.cache.has(key);\n    }\n\n    clear(): void {\n        this.cache.clear();\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Logger } from \"@azure/msal-common\";\nimport {\n    BrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { DatabaseStorage } from \"./DatabaseStorage\";\nimport { IAsyncStorage } from \"./IAsyncStorage\";\nimport { MemoryStorage } from \"./MemoryStorage\";\n\n/**\n * This class allows MSAL to store artifacts asynchronously using the DatabaseStorage IndexedDB wrapper,\n * backed up with the more volatile MemoryStorage object for cases in which IndexedDB may be unavailable.\n */\nexport class AsyncMemoryStorage<T> implements IAsyncStorage<T> {\n    private inMemoryCache: MemoryStorage<T>;\n    private indexedDBCache: DatabaseStorage<T>;\n    private logger: Logger;\n\n    constructor(logger: Logger) {\n        this.inMemoryCache = new MemoryStorage<T>();\n        this.indexedDBCache = new DatabaseStorage<T>();\n        this.logger = logger;\n    }\n\n    private handleDatabaseAccessError(error: unknown): void {\n        if (\n            error instanceof BrowserAuthError &&\n            error.errorCode === BrowserAuthErrorCodes.databaseUnavailable\n        ) {\n            this.logger.error(\n                \"Could not access persistent storage. This may be caused by browser privacy features which block persistent storage in third-party contexts.\"\n            );\n        } else {\n            throw error;\n        }\n    }\n    /**\n     * Get the item matching the given key. Tries in-memory cache first, then in the asynchronous\n     * storage object if item isn't found in-memory.\n     * @param key\n     */\n    async getItem(key: string): Promise<T | null> {\n        const item = this.inMemoryCache.getItem(key);\n        if (!item) {\n            try {\n                this.logger.verbose(\n                    \"Queried item not found in in-memory cache, now querying persistent storage.\"\n                );\n                return await this.indexedDBCache.getItem(key);\n            } catch (e) {\n                this.handleDatabaseAccessError(e);\n            }\n        }\n        return item;\n    }\n\n    /**\n     * Sets the item in the in-memory cache and then tries to set it in the asynchronous\n     * storage object with the given key.\n     * @param key\n     * @param value\n     */\n    async setItem(key: string, value: T): Promise<void> {\n        this.inMemoryCache.setItem(key, value);\n        try {\n            await this.indexedDBCache.setItem(key, value);\n        } catch (e) {\n            this.handleDatabaseAccessError(e);\n        }\n    }\n\n    /**\n     * Removes the item matching the key from the in-memory cache, then tries to remove it from the asynchronous storage object.\n     * @param key\n     */\n    async removeItem(key: string): Promise<void> {\n        this.inMemoryCache.removeItem(key);\n        try {\n            await this.indexedDBCache.removeItem(key);\n        } catch (e) {\n            this.handleDatabaseAccessError(e);\n        }\n    }\n\n    /**\n     * Get all the keys from the in-memory cache as an iterable array of strings. If no keys are found, query the keys in the\n     * asynchronous storage object.\n     */\n    async getKeys(): Promise<string[]> {\n        const cacheKeys = this.inMemoryCache.getKeys();\n        if (cacheKeys.length === 0) {\n            try {\n                this.logger.verbose(\n                    \"In-memory cache is empty, now querying persistent storage.\"\n                );\n                return await this.indexedDBCache.getKeys();\n            } catch (e) {\n                this.handleDatabaseAccessError(e);\n            }\n        }\n        return cacheKeys;\n    }\n\n    /**\n     * Returns true or false if the given key is present in the cache.\n     * @param key\n     */\n    async containsKey(key: string): Promise<boolean> {\n        const containsKey = this.inMemoryCache.containsKey(key);\n        if (!containsKey) {\n            try {\n                this.logger.verbose(\n                    \"Key not found in in-memory cache, now querying persistent storage.\"\n                );\n                return await this.indexedDBCache.containsKey(key);\n            } catch (e) {\n                this.handleDatabaseAccessError(e);\n            }\n        }\n        return containsKey;\n    }\n\n    /**\n     * Clears in-memory Map\n     */\n    clearInMemory(): void {\n        // InMemory cache is a Map instance, clear is straightforward\n        this.logger.verbose(`Deleting in-memory keystore`);\n        this.inMemoryCache.clear();\n        this.logger.verbose(`In-memory keystore deleted`);\n    }\n\n    /**\n     * Tries to delete the IndexedDB database\n     * @returns\n     */\n    async clearPersistent(): Promise<boolean> {\n        try {\n            this.logger.verbose(\"Deleting persistent keystore\");\n            const dbDeleted = await this.indexedDBCache.deleteDatabase();\n            if (dbDeleted) {\n                this.logger.verbose(\"Persistent keystore deleted\");\n            }\n\n            return dbDeleted;\n        } catch (e) {\n            this.handleDatabaseAccessError(e);\n            return false;\n        }\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    ICrypto,\n    IPerformanceClient,\n    JoseHeader,\n    Logger,\n    PerformanceEvents,\n    ShrOptions,\n    SignedHttpRequest,\n    SignedHttpRequestParameters,\n} from \"@azure/msal-common\";\nimport { base64Encode, urlEncode, urlEncodeArr } from \"../encode/Base64Encode\";\nimport { base64Decode } from \"../encode/Base64Decode\";\nimport * as BrowserCrypto from \"./BrowserCrypto\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { AsyncMemoryStorage } from \"../cache/AsyncMemoryStorage\";\n\nexport type CachedKeyPair = {\n    publicKey: CryptoKey;\n    privateKey: CryptoKey;\n    requestMethod?: string;\n    requestUri?: string;\n};\n\n/**\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\n */\nexport class CryptoOps implements ICrypto {\n    private logger: Logger;\n\n    /**\n     * CryptoOps can be used in contexts outside a PCA instance,\n     * meaning there won't be a performance manager available.\n     */\n    private performanceClient: IPerformanceClient | undefined;\n\n    private static POP_KEY_USAGES: Array<KeyUsage> = [\"sign\", \"verify\"];\n    private static EXTRACTABLE: boolean = true;\n    private cache: AsyncMemoryStorage<CachedKeyPair>;\n\n    constructor(logger: Logger, performanceClient?: IPerformanceClient) {\n        this.logger = logger;\n        // Browser crypto needs to be validated first before any other classes can be set.\n        BrowserCrypto.validateCryptoAvailable(logger);\n        this.cache = new AsyncMemoryStorage<CachedKeyPair>(this.logger);\n        this.performanceClient = performanceClient;\n    }\n\n    /**\n     * Creates a new random GUID - used to populate state and nonce.\n     * @returns string (GUID)\n     */\n    createNewGuid(): string {\n        return BrowserCrypto.createNewGuid();\n    }\n\n    /**\n     * Encodes input string to base64.\n     * @param input\n     */\n    base64Encode(input: string): string {\n        return base64Encode(input);\n    }\n\n    /**\n     * Decodes input string from base64.\n     * @param input\n     */\n    base64Decode(input: string): string {\n        return base64Decode(input);\n    }\n\n    /**\n     * Encodes input string to base64 URL safe string.\n     * @param input\n     */\n    base64UrlEncode(input: string): string {\n        return urlEncode(input);\n    }\n\n    /**\n     * Stringifies and base64Url encodes input public key\n     * @param inputKid\n     * @returns Base64Url encoded public key\n     */\n    encodeKid(inputKid: string): string {\n        return this.base64UrlEncode(JSON.stringify({ kid: inputKid }));\n    }\n\n    /**\n     * Generates a keypair, stores it and returns a thumbprint\n     * @param request\n     */\n    async getPublicKeyThumbprint(\n        request: SignedHttpRequestParameters\n    ): Promise<string> {\n        const publicKeyThumbMeasurement =\n            this.performanceClient?.startMeasurement(\n                PerformanceEvents.CryptoOptsGetPublicKeyThumbprint,\n                request.correlationId\n            );\n\n        // Generate Keypair\n        const keyPair: CryptoKeyPair = await BrowserCrypto.generateKeyPair(\n            CryptoOps.EXTRACTABLE,\n            CryptoOps.POP_KEY_USAGES\n        );\n\n        // Generate Thumbprint for Public Key\n        const publicKeyJwk: JsonWebKey = await BrowserCrypto.exportJwk(\n            keyPair.publicKey\n        );\n\n        const pubKeyThumprintObj: JsonWebKey = {\n            e: publicKeyJwk.e,\n            kty: publicKeyJwk.kty,\n            n: publicKeyJwk.n,\n        };\n\n        const publicJwkString: string =\n            getSortedObjectString(pubKeyThumprintObj);\n        const publicJwkHash = await this.hashString(publicJwkString);\n\n        // Generate Thumbprint for Private Key\n        const privateKeyJwk: JsonWebKey = await BrowserCrypto.exportJwk(\n            keyPair.privateKey\n        );\n        // Re-import private key to make it unextractable\n        const unextractablePrivateKey: CryptoKey =\n            await BrowserCrypto.importJwk(privateKeyJwk, false, [\"sign\"]);\n\n        // Store Keypair data in keystore\n        await this.cache.setItem(publicJwkHash, {\n            privateKey: unextractablePrivateKey,\n            publicKey: keyPair.publicKey,\n            requestMethod: request.resourceRequestMethod,\n            requestUri: request.resourceRequestUri,\n        });\n\n        if (publicKeyThumbMeasurement) {\n            publicKeyThumbMeasurement.end({\n                success: true,\n            });\n        }\n\n        return publicJwkHash;\n    }\n\n    /**\n     * Removes cryptographic keypair from key store matching the keyId passed in\n     * @param kid\n     */\n    async removeTokenBindingKey(kid: string): Promise<boolean> {\n        await this.cache.removeItem(kid);\n        const keyFound = await this.cache.containsKey(kid);\n        return !keyFound;\n    }\n\n    /**\n     * Removes all cryptographic keys from IndexedDB storage\n     */\n    async clearKeystore(): Promise<boolean> {\n        // Delete in-memory keystores\n        this.cache.clearInMemory();\n\n        /**\n         * There is only one database, so calling clearPersistent on asymmetric keystore takes care of\n         * every persistent keystore\n         */\n        try {\n            await this.cache.clearPersistent();\n            return true;\n        } catch (e) {\n            if (e instanceof Error) {\n                this.logger.error(\n                    `Clearing keystore failed with error: ${e.message}`\n                );\n            } else {\n                this.logger.error(\n                    \"Clearing keystore failed with unknown error\"\n                );\n            }\n\n            return false;\n        }\n    }\n\n    /**\n     * Signs the given object as a jwt payload with private key retrieved by given kid.\n     * @param payload\n     * @param kid\n     */\n    async signJwt(\n        payload: SignedHttpRequest,\n        kid: string,\n        shrOptions?: ShrOptions,\n        correlationId?: string\n    ): Promise<string> {\n        const signJwtMeasurement = this.performanceClient?.startMeasurement(\n            PerformanceEvents.CryptoOptsSignJwt,\n            correlationId\n        );\n        const cachedKeyPair = await this.cache.getItem(kid);\n\n        if (!cachedKeyPair) {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.cryptoKeyNotFound\n            );\n        }\n\n        // Get public key as JWK\n        const publicKeyJwk = await BrowserCrypto.exportJwk(\n            cachedKeyPair.publicKey\n        );\n        const publicKeyJwkString = getSortedObjectString(publicKeyJwk);\n        // Base64URL encode public key thumbprint with keyId only: BASE64URL({ kid: \"FULL_PUBLIC_KEY_HASH\" })\n        const encodedKeyIdThumbprint = urlEncode(JSON.stringify({ kid: kid }));\n        // Generate header\n        const shrHeader = JoseHeader.getShrHeaderString({\n            ...shrOptions?.header,\n            alg: publicKeyJwk.alg,\n            kid: encodedKeyIdThumbprint,\n        });\n\n        const encodedShrHeader = urlEncode(shrHeader);\n\n        // Generate payload\n        payload.cnf = {\n            jwk: JSON.parse(publicKeyJwkString),\n        };\n        const encodedPayload = urlEncode(JSON.stringify(payload));\n\n        // Form token string\n        const tokenString = `${encodedShrHeader}.${encodedPayload}`;\n\n        // Sign token\n        const encoder = new TextEncoder();\n        const tokenBuffer = encoder.encode(tokenString);\n        const signatureBuffer = await BrowserCrypto.sign(\n            cachedKeyPair.privateKey,\n            tokenBuffer\n        );\n        const encodedSignature = urlEncodeArr(new Uint8Array(signatureBuffer));\n\n        const signedJwt = `${tokenString}.${encodedSignature}`;\n\n        if (signJwtMeasurement) {\n            signJwtMeasurement.end({\n                success: true,\n            });\n        }\n\n        return signedJwt;\n    }\n\n    /**\n     * Returns the SHA-256 hash of an input string\n     * @param plainText\n     */\n    async hashString(plainText: string): Promise<string> {\n        return BrowserCrypto.hashString(plainText);\n    }\n}\n\nfunction getSortedObjectString(obj: object): string {\n    return JSON.stringify(obj, Object.keys(obj).sort());\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    BrowserConfigurationAuthErrorCodes,\n    createBrowserConfigurationAuthError,\n} from \"../error/BrowserConfigurationAuthError\";\nimport { BrowserCacheLocation } from \"../utils/BrowserConstants\";\nimport { IWindowStorage } from \"./IWindowStorage\";\n\nexport class BrowserStorage implements IWindowStorage<string> {\n    private windowStorage: Storage;\n\n    constructor(cacheLocation: string) {\n        this.validateWindowStorage(cacheLocation);\n        this.windowStorage = window[cacheLocation];\n    }\n\n    private validateWindowStorage(cacheLocation: string): void {\n        if (\n            (cacheLocation !== BrowserCacheLocation.LocalStorage &&\n                cacheLocation !== BrowserCacheLocation.SessionStorage) ||\n            !window[cacheLocation]\n        ) {\n            throw createBrowserConfigurationAuthError(\n                BrowserConfigurationAuthErrorCodes.storageNotSupported\n            );\n        }\n    }\n\n    getItem(key: string): string | null {\n        return this.windowStorage.getItem(key);\n    }\n\n    setItem(key: string, value: string): void {\n        this.windowStorage.setItem(key, value);\n    }\n\n    removeItem(key: string): void {\n        this.windowStorage.removeItem(key);\n    }\n\n    getKeys(): string[] {\n        return Object.keys(this.windowStorage);\n    }\n\n    containsKey(key: string): boolean {\n        return this.windowStorage.hasOwnProperty(key);\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { InteractionType } from \"./BrowserConstants\";\nimport {\n    ICrypto,\n    RequestStateObject,\n    ProtocolUtils,\n    createClientAuthError,\n    ClientAuthErrorCodes,\n} from \"@azure/msal-common\";\n\nexport type BrowserStateObject = {\n    interactionType: InteractionType;\n};\n\n/**\n * Extracts the BrowserStateObject from the state string.\n * @param browserCrypto\n * @param state\n */\nexport function extractBrowserRequestState(\n    browserCrypto: ICrypto,\n    state: string\n): BrowserStateObject | null {\n    if (!state) {\n        return null;\n    }\n\n    try {\n        const requestStateObj: RequestStateObject =\n            ProtocolUtils.parseRequestState(browserCrypto, state);\n        return requestStateObj.libraryState.meta as BrowserStateObject;\n    } catch (e) {\n        throw createClientAuthError(ClientAuthErrorCodes.invalidState);\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    Constants,\n    PersistentCacheKeys,\n    StringUtils,\n    CommonAuthorizationCodeRequest,\n    ICrypto,\n    AccountEntity,\n    IdTokenEntity,\n    AccessTokenEntity,\n    RefreshTokenEntity,\n    AppMetadataEntity,\n    CacheManager,\n    ServerTelemetryEntity,\n    ThrottlingEntity,\n    ProtocolUtils,\n    Logger,\n    AuthorityMetadataEntity,\n    DEFAULT_CRYPTO_IMPLEMENTATION,\n    AccountInfo,\n    ActiveAccountFilters,\n    CcsCredential,\n    CcsCredentialType,\n    AuthToken,\n    ValidCredentialType,\n    TokenKeys,\n    CredentialType,\n    CacheRecord,\n    AuthenticationScheme,\n    createClientAuthError,\n    ClientAuthErrorCodes,\n    PerformanceEvents,\n    IPerformanceClient,\n    StaticAuthorityOptions,\n    CacheHelpers,\n    StoreInCache,\n    CacheError,\n} from \"@azure/msal-common\";\nimport { CacheOptions } from \"../config/Configuration\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport {\n    BrowserCacheLocation,\n    InteractionType,\n    TemporaryCacheKeys,\n    InMemoryCacheKeys,\n    StaticCacheKeys,\n} from \"../utils/BrowserConstants\";\nimport { BrowserStorage } from \"./BrowserStorage\";\nimport { MemoryStorage } from \"./MemoryStorage\";\nimport { IWindowStorage } from \"./IWindowStorage\";\nimport { extractBrowserRequestState } from \"../utils/BrowserProtocolUtils\";\nimport { NativeTokenRequest } from \"../broker/nativeBroker/NativeRequest\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { base64Decode } from \"../encode/Base64Decode\";\nimport { base64Encode } from \"../encode/Base64Encode\";\n\n/**\n * This class implements the cache storage interface for MSAL through browser local or session storage.\n * Cookies are only used if storeAuthStateInCookie is true, and are only used for\n * parameters such as state and nonce, generally.\n */\nexport class BrowserCacheManager extends CacheManager {\n    // Cache configuration, either set by user or default values.\n    protected cacheConfig: Required<CacheOptions>;\n    // Window storage object (either local or sessionStorage)\n    protected browserStorage: IWindowStorage<string>;\n    // Internal in-memory storage object used for data used by msal that does not need to persist across page loads\n    protected internalStorage: MemoryStorage<string>;\n    // Temporary cache\n    protected temporaryCacheStorage: IWindowStorage<string>;\n    // Logger instance\n    protected logger: Logger;\n    // Telemetry perf client\n    protected performanceClient?: IPerformanceClient;\n\n    // Cookie life calculation (hours * minutes * seconds * ms)\n    protected readonly COOKIE_LIFE_MULTIPLIER = 24 * 60 * 60 * 1000;\n\n    constructor(\n        clientId: string,\n        cacheConfig: Required<CacheOptions>,\n        cryptoImpl: ICrypto,\n        logger: Logger,\n        staticAuthorityOptions?: StaticAuthorityOptions,\n        performanceClient?: IPerformanceClient\n    ) {\n        super(clientId, cryptoImpl, logger, staticAuthorityOptions);\n        this.cacheConfig = cacheConfig;\n        this.logger = logger;\n        this.internalStorage = new MemoryStorage();\n        this.browserStorage = this.setupBrowserStorage(\n            this.cacheConfig.cacheLocation\n        );\n        this.temporaryCacheStorage = this.setupTemporaryCacheStorage(\n            this.cacheConfig.temporaryCacheLocation,\n            this.cacheConfig.cacheLocation\n        );\n\n        // Migrate cache entries from older versions of MSAL.\n        if (cacheConfig.cacheMigrationEnabled) {\n            this.migrateCacheEntries();\n            this.createKeyMaps();\n        }\n\n        this.performanceClient = performanceClient;\n    }\n\n    /**\n     * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured cacheLocation.\n     * @param cacheLocation\n     */\n    protected setupBrowserStorage(\n        cacheLocation: BrowserCacheLocation | string\n    ): IWindowStorage<string> {\n        switch (cacheLocation) {\n            case BrowserCacheLocation.LocalStorage:\n            case BrowserCacheLocation.SessionStorage:\n                try {\n                    return new BrowserStorage(cacheLocation);\n                } catch (e) {\n                    this.logger.verbose(e as string);\n                    break;\n                }\n            case BrowserCacheLocation.MemoryStorage:\n            default:\n                break;\n        }\n        this.cacheConfig.cacheLocation = BrowserCacheLocation.MemoryStorage;\n        return new MemoryStorage();\n    }\n\n    /**\n     * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured temporaryCacheLocation.\n     * @param temporaryCacheLocation\n     * @param cacheLocation\n     */\n    protected setupTemporaryCacheStorage(\n        temporaryCacheLocation: BrowserCacheLocation | string,\n        cacheLocation: BrowserCacheLocation | string\n    ): IWindowStorage<string> {\n        switch (cacheLocation) {\n            case BrowserCacheLocation.LocalStorage:\n            case BrowserCacheLocation.SessionStorage:\n                try {\n                    // Temporary cache items will always be stored in session storage to mitigate problems caused by multiple tabs\n                    return new BrowserStorage(\n                        temporaryCacheLocation ||\n                            BrowserCacheLocation.SessionStorage\n                    );\n                } catch (e) {\n                    this.logger.verbose(e as string);\n                    return this.internalStorage;\n                }\n            case BrowserCacheLocation.MemoryStorage:\n            default:\n                return this.internalStorage;\n        }\n    }\n\n    /**\n     * Migrate all old cache entries to new schema. No rollback supported.\n     * @param storeAuthStateInCookie\n     */\n    protected migrateCacheEntries(): void {\n        const idTokenKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ID_TOKEN}`;\n        const clientInfoKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.CLIENT_INFO}`;\n        const errorKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ERROR}`;\n        const errorDescKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ERROR_DESC}`;\n\n        const idTokenValue = this.browserStorage.getItem(idTokenKey);\n        const clientInfoValue = this.browserStorage.getItem(clientInfoKey);\n        const errorValue = this.browserStorage.getItem(errorKey);\n        const errorDescValue = this.browserStorage.getItem(errorDescKey);\n\n        const values = [\n            idTokenValue,\n            clientInfoValue,\n            errorValue,\n            errorDescValue,\n        ];\n        const keysToMigrate = [\n            PersistentCacheKeys.ID_TOKEN,\n            PersistentCacheKeys.CLIENT_INFO,\n            PersistentCacheKeys.ERROR,\n            PersistentCacheKeys.ERROR_DESC,\n        ];\n\n        keysToMigrate.forEach((cacheKey: string, index: number) => {\n            const value = values[index];\n            if (value) {\n                this.setTemporaryCache(cacheKey, value, true);\n            }\n        });\n    }\n\n    /**\n     * Searches all cache entries for MSAL accounts and creates the account key map\n     * This is used to migrate users from older versions of MSAL which did not create the map.\n     * @returns\n     */\n    private createKeyMaps(): void {\n        this.logger.trace(\"BrowserCacheManager - createKeyMaps called.\");\n        const accountKeys = this.getItem(StaticCacheKeys.ACCOUNT_KEYS);\n        const tokenKeys = this.getItem(\n            `${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`\n        );\n        if (accountKeys && tokenKeys) {\n            this.logger.verbose(\n                \"BrowserCacheManager:createKeyMaps - account and token key maps already exist, skipping migration.\"\n            );\n            // Key maps already exist, no need to iterate through cache\n            return;\n        }\n\n        const allKeys = this.browserStorage.getKeys();\n        allKeys.forEach((key) => {\n            if (this.isCredentialKey(key)) {\n                // Get item, parse, validate and write key to map\n                const value = this.getItem(key);\n                if (value) {\n                    const credObj = this.validateAndParseJson(value);\n                    if (credObj && credObj.hasOwnProperty(\"credentialType\")) {\n                        switch (credObj[\"credentialType\"]) {\n                            case CredentialType.ID_TOKEN:\n                                if (CacheHelpers.isIdTokenEntity(credObj)) {\n                                    this.logger.trace(\n                                        \"BrowserCacheManager:createKeyMaps - idToken found, saving key to token key map\"\n                                    );\n                                    this.logger.tracePii(\n                                        `BrowserCacheManager:createKeyMaps - idToken with key: ${key} found, saving key to token key map`\n                                    );\n                                    const idTokenEntity =\n                                        credObj as IdTokenEntity;\n                                    const newKey =\n                                        this.updateCredentialCacheKey(\n                                            key,\n                                            idTokenEntity\n                                        );\n                                    this.addTokenKey(\n                                        newKey,\n                                        CredentialType.ID_TOKEN\n                                    );\n                                    return;\n                                } else {\n                                    this.logger.trace(\n                                        \"BrowserCacheManager:createKeyMaps - key found matching idToken schema with value containing idToken credentialType field but value failed IdTokenEntity validation, skipping.\"\n                                    );\n                                    this.logger.tracePii(\n                                        `BrowserCacheManager:createKeyMaps - failed idToken validation on key: ${key}`\n                                    );\n                                }\n                                break;\n                            case CredentialType.ACCESS_TOKEN:\n                            case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\n                                if (CacheHelpers.isAccessTokenEntity(credObj)) {\n                                    this.logger.trace(\n                                        \"BrowserCacheManager:createKeyMaps - accessToken found, saving key to token key map\"\n                                    );\n                                    this.logger.tracePii(\n                                        `BrowserCacheManager:createKeyMaps - accessToken with key: ${key} found, saving key to token key map`\n                                    );\n                                    const accessTokenEntity =\n                                        credObj as AccessTokenEntity;\n                                    const newKey =\n                                        this.updateCredentialCacheKey(\n                                            key,\n                                            accessTokenEntity\n                                        );\n                                    this.addTokenKey(\n                                        newKey,\n                                        CredentialType.ACCESS_TOKEN\n                                    );\n                                    return;\n                                } else {\n                                    this.logger.trace(\n                                        \"BrowserCacheManager:createKeyMaps - key found matching accessToken schema with value containing accessToken credentialType field but value failed AccessTokenEntity validation, skipping.\"\n                                    );\n                                    this.logger.tracePii(\n                                        `BrowserCacheManager:createKeyMaps - failed accessToken validation on key: ${key}`\n                                    );\n                                }\n                                break;\n                            case CredentialType.REFRESH_TOKEN:\n                                if (\n                                    CacheHelpers.isRefreshTokenEntity(credObj)\n                                ) {\n                                    this.logger.trace(\n                                        \"BrowserCacheManager:createKeyMaps - refreshToken found, saving key to token key map\"\n                                    );\n                                    this.logger.tracePii(\n                                        `BrowserCacheManager:createKeyMaps - refreshToken with key: ${key} found, saving key to token key map`\n                                    );\n                                    const refreshTokenEntity =\n                                        credObj as RefreshTokenEntity;\n                                    const newKey =\n                                        this.updateCredentialCacheKey(\n                                            key,\n                                            refreshTokenEntity\n                                        );\n                                    this.addTokenKey(\n                                        newKey,\n                                        CredentialType.REFRESH_TOKEN\n                                    );\n                                    return;\n                                } else {\n                                    this.logger.trace(\n                                        \"BrowserCacheManager:createKeyMaps - key found matching refreshToken schema with value containing refreshToken credentialType field but value failed RefreshTokenEntity validation, skipping.\"\n                                    );\n                                    this.logger.tracePii(\n                                        `BrowserCacheManager:createKeyMaps - failed refreshToken validation on key: ${key}`\n                                    );\n                                }\n                                break;\n                            default:\n                            // If credentialType isn't one of our predefined ones, it may not be an MSAL cache value. Ignore.\n                        }\n                    }\n                }\n            }\n\n            if (this.isAccountKey(key)) {\n                const value = this.getItem(key);\n                if (value) {\n                    const accountObj = this.validateAndParseJson(value);\n                    if (\n                        accountObj &&\n                        AccountEntity.isAccountEntity(accountObj)\n                    ) {\n                        this.logger.trace(\n                            \"BrowserCacheManager:createKeyMaps - account found, saving key to account key map\"\n                        );\n                        this.logger.tracePii(\n                            `BrowserCacheManager:createKeyMaps - account with key: ${key} found, saving key to account key map`\n                        );\n                        this.addAccountKeyToMap(key);\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Parses passed value as JSON object, JSON.parse() will throw an error.\n     * @param input\n     */\n    protected validateAndParseJson(jsonValue: string): object | null {\n        try {\n            const parsedJson = JSON.parse(jsonValue);\n            /**\n             * There are edge cases in which JSON.parse will successfully parse a non-valid JSON object\n             * (e.g. JSON.parse will parse an escaped string into an unescaped string), so adding a type check\n             * of the parsed value is necessary in order to be certain that the string represents a valid JSON object.\n             *\n             */\n            return parsedJson && typeof parsedJson === \"object\"\n                ? parsedJson\n                : null;\n        } catch (error) {\n            return null;\n        }\n    }\n\n    /**\n     * fetches the entry from the browser storage based off the key\n     * @param key\n     */\n    getItem(key: string): string | null {\n        return this.browserStorage.getItem(key);\n    }\n\n    /**\n     * sets the entry in the browser storage\n     * @param key\n     * @param value\n     */\n    setItem(key: string, value: string): void {\n        this.browserStorage.setItem(key, value);\n    }\n\n    /**\n     * fetch the account entity from the platform cache\n     * @param accountKey\n     */\n    getAccount(accountKey: string, logger?: Logger): AccountEntity | null {\n        this.logger.trace(\"BrowserCacheManager.getAccount called\");\n        const accountEntity = this.getCachedAccountEntity(accountKey);\n\n        return this.updateOutdatedCachedAccount(\n            accountKey,\n            accountEntity,\n            logger\n        );\n    }\n\n    /**\n     * Reads account from cache, deserializes it into an account entity and returns it.\n     * If account is not found from the key, returns null and removes key from map.\n     * @param accountKey\n     * @returns\n     */\n    getCachedAccountEntity(accountKey: string): AccountEntity | null {\n        const serializedAccount = this.getItem(accountKey);\n        if (!serializedAccount) {\n            this.removeAccountKeyFromMap(accountKey);\n            return null;\n        }\n\n        const parsedAccount = this.validateAndParseJson(serializedAccount);\n        if (!parsedAccount || !AccountEntity.isAccountEntity(parsedAccount)) {\n            this.removeAccountKeyFromMap(accountKey);\n            return null;\n        }\n\n        return CacheManager.toObject<AccountEntity>(\n            new AccountEntity(),\n            parsedAccount\n        );\n    }\n\n    /**\n     * set account entity in the platform cache\n     * @param account\n     */\n    setAccount(account: AccountEntity): void {\n        this.logger.trace(\"BrowserCacheManager.setAccount called\");\n        const key = account.generateAccountKey();\n        this.setItem(key, JSON.stringify(account));\n        this.addAccountKeyToMap(key);\n    }\n\n    /**\n     * Returns the array of account keys currently cached\n     * @returns\n     */\n    getAccountKeys(): Array<string> {\n        this.logger.trace(\"BrowserCacheManager.getAccountKeys called\");\n        const accountKeys = this.getItem(StaticCacheKeys.ACCOUNT_KEYS);\n        if (accountKeys) {\n            return JSON.parse(accountKeys);\n        }\n\n        this.logger.verbose(\n            \"BrowserCacheManager.getAccountKeys - No account keys found\"\n        );\n        return [];\n    }\n\n    /**\n     * Add a new account to the key map\n     * @param key\n     */\n    addAccountKeyToMap(key: string): void {\n        this.logger.trace(\"BrowserCacheManager.addAccountKeyToMap called\");\n        this.logger.tracePii(\n            `BrowserCacheManager.addAccountKeyToMap called with key: ${key}`\n        );\n        const accountKeys = this.getAccountKeys();\n        if (accountKeys.indexOf(key) === -1) {\n            // Only add key if it does not already exist in the map\n            accountKeys.push(key);\n            this.setItem(\n                StaticCacheKeys.ACCOUNT_KEYS,\n                JSON.stringify(accountKeys)\n            );\n            this.logger.verbose(\n                \"BrowserCacheManager.addAccountKeyToMap account key added\"\n            );\n        } else {\n            this.logger.verbose(\n                \"BrowserCacheManager.addAccountKeyToMap account key already exists in map\"\n            );\n        }\n    }\n\n    /**\n     * Remove an account from the key map\n     * @param key\n     */\n    removeAccountKeyFromMap(key: string): void {\n        this.logger.trace(\"BrowserCacheManager.removeAccountKeyFromMap called\");\n        this.logger.tracePii(\n            `BrowserCacheManager.removeAccountKeyFromMap called with key: ${key}`\n        );\n        const accountKeys = this.getAccountKeys();\n        const removalIndex = accountKeys.indexOf(key);\n        if (removalIndex > -1) {\n            accountKeys.splice(removalIndex, 1);\n            this.setItem(\n                StaticCacheKeys.ACCOUNT_KEYS,\n                JSON.stringify(accountKeys)\n            );\n            this.logger.trace(\n                \"BrowserCacheManager.removeAccountKeyFromMap account key removed\"\n            );\n        } else {\n            this.logger.trace(\n                \"BrowserCacheManager.removeAccountKeyFromMap key not found in existing map\"\n            );\n        }\n    }\n\n    /**\n     * Extends inherited removeAccount function to include removal of the account key from the map\n     * @param key\n     */\n    async removeAccount(key: string): Promise<void> {\n        void super.removeAccount(key);\n        this.removeAccountKeyFromMap(key);\n    }\n\n    /**\n     * Remove account entity from the platform cache if it's outdated\n     * @param accountKey\n     */\n    removeOutdatedAccount(accountKey: string): void {\n        this.removeItem(accountKey);\n        this.removeAccountKeyFromMap(accountKey);\n    }\n\n    /**\n     * Removes given idToken from the cache and from the key map\n     * @param key\n     */\n    removeIdToken(key: string): void {\n        super.removeIdToken(key);\n        this.removeTokenKey(key, CredentialType.ID_TOKEN);\n    }\n\n    /**\n     * Removes given accessToken from the cache and from the key map\n     * @param key\n     */\n    async removeAccessToken(key: string): Promise<void> {\n        void super.removeAccessToken(key);\n        this.removeTokenKey(key, CredentialType.ACCESS_TOKEN);\n    }\n\n    /**\n     * Removes given refreshToken from the cache and from the key map\n     * @param key\n     */\n    removeRefreshToken(key: string): void {\n        super.removeRefreshToken(key);\n        this.removeTokenKey(key, CredentialType.REFRESH_TOKEN);\n    }\n\n    /**\n     * Gets the keys for the cached tokens associated with this clientId\n     * @returns\n     */\n    getTokenKeys(): TokenKeys {\n        this.logger.trace(\"BrowserCacheManager.getTokenKeys called\");\n        const item = this.getItem(\n            `${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`\n        );\n        if (item) {\n            const tokenKeys = this.validateAndParseJson(item);\n            if (\n                tokenKeys &&\n                tokenKeys.hasOwnProperty(\"idToken\") &&\n                tokenKeys.hasOwnProperty(\"accessToken\") &&\n                tokenKeys.hasOwnProperty(\"refreshToken\")\n            ) {\n                return tokenKeys as TokenKeys;\n            } else {\n                this.logger.error(\n                    \"BrowserCacheManager.getTokenKeys - Token keys found but in an unknown format. Returning empty key map.\"\n                );\n            }\n        } else {\n            this.logger.verbose(\n                \"BrowserCacheManager.getTokenKeys - No token keys found\"\n            );\n        }\n\n        return {\n            idToken: [],\n            accessToken: [],\n            refreshToken: [],\n        };\n    }\n\n    /**\n     * Adds the given key to the token key map\n     * @param key\n     * @param type\n     */\n    addTokenKey(key: string, type: CredentialType): void {\n        this.logger.trace(\"BrowserCacheManager addTokenKey called\");\n        const tokenKeys = this.getTokenKeys();\n\n        switch (type) {\n            case CredentialType.ID_TOKEN:\n                if (tokenKeys.idToken.indexOf(key) === -1) {\n                    this.logger.info(\n                        \"BrowserCacheManager: addTokenKey - idToken added to map\"\n                    );\n                    tokenKeys.idToken.push(key);\n                }\n                break;\n            case CredentialType.ACCESS_TOKEN:\n                if (tokenKeys.accessToken.indexOf(key) === -1) {\n                    this.logger.info(\n                        \"BrowserCacheManager: addTokenKey - accessToken added to map\"\n                    );\n                    tokenKeys.accessToken.push(key);\n                }\n                break;\n            case CredentialType.REFRESH_TOKEN:\n                if (tokenKeys.refreshToken.indexOf(key) === -1) {\n                    this.logger.info(\n                        \"BrowserCacheManager: addTokenKey - refreshToken added to map\"\n                    );\n                    tokenKeys.refreshToken.push(key);\n                }\n                break;\n            default:\n                this.logger.error(\n                    `BrowserCacheManager:addTokenKey - CredentialType provided invalid. CredentialType: ${type}`\n                );\n                throw createClientAuthError(\n                    ClientAuthErrorCodes.unexpectedCredentialType\n                );\n        }\n\n        this.setItem(\n            `${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`,\n            JSON.stringify(tokenKeys)\n        );\n    }\n\n    /**\n     * Removes the given key from the token key map\n     * @param key\n     * @param type\n     */\n    removeTokenKey(key: string, type: CredentialType): void {\n        this.logger.trace(\"BrowserCacheManager removeTokenKey called\");\n        const tokenKeys = this.getTokenKeys();\n\n        switch (type) {\n            case CredentialType.ID_TOKEN:\n                this.logger.infoPii(\n                    `BrowserCacheManager: removeTokenKey - attempting to remove idToken with key: ${key} from map`\n                );\n                const idRemoval = tokenKeys.idToken.indexOf(key);\n                if (idRemoval > -1) {\n                    this.logger.info(\n                        \"BrowserCacheManager: removeTokenKey - idToken removed from map\"\n                    );\n                    tokenKeys.idToken.splice(idRemoval, 1);\n                } else {\n                    this.logger.info(\n                        \"BrowserCacheManager: removeTokenKey - idToken does not exist in map. Either it was previously removed or it was never added.\"\n                    );\n                }\n                break;\n            case CredentialType.ACCESS_TOKEN:\n                this.logger.infoPii(\n                    `BrowserCacheManager: removeTokenKey - attempting to remove accessToken with key: ${key} from map`\n                );\n                const accessRemoval = tokenKeys.accessToken.indexOf(key);\n                if (accessRemoval > -1) {\n                    this.logger.info(\n                        \"BrowserCacheManager: removeTokenKey - accessToken removed from map\"\n                    );\n                    tokenKeys.accessToken.splice(accessRemoval, 1);\n                } else {\n                    this.logger.info(\n                        \"BrowserCacheManager: removeTokenKey - accessToken does not exist in map. Either it was previously removed or it was never added.\"\n                    );\n                }\n                break;\n            case CredentialType.REFRESH_TOKEN:\n                this.logger.infoPii(\n                    `BrowserCacheManager: removeTokenKey - attempting to remove refreshToken with key: ${key} from map`\n                );\n                const refreshRemoval = tokenKeys.refreshToken.indexOf(key);\n                if (refreshRemoval > -1) {\n                    this.logger.info(\n                        \"BrowserCacheManager: removeTokenKey - refreshToken removed from map\"\n                    );\n                    tokenKeys.refreshToken.splice(refreshRemoval, 1);\n                } else {\n                    this.logger.info(\n                        \"BrowserCacheManager: removeTokenKey - refreshToken does not exist in map. Either it was previously removed or it was never added.\"\n                    );\n                }\n                break;\n            default:\n                this.logger.error(\n                    `BrowserCacheManager:removeTokenKey - CredentialType provided invalid. CredentialType: ${type}`\n                );\n                throw createClientAuthError(\n                    ClientAuthErrorCodes.unexpectedCredentialType\n                );\n        }\n\n        this.setItem(\n            `${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`,\n            JSON.stringify(tokenKeys)\n        );\n    }\n\n    /**\n     * generates idToken entity from a string\n     * @param idTokenKey\n     */\n    getIdTokenCredential(idTokenKey: string): IdTokenEntity | null {\n        const value = this.getItem(idTokenKey);\n        if (!value) {\n            this.logger.trace(\n                \"BrowserCacheManager.getIdTokenCredential: called, no cache hit\"\n            );\n            this.removeTokenKey(idTokenKey, CredentialType.ID_TOKEN);\n            return null;\n        }\n\n        const parsedIdToken = this.validateAndParseJson(value);\n        if (!parsedIdToken || !CacheHelpers.isIdTokenEntity(parsedIdToken)) {\n            this.logger.trace(\n                \"BrowserCacheManager.getIdTokenCredential: called, no cache hit\"\n            );\n            this.removeTokenKey(idTokenKey, CredentialType.ID_TOKEN);\n            return null;\n        }\n\n        this.logger.trace(\n            \"BrowserCacheManager.getIdTokenCredential: cache hit\"\n        );\n        return parsedIdToken as IdTokenEntity;\n    }\n\n    /**\n     * set IdToken credential to the platform cache\n     * @param idToken\n     */\n    setIdTokenCredential(idToken: IdTokenEntity): void {\n        this.logger.trace(\"BrowserCacheManager.setIdTokenCredential called\");\n        const idTokenKey = CacheHelpers.generateCredentialKey(idToken);\n\n        this.setItem(idTokenKey, JSON.stringify(idToken));\n\n        this.addTokenKey(idTokenKey, CredentialType.ID_TOKEN);\n    }\n\n    /**\n     * generates accessToken entity from a string\n     * @param key\n     */\n    getAccessTokenCredential(accessTokenKey: string): AccessTokenEntity | null {\n        const value = this.getItem(accessTokenKey);\n        if (!value) {\n            this.logger.trace(\n                \"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\"\n            );\n            this.removeTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\n            return null;\n        }\n        const parsedAccessToken = this.validateAndParseJson(value);\n        if (\n            !parsedAccessToken ||\n            !CacheHelpers.isAccessTokenEntity(parsedAccessToken)\n        ) {\n            this.logger.trace(\n                \"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\"\n            );\n            this.removeTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\n            return null;\n        }\n\n        this.logger.trace(\n            \"BrowserCacheManager.getAccessTokenCredential: cache hit\"\n        );\n        return parsedAccessToken as AccessTokenEntity;\n    }\n\n    /**\n     * set accessToken credential to the platform cache\n     * @param accessToken\n     */\n    setAccessTokenCredential(accessToken: AccessTokenEntity): void {\n        this.logger.trace(\n            \"BrowserCacheManager.setAccessTokenCredential called\"\n        );\n        const accessTokenKey = CacheHelpers.generateCredentialKey(accessToken);\n        this.setItem(accessTokenKey, JSON.stringify(accessToken));\n\n        this.addTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\n    }\n\n    /**\n     * generates refreshToken entity from a string\n     * @param refreshTokenKey\n     */\n    getRefreshTokenCredential(\n        refreshTokenKey: string\n    ): RefreshTokenEntity | null {\n        const value = this.getItem(refreshTokenKey);\n        if (!value) {\n            this.logger.trace(\n                \"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\"\n            );\n            this.removeTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\n            return null;\n        }\n        const parsedRefreshToken = this.validateAndParseJson(value);\n        if (\n            !parsedRefreshToken ||\n            !CacheHelpers.isRefreshTokenEntity(parsedRefreshToken)\n        ) {\n            this.logger.trace(\n                \"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\"\n            );\n            this.removeTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\n            return null;\n        }\n\n        this.logger.trace(\n            \"BrowserCacheManager.getRefreshTokenCredential: cache hit\"\n        );\n        return parsedRefreshToken as RefreshTokenEntity;\n    }\n\n    /**\n     * set refreshToken credential to the platform cache\n     * @param refreshToken\n     */\n    setRefreshTokenCredential(refreshToken: RefreshTokenEntity): void {\n        this.logger.trace(\n            \"BrowserCacheManager.setRefreshTokenCredential called\"\n        );\n        const refreshTokenKey =\n            CacheHelpers.generateCredentialKey(refreshToken);\n        this.setItem(refreshTokenKey, JSON.stringify(refreshToken));\n\n        this.addTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\n    }\n\n    /**\n     * fetch appMetadata entity from the platform cache\n     * @param appMetadataKey\n     */\n    getAppMetadata(appMetadataKey: string): AppMetadataEntity | null {\n        const value = this.getItem(appMetadataKey);\n        if (!value) {\n            this.logger.trace(\n                \"BrowserCacheManager.getAppMetadata: called, no cache hit\"\n            );\n            return null;\n        }\n\n        const parsedMetadata = this.validateAndParseJson(value);\n        if (\n            !parsedMetadata ||\n            !CacheHelpers.isAppMetadataEntity(appMetadataKey, parsedMetadata)\n        ) {\n            this.logger.trace(\n                \"BrowserCacheManager.getAppMetadata: called, no cache hit\"\n            );\n            return null;\n        }\n\n        this.logger.trace(\"BrowserCacheManager.getAppMetadata: cache hit\");\n        return parsedMetadata as AppMetadataEntity;\n    }\n\n    /**\n     * set appMetadata entity to the platform cache\n     * @param appMetadata\n     */\n    setAppMetadata(appMetadata: AppMetadataEntity): void {\n        this.logger.trace(\"BrowserCacheManager.setAppMetadata called\");\n        const appMetadataKey = CacheHelpers.generateAppMetadataKey(appMetadata);\n        this.setItem(appMetadataKey, JSON.stringify(appMetadata));\n    }\n\n    /**\n     * fetch server telemetry entity from the platform cache\n     * @param serverTelemetryKey\n     */\n    getServerTelemetry(\n        serverTelemetryKey: string\n    ): ServerTelemetryEntity | null {\n        const value = this.getItem(serverTelemetryKey);\n        if (!value) {\n            this.logger.trace(\n                \"BrowserCacheManager.getServerTelemetry: called, no cache hit\"\n            );\n            return null;\n        }\n        const parsedEntity = this.validateAndParseJson(value);\n        if (\n            !parsedEntity ||\n            !CacheHelpers.isServerTelemetryEntity(\n                serverTelemetryKey,\n                parsedEntity\n            )\n        ) {\n            this.logger.trace(\n                \"BrowserCacheManager.getServerTelemetry: called, no cache hit\"\n            );\n            return null;\n        }\n\n        this.logger.trace(\"BrowserCacheManager.getServerTelemetry: cache hit\");\n        return parsedEntity as ServerTelemetryEntity;\n    }\n\n    /**\n     * set server telemetry entity to the platform cache\n     * @param serverTelemetryKey\n     * @param serverTelemetry\n     */\n    setServerTelemetry(\n        serverTelemetryKey: string,\n        serverTelemetry: ServerTelemetryEntity\n    ): void {\n        this.logger.trace(\"BrowserCacheManager.setServerTelemetry called\");\n        this.setItem(serverTelemetryKey, JSON.stringify(serverTelemetry));\n    }\n\n    /**\n     *\n     */\n    getAuthorityMetadata(key: string): AuthorityMetadataEntity | null {\n        const value = this.internalStorage.getItem(key);\n        if (!value) {\n            this.logger.trace(\n                \"BrowserCacheManager.getAuthorityMetadata: called, no cache hit\"\n            );\n            return null;\n        }\n        const parsedMetadata = this.validateAndParseJson(value);\n        if (\n            parsedMetadata &&\n            CacheHelpers.isAuthorityMetadataEntity(key, parsedMetadata)\n        ) {\n            this.logger.trace(\n                \"BrowserCacheManager.getAuthorityMetadata: cache hit\"\n            );\n            return parsedMetadata as AuthorityMetadataEntity;\n        }\n        return null;\n    }\n\n    /**\n     *\n     */\n    getAuthorityMetadataKeys(): Array<string> {\n        const allKeys = this.internalStorage.getKeys();\n        return allKeys.filter((key) => {\n            return this.isAuthorityMetadata(key);\n        });\n    }\n\n    /**\n     * Sets wrapper metadata in memory\n     * @param wrapperSKU\n     * @param wrapperVersion\n     */\n    setWrapperMetadata(wrapperSKU: string, wrapperVersion: string): void {\n        this.internalStorage.setItem(InMemoryCacheKeys.WRAPPER_SKU, wrapperSKU);\n        this.internalStorage.setItem(\n            InMemoryCacheKeys.WRAPPER_VER,\n            wrapperVersion\n        );\n    }\n\n    /**\n     * Returns wrapper metadata from in-memory storage\n     */\n    getWrapperMetadata(): [string, string] {\n        const sku =\n            this.internalStorage.getItem(InMemoryCacheKeys.WRAPPER_SKU) ||\n            Constants.EMPTY_STRING;\n        const version =\n            this.internalStorage.getItem(InMemoryCacheKeys.WRAPPER_VER) ||\n            Constants.EMPTY_STRING;\n        return [sku, version];\n    }\n\n    /**\n     *\n     * @param entity\n     */\n    setAuthorityMetadata(key: string, entity: AuthorityMetadataEntity): void {\n        this.logger.trace(\"BrowserCacheManager.setAuthorityMetadata called\");\n        this.internalStorage.setItem(key, JSON.stringify(entity));\n    }\n\n    /**\n     * Gets the active account\n     */\n    getActiveAccount(): AccountInfo | null {\n        const activeAccountKeyFilters = this.generateCacheKey(\n            PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS\n        );\n        const activeAccountValueFilters = this.getItem(activeAccountKeyFilters);\n        if (!activeAccountValueFilters) {\n            // if new active account cache type isn't found, it's an old version, so look for that instead\n            this.logger.trace(\n                \"BrowserCacheManager.getActiveAccount: No active account filters cache schema found, looking for legacy schema\"\n            );\n            const activeAccountKeyLocal = this.generateCacheKey(\n                PersistentCacheKeys.ACTIVE_ACCOUNT\n            );\n            const activeAccountValueLocal = this.getItem(activeAccountKeyLocal);\n            if (!activeAccountValueLocal) {\n                this.logger.trace(\n                    \"BrowserCacheManager.getActiveAccount: No active account found\"\n                );\n                return null;\n            }\n            const activeAccount = this.getAccountInfoFilteredBy({\n                localAccountId: activeAccountValueLocal,\n            });\n            if (activeAccount) {\n                this.logger.trace(\n                    \"BrowserCacheManager.getActiveAccount: Legacy active account cache schema found\"\n                );\n                this.logger.trace(\n                    \"BrowserCacheManager.getActiveAccount: Adding active account filters cache schema\"\n                );\n                this.setActiveAccount(activeAccount);\n                return activeAccount;\n            }\n            return null;\n        }\n        const activeAccountValueObj = this.validateAndParseJson(\n            activeAccountValueFilters\n        ) as AccountInfo;\n        if (activeAccountValueObj) {\n            this.logger.trace(\n                \"BrowserCacheManager.getActiveAccount: Active account filters schema found\"\n            );\n            return this.getAccountInfoFilteredBy({\n                homeAccountId: activeAccountValueObj.homeAccountId,\n                localAccountId: activeAccountValueObj.localAccountId,\n                tenantId: activeAccountValueObj.tenantId,\n            });\n        }\n        this.logger.trace(\n            \"BrowserCacheManager.getActiveAccount: No active account found\"\n        );\n        return null;\n    }\n\n    /**\n     * Sets the active account's localAccountId in cache\n     * @param account\n     */\n    setActiveAccount(account: AccountInfo | null): void {\n        const activeAccountKey = this.generateCacheKey(\n            PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS\n        );\n        const activeAccountKeyLocal = this.generateCacheKey(\n            PersistentCacheKeys.ACTIVE_ACCOUNT\n        );\n        if (account) {\n            this.logger.verbose(\"setActiveAccount: Active account set\");\n            const activeAccountValue: ActiveAccountFilters = {\n                homeAccountId: account.homeAccountId,\n                localAccountId: account.localAccountId,\n                tenantId: account.tenantId,\n            };\n            this.browserStorage.setItem(\n                activeAccountKey,\n                JSON.stringify(activeAccountValue)\n            );\n            this.browserStorage.setItem(\n                activeAccountKeyLocal,\n                account.localAccountId\n            );\n        } else {\n            this.logger.verbose(\n                \"setActiveAccount: No account passed, active account not set\"\n            );\n            this.browserStorage.removeItem(activeAccountKey);\n            this.browserStorage.removeItem(activeAccountKeyLocal);\n        }\n    }\n\n    /**\n     * fetch throttling entity from the platform cache\n     * @param throttlingCacheKey\n     */\n    getThrottlingCache(throttlingCacheKey: string): ThrottlingEntity | null {\n        const value = this.getItem(throttlingCacheKey);\n        if (!value) {\n            this.logger.trace(\n                \"BrowserCacheManager.getThrottlingCache: called, no cache hit\"\n            );\n            return null;\n        }\n\n        const parsedThrottlingCache = this.validateAndParseJson(value);\n        if (\n            !parsedThrottlingCache ||\n            !CacheHelpers.isThrottlingEntity(\n                throttlingCacheKey,\n                parsedThrottlingCache\n            )\n        ) {\n            this.logger.trace(\n                \"BrowserCacheManager.getThrottlingCache: called, no cache hit\"\n            );\n            return null;\n        }\n\n        this.logger.trace(\"BrowserCacheManager.getThrottlingCache: cache hit\");\n        return parsedThrottlingCache as ThrottlingEntity;\n    }\n\n    /**\n     * set throttling entity to the platform cache\n     * @param throttlingCacheKey\n     * @param throttlingCache\n     */\n    setThrottlingCache(\n        throttlingCacheKey: string,\n        throttlingCache: ThrottlingEntity\n    ): void {\n        this.logger.trace(\"BrowserCacheManager.setThrottlingCache called\");\n        this.setItem(throttlingCacheKey, JSON.stringify(throttlingCache));\n    }\n\n    /**\n     * Gets cache item with given key.\n     * Will retrieve from cookies if storeAuthStateInCookie is set to true.\n     * @param key\n     */\n    getTemporaryCache(cacheKey: string, generateKey?: boolean): string | null {\n        const key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\n        if (this.cacheConfig.storeAuthStateInCookie) {\n            const itemCookie = this.getItemCookie(key);\n            if (itemCookie) {\n                this.logger.trace(\n                    \"BrowserCacheManager.getTemporaryCache: storeAuthStateInCookies set to true, retrieving from cookies\"\n                );\n                return itemCookie;\n            }\n        }\n\n        const value = this.temporaryCacheStorage.getItem(key);\n        if (!value) {\n            // If temp cache item not found in session/memory, check local storage for items set by old versions\n            if (\n                this.cacheConfig.cacheLocation ===\n                BrowserCacheLocation.LocalStorage\n            ) {\n                const item = this.browserStorage.getItem(key);\n                if (item) {\n                    this.logger.trace(\n                        \"BrowserCacheManager.getTemporaryCache: Temporary cache item found in local storage\"\n                    );\n                    return item;\n                }\n            }\n            this.logger.trace(\n                \"BrowserCacheManager.getTemporaryCache: No cache item found in local storage\"\n            );\n            return null;\n        }\n        this.logger.trace(\n            \"BrowserCacheManager.getTemporaryCache: Temporary cache item returned\"\n        );\n        return value;\n    }\n\n    /**\n     * Sets the cache item with the key and value given.\n     * Stores in cookie if storeAuthStateInCookie is set to true.\n     * This can cause cookie overflow if used incorrectly.\n     * @param key\n     * @param value\n     */\n    setTemporaryCache(\n        cacheKey: string,\n        value: string,\n        generateKey?: boolean\n    ): void {\n        const key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\n\n        this.temporaryCacheStorage.setItem(key, value);\n        if (this.cacheConfig.storeAuthStateInCookie) {\n            this.logger.trace(\n                \"BrowserCacheManager.setTemporaryCache: storeAuthStateInCookie set to true, setting item cookie\"\n            );\n            this.setItemCookie(key, value);\n        }\n    }\n\n    /**\n     * Removes the cache item with the given key.\n     * @param key\n     */\n    removeItem(key: string): void {\n        this.browserStorage.removeItem(key);\n    }\n\n    /**\n     * Removes the temporary cache item with the given key.\n     * Will also clear the cookie item if storeAuthStateInCookie is set to true.\n     * @param key\n     */\n    removeTemporaryItem(key: string): void {\n        this.temporaryCacheStorage.removeItem(key);\n        if (this.cacheConfig.storeAuthStateInCookie) {\n            this.logger.trace(\n                \"BrowserCacheManager.removeItem: storeAuthStateInCookie is true, clearing item cookie\"\n            );\n            this.clearItemCookie(key);\n        }\n    }\n\n    /**\n     * Gets all keys in window.\n     */\n    getKeys(): string[] {\n        return this.browserStorage.getKeys();\n    }\n\n    /**\n     * Clears all cache entries created by MSAL.\n     */\n    async clear(): Promise<void> {\n        // Removes all accounts and their credentials\n        await this.removeAllAccounts();\n        this.removeAppMetadata();\n\n        // Remove temp storage first to make sure any cookies are cleared\n        this.temporaryCacheStorage.getKeys().forEach((cacheKey: string) => {\n            if (\n                cacheKey.indexOf(Constants.CACHE_PREFIX) !== -1 ||\n                cacheKey.indexOf(this.clientId) !== -1\n            ) {\n                this.removeTemporaryItem(cacheKey);\n            }\n        });\n\n        // Removes all remaining MSAL cache items\n        this.browserStorage.getKeys().forEach((cacheKey: string) => {\n            if (\n                cacheKey.indexOf(Constants.CACHE_PREFIX) !== -1 ||\n                cacheKey.indexOf(this.clientId) !== -1\n            ) {\n                this.browserStorage.removeItem(cacheKey);\n            }\n        });\n\n        this.internalStorage.clear();\n    }\n\n    /**\n     * Clears all access tokes that have claims prior to saving the current one\n     * @param performanceClient {IPerformanceClient}\n     * @param correlationId {string} correlation id\n     * @returns\n     */\n    async clearTokensAndKeysWithClaims(\n        performanceClient: IPerformanceClient,\n        correlationId: string\n    ): Promise<void> {\n        performanceClient.addQueueMeasurement(\n            PerformanceEvents.ClearTokensAndKeysWithClaims,\n            correlationId\n        );\n\n        const tokenKeys = this.getTokenKeys();\n\n        const removedAccessTokens: Array<Promise<void>> = [];\n        tokenKeys.accessToken.forEach((key: string) => {\n            // if the access token has claims in its key, remove the token key and the token\n            const credential = this.getAccessTokenCredential(key);\n            if (\n                credential?.requestedClaimsHash &&\n                key.includes(credential.requestedClaimsHash.toLowerCase())\n            ) {\n                removedAccessTokens.push(this.removeAccessToken(key));\n            }\n        });\n        await Promise.all(removedAccessTokens);\n\n        // warn if any access tokens are removed\n        if (removedAccessTokens.length > 0) {\n            this.logger.warning(\n                `${removedAccessTokens.length} access tokens with claims in the cache keys have been removed from the cache.`\n            );\n        }\n    }\n\n    /**\n     * Add value to cookies\n     * @param cookieName\n     * @param cookieValue\n     * @param expires\n     * @deprecated\n     */\n    setItemCookie(\n        cookieName: string,\n        cookieValue: string,\n        expires?: number\n    ): void {\n        let cookieStr = `${encodeURIComponent(cookieName)}=${encodeURIComponent(\n            cookieValue\n        )};path=/;SameSite=Lax;`;\n        if (expires) {\n            const expireTime = this.getCookieExpirationTime(expires);\n            cookieStr += `expires=${expireTime};`;\n        }\n\n        if (this.cacheConfig.secureCookies) {\n            cookieStr += \"Secure;\";\n        }\n\n        document.cookie = cookieStr;\n    }\n\n    /**\n     * Get one item by key from cookies\n     * @param cookieName\n     * @deprecated\n     */\n    getItemCookie(cookieName: string): string {\n        const name = `${encodeURIComponent(cookieName)}=`;\n        const cookieList = document.cookie.split(\";\");\n        for (let i: number = 0; i < cookieList.length; i++) {\n            let cookie = cookieList[i];\n            while (cookie.charAt(0) === \" \") {\n                cookie = cookie.substring(1);\n            }\n            if (cookie.indexOf(name) === 0) {\n                return decodeURIComponent(\n                    cookie.substring(name.length, cookie.length)\n                );\n            }\n        }\n        return Constants.EMPTY_STRING;\n    }\n\n    /**\n     * Clear all msal-related cookies currently set in the browser. Should only be used to clear temporary cache items.\n     * @deprecated\n     */\n    clearMsalCookies(): void {\n        const cookiePrefix = `${Constants.CACHE_PREFIX}.${this.clientId}`;\n        const cookieList = document.cookie.split(\";\");\n        cookieList.forEach((cookie: string): void => {\n            while (cookie.charAt(0) === \" \") {\n                // eslint-disable-next-line no-param-reassign\n                cookie = cookie.substring(1);\n            }\n            if (cookie.indexOf(cookiePrefix) === 0) {\n                const cookieKey = cookie.split(\"=\")[0];\n                this.clearItemCookie(cookieKey);\n            }\n        });\n    }\n\n    /**\n     * Clear an item in the cookies by key\n     * @param cookieName\n     * @deprecated\n     */\n    clearItemCookie(cookieName: string): void {\n        this.setItemCookie(cookieName, Constants.EMPTY_STRING, -1);\n    }\n\n    /**\n     * Get cookie expiration time\n     * @param cookieLifeDays\n     * @deprecated\n     */\n    getCookieExpirationTime(cookieLifeDays: number): string {\n        const today = new Date();\n        const expr = new Date(\n            today.getTime() + cookieLifeDays * this.COOKIE_LIFE_MULTIPLIER\n        );\n        return expr.toUTCString();\n    }\n\n    /**\n     * Prepend msal.<client-id> to each key; Skip for any JSON object as Key (defined schemas do not need the key appended: AccessToken Keys or the upcoming schema)\n     * @param key\n     * @param addInstanceId\n     */\n    generateCacheKey(key: string): string {\n        const generatedKey = this.validateAndParseJson(key);\n        if (!generatedKey) {\n            if (\n                StringUtils.startsWith(key, Constants.CACHE_PREFIX) ||\n                StringUtils.startsWith(key, PersistentCacheKeys.ADAL_ID_TOKEN)\n            ) {\n                return key;\n            }\n            return `${Constants.CACHE_PREFIX}.${this.clientId}.${key}`;\n        }\n\n        return JSON.stringify(key);\n    }\n\n    /**\n     * Create authorityKey to cache authority\n     * @param state\n     */\n    generateAuthorityKey(stateString: string): string {\n        const {\n            libraryState: { id: stateId },\n        } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n\n        return this.generateCacheKey(\n            `${TemporaryCacheKeys.AUTHORITY}.${stateId}`\n        );\n    }\n\n    /**\n     * Create Nonce key to cache nonce\n     * @param state\n     */\n    generateNonceKey(stateString: string): string {\n        const {\n            libraryState: { id: stateId },\n        } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n\n        return this.generateCacheKey(\n            `${TemporaryCacheKeys.NONCE_IDTOKEN}.${stateId}`\n        );\n    }\n\n    /**\n     * Creates full cache key for the request state\n     * @param stateString State string for the request\n     */\n    generateStateKey(stateString: string): string {\n        // Use the library state id to key temp storage for uniqueness for multiple concurrent requests\n        const {\n            libraryState: { id: stateId },\n        } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n        return this.generateCacheKey(\n            `${TemporaryCacheKeys.REQUEST_STATE}.${stateId}`\n        );\n    }\n\n    /**\n     * Gets the cached authority based on the cached state. Returns empty if no cached state found.\n     */\n    getCachedAuthority(cachedState: string): string | null {\n        const stateCacheKey = this.generateStateKey(cachedState);\n        const state = this.getTemporaryCache(stateCacheKey);\n        if (!state) {\n            return null;\n        }\n\n        const authorityCacheKey = this.generateAuthorityKey(state);\n        return this.getTemporaryCache(authorityCacheKey);\n    }\n\n    /**\n     * Updates account, authority, and state in cache\n     * @param serverAuthenticationRequest\n     * @param account\n     */\n    updateCacheEntries(\n        state: string,\n        nonce: string,\n        authorityInstance: string,\n        loginHint: string,\n        account: AccountInfo | null\n    ): void {\n        this.logger.trace(\"BrowserCacheManager.updateCacheEntries called\");\n        // Cache the request state\n        const stateCacheKey = this.generateStateKey(state);\n        this.setTemporaryCache(stateCacheKey, state, false);\n\n        // Cache the nonce\n        const nonceCacheKey = this.generateNonceKey(state);\n        this.setTemporaryCache(nonceCacheKey, nonce, false);\n\n        // Cache authorityKey\n        const authorityCacheKey = this.generateAuthorityKey(state);\n        this.setTemporaryCache(authorityCacheKey, authorityInstance, false);\n\n        if (account) {\n            const ccsCredential: CcsCredential = {\n                credential: account.homeAccountId,\n                type: CcsCredentialType.HOME_ACCOUNT_ID,\n            };\n            this.setTemporaryCache(\n                TemporaryCacheKeys.CCS_CREDENTIAL,\n                JSON.stringify(ccsCredential),\n                true\n            );\n        } else if (loginHint) {\n            const ccsCredential: CcsCredential = {\n                credential: loginHint,\n                type: CcsCredentialType.UPN,\n            };\n            this.setTemporaryCache(\n                TemporaryCacheKeys.CCS_CREDENTIAL,\n                JSON.stringify(ccsCredential),\n                true\n            );\n        }\n    }\n\n    /**\n     * Reset all temporary cache items\n     * @param state\n     */\n    resetRequestCache(state: string): void {\n        this.logger.trace(\"BrowserCacheManager.resetRequestCache called\");\n        // check state and remove associated cache items\n        if (state) {\n            this.temporaryCacheStorage.getKeys().forEach((key) => {\n                if (key.indexOf(state) !== -1) {\n                    this.removeTemporaryItem(key);\n                }\n            });\n\n            // delete generic interactive request parameters\n            this.removeTemporaryItem(this.generateStateKey(state));\n            this.removeTemporaryItem(this.generateNonceKey(state));\n            this.removeTemporaryItem(this.generateAuthorityKey(state));\n        }\n        this.removeTemporaryItem(\n            this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS)\n        );\n        this.removeTemporaryItem(\n            this.generateCacheKey(TemporaryCacheKeys.ORIGIN_URI)\n        );\n        this.removeTemporaryItem(\n            this.generateCacheKey(TemporaryCacheKeys.URL_HASH)\n        );\n        this.removeTemporaryItem(\n            this.generateCacheKey(TemporaryCacheKeys.CORRELATION_ID)\n        );\n        this.removeTemporaryItem(\n            this.generateCacheKey(TemporaryCacheKeys.CCS_CREDENTIAL)\n        );\n        this.removeTemporaryItem(\n            this.generateCacheKey(TemporaryCacheKeys.NATIVE_REQUEST)\n        );\n        this.setInteractionInProgress(false);\n    }\n\n    /**\n     * Removes temporary cache for the provided state\n     * @param stateString\n     */\n    cleanRequestByState(stateString: string): void {\n        this.logger.trace(\"BrowserCacheManager.cleanRequestByState called\");\n        // Interaction is completed - remove interaction status.\n        if (stateString) {\n            const stateKey = this.generateStateKey(stateString);\n            const cachedState = this.temporaryCacheStorage.getItem(stateKey);\n            this.logger.infoPii(\n                `BrowserCacheManager.cleanRequestByState: Removing temporary cache items for state: ${cachedState}`\n            );\n            this.resetRequestCache(cachedState || Constants.EMPTY_STRING);\n        }\n        this.clearMsalCookies();\n    }\n\n    /**\n     * Looks in temporary cache for any state values with the provided interactionType and removes all temporary cache items for that state\n     * Used in scenarios where temp cache needs to be cleaned but state is not known, such as clicking browser back button.\n     * @param interactionType\n     */\n    cleanRequestByInteractionType(interactionType: InteractionType): void {\n        this.logger.trace(\n            \"BrowserCacheManager.cleanRequestByInteractionType called\"\n        );\n        // Loop through all keys to find state key\n        this.temporaryCacheStorage.getKeys().forEach((key) => {\n            // If this key is not the state key, move on\n            if (key.indexOf(TemporaryCacheKeys.REQUEST_STATE) === -1) {\n                return;\n            }\n\n            // Retrieve state value, return if not a valid value\n            const stateValue = this.temporaryCacheStorage.getItem(key);\n            if (!stateValue) {\n                return;\n            }\n            // Extract state and ensure it matches given InteractionType, then clean request cache\n            const parsedState = extractBrowserRequestState(\n                this.cryptoImpl,\n                stateValue\n            );\n            if (\n                parsedState &&\n                parsedState.interactionType === interactionType\n            ) {\n                this.logger.infoPii(\n                    `BrowserCacheManager.cleanRequestByInteractionType: Removing temporary cache items for state: ${stateValue}`\n                );\n                this.resetRequestCache(stateValue);\n            }\n        });\n        this.clearMsalCookies();\n        this.setInteractionInProgress(false);\n    }\n\n    cacheCodeRequest(authCodeRequest: CommonAuthorizationCodeRequest): void {\n        this.logger.trace(\"BrowserCacheManager.cacheCodeRequest called\");\n\n        const encodedValue = base64Encode(JSON.stringify(authCodeRequest));\n        this.setTemporaryCache(\n            TemporaryCacheKeys.REQUEST_PARAMS,\n            encodedValue,\n            true\n        );\n    }\n\n    /**\n     * Gets the token exchange parameters from the cache. Throws an error if nothing is found.\n     */\n    getCachedRequest(state: string): CommonAuthorizationCodeRequest {\n        this.logger.trace(\"BrowserCacheManager.getCachedRequest called\");\n        // Get token request from cache and parse as TokenExchangeParameters.\n        const encodedTokenRequest = this.getTemporaryCache(\n            TemporaryCacheKeys.REQUEST_PARAMS,\n            true\n        );\n        if (!encodedTokenRequest) {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.noTokenRequestCacheError\n            );\n        }\n\n        let parsedRequest: CommonAuthorizationCodeRequest;\n        try {\n            parsedRequest = JSON.parse(base64Decode(encodedTokenRequest));\n        } catch (e) {\n            this.logger.errorPii(`Attempted to parse: ${encodedTokenRequest}`);\n            this.logger.error(\n                `Parsing cached token request threw with error: ${e}`\n            );\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.unableToParseTokenRequestCacheError\n            );\n        }\n        this.removeTemporaryItem(\n            this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS)\n        );\n\n        // Get cached authority and use if no authority is cached with request.\n        if (!parsedRequest.authority) {\n            const authorityCacheKey: string = this.generateAuthorityKey(state);\n            const cachedAuthority = this.getTemporaryCache(authorityCacheKey);\n            if (!cachedAuthority) {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.noCachedAuthorityError\n                );\n            }\n            parsedRequest.authority = cachedAuthority;\n        }\n\n        return parsedRequest;\n    }\n\n    /**\n     * Gets cached native request for redirect flows\n     */\n    getCachedNativeRequest(): NativeTokenRequest | null {\n        this.logger.trace(\"BrowserCacheManager.getCachedNativeRequest called\");\n        const cachedRequest = this.getTemporaryCache(\n            TemporaryCacheKeys.NATIVE_REQUEST,\n            true\n        );\n        if (!cachedRequest) {\n            this.logger.trace(\n                \"BrowserCacheManager.getCachedNativeRequest: No cached native request found\"\n            );\n            return null;\n        }\n\n        const parsedRequest = this.validateAndParseJson(\n            cachedRequest\n        ) as NativeTokenRequest;\n        if (!parsedRequest) {\n            this.logger.error(\n                \"BrowserCacheManager.getCachedNativeRequest: Unable to parse native request\"\n            );\n            return null;\n        }\n\n        return parsedRequest;\n    }\n\n    isInteractionInProgress(matchClientId?: boolean): boolean {\n        const clientId = this.getInteractionInProgress();\n\n        if (matchClientId) {\n            return clientId === this.clientId;\n        } else {\n            return !!clientId;\n        }\n    }\n\n    getInteractionInProgress(): string | null {\n        const key = `${Constants.CACHE_PREFIX}.${TemporaryCacheKeys.INTERACTION_STATUS_KEY}`;\n        return this.getTemporaryCache(key, false);\n    }\n\n    setInteractionInProgress(inProgress: boolean): void {\n        // Ensure we don't overwrite interaction in progress for a different clientId\n        const key = `${Constants.CACHE_PREFIX}.${TemporaryCacheKeys.INTERACTION_STATUS_KEY}`;\n        if (inProgress) {\n            if (this.getInteractionInProgress()) {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.interactionInProgress\n                );\n            } else {\n                // No interaction is in progress\n                this.setTemporaryCache(key, this.clientId, false);\n            }\n        } else if (\n            !inProgress &&\n            this.getInteractionInProgress() === this.clientId\n        ) {\n            this.removeTemporaryItem(key);\n        }\n    }\n\n    /**\n     * Returns username retrieved from ADAL or MSAL v1 idToken\n     * @deprecated\n     */\n    getLegacyLoginHint(): string | null {\n        // Only check for adal/msal token if no SSO params are being used\n        const adalIdTokenString = this.getTemporaryCache(\n            PersistentCacheKeys.ADAL_ID_TOKEN\n        );\n        if (adalIdTokenString) {\n            this.browserStorage.removeItem(PersistentCacheKeys.ADAL_ID_TOKEN);\n            this.logger.verbose(\"Cached ADAL id token retrieved.\");\n        }\n\n        // Check for cached MSAL v1 id token\n        const msalIdTokenString = this.getTemporaryCache(\n            PersistentCacheKeys.ID_TOKEN,\n            true\n        );\n        if (msalIdTokenString) {\n            this.browserStorage.removeItem(\n                this.generateCacheKey(PersistentCacheKeys.ID_TOKEN)\n            );\n            this.logger.verbose(\"Cached MSAL.js v1 id token retrieved\");\n        }\n\n        const cachedIdTokenString = msalIdTokenString || adalIdTokenString;\n        if (cachedIdTokenString) {\n            const idTokenClaims = AuthToken.extractTokenClaims(\n                cachedIdTokenString,\n                base64Decode\n            );\n            if (idTokenClaims.preferred_username) {\n                this.logger.verbose(\n                    \"No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 preferred_username as loginHint\"\n                );\n                return idTokenClaims.preferred_username;\n            } else if (idTokenClaims.upn) {\n                this.logger.verbose(\n                    \"No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 upn as loginHint\"\n                );\n                return idTokenClaims.upn;\n            } else {\n                this.logger.verbose(\n                    \"No SSO params used and ADAL/MSAL v1 token retrieved, however, no account hint claim found. Enable preferred_username or upn id token claim to get SSO.\"\n                );\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Updates a credential's cache key if the current cache key is outdated\n     */\n    updateCredentialCacheKey(\n        currentCacheKey: string,\n        credential: ValidCredentialType\n    ): string {\n        const updatedCacheKey = CacheHelpers.generateCredentialKey(credential);\n\n        if (currentCacheKey !== updatedCacheKey) {\n            const cacheItem = this.getItem(currentCacheKey);\n            if (cacheItem) {\n                this.browserStorage.removeItem(currentCacheKey);\n                this.setItem(updatedCacheKey, cacheItem);\n                this.logger.verbose(\n                    `Updated an outdated ${credential.credentialType} cache key`\n                );\n                return updatedCacheKey;\n            } else {\n                this.logger.error(\n                    `Attempted to update an outdated ${credential.credentialType} cache key but no item matching the outdated key was found in storage`\n                );\n            }\n        }\n\n        return currentCacheKey;\n    }\n\n    /**\n     * Builds credential entities from AuthenticationResult object and saves the resulting credentials to the cache\n     * @param result\n     * @param request\n     */\n    async hydrateCache(\n        result: AuthenticationResult,\n        request:\n            | SilentRequest\n            | SsoSilentRequest\n            | RedirectRequest\n            | PopupRequest\n    ): Promise<void> {\n        const idTokenEntity = CacheHelpers.createIdTokenEntity(\n            result.account?.homeAccountId,\n            result.account?.environment,\n            result.idToken,\n            this.clientId,\n            result.tenantId\n        );\n\n        let claimsHash;\n        if (request.claims) {\n            claimsHash = await this.cryptoImpl.hashString(request.claims);\n        }\n\n        /**\n         * meta data for cache stores time in seconds from epoch\n         * AuthenticationResult returns expiresOn and extExpiresOn in milliseconds (as a Date object which is in ms)\n         * We need to map these for the cache when building tokens from AuthenticationResult\n         *\n         * The next MSAL VFuture should map these both to same value if possible\n         */\n\n        const accessTokenEntity = CacheHelpers.createAccessTokenEntity(\n            result.account?.homeAccountId,\n            result.account.environment,\n            result.accessToken,\n            this.clientId,\n            result.tenantId,\n            result.scopes.join(\" \"),\n            result.expiresOn ? result.expiresOn.getTime() / 1000 : 0,\n            result.extExpiresOn ? result.extExpiresOn.getTime() / 1000 : 0,\n            base64Decode,\n            undefined, // refreshOn\n            result.tokenType as AuthenticationScheme,\n            undefined, // userAssertionHash\n            request.sshKid,\n            request.claims,\n            claimsHash\n        );\n\n        const cacheRecord = {\n            idToken: idTokenEntity,\n            accessToken: accessTokenEntity,\n        };\n        return this.saveCacheRecord(cacheRecord);\n    }\n\n    /**\n     * saves a cache record\n     * @param cacheRecord {CacheRecord}\n     * @param storeInCache {?StoreInCache}\n     * @param correlationId {?string} correlation id\n     */\n    async saveCacheRecord(\n        cacheRecord: CacheRecord,\n        storeInCache?: StoreInCache,\n        correlationId?: string\n    ): Promise<void> {\n        try {\n            await super.saveCacheRecord(\n                cacheRecord,\n                storeInCache,\n                correlationId\n            );\n        } catch (e) {\n            if (\n                e instanceof CacheError &&\n                this.performanceClient &&\n                correlationId\n            ) {\n                try {\n                    const tokenKeys = this.getTokenKeys();\n\n                    this.performanceClient.addFields(\n                        {\n                            cacheRtCount: tokenKeys.refreshToken.length,\n                            cacheIdCount: tokenKeys.idToken.length,\n                            cacheAtCount: tokenKeys.accessToken.length,\n                        },\n                        correlationId\n                    );\n                } catch (e) {}\n            }\n\n            throw e;\n        }\n    }\n}\n\nexport const DEFAULT_BROWSER_CACHE_MANAGER = (\n    clientId: string,\n    logger: Logger\n): BrowserCacheManager => {\n    const cacheOptions: Required<CacheOptions> = {\n        cacheLocation: BrowserCacheLocation.MemoryStorage,\n        temporaryCacheLocation: BrowserCacheLocation.MemoryStorage,\n        storeAuthStateInCookie: false,\n        secureCookies: false,\n        cacheMigrationEnabled: false,\n        claimsBasedCachingEnabled: false,\n    };\n    return new BrowserCacheManager(\n        clientId,\n        cacheOptions,\n        DEFAULT_CRYPTO_IMPLEMENTATION,\n        logger\n    );\n};\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AccountInfo, AccountFilter, Logger } from \"@azure/msal-common\";\nimport { BrowserCacheManager } from \"./BrowserCacheManager\";\n\n/**\n * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.\n * @param accountFilter - (Optional) filter to narrow down the accounts returned\n * @returns Array of AccountInfo objects in cache\n */\nexport function getAllAccounts(\n    logger: Logger,\n    browserStorage: BrowserCacheManager,\n    isInBrowser: boolean,\n    accountFilter?: AccountFilter\n): AccountInfo[] {\n    logger.verbose(\"getAllAccounts called\");\n    return isInBrowser ? browserStorage.getAllAccounts(accountFilter) : [];\n}\n\n/**\n * Returns the first account found in the cache that matches the account filter passed in.\n * @param accountFilter\n * @returns The first account found in the cache matching the provided filter or null if no account could be found.\n */\nexport function getAccount(\n    accountFilter: AccountFilter,\n    logger: Logger,\n    browserStorage: BrowserCacheManager\n): AccountInfo | null {\n    logger.trace(\"getAccount called\");\n    if (Object.keys(accountFilter).length === 0) {\n        logger.warning(\"getAccount: No accountFilter provided\");\n        return null;\n    }\n\n    const account: AccountInfo | null =\n        browserStorage.getAccountInfoFilteredBy(accountFilter);\n\n    if (account) {\n        logger.verbose(\n            \"getAccount: Account matching provided filter found, returning\"\n        );\n        return account;\n    } else {\n        logger.verbose(\"getAccount: No matching account found, returning null\");\n        return null;\n    }\n}\n\n/**\n * Returns the signed in account matching username.\n * (the account object is created at the time of successful login)\n * or null when no matching account is found.\n * This API is provided for convenience but getAccountById should be used for best reliability\n * @param username\n * @returns The account object stored in MSAL\n */\nexport function getAccountByUsername(\n    username: string,\n    logger: Logger,\n    browserStorage: BrowserCacheManager\n): AccountInfo | null {\n    logger.trace(\"getAccountByUsername called\");\n    if (!username) {\n        logger.warning(\"getAccountByUsername: No username provided\");\n        return null;\n    }\n\n    const account = browserStorage.getAccountInfoFilteredBy({\n        username,\n    });\n    if (account) {\n        logger.verbose(\n            \"getAccountByUsername: Account matching username found, returning\"\n        );\n        logger.verbosePii(\n            `getAccountByUsername: Returning signed-in accounts matching username: ${username}`\n        );\n        return account;\n    } else {\n        logger.verbose(\n            \"getAccountByUsername: No matching account found, returning null\"\n        );\n        return null;\n    }\n}\n\n/**\n * Returns the signed in account matching homeAccountId.\n * (the account object is created at the time of successful login)\n * or null when no matching account is found\n * @param homeAccountId\n * @returns The account object stored in MSAL\n */\nexport function getAccountByHomeId(\n    homeAccountId: string,\n    logger: Logger,\n    browserStorage: BrowserCacheManager\n): AccountInfo | null {\n    logger.trace(\"getAccountByHomeId called\");\n    if (!homeAccountId) {\n        logger.warning(\"getAccountByHomeId: No homeAccountId provided\");\n        return null;\n    }\n\n    const account = browserStorage.getAccountInfoFilteredBy({\n        homeAccountId,\n    });\n    if (account) {\n        logger.verbose(\n            \"getAccountByHomeId: Account matching homeAccountId found, returning\"\n        );\n        logger.verbosePii(\n            `getAccountByHomeId: Returning signed-in accounts matching homeAccountId: ${homeAccountId}`\n        );\n        return account;\n    } else {\n        logger.verbose(\n            \"getAccountByHomeId: No matching account found, returning null\"\n        );\n        return null;\n    }\n}\n\n/**\n * Returns the signed in account matching localAccountId.\n * (the account object is created at the time of successful login)\n * or null when no matching account is found\n * @param localAccountId\n * @returns The account object stored in MSAL\n */\nexport function getAccountByLocalId(\n    localAccountId: string,\n    logger: Logger,\n    browserStorage: BrowserCacheManager\n): AccountInfo | null {\n    logger.trace(\"getAccountByLocalId called\");\n    if (!localAccountId) {\n        logger.warning(\"getAccountByLocalId: No localAccountId provided\");\n        return null;\n    }\n\n    const account = browserStorage.getAccountInfoFilteredBy({\n        localAccountId,\n    });\n    if (account) {\n        logger.verbose(\n            \"getAccountByLocalId: Account matching localAccountId found, returning\"\n        );\n        logger.verbosePii(\n            `getAccountByLocalId: Returning signed-in accounts matching localAccountId: ${localAccountId}`\n        );\n        return account;\n    } else {\n        logger.verbose(\n            \"getAccountByLocalId: No matching account found, returning null\"\n        );\n        return null;\n    }\n}\n\n/**\n * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.\n * @param account\n */\nexport function setActiveAccount(\n    account: AccountInfo | null,\n    browserStorage: BrowserCacheManager\n): void {\n    browserStorage.setActiveAccount(account);\n}\n\n/**\n * Gets the currently active account\n */\nexport function getActiveAccount(\n    browserStorage: BrowserCacheManager\n): AccountInfo | null {\n    return browserStorage.getActiveAccount();\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nexport const EventType = {\n    INITIALIZE_START: \"msal:initializeStart\",\n    INITIALIZE_END: \"msal:initializeEnd\",\n    ACCOUNT_ADDED: \"msal:accountAdded\",\n    ACCOUNT_REMOVED: \"msal:accountRemoved\",\n    ACTIVE_ACCOUNT_CHANGED: \"msal:activeAccountChanged\",\n    LOGIN_START: \"msal:loginStart\",\n    LOGIN_SUCCESS: \"msal:loginSuccess\",\n    LOGIN_FAILURE: \"msal:loginFailure\",\n    ACQUIRE_TOKEN_START: \"msal:acquireTokenStart\",\n    ACQUIRE_TOKEN_SUCCESS: \"msal:acquireTokenSuccess\",\n    ACQUIRE_TOKEN_FAILURE: \"msal:acquireTokenFailure\",\n    ACQUIRE_TOKEN_NETWORK_START: \"msal:acquireTokenFromNetworkStart\",\n    SSO_SILENT_START: \"msal:ssoSilentStart\",\n    SSO_SILENT_SUCCESS: \"msal:ssoSilentSuccess\",\n    SSO_SILENT_FAILURE: \"msal:ssoSilentFailure\",\n    ACQUIRE_TOKEN_BY_CODE_START: \"msal:acquireTokenByCodeStart\",\n    ACQUIRE_TOKEN_BY_CODE_SUCCESS: \"msal:acquireTokenByCodeSuccess\",\n    ACQUIRE_TOKEN_BY_CODE_FAILURE: \"msal:acquireTokenByCodeFailure\",\n    HANDLE_REDIRECT_START: \"msal:handleRedirectStart\",\n    HANDLE_REDIRECT_END: \"msal:handleRedirectEnd\",\n    POPUP_OPENED: \"msal:popupOpened\",\n    LOGOUT_START: \"msal:logoutStart\",\n    LOGOUT_SUCCESS: \"msal:logoutSuccess\",\n    LOGOUT_FAILURE: \"msal:logoutFailure\",\n    LOGOUT_END: \"msal:logoutEnd\",\n    RESTORE_FROM_BFCACHE: \"msal:restoreFromBFCache\",\n} as const;\nexport type EventType = (typeof EventType)[keyof typeof EventType];\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    ICrypto,\n    Logger,\n    AccountEntity,\n    CacheManager,\n    PersistentCacheKeys,\n} from \"@azure/msal-common\";\nimport { InteractionType } from \"../utils/BrowserConstants\";\nimport {\n    EventCallbackFunction,\n    EventError,\n    EventMessage,\n    EventPayload,\n} from \"./EventMessage\";\nimport { EventType } from \"./EventType\";\nimport { createNewGuid } from \"../crypto/BrowserCrypto\";\n\nexport class EventHandler {\n    // Callback for subscribing to events\n    private eventCallbacks: Map<string, EventCallbackFunction>;\n    private logger: Logger;\n    private browserCrypto: ICrypto;\n    private listeningToStorageEvents: boolean;\n\n    constructor(logger: Logger, browserCrypto: ICrypto) {\n        this.eventCallbacks = new Map();\n        this.logger = logger;\n        this.browserCrypto = browserCrypto;\n        this.listeningToStorageEvents = false;\n        this.handleAccountCacheChange =\n            this.handleAccountCacheChange.bind(this);\n    }\n\n    /**\n     * Adds event callbacks to array\n     * @param callback\n     */\n    addEventCallback(callback: EventCallbackFunction): string | null {\n        if (typeof window !== \"undefined\") {\n            const callbackId = createNewGuid();\n            this.eventCallbacks.set(callbackId, callback);\n            this.logger.verbose(\n                `Event callback registered with id: ${callbackId}`\n            );\n\n            return callbackId;\n        }\n\n        return null;\n    }\n\n    /**\n     * Removes callback with provided id from callback array\n     * @param callbackId\n     */\n    removeEventCallback(callbackId: string): void {\n        this.eventCallbacks.delete(callbackId);\n        this.logger.verbose(`Event callback ${callbackId} removed.`);\n    }\n\n    /**\n     * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\n     */\n    enableAccountStorageEvents(): void {\n        if (typeof window === \"undefined\") {\n            return;\n        }\n\n        if (!this.listeningToStorageEvents) {\n            this.logger.verbose(\"Adding account storage listener.\");\n            this.listeningToStorageEvents = true;\n            window.addEventListener(\"storage\", this.handleAccountCacheChange);\n        } else {\n            this.logger.verbose(\"Account storage listener already registered.\");\n        }\n    }\n\n    /**\n     * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\n     */\n    disableAccountStorageEvents(): void {\n        if (typeof window === \"undefined\") {\n            return;\n        }\n\n        if (this.listeningToStorageEvents) {\n            this.logger.verbose(\"Removing account storage listener.\");\n            window.removeEventListener(\n                \"storage\",\n                this.handleAccountCacheChange\n            );\n            this.listeningToStorageEvents = false;\n        } else {\n            this.logger.verbose(\"No account storage listener registered.\");\n        }\n    }\n\n    /**\n     * Emits events by calling callback with event message\n     * @param eventType\n     * @param interactionType\n     * @param payload\n     * @param error\n     */\n    emitEvent(\n        eventType: EventType,\n        interactionType?: InteractionType,\n        payload?: EventPayload,\n        error?: EventError\n    ): void {\n        if (typeof window !== \"undefined\") {\n            const message: EventMessage = {\n                eventType: eventType,\n                interactionType: interactionType || null,\n                payload: payload || null,\n                error: error || null,\n                timestamp: Date.now(),\n            };\n\n            this.logger.info(`Emitting event: ${eventType}`);\n\n            this.eventCallbacks.forEach(\n                (callback: EventCallbackFunction, callbackId: string) => {\n                    this.logger.verbose(\n                        `Emitting event to callback ${callbackId}: ${eventType}`\n                    );\n                    callback.apply(null, [message]);\n                }\n            );\n        }\n    }\n\n    /**\n     * Emit account added/removed events when cached accounts are changed in a different tab or frame\n     */\n    private handleAccountCacheChange(e: StorageEvent): void {\n        try {\n            // Handle active account filter change\n            if (e.key?.includes(PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS)) {\n                // This event has no payload, it only signals cross-tab app instances that the results of calling getActiveAccount() will have changed\n                this.emitEvent(EventType.ACTIVE_ACCOUNT_CHANGED);\n            }\n\n            // Handle account object change\n            const cacheValue = e.newValue || e.oldValue;\n            if (!cacheValue) {\n                return;\n            }\n            const parsedValue = JSON.parse(cacheValue);\n            if (\n                typeof parsedValue !== \"object\" ||\n                !AccountEntity.isAccountEntity(parsedValue)\n            ) {\n                return;\n            }\n            const accountEntity = CacheManager.toObject<AccountEntity>(\n                new AccountEntity(),\n                parsedValue\n            );\n            const accountInfo = accountEntity.getAccountInfo();\n            if (!e.oldValue && e.newValue) {\n                this.logger.info(\n                    \"Account was added to cache in a different window\"\n                );\n                this.emitEvent(EventType.ACCOUNT_ADDED, undefined, accountInfo);\n            } else if (!e.newValue && e.oldValue) {\n                this.logger.info(\n                    \"Account was removed from cache in a different window\"\n                );\n                this.emitEvent(\n                    EventType.ACCOUNT_REMOVED,\n                    undefined,\n                    accountInfo\n                );\n            }\n        } catch (e) {\n            return;\n        }\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    ICrypto,\n    INetworkModule,\n    Logger,\n    AccountInfo,\n    AccountEntity,\n    UrlString,\n    ServerTelemetryManager,\n    ServerTelemetryRequest,\n    createClientConfigurationError,\n    ClientConfigurationErrorCodes,\n    Authority,\n    AuthorityOptions,\n    AuthorityFactory,\n    IPerformanceClient,\n    PerformanceEvents,\n    AzureCloudOptions,\n    invokeAsync,\n} from \"@azure/msal-common\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport { version } from \"../packageMetadata\";\nimport { BrowserConstants } from \"../utils/BrowserConstants\";\nimport * as BrowserUtils from \"../utils/BrowserUtils\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { ClearCacheRequest } from \"../request/ClearCacheRequest\";\nimport { createNewGuid } from \"../crypto/BrowserCrypto\";\n\nexport abstract class BaseInteractionClient {\n    protected config: BrowserConfiguration;\n    protected browserStorage: BrowserCacheManager;\n    protected browserCrypto: ICrypto;\n    protected networkClient: INetworkModule;\n    protected logger: Logger;\n    protected eventHandler: EventHandler;\n    protected navigationClient: INavigationClient;\n    protected nativeMessageHandler: NativeMessageHandler | undefined;\n    protected correlationId: string;\n    protected performanceClient: IPerformanceClient;\n\n    constructor(\n        config: BrowserConfiguration,\n        storageImpl: BrowserCacheManager,\n        browserCrypto: ICrypto,\n        logger: Logger,\n        eventHandler: EventHandler,\n        navigationClient: INavigationClient,\n        performanceClient: IPerformanceClient,\n        nativeMessageHandler?: NativeMessageHandler,\n        correlationId?: string\n    ) {\n        this.config = config;\n        this.browserStorage = storageImpl;\n        this.browserCrypto = browserCrypto;\n        this.networkClient = this.config.system.networkClient;\n        this.eventHandler = eventHandler;\n        this.navigationClient = navigationClient;\n        this.nativeMessageHandler = nativeMessageHandler;\n        this.correlationId = correlationId || createNewGuid();\n        this.logger = logger.clone(\n            BrowserConstants.MSAL_SKU,\n            version,\n            this.correlationId\n        );\n        this.performanceClient = performanceClient;\n    }\n\n    abstract acquireToken(\n        request: RedirectRequest | PopupRequest | SsoSilentRequest\n    ): Promise<AuthenticationResult | void>;\n\n    abstract logout(\n        request: EndSessionRequest | ClearCacheRequest | undefined\n    ): Promise<void>;\n\n    protected async clearCacheOnLogout(\n        account?: AccountInfo | null\n    ): Promise<void> {\n        if (account) {\n            if (\n                AccountEntity.accountInfoIsEqual(\n                    account,\n                    this.browserStorage.getActiveAccount(),\n                    false\n                )\n            ) {\n                this.logger.verbose(\"Setting active account to null\");\n                this.browserStorage.setActiveAccount(null);\n            }\n            // Clear given account.\n            try {\n                await this.browserStorage.removeAccount(\n                    AccountEntity.generateAccountCacheKey(account)\n                );\n                this.logger.verbose(\n                    \"Cleared cache items belonging to the account provided in the logout request.\"\n                );\n            } catch (error) {\n                this.logger.error(\n                    \"Account provided in logout request was not found. Local cache unchanged.\"\n                );\n            }\n        } else {\n            try {\n                this.logger.verbose(\n                    \"No account provided in logout request, clearing all cache items.\",\n                    this.correlationId\n                );\n                // Clear all accounts and tokens\n                await this.browserStorage.clear();\n                // Clear any stray keys from IndexedDB\n                await this.browserCrypto.clearKeystore();\n            } catch (e) {\n                this.logger.error(\n                    \"Attempted to clear all MSAL cache items and failed. Local cache unchanged.\"\n                );\n            }\n        }\n    }\n\n    /**\n     *\n     * Use to get the redirect uri configured in MSAL or null.\n     * @param requestRedirectUri\n     * @returns Redirect URL\n     *\n     */\n    getRedirectUri(requestRedirectUri?: string): string {\n        this.logger.verbose(\"getRedirectUri called\");\n        const redirectUri =\n            requestRedirectUri ||\n            this.config.auth.redirectUri ||\n            BrowserUtils.getCurrentUri();\n        return UrlString.getAbsoluteUrl(\n            redirectUri,\n            BrowserUtils.getCurrentUri()\n        );\n    }\n\n    /**\n     *\n     * @param apiId\n     * @param correlationId\n     * @param forceRefresh\n     */\n    protected initializeServerTelemetryManager(\n        apiId: number,\n        forceRefresh?: boolean\n    ): ServerTelemetryManager {\n        this.logger.verbose(\"initializeServerTelemetryManager called\");\n        const telemetryPayload: ServerTelemetryRequest = {\n            clientId: this.config.auth.clientId,\n            correlationId: this.correlationId,\n            apiId: apiId,\n            forceRefresh: forceRefresh || false,\n            wrapperSKU: this.browserStorage.getWrapperMetadata()[0],\n            wrapperVer: this.browserStorage.getWrapperMetadata()[1],\n        };\n\n        return new ServerTelemetryManager(\n            telemetryPayload,\n            this.browserStorage\n        );\n    }\n\n    /**\n     * Used to get a discovered version of the default authority.\n     * @param requestAuthority\n     * @param requestAzureCloudOptions\n     * @param account\n     */\n    protected async getDiscoveredAuthority(\n        requestAuthority?: string,\n        requestAzureCloudOptions?: AzureCloudOptions,\n        account?: AccountInfo\n    ): Promise<Authority> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority,\n            this.correlationId\n        );\n        const authorityOptions: AuthorityOptions = {\n            protocolMode: this.config.auth.protocolMode,\n            OIDCOptions: this.config.auth.OIDCOptions,\n            knownAuthorities: this.config.auth.knownAuthorities,\n            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n            authorityMetadata: this.config.auth.authorityMetadata,\n            skipAuthorityMetadataCache:\n                this.config.auth.skipAuthorityMetadataCache,\n        };\n\n        // build authority string based on auth params, precedence - azureCloudInstance + tenant >> authority\n        const userAuthority = requestAuthority\n            ? requestAuthority\n            : this.config.auth.authority;\n\n        // fall back to the authority from config\n        const builtAuthority = Authority.generateAuthority(\n            userAuthority,\n            requestAzureCloudOptions || this.config.auth.azureCloudOptions\n        );\n        const discoveredAuthority = await invokeAsync(\n            AuthorityFactory.createDiscoveredInstance,\n            PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(\n            builtAuthority,\n            this.config.system.networkClient,\n            this.browserStorage,\n            authorityOptions,\n            this.logger,\n            this.correlationId,\n            this.performanceClient\n        );\n\n        if (account && !discoveredAuthority.isAlias(account.environment)) {\n            throw createClientConfigurationError(\n                ClientConfigurationErrorCodes.authorityMismatch\n            );\n        }\n\n        return discoveredAuthority;\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    IPerformanceClient,\n    Logger,\n    PerformanceEvents,\n    PkceCodes,\n    invoke,\n    invokeAsync,\n} from \"@azure/msal-common\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { urlEncodeArr } from \"../encode/Base64Encode\";\nimport { getRandomValues, sha256Digest } from \"./BrowserCrypto\";\n\n// Constant byte array length\nconst RANDOM_BYTE_ARR_LENGTH = 32;\n\n/**\n * This file defines APIs to generate PKCE codes and code verifiers.\n */\n\n/**\n * Generates PKCE Codes. See the RFC for more information: https://tools.ietf.org/html/rfc7636\n */\nexport async function generatePkceCodes(\n    performanceClient: IPerformanceClient,\n    logger: Logger,\n    correlationId: string\n): Promise<PkceCodes> {\n    performanceClient.addQueueMeasurement(\n        PerformanceEvents.GeneratePkceCodes,\n        correlationId\n    );\n    const codeVerifier = invoke(\n        generateCodeVerifier,\n        PerformanceEvents.GenerateCodeVerifier,\n        logger,\n        performanceClient,\n        correlationId\n    )(performanceClient, logger, correlationId);\n    const codeChallenge = await invokeAsync(\n        generateCodeChallengeFromVerifier,\n        PerformanceEvents.GenerateCodeChallengeFromVerifier,\n        logger,\n        performanceClient,\n        correlationId\n    )(codeVerifier, performanceClient, logger, correlationId);\n    return {\n        verifier: codeVerifier,\n        challenge: codeChallenge,\n    };\n}\n\n/**\n * Generates a random 32 byte buffer and returns the base64\n * encoded string to be used as a PKCE Code Verifier\n */\nfunction generateCodeVerifier(\n    performanceClient: IPerformanceClient,\n    logger: Logger,\n    correlationId: string\n): string {\n    try {\n        // Generate random values as utf-8\n        const buffer: Uint8Array = new Uint8Array(RANDOM_BYTE_ARR_LENGTH);\n        invoke(\n            getRandomValues,\n            PerformanceEvents.GetRandomValues,\n            logger,\n            performanceClient,\n            correlationId\n        )(buffer);\n        // encode verifier as base64\n        const pkceCodeVerifierB64: string = urlEncodeArr(buffer);\n        return pkceCodeVerifierB64;\n    } catch (e) {\n        throw createBrowserAuthError(BrowserAuthErrorCodes.pkceNotCreated);\n    }\n}\n\n/**\n * Creates a base64 encoded PKCE Code Challenge string from the\n * hash created from the PKCE Code Verifier supplied\n */\nasync function generateCodeChallengeFromVerifier(\n    pkceCodeVerifier: string,\n    performanceClient: IPerformanceClient,\n    logger: Logger,\n    correlationId: string\n): Promise<string> {\n    performanceClient.addQueueMeasurement(\n        PerformanceEvents.GenerateCodeChallengeFromVerifier,\n        correlationId\n    );\n    try {\n        // hashed verifier\n        const pkceHashedCodeVerifier = await invokeAsync(\n            sha256Digest,\n            PerformanceEvents.Sha256Digest,\n            logger,\n            performanceClient,\n            correlationId\n        )(pkceCodeVerifier, performanceClient, correlationId);\n        // encode hash as base64\n        return urlEncodeArr(new Uint8Array(pkceHashedCodeVerifier));\n    } catch (e) {\n        throw createBrowserAuthError(BrowserAuthErrorCodes.pkceNotCreated);\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    AccountInfo,\n    AuthenticationScheme,\n    BaseAuthRequest,\n    ClientConfigurationErrorCodes,\n    CommonSilentFlowRequest,\n    IPerformanceClient,\n    Logger,\n    PerformanceEvents,\n    StringUtils,\n    createClientConfigurationError,\n    invokeAsync,\n} from \"@azure/msal-common\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { SilentRequest } from \"./SilentRequest\";\nimport { hashString } from \"../crypto/BrowserCrypto\";\n\n/**\n * Initializer function for all request APIs\n * @param request\n */\nexport async function initializeBaseRequest(\n    request: Partial<BaseAuthRequest> & { correlationId: string },\n    config: BrowserConfiguration,\n    performanceClient: IPerformanceClient,\n    logger: Logger\n): Promise<BaseAuthRequest> {\n    performanceClient.addQueueMeasurement(\n        PerformanceEvents.InitializeBaseRequest,\n        request.correlationId\n    );\n    const authority = request.authority || config.auth.authority;\n\n    const scopes = [...((request && request.scopes) || [])];\n\n    const validatedRequest: BaseAuthRequest = {\n        ...request,\n        correlationId: request.correlationId,\n        authority,\n        scopes,\n    };\n\n    // Set authenticationScheme to BEARER if not explicitly set in the request\n    if (!validatedRequest.authenticationScheme) {\n        validatedRequest.authenticationScheme = AuthenticationScheme.BEARER;\n        logger.verbose(\n            'Authentication Scheme wasn\\'t explicitly set in request, defaulting to \"Bearer\" request'\n        );\n    } else {\n        if (\n            validatedRequest.authenticationScheme === AuthenticationScheme.SSH\n        ) {\n            if (!request.sshJwk) {\n                throw createClientConfigurationError(\n                    ClientConfigurationErrorCodes.missingSshJwk\n                );\n            }\n            if (!request.sshKid) {\n                throw createClientConfigurationError(\n                    ClientConfigurationErrorCodes.missingSshKid\n                );\n            }\n        }\n        logger.verbose(\n            `Authentication Scheme set to \"${validatedRequest.authenticationScheme}\" as configured in Auth request`\n        );\n    }\n\n    // Set requested claims hash if claims-based caching is enabled and claims were requested\n    if (\n        config.cache.claimsBasedCachingEnabled &&\n        request.claims &&\n        // Checks for empty stringified object \"{}\" which doesn't qualify as requested claims\n        !StringUtils.isEmptyObj(request.claims)\n    ) {\n        validatedRequest.requestedClaimsHash = await hashString(request.claims);\n    }\n\n    return validatedRequest;\n}\n\nexport async function initializeSilentRequest(\n    request: SilentRequest & { correlationId: string },\n    account: AccountInfo,\n    config: BrowserConfiguration,\n    performanceClient: IPerformanceClient,\n    logger: Logger\n): Promise<CommonSilentFlowRequest> {\n    performanceClient.addQueueMeasurement(\n        PerformanceEvents.InitializeSilentRequest,\n        request.correlationId\n    );\n\n    const baseRequest = await invokeAsync(\n        initializeBaseRequest,\n        PerformanceEvents.InitializeBaseRequest,\n        logger,\n        performanceClient,\n        request.correlationId\n    )(request, config, performanceClient, logger);\n    return {\n        ...request,\n        ...baseRequest,\n        account: account,\n        forceRefresh: request.forceRefresh || false,\n    };\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    ServerTelemetryManager,\n    CommonAuthorizationCodeRequest,\n    Constants,\n    AuthorizationCodeClient,\n    ClientConfiguration,\n    UrlString,\n    CommonEndSessionRequest,\n    ProtocolUtils,\n    ResponseMode,\n    IdTokenClaims,\n    AccountInfo,\n    AzureCloudOptions,\n    PerformanceEvents,\n    invokeAsync,\n    BaseAuthRequest,\n} from \"@azure/msal-common\";\nimport { BaseInteractionClient } from \"./BaseInteractionClient\";\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\nimport { BrowserConstants, InteractionType } from \"../utils/BrowserConstants\";\nimport { version } from \"../packageMetadata\";\nimport { BrowserStateObject } from \"../utils/BrowserProtocolUtils\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport * as BrowserUtils from \"../utils/BrowserUtils\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport { generatePkceCodes } from \"../crypto/PkceGenerator\";\nimport { createNewGuid } from \"../crypto/BrowserCrypto\";\nimport { initializeBaseRequest } from \"../request/RequestHelpers\";\n\n/**\n * Defines the class structure and helper functions used by the \"standard\", non-brokered auth flows (popup, redirect, silent (RT), silent (iframe))\n */\nexport abstract class StandardInteractionClient extends BaseInteractionClient {\n    /**\n     * Generates an auth code request tied to the url request.\n     * @param request\n     */\n    protected async initializeAuthorizationCodeRequest(\n        request: AuthorizationUrlRequest\n    ): Promise<CommonAuthorizationCodeRequest> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest,\n            this.correlationId\n        );\n        const generatedPkceParams = await invokeAsync(\n            generatePkceCodes,\n            PerformanceEvents.GeneratePkceCodes,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(this.performanceClient, this.logger, this.correlationId);\n\n        const authCodeRequest: CommonAuthorizationCodeRequest = {\n            ...request,\n            redirectUri: request.redirectUri,\n            code: Constants.EMPTY_STRING,\n            codeVerifier: generatedPkceParams.verifier,\n        };\n\n        request.codeChallenge = generatedPkceParams.challenge;\n        request.codeChallengeMethod = Constants.S256_CODE_CHALLENGE_METHOD;\n\n        return authCodeRequest;\n    }\n\n    /**\n     * Initializer for the logout request.\n     * @param logoutRequest\n     */\n    protected initializeLogoutRequest(\n        logoutRequest?: EndSessionRequest\n    ): CommonEndSessionRequest {\n        this.logger.verbose(\n            \"initializeLogoutRequest called\",\n            logoutRequest?.correlationId\n        );\n\n        const validLogoutRequest: CommonEndSessionRequest = {\n            correlationId: this.correlationId || createNewGuid(),\n            ...logoutRequest,\n        };\n\n        /**\n         * Set logout_hint to be login_hint from ID Token Claims if present\n         * and logoutHint attribute wasn't manually set in logout request\n         */\n        if (logoutRequest) {\n            // If logoutHint isn't set and an account was passed in, try to extract logoutHint from ID Token Claims\n            if (!logoutRequest.logoutHint) {\n                if (logoutRequest.account) {\n                    const logoutHint = this.getLogoutHintFromIdTokenClaims(\n                        logoutRequest.account\n                    );\n                    if (logoutHint) {\n                        this.logger.verbose(\n                            \"Setting logoutHint to login_hint ID Token Claim value for the account provided\"\n                        );\n                        validLogoutRequest.logoutHint = logoutHint;\n                    }\n                } else {\n                    this.logger.verbose(\n                        \"logoutHint was not set and account was not passed into logout request, logoutHint will not be set\"\n                    );\n                }\n            } else {\n                this.logger.verbose(\n                    \"logoutHint has already been set in logoutRequest\"\n                );\n            }\n        } else {\n            this.logger.verbose(\n                \"logoutHint will not be set since no logout request was configured\"\n            );\n        }\n\n        /*\n         * Only set redirect uri if logout request isn't provided or the set uri isn't null.\n         * Otherwise, use passed uri, config, or current page.\n         */\n        if (!logoutRequest || logoutRequest.postLogoutRedirectUri !== null) {\n            if (logoutRequest && logoutRequest.postLogoutRedirectUri) {\n                this.logger.verbose(\n                    \"Setting postLogoutRedirectUri to uri set on logout request\",\n                    validLogoutRequest.correlationId\n                );\n                validLogoutRequest.postLogoutRedirectUri =\n                    UrlString.getAbsoluteUrl(\n                        logoutRequest.postLogoutRedirectUri,\n                        BrowserUtils.getCurrentUri()\n                    );\n            } else if (this.config.auth.postLogoutRedirectUri === null) {\n                this.logger.verbose(\n                    \"postLogoutRedirectUri configured as null and no uri set on request, not passing post logout redirect\",\n                    validLogoutRequest.correlationId\n                );\n            } else if (this.config.auth.postLogoutRedirectUri) {\n                this.logger.verbose(\n                    \"Setting postLogoutRedirectUri to configured uri\",\n                    validLogoutRequest.correlationId\n                );\n                validLogoutRequest.postLogoutRedirectUri =\n                    UrlString.getAbsoluteUrl(\n                        this.config.auth.postLogoutRedirectUri,\n                        BrowserUtils.getCurrentUri()\n                    );\n            } else {\n                this.logger.verbose(\n                    \"Setting postLogoutRedirectUri to current page\",\n                    validLogoutRequest.correlationId\n                );\n                validLogoutRequest.postLogoutRedirectUri =\n                    UrlString.getAbsoluteUrl(\n                        BrowserUtils.getCurrentUri(),\n                        BrowserUtils.getCurrentUri()\n                    );\n            }\n        } else {\n            this.logger.verbose(\n                \"postLogoutRedirectUri passed as null, not setting post logout redirect uri\",\n                validLogoutRequest.correlationId\n            );\n        }\n\n        return validLogoutRequest;\n    }\n\n    /**\n     * Parses login_hint ID Token Claim out of AccountInfo object to be used as\n     * logout_hint in end session request.\n     * @param account\n     */\n    protected getLogoutHintFromIdTokenClaims(\n        account: AccountInfo\n    ): string | null {\n        const idTokenClaims: IdTokenClaims | undefined = account.idTokenClaims;\n        if (idTokenClaims) {\n            if (idTokenClaims.login_hint) {\n                return idTokenClaims.login_hint;\n            } else {\n                this.logger.verbose(\n                    \"The ID Token Claims tied to the provided account do not contain a login_hint claim, logoutHint will not be added to logout request\"\n                );\n            }\n        } else {\n            this.logger.verbose(\n                \"The provided account does not contain ID Token Claims, logoutHint will not be added to logout request\"\n            );\n        }\n\n        return null;\n    }\n\n    /**\n     * Creates an Authorization Code Client with the given authority, or the default authority.\n     * @param serverTelemetryManager\n     * @param authorityUrl\n     */\n    protected async createAuthCodeClient(\n        serverTelemetryManager: ServerTelemetryManager,\n        authorityUrl?: string,\n        requestAzureCloudOptions?: AzureCloudOptions,\n        account?: AccountInfo\n    ): Promise<AuthorizationCodeClient> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\n            this.correlationId\n        );\n        // Create auth module.\n        const clientConfig = await invokeAsync(\n            this.getClientConfiguration.bind(this),\n            PerformanceEvents.StandardInteractionClientGetClientConfiguration,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(\n            serverTelemetryManager,\n            authorityUrl,\n            requestAzureCloudOptions,\n            account\n        );\n        return new AuthorizationCodeClient(\n            clientConfig,\n            this.performanceClient\n        );\n    }\n\n    /**\n     * Creates a Client Configuration object with the given request authority, or the default authority.\n     * @param serverTelemetryManager\n     * @param requestAuthority\n     * @param requestCorrelationId\n     */\n    protected async getClientConfiguration(\n        serverTelemetryManager: ServerTelemetryManager,\n        requestAuthority?: string,\n        requestAzureCloudOptions?: AzureCloudOptions,\n        account?: AccountInfo\n    ): Promise<ClientConfiguration> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.StandardInteractionClientGetClientConfiguration,\n            this.correlationId\n        );\n        const discoveredAuthority = await invokeAsync(\n            this.getDiscoveredAuthority.bind(this),\n            PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(requestAuthority, requestAzureCloudOptions, account);\n        const logger = this.config.system.loggerOptions;\n\n        return {\n            authOptions: {\n                clientId: this.config.auth.clientId,\n                authority: discoveredAuthority,\n                clientCapabilities: this.config.auth.clientCapabilities,\n            },\n            systemOptions: {\n                tokenRenewalOffsetSeconds:\n                    this.config.system.tokenRenewalOffsetSeconds,\n                preventCorsPreflight: true,\n            },\n            loggerOptions: {\n                loggerCallback: logger.loggerCallback,\n                piiLoggingEnabled: logger.piiLoggingEnabled,\n                logLevel: logger.logLevel,\n                correlationId: this.correlationId,\n            },\n            cacheOptions: {\n                claimsBasedCachingEnabled:\n                    this.config.cache.claimsBasedCachingEnabled,\n            },\n            cryptoInterface: this.browserCrypto,\n            networkInterface: this.networkClient,\n            storageInterface: this.browserStorage,\n            serverTelemetryManager: serverTelemetryManager,\n            libraryInfo: {\n                sku: BrowserConstants.MSAL_SKU,\n                version: version,\n                cpu: Constants.EMPTY_STRING,\n                os: Constants.EMPTY_STRING,\n            },\n            telemetry: this.config.telemetry,\n        };\n    }\n\n    /**\n     * Helper to initialize required request parameters for interactive APIs and ssoSilent()\n     * @param request\n     * @param interactionType\n     */\n    protected async initializeAuthorizationRequest(\n        request: RedirectRequest | PopupRequest | SsoSilentRequest,\n        interactionType: InteractionType\n    ): Promise<AuthorizationUrlRequest> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,\n            this.correlationId\n        );\n\n        const redirectUri = this.getRedirectUri(request.redirectUri);\n        const browserState: BrowserStateObject = {\n            interactionType: interactionType,\n        };\n        const state = ProtocolUtils.setRequestState(\n            this.browserCrypto,\n            (request && request.state) || Constants.EMPTY_STRING,\n            browserState\n        );\n\n        const baseRequest: BaseAuthRequest = await invokeAsync(\n            initializeBaseRequest,\n            PerformanceEvents.InitializeBaseRequest,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(\n            { ...request, correlationId: this.correlationId },\n            this.config,\n            this.performanceClient,\n            this.logger\n        );\n\n        const validatedRequest: AuthorizationUrlRequest = {\n            ...baseRequest,\n            redirectUri: redirectUri,\n            state: state,\n            nonce: request.nonce || createNewGuid(),\n            responseMode: this.config.auth.OIDCOptions\n                .serverResponseType as ResponseMode,\n        };\n\n        const account =\n            request.account || this.browserStorage.getActiveAccount();\n        if (account) {\n            this.logger.verbose(\n                \"Setting validated request account\",\n                this.correlationId\n            );\n            this.logger.verbosePii(\n                `Setting validated request account: ${account.homeAccountId}`,\n                this.correlationId\n            );\n            validatedRequest.account = account;\n        }\n\n        // Check for ADAL/MSAL v1 SSO\n        if (!validatedRequest.loginHint && !account) {\n            const legacyLoginHint = this.browserStorage.getLegacyLoginHint();\n            if (legacyLoginHint) {\n                validatedRequest.loginHint = legacyLoginHint;\n            }\n        }\n\n        return validatedRequest;\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nexport const contentError = \"ContentError\";\nexport const userSwitch = \"user_switch\";\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n// Status Codes that can be thrown by WAM\nexport const USER_INTERACTION_REQUIRED = \"USER_INTERACTION_REQUIRED\";\nexport const USER_CANCEL = \"USER_CANCEL\";\nexport const NO_NETWORK = \"NO_NETWORK\";\nexport const TRANSIENT_ERROR = \"TRANSIENT_ERROR\";\nexport const PERSISTENT_ERROR = \"PERSISTENT_ERROR\";\nexport const DISABLED = \"DISABLED\";\nexport const ACCOUNT_UNAVAILABLE = \"ACCOUNT_UNAVAILABLE\";\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    AuthError,\n    InteractionRequiredAuthError,\n    InteractionRequiredAuthErrorCodes,\n    createInteractionRequiredAuthError,\n} from \"@azure/msal-common\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"./BrowserAuthError\";\n\nimport * as NativeAuthErrorCodes from \"./NativeAuthErrorCodes\";\nimport * as NativeStatusCodes from \"../broker/nativeBroker/NativeStatusCodes\";\nexport { NativeAuthErrorCodes };\n\nexport type OSError = {\n    error?: number;\n    protocol_error?: string;\n    properties?: object;\n    status?: string;\n    retryable?: boolean;\n};\n\nconst INVALID_METHOD_ERROR = -2147186943;\n\nexport const NativeAuthErrorMessages = {\n    [NativeAuthErrorCodes.userSwitch]:\n        \"User attempted to switch accounts in the native broker, which is not allowed. All new accounts must sign-in through the standard web flow first, please try again.\",\n};\n\nexport class NativeAuthError extends AuthError {\n    ext: OSError | undefined;\n\n    constructor(errorCode: string, description?: string, ext?: OSError) {\n        super(errorCode, description);\n\n        Object.setPrototypeOf(this, NativeAuthError.prototype);\n        this.name = \"NativeAuthError\";\n        this.ext = ext;\n    }\n}\n\n/**\n * These errors should result in a fallback to the 'standard' browser based auth flow.\n */\nexport function isFatalNativeAuthError(error: NativeAuthError): boolean {\n    if (\n        error.ext &&\n        error.ext.status &&\n        (error.ext.status === NativeStatusCodes.PERSISTENT_ERROR ||\n            error.ext.status === NativeStatusCodes.DISABLED)\n    ) {\n        return true;\n    }\n\n    if (\n        error.ext &&\n        error.ext.error &&\n        error.ext.error === INVALID_METHOD_ERROR\n    ) {\n        return true;\n    }\n\n    switch (error.errorCode) {\n        case NativeAuthErrorCodes.contentError:\n            return true;\n        default:\n            return false;\n    }\n}\n\n/**\n * Create the appropriate error object based on the WAM status code.\n * @param code\n * @param description\n * @param ext\n * @returns\n */\nexport function createNativeAuthError(\n    code: string,\n    description?: string,\n    ext?: OSError\n): AuthError {\n    if (ext && ext.status) {\n        switch (ext.status) {\n            case NativeStatusCodes.ACCOUNT_UNAVAILABLE:\n                return createInteractionRequiredAuthError(\n                    InteractionRequiredAuthErrorCodes.nativeAccountUnavailable\n                );\n            case NativeStatusCodes.USER_INTERACTION_REQUIRED:\n                return new InteractionRequiredAuthError(code, description);\n            case NativeStatusCodes.USER_CANCEL:\n                return createBrowserAuthError(\n                    BrowserAuthErrorCodes.userCancelled\n                );\n            case NativeStatusCodes.NO_NETWORK:\n                return createBrowserAuthError(\n                    BrowserAuthErrorCodes.noNetworkConnectivity\n                );\n        }\n    }\n\n    return new NativeAuthError(\n        code,\n        NativeAuthErrorMessages[code] || description,\n        ext\n    );\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport {\n    CommonSilentFlowRequest,\n    SilentFlowClient,\n    PerformanceEvents,\n    invokeAsync,\n} from \"@azure/msal-common\";\nimport { ApiId } from \"../utils/BrowserConstants\";\nimport {\n    BrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { ClearCacheRequest } from \"../request/ClearCacheRequest\";\n\nexport class SilentCacheClient extends StandardInteractionClient {\n    /**\n     * Returns unexpired tokens from the cache, if available\n     * @param silentRequest\n     */\n    async acquireToken(\n        silentRequest: CommonSilentFlowRequest\n    ): Promise<AuthenticationResult> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.SilentCacheClientAcquireToken,\n            silentRequest.correlationId\n        );\n        // Telemetry manager only used to increment cacheHits here\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\n            ApiId.acquireTokenSilent_silentFlow\n        );\n\n        const clientConfig = await invokeAsync(\n            this.getClientConfiguration.bind(this),\n            PerformanceEvents.StandardInteractionClientGetClientConfiguration,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(\n            serverTelemetryManager,\n            silentRequest.authority,\n            silentRequest.azureCloudOptions,\n            silentRequest.account\n        );\n        const silentAuthClient = new SilentFlowClient(\n            clientConfig,\n            this.performanceClient\n        );\n        this.logger.verbose(\"Silent auth client created\");\n\n        try {\n            const response = await invokeAsync(\n                silentAuthClient.acquireCachedToken.bind(silentAuthClient),\n                PerformanceEvents.SilentFlowClientAcquireCachedToken,\n                this.logger,\n                this.performanceClient,\n                silentRequest.correlationId\n            )(silentRequest);\n            const authResponse = response[0] as AuthenticationResult;\n\n            this.performanceClient.addFields(\n                {\n                    fromCache: true,\n                },\n                silentRequest.correlationId\n            );\n            return authResponse;\n        } catch (error) {\n            if (\n                error instanceof BrowserAuthError &&\n                error.errorCode === BrowserAuthErrorCodes.cryptoKeyNotFound\n            ) {\n                this.logger.verbose(\n                    \"Signing keypair for bound access token not found. Refreshing bound access token and generating a new crypto keypair.\"\n                );\n            }\n            throw error;\n        }\n    }\n\n    /**\n     * API to silenty clear the browser cache.\n     * @param logoutRequest\n     */\n    logout(logoutRequest?: ClearCacheRequest): Promise<void> {\n        this.logger.verbose(\"logoutRedirect called\");\n        const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n        return this.clearCacheOnLogout(validLogoutRequest?.account);\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    Logger,\n    ICrypto,\n    PromptValue,\n    AuthToken,\n    Constants,\n    AccountEntity,\n    AuthorityType,\n    ScopeSet,\n    TimeUtils,\n    AuthenticationScheme,\n    UrlString,\n    OIDC_DEFAULT_SCOPES,\n    PopTokenGenerator,\n    SignedHttpRequestParameters,\n    IPerformanceClient,\n    PerformanceEvents,\n    IdTokenEntity,\n    AccessTokenEntity,\n    AuthError,\n    CommonSilentFlowRequest,\n    AccountInfo,\n    AADServerParamKeys,\n    TokenClaims,\n    createClientAuthError,\n    ClientAuthErrorCodes,\n    invokeAsync,\n    createAuthError,\n    AuthErrorCodes,\n    updateAccountTenantProfileData,\n    CacheHelpers,\n    buildAccountToCache,\n    InProgressPerformanceEvent,\n    ServerTelemetryManager,\n} from \"@azure/msal-common\";\nimport { BaseInteractionClient } from \"./BaseInteractionClient\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\nimport {\n    NativeExtensionMethod,\n    ApiId,\n    TemporaryCacheKeys,\n    NativeConstants,\n    BrowserConstants,\n} from \"../utils/BrowserConstants\";\nimport {\n    NativeExtensionRequestBody,\n    NativeTokenRequest,\n} from \"../broker/nativeBroker/NativeRequest\";\nimport { MATS, NativeResponse } from \"../broker/nativeBroker/NativeResponse\";\nimport {\n    NativeAuthError,\n    NativeAuthErrorCodes,\n    createNativeAuthError,\n    isFatalNativeAuthError,\n} from \"../error/NativeAuthError\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { NavigationOptions } from \"../navigation/NavigationOptions\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { SilentCacheClient } from \"./SilentCacheClient\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { base64Decode } from \"../encode/Base64Decode\";\nimport { version } from \"../packageMetadata\";\n\nconst BrokerServerParamKeys = {\n    BROKER_CLIENT_ID: \"brk_client_id\",\n    BROKER_REDIRECT_URI: \"brk_redirect_uri\",\n};\n\nexport class NativeInteractionClient extends BaseInteractionClient {\n    protected apiId: ApiId;\n    protected accountId: string;\n    protected nativeMessageHandler: NativeMessageHandler;\n    protected silentCacheClient: SilentCacheClient;\n    protected nativeStorageManager: BrowserCacheManager;\n    protected skus: string;\n    protected serverTelemetryManager: ServerTelemetryManager;\n\n    constructor(\n        config: BrowserConfiguration,\n        browserStorage: BrowserCacheManager,\n        browserCrypto: ICrypto,\n        logger: Logger,\n        eventHandler: EventHandler,\n        navigationClient: INavigationClient,\n        apiId: ApiId,\n        performanceClient: IPerformanceClient,\n        provider: NativeMessageHandler,\n        accountId: string,\n        nativeStorageImpl: BrowserCacheManager,\n        correlationId?: string\n    ) {\n        super(\n            config,\n            browserStorage,\n            browserCrypto,\n            logger,\n            eventHandler,\n            navigationClient,\n            performanceClient,\n            provider,\n            correlationId\n        );\n        this.apiId = apiId;\n        this.accountId = accountId;\n        this.nativeMessageHandler = provider;\n        this.nativeStorageManager = nativeStorageImpl;\n        this.silentCacheClient = new SilentCacheClient(\n            config,\n            this.nativeStorageManager,\n            browserCrypto,\n            logger,\n            eventHandler,\n            navigationClient,\n            performanceClient,\n            provider,\n            correlationId\n        );\n        this.serverTelemetryManager = this.initializeServerTelemetryManager(\n            this.apiId\n        );\n\n        const extensionName =\n            this.nativeMessageHandler.getExtensionId() ===\n            NativeConstants.PREFERRED_EXTENSION_ID\n                ? \"chrome\"\n                : this.nativeMessageHandler.getExtensionId()?.length\n                ? \"unknown\"\n                : undefined;\n        this.skus = ServerTelemetryManager.makeExtraSkuString({\n            libraryName: BrowserConstants.MSAL_SKU,\n            libraryVersion: version,\n            extensionName: extensionName,\n            extensionVersion: this.nativeMessageHandler.getExtensionVersion(),\n        });\n    }\n\n    /**\n     * Adds SKUs to request extra query parameters\n     * @param request {NativeTokenRequest}\n     * @private\n     */\n    private addRequestSKUs(request: NativeTokenRequest) {\n        request.extraParameters = {\n            ...request.extraParameters,\n            [AADServerParamKeys.X_CLIENT_EXTRA_SKU]: this.skus,\n        };\n    }\n\n    /**\n     * Acquire token from native platform via browser extension\n     * @param request\n     */\n    async acquireToken(\n        request: PopupRequest | SilentRequest | SsoSilentRequest\n    ): Promise<AuthenticationResult> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.NativeInteractionClientAcquireToken,\n            request.correlationId\n        );\n        this.logger.trace(\"NativeInteractionClient - acquireToken called.\");\n\n        // start the perf measurement\n        const nativeATMeasurement = this.performanceClient.startMeasurement(\n            PerformanceEvents.NativeInteractionClientAcquireToken,\n            request.correlationId\n        );\n        const reqTimestamp = TimeUtils.nowSeconds();\n\n        try {\n            // initialize native request\n            const nativeRequest = await this.initializeNativeRequest(request);\n\n            // check if the tokens can be retrieved from internal cache\n            try {\n                const result = await this.acquireTokensFromCache(\n                    this.accountId,\n                    nativeRequest\n                );\n                nativeATMeasurement.end({\n                    success: true,\n                    isNativeBroker: false, // Should be true only when the result is coming directly from the broker\n                    fromCache: true,\n                });\n                return result;\n            } catch (e) {\n                // continue with a native call for any and all errors\n                this.logger.info(\n                    \"MSAL internal Cache does not contain tokens, proceed to make a native call\"\n                );\n            }\n\n            const { ...nativeTokenRequest } = nativeRequest;\n\n            // fall back to native calls\n            const messageBody: NativeExtensionRequestBody = {\n                method: NativeExtensionMethod.GetToken,\n                request: nativeTokenRequest,\n            };\n\n            const response: object =\n                await this.nativeMessageHandler.sendMessage(messageBody);\n            const validatedResponse: NativeResponse =\n                this.validateNativeResponse(response);\n\n            return await this.handleNativeResponse(\n                validatedResponse,\n                nativeRequest,\n                reqTimestamp\n            )\n                .then((result: AuthenticationResult) => {\n                    nativeATMeasurement.end({\n                        success: true,\n                        isNativeBroker: true,\n                        requestId: result.requestId,\n                    });\n                    this.serverTelemetryManager.clearNativeBrokerErrorCode();\n                    return result;\n                })\n                .catch((error: AuthError) => {\n                    nativeATMeasurement.end({\n                        success: false,\n                        errorCode: error.errorCode,\n                        subErrorCode: error.subError,\n                        isNativeBroker: true,\n                    });\n                    throw error;\n                });\n        } catch (e) {\n            if (e instanceof NativeAuthError) {\n                this.serverTelemetryManager.setNativeBrokerErrorCode(\n                    e.errorCode\n                );\n            }\n            throw e;\n        }\n    }\n\n    /**\n     * Creates silent flow request\n     * @param request\n     * @param cachedAccount\n     * @returns CommonSilentFlowRequest\n     */\n    private createSilentCacheRequest(\n        request: NativeTokenRequest,\n        cachedAccount: AccountInfo\n    ): CommonSilentFlowRequest {\n        return {\n            authority: request.authority,\n            correlationId: this.correlationId,\n            scopes: ScopeSet.fromString(request.scope).asArray(),\n            account: cachedAccount,\n            forceRefresh: false,\n        };\n    }\n\n    /**\n     * Fetches the tokens from the cache if un-expired\n     * @param nativeAccountId\n     * @param request\n     * @returns authenticationResult\n     */\n    protected async acquireTokensFromCache(\n        nativeAccountId: string,\n        request: NativeTokenRequest\n    ): Promise<AuthenticationResult> {\n        if (!nativeAccountId) {\n            this.logger.warning(\n                \"NativeInteractionClient:acquireTokensFromCache - No nativeAccountId provided\"\n            );\n            throw createClientAuthError(ClientAuthErrorCodes.noAccountFound);\n        }\n        // fetch the account from browser cache\n        const account = this.browserStorage.getBaseAccountInfo({\n            nativeAccountId,\n        });\n\n        if (!account) {\n            throw createClientAuthError(ClientAuthErrorCodes.noAccountFound);\n        }\n\n        // leverage silent flow for cached tokens retrieval\n        try {\n            const silentRequest = this.createSilentCacheRequest(\n                request,\n                account\n            );\n            const result = await this.silentCacheClient.acquireToken(\n                silentRequest\n            );\n\n            const fullAccount = {\n                ...account,\n                idTokenClaims: result?.idTokenClaims as TokenClaims,\n                idToken: result?.idToken,\n            };\n\n            return {\n                ...result,\n                account: fullAccount,\n            };\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Acquires a token from native platform then redirects to the redirectUri instead of returning the response\n     * @param {RedirectRequest} request\n     * @param {InProgressPerformanceEvent} rootMeasurement\n     */\n    async acquireTokenRedirect(\n        request: RedirectRequest,\n        rootMeasurement: InProgressPerformanceEvent\n    ): Promise<void> {\n        this.logger.trace(\n            \"NativeInteractionClient - acquireTokenRedirect called.\"\n        );\n\n        const { ...remainingParameters } = request;\n        delete remainingParameters.onRedirectNavigate;\n\n        const nativeRequest = await this.initializeNativeRequest(\n            remainingParameters\n        );\n\n        const messageBody: NativeExtensionRequestBody = {\n            method: NativeExtensionMethod.GetToken,\n            request: nativeRequest,\n        };\n\n        try {\n            const response: object =\n                await this.nativeMessageHandler.sendMessage(messageBody);\n            this.validateNativeResponse(response);\n        } catch (e) {\n            // Only throw fatal errors here to allow application to fallback to regular redirect. Otherwise proceed and the error will be thrown in handleRedirectPromise\n            if (e instanceof NativeAuthError) {\n                this.serverTelemetryManager.setNativeBrokerErrorCode(\n                    e.errorCode\n                );\n                if (isFatalNativeAuthError(e)) {\n                    throw e;\n                }\n            }\n        }\n        this.browserStorage.setTemporaryCache(\n            TemporaryCacheKeys.NATIVE_REQUEST,\n            JSON.stringify(nativeRequest),\n            true\n        );\n\n        const navigationOptions: NavigationOptions = {\n            apiId: ApiId.acquireTokenRedirect,\n            timeout: this.config.system.redirectNavigationTimeout,\n            noHistory: false,\n        };\n        const redirectUri = this.config.auth.navigateToLoginRequestUrl\n            ? window.location.href\n            : this.getRedirectUri(request.redirectUri);\n        rootMeasurement.end({ success: true });\n        await this.navigationClient.navigateExternal(\n            redirectUri,\n            navigationOptions\n        ); // Need to treat this as external to ensure handleRedirectPromise is run again\n    }\n\n    /**\n     * If the previous page called native platform for a token using redirect APIs, send the same request again and return the response\n     * @param performanceClient {IPerformanceClient?}\n     * @param correlationId {string?} correlation identifier\n     */\n    async handleRedirectPromise(\n        performanceClient?: IPerformanceClient,\n        correlationId?: string\n    ): Promise<AuthenticationResult | null> {\n        this.logger.trace(\n            \"NativeInteractionClient - handleRedirectPromise called.\"\n        );\n        if (!this.browserStorage.isInteractionInProgress(true)) {\n            this.logger.info(\n                \"handleRedirectPromise called but there is no interaction in progress, returning null.\"\n            );\n            return null;\n        }\n\n        // remove prompt from the request to prevent WAM from prompting twice\n        const cachedRequest = this.browserStorage.getCachedNativeRequest();\n        if (!cachedRequest) {\n            this.logger.verbose(\n                \"NativeInteractionClient - handleRedirectPromise called but there is no cached request, returning null.\"\n            );\n            if (performanceClient && correlationId) {\n                performanceClient?.addFields(\n                    { errorCode: \"no_cached_request\" },\n                    correlationId\n                );\n            }\n            return null;\n        }\n\n        const { prompt, ...request } = cachedRequest;\n        if (prompt) {\n            this.logger.verbose(\n                \"NativeInteractionClient - handleRedirectPromise called and prompt was included in the original request, removing prompt from cached request to prevent second interaction with native broker window.\"\n            );\n        }\n\n        this.browserStorage.removeItem(\n            this.browserStorage.generateCacheKey(\n                TemporaryCacheKeys.NATIVE_REQUEST\n            )\n        );\n\n        const messageBody: NativeExtensionRequestBody = {\n            method: NativeExtensionMethod.GetToken,\n            request: request,\n        };\n\n        const reqTimestamp = TimeUtils.nowSeconds();\n\n        try {\n            this.logger.verbose(\n                \"NativeInteractionClient - handleRedirectPromise sending message to native broker.\"\n            );\n            const response: object =\n                await this.nativeMessageHandler.sendMessage(messageBody);\n            this.validateNativeResponse(response);\n            const result = this.handleNativeResponse(\n                response as NativeResponse,\n                request,\n                reqTimestamp\n            );\n            this.browserStorage.setInteractionInProgress(false);\n            const res = await result;\n            this.serverTelemetryManager.clearNativeBrokerErrorCode();\n            return res;\n        } catch (e) {\n            this.browserStorage.setInteractionInProgress(false);\n            throw e;\n        }\n    }\n\n    /**\n     * Logout from native platform via browser extension\n     * @param request\n     */\n    logout(): Promise<void> {\n        this.logger.trace(\"NativeInteractionClient - logout called.\");\n        return Promise.reject(\"Logout not implemented yet\");\n    }\n\n    /**\n     * Transform response from native platform into AuthenticationResult object which will be returned to the end user\n     * @param response\n     * @param request\n     * @param reqTimestamp\n     */\n    protected async handleNativeResponse(\n        response: NativeResponse,\n        request: NativeTokenRequest,\n        reqTimestamp: number\n    ): Promise<AuthenticationResult> {\n        this.logger.trace(\n            \"NativeInteractionClient - handleNativeResponse called.\"\n        );\n\n        // generate identifiers\n        const idTokenClaims = AuthToken.extractTokenClaims(\n            response.id_token,\n            base64Decode\n        );\n\n        const homeAccountIdentifier = this.createHomeAccountIdentifier(\n            response,\n            idTokenClaims\n        );\n\n        const cachedhomeAccountId =\n            this.browserStorage.getAccountInfoFilteredBy({\n                nativeAccountId: request.accountId,\n            })?.homeAccountId;\n\n        if (\n            homeAccountIdentifier !== cachedhomeAccountId &&\n            response.account.id !== request.accountId\n        ) {\n            // User switch in native broker prompt is not supported. All users must first sign in through web flow to ensure server state is in sync\n            throw createNativeAuthError(NativeAuthErrorCodes.userSwitch);\n        }\n\n        // Get the preferred_cache domain for the given authority\n        const authority = await this.getDiscoveredAuthority(request.authority);\n\n        const baseAccount = buildAccountToCache(\n            this.browserStorage,\n            authority,\n            homeAccountIdentifier,\n            base64Decode,\n            idTokenClaims,\n            response.client_info,\n            undefined, // environment\n            idTokenClaims.tid,\n            undefined, // auth code payload\n            response.account.id,\n            this.logger\n        );\n\n        // generate authenticationResult\n        const result = await this.generateAuthenticationResult(\n            response,\n            request,\n            idTokenClaims,\n            baseAccount,\n            authority.canonicalAuthority,\n            reqTimestamp\n        );\n\n        // cache accounts and tokens in the appropriate storage\n        this.cacheAccount(baseAccount);\n        this.cacheNativeTokens(\n            response,\n            request,\n            homeAccountIdentifier,\n            idTokenClaims,\n            response.access_token,\n            result.tenantId,\n            reqTimestamp\n        );\n\n        return result;\n    }\n\n    /**\n     * creates an homeAccountIdentifier for the account\n     * @param response\n     * @param idTokenObj\n     * @returns\n     */\n    protected createHomeAccountIdentifier(\n        response: NativeResponse,\n        idTokenClaims: TokenClaims\n    ): string {\n        // Save account in browser storage\n        const homeAccountIdentifier = AccountEntity.generateHomeAccountId(\n            response.client_info || Constants.EMPTY_STRING,\n            AuthorityType.Default,\n            this.logger,\n            this.browserCrypto,\n            idTokenClaims\n        );\n\n        return homeAccountIdentifier;\n    }\n\n    /**\n     * Helper to generate scopes\n     * @param response\n     * @param request\n     * @returns\n     */\n    generateScopes(\n        response: NativeResponse,\n        request: NativeTokenRequest\n    ): ScopeSet {\n        return response.scope\n            ? ScopeSet.fromString(response.scope)\n            : ScopeSet.fromString(request.scope);\n    }\n\n    /**\n     * If PoP token is requesred, records the PoP token if returned from the WAM, else generates one in the browser\n     * @param request\n     * @param response\n     */\n    async generatePopAccessToken(\n        response: NativeResponse,\n        request: NativeTokenRequest\n    ): Promise<string> {\n        if (\n            request.tokenType === AuthenticationScheme.POP &&\n            request.signPopToken\n        ) {\n            /**\n             * This code prioritizes SHR returned from the native layer. In case of error/SHR not calculated from WAM and the AT\n             * is still received, SHR is calculated locally\n             */\n\n            // Check if native layer returned an SHR token\n            if (response.shr) {\n                this.logger.trace(\n                    \"handleNativeServerResponse: SHR is enabled in native layer\"\n                );\n                return response.shr;\n            }\n\n            // Generate SHR in msal js if WAM does not compute it when POP is enabled\n            const popTokenGenerator: PopTokenGenerator = new PopTokenGenerator(\n                this.browserCrypto\n            );\n            const shrParameters: SignedHttpRequestParameters = {\n                resourceRequestMethod: request.resourceRequestMethod,\n                resourceRequestUri: request.resourceRequestUri,\n                shrClaims: request.shrClaims,\n                shrNonce: request.shrNonce,\n            };\n\n            /**\n             * KeyID must be present in the native request from when the PoP key was generated in order for\n             * PopTokenGenerator to query the full key for signing\n             */\n            if (!request.keyId) {\n                throw createClientAuthError(ClientAuthErrorCodes.keyIdMissing);\n            }\n            return popTokenGenerator.signPopToken(\n                response.access_token,\n                request.keyId,\n                shrParameters\n            );\n        } else {\n            return response.access_token;\n        }\n    }\n\n    /**\n     * Generates authentication result\n     * @param response\n     * @param request\n     * @param idTokenObj\n     * @param accountEntity\n     * @param authority\n     * @param reqTimestamp\n     * @returns\n     */\n    protected async generateAuthenticationResult(\n        response: NativeResponse,\n        request: NativeTokenRequest,\n        idTokenClaims: TokenClaims,\n        accountEntity: AccountEntity,\n        authority: string,\n        reqTimestamp: number\n    ): Promise<AuthenticationResult> {\n        // Add Native Broker fields to Telemetry\n        const mats = this.addTelemetryFromNativeResponse(response);\n\n        // If scopes not returned in server response, use request scopes\n        const responseScopes = response.scope\n            ? ScopeSet.fromString(response.scope)\n            : ScopeSet.fromString(request.scope);\n\n        const accountProperties = response.account.properties || {};\n        const uid =\n            accountProperties[\"UID\"] ||\n            idTokenClaims.oid ||\n            idTokenClaims.sub ||\n            Constants.EMPTY_STRING;\n        const tid =\n            accountProperties[\"TenantId\"] ||\n            idTokenClaims.tid ||\n            Constants.EMPTY_STRING;\n\n        const accountInfo: AccountInfo | null = updateAccountTenantProfileData(\n            accountEntity.getAccountInfo(),\n            undefined, // tenantProfile optional\n            idTokenClaims,\n            response.id_token\n        );\n\n        /**\n         * In pairwise broker flows, this check prevents the broker's native account id\n         * from being returned over the embedded app's account id.\n         */\n        if (accountInfo.nativeAccountId !== response.account.id) {\n            accountInfo.nativeAccountId = response.account.id;\n        }\n\n        // generate PoP token as needed\n        const responseAccessToken = await this.generatePopAccessToken(\n            response,\n            request\n        );\n        const tokenType =\n            request.tokenType === AuthenticationScheme.POP\n                ? AuthenticationScheme.POP\n                : AuthenticationScheme.BEARER;\n\n        const result: AuthenticationResult = {\n            authority: authority,\n            uniqueId: uid,\n            tenantId: tid,\n            scopes: responseScopes.asArray(),\n            account: accountInfo,\n            idToken: response.id_token,\n            idTokenClaims: idTokenClaims,\n            accessToken: responseAccessToken,\n            fromCache: mats ? this.isResponseFromCache(mats) : false,\n            expiresOn: new Date(\n                Number(reqTimestamp + response.expires_in) * 1000\n            ),\n            tokenType: tokenType,\n            correlationId: this.correlationId,\n            state: response.state,\n            fromNativeBroker: true,\n        };\n\n        return result;\n    }\n\n    /**\n     * cache the account entity in browser storage\n     * @param accountEntity\n     */\n    cacheAccount(accountEntity: AccountEntity): void {\n        // Store the account info and hence `nativeAccountId` in browser cache\n        this.browserStorage.setAccount(accountEntity);\n\n        // Remove any existing cached tokens for this account in browser storage\n        this.browserStorage.removeAccountContext(accountEntity).catch((e) => {\n            this.logger.error(\n                `Error occurred while removing account context from browser storage. ${e}`\n            );\n        });\n    }\n\n    /**\n     * Stores the access_token and id_token in inmemory storage\n     * @param response\n     * @param request\n     * @param homeAccountIdentifier\n     * @param idTokenObj\n     * @param responseAccessToken\n     * @param tenantId\n     * @param reqTimestamp\n     */\n    cacheNativeTokens(\n        response: NativeResponse,\n        request: NativeTokenRequest,\n        homeAccountIdentifier: string,\n        idTokenClaims: TokenClaims,\n        responseAccessToken: string,\n        tenantId: string,\n        reqTimestamp: number\n    ): void {\n        const cachedIdToken: IdTokenEntity | null =\n            CacheHelpers.createIdTokenEntity(\n                homeAccountIdentifier,\n                request.authority,\n                response.id_token || \"\",\n                request.clientId,\n                idTokenClaims.tid || \"\"\n            );\n\n        // cache accessToken in inmemory storage\n        const expiresIn: number =\n            request.tokenType === AuthenticationScheme.POP\n                ? Constants.SHR_NONCE_VALIDITY\n                : (typeof response.expires_in === \"string\"\n                      ? parseInt(response.expires_in, 10)\n                      : response.expires_in) || 0;\n        const tokenExpirationSeconds = reqTimestamp + expiresIn;\n        const responseScopes = this.generateScopes(response, request);\n\n        const cachedAccessToken: AccessTokenEntity | null =\n            CacheHelpers.createAccessTokenEntity(\n                homeAccountIdentifier,\n                request.authority,\n                responseAccessToken,\n                request.clientId,\n                idTokenClaims.tid || tenantId,\n                responseScopes.printScopes(),\n                tokenExpirationSeconds,\n                0,\n                base64Decode,\n                undefined,\n                request.tokenType as AuthenticationScheme,\n                undefined,\n                request.keyId\n            );\n\n        const nativeCacheRecord = {\n            idToken: cachedIdToken,\n            accessToken: cachedAccessToken,\n        };\n\n        void this.nativeStorageManager.saveCacheRecord(\n            nativeCacheRecord,\n            request.storeInCache\n        );\n    }\n\n    protected addTelemetryFromNativeResponse(\n        response: NativeResponse\n    ): MATS | null {\n        const mats = this.getMATSFromResponse(response);\n\n        if (!mats) {\n            return null;\n        }\n\n        this.performanceClient.addFields(\n            {\n                extensionId: this.nativeMessageHandler.getExtensionId(),\n                extensionVersion:\n                    this.nativeMessageHandler.getExtensionVersion(),\n                matsBrokerVersion: mats.broker_version,\n                matsAccountJoinOnStart: mats.account_join_on_start,\n                matsAccountJoinOnEnd: mats.account_join_on_end,\n                matsDeviceJoin: mats.device_join,\n                matsPromptBehavior: mats.prompt_behavior,\n                matsApiErrorCode: mats.api_error_code,\n                matsUiVisible: mats.ui_visible,\n                matsSilentCode: mats.silent_code,\n                matsSilentBiSubCode: mats.silent_bi_sub_code,\n                matsSilentMessage: mats.silent_message,\n                matsSilentStatus: mats.silent_status,\n                matsHttpStatus: mats.http_status,\n                matsHttpEventCount: mats.http_event_count,\n            },\n            this.correlationId\n        );\n\n        return mats;\n    }\n\n    /**\n     * Validates native platform response before processing\n     * @param response\n     */\n    private validateNativeResponse(response: object): NativeResponse {\n        if (\n            response.hasOwnProperty(\"access_token\") &&\n            response.hasOwnProperty(\"id_token\") &&\n            response.hasOwnProperty(\"client_info\") &&\n            response.hasOwnProperty(\"account\") &&\n            response.hasOwnProperty(\"scope\") &&\n            response.hasOwnProperty(\"expires_in\")\n        ) {\n            return response as NativeResponse;\n        } else {\n            throw createAuthError(\n                AuthErrorCodes.unexpectedError,\n                \"Response missing expected properties.\"\n            );\n        }\n    }\n\n    /**\n     * Gets MATS telemetry from native response\n     * @param response\n     * @returns\n     */\n    private getMATSFromResponse(response: NativeResponse): MATS | null {\n        if (response.properties.MATS) {\n            try {\n                return JSON.parse(response.properties.MATS);\n            } catch (e) {\n                this.logger.error(\n                    \"NativeInteractionClient - Error parsing MATS telemetry, returning null instead\"\n                );\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns whether or not response came from native cache\n     * @param response\n     * @returns\n     */\n    protected isResponseFromCache(mats: MATS): boolean {\n        if (typeof mats.is_cached === \"undefined\") {\n            this.logger.verbose(\n                \"NativeInteractionClient - MATS telemetry does not contain field indicating if response was served from cache. Returning false.\"\n            );\n            return false;\n        }\n\n        return !!mats.is_cached;\n    }\n\n    /**\n     * Translates developer provided request object into NativeRequest object\n     * @param request\n     */\n    protected async initializeNativeRequest(\n        request: PopupRequest | SsoSilentRequest\n    ): Promise<NativeTokenRequest> {\n        this.logger.trace(\n            \"NativeInteractionClient - initializeNativeRequest called\"\n        );\n\n        const authority = request.authority || this.config.auth.authority;\n\n        if (request.account) {\n            // validate authority\n            await this.getDiscoveredAuthority(\n                authority,\n                request.azureCloudOptions,\n                request.account\n            );\n        }\n\n        const canonicalAuthority = new UrlString(authority);\n        canonicalAuthority.validateAsUri();\n\n        // scopes are expected to be received by the native broker as \"scope\" and will be added to the request below. Other properties that should be dropped from the request to the native broker can be included in the object destructuring here.\n        const { scopes, ...remainingProperties } = request;\n        const scopeSet = new ScopeSet(scopes || []);\n        scopeSet.appendScopes(OIDC_DEFAULT_SCOPES);\n\n        const getPrompt = () => {\n            // If request is silent, prompt is always none\n            switch (this.apiId) {\n                case ApiId.ssoSilent:\n                case ApiId.acquireTokenSilent_silentFlow:\n                    this.logger.trace(\n                        \"initializeNativeRequest: silent request sets prompt to none\"\n                    );\n                    return PromptValue.NONE;\n                default:\n                    break;\n            }\n\n            // Prompt not provided, request may proceed and native broker decides if it needs to prompt\n            if (!request.prompt) {\n                this.logger.trace(\n                    \"initializeNativeRequest: prompt was not provided\"\n                );\n                return undefined;\n            }\n\n            // If request is interactive, check if prompt provided is allowed to go directly to native broker\n            switch (request.prompt) {\n                case PromptValue.NONE:\n                case PromptValue.CONSENT:\n                case PromptValue.LOGIN:\n                    this.logger.trace(\n                        \"initializeNativeRequest: prompt is compatible with native flow\"\n                    );\n                    return request.prompt;\n                default:\n                    this.logger.trace(\n                        `initializeNativeRequest: prompt = ${request.prompt} is not compatible with native flow`\n                    );\n                    throw createBrowserAuthError(\n                        BrowserAuthErrorCodes.nativePromptNotSupported\n                    );\n            }\n        };\n\n        const validatedRequest: NativeTokenRequest = {\n            ...remainingProperties,\n            accountId: this.accountId,\n            clientId: this.config.auth.clientId,\n            authority: canonicalAuthority.urlString,\n            scope: scopeSet.printScopes(),\n            redirectUri: this.getRedirectUri(request.redirectUri),\n            prompt: getPrompt(),\n            correlationId: this.correlationId,\n            tokenType: request.authenticationScheme,\n            windowTitleSubstring: document.title,\n            extraParameters: {\n                ...request.extraQueryParameters,\n                ...request.tokenQueryParameters,\n            },\n            extendedExpiryToken: false, // Make this configurable?\n            keyId: request.popKid,\n        };\n\n        // Check for PoP token requests: signPopToken should only be set to true if popKid is not set\n        if (validatedRequest.signPopToken && !!request.popKid) {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.invalidPopTokenRequest\n            );\n        }\n\n        this.handleExtraBrokerParams(validatedRequest);\n        validatedRequest.extraParameters =\n            validatedRequest.extraParameters || {};\n        validatedRequest.extraParameters.telemetry =\n            NativeConstants.MATS_TELEMETRY;\n\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\n            // add POP request type\n            const shrParameters: SignedHttpRequestParameters = {\n                resourceRequestUri: request.resourceRequestUri,\n                resourceRequestMethod: request.resourceRequestMethod,\n                shrClaims: request.shrClaims,\n                shrNonce: request.shrNonce,\n            };\n\n            const popTokenGenerator = new PopTokenGenerator(this.browserCrypto);\n\n            // generate reqCnf if not provided in the request\n            let reqCnfData;\n            if (!validatedRequest.keyId) {\n                const generatedReqCnfData = await invokeAsync(\n                    popTokenGenerator.generateCnf.bind(popTokenGenerator),\n                    PerformanceEvents.PopTokenGenerateCnf,\n                    this.logger,\n                    this.performanceClient,\n                    request.correlationId\n                )(shrParameters, this.logger);\n                reqCnfData = generatedReqCnfData.reqCnfString;\n                validatedRequest.keyId = generatedReqCnfData.kid;\n                validatedRequest.signPopToken = true;\n            } else {\n                reqCnfData = this.browserCrypto.base64UrlEncode(\n                    JSON.stringify({ kid: validatedRequest.keyId })\n                );\n                validatedRequest.signPopToken = false;\n            }\n\n            // SPAs require whole string to be passed to broker\n            validatedRequest.reqCnf = reqCnfData;\n        }\n        this.addRequestSKUs(validatedRequest);\n\n        return validatedRequest;\n    }\n\n    /**\n     * Handles extra broker request parameters\n     * @param request {NativeTokenRequest}\n     * @private\n     */\n    private handleExtraBrokerParams(request: NativeTokenRequest): void {\n        if (!request.extraParameters) {\n            return;\n        }\n\n        if (\n            request.extraParameters.hasOwnProperty(\n                BrokerServerParamKeys.BROKER_CLIENT_ID\n            ) &&\n            request.extraParameters.hasOwnProperty(\n                BrokerServerParamKeys.BROKER_REDIRECT_URI\n            ) &&\n            request.extraParameters.hasOwnProperty(AADServerParamKeys.CLIENT_ID)\n        ) {\n            const child_client_id =\n                request.extraParameters[AADServerParamKeys.CLIENT_ID];\n            const child_redirect_uri = request.redirectUri;\n            const brk_redirect_uri =\n                request.extraParameters[\n                    BrokerServerParamKeys.BROKER_REDIRECT_URI\n                ];\n            request.extraParameters = {\n                child_client_id,\n                child_redirect_uri,\n            };\n            request.redirectUri = brk_redirect_uri;\n        }\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    NativeConstants,\n    NativeExtensionMethod,\n} from \"../../utils/BrowserConstants\";\nimport {\n    Logger,\n    AuthError,\n    createAuthError,\n    AuthErrorCodes,\n    AuthenticationScheme,\n    InProgressPerformanceEvent,\n    PerformanceEvents,\n    IPerformanceClient,\n} from \"@azure/msal-common\";\nimport {\n    NativeExtensionRequest,\n    NativeExtensionRequestBody,\n} from \"./NativeRequest\";\nimport { createNativeAuthError } from \"../../error/NativeAuthError\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../../error/BrowserAuthError\";\nimport { BrowserConfiguration } from \"../../config/Configuration\";\nimport { createNewGuid } from \"../../crypto/BrowserCrypto\";\n\ntype ResponseResolvers<T> = {\n    resolve: (value: T | PromiseLike<T>) => void;\n    reject: (\n        value: AuthError | Error | PromiseLike<Error> | PromiseLike<AuthError>\n    ) => void;\n};\n\nexport class NativeMessageHandler {\n    private extensionId: string | undefined;\n    private extensionVersion: string | undefined;\n    private logger: Logger;\n    private readonly handshakeTimeoutMs: number;\n    private timeoutId: number | undefined;\n    private resolvers: Map<string, ResponseResolvers<object>>;\n    private handshakeResolvers: Map<string, ResponseResolvers<void>>;\n    private messageChannel: MessageChannel;\n    private readonly windowListener: (event: MessageEvent) => void;\n    private readonly performanceClient: IPerformanceClient;\n    private readonly handshakeEvent: InProgressPerformanceEvent;\n\n    constructor(\n        logger: Logger,\n        handshakeTimeoutMs: number,\n        performanceClient: IPerformanceClient,\n        extensionId?: string\n    ) {\n        this.logger = logger;\n        this.handshakeTimeoutMs = handshakeTimeoutMs;\n        this.extensionId = extensionId;\n        this.resolvers = new Map(); // Used for non-handshake messages\n        this.handshakeResolvers = new Map(); // Used for handshake messages\n        this.messageChannel = new MessageChannel();\n        this.windowListener = this.onWindowMessage.bind(this); // Window event callback doesn't have access to 'this' unless it's bound\n        this.performanceClient = performanceClient;\n        this.handshakeEvent = performanceClient.startMeasurement(\n            PerformanceEvents.NativeMessageHandlerHandshake\n        );\n    }\n\n    /**\n     * Sends a given message to the extension and resolves with the extension response\n     * @param body\n     */\n    async sendMessage(body: NativeExtensionRequestBody): Promise<object> {\n        this.logger.trace(\"NativeMessageHandler - sendMessage called.\");\n        const req: NativeExtensionRequest = {\n            channel: NativeConstants.CHANNEL_ID,\n            extensionId: this.extensionId,\n            responseId: createNewGuid(),\n            body: body,\n        };\n\n        this.logger.trace(\n            \"NativeMessageHandler - Sending request to browser extension\"\n        );\n        this.logger.tracePii(\n            `NativeMessageHandler - Sending request to browser extension: ${JSON.stringify(\n                req\n            )}`\n        );\n        this.messageChannel.port1.postMessage(req);\n\n        return new Promise((resolve, reject) => {\n            this.resolvers.set(req.responseId, { resolve, reject });\n        });\n    }\n\n    /**\n     * Returns an instance of the MessageHandler that has successfully established a connection with an extension\n     * @param {Logger} logger\n     * @param {number} handshakeTimeoutMs\n     * @param {IPerformanceClient} performanceClient\n     * @param {ICrypto} crypto\n     */\n    static async createProvider(\n        logger: Logger,\n        handshakeTimeoutMs: number,\n        performanceClient: IPerformanceClient\n    ): Promise<NativeMessageHandler> {\n        logger.trace(\"NativeMessageHandler - createProvider called.\");\n        try {\n            const preferredProvider = new NativeMessageHandler(\n                logger,\n                handshakeTimeoutMs,\n                performanceClient,\n                NativeConstants.PREFERRED_EXTENSION_ID\n            );\n            await preferredProvider.sendHandshakeRequest();\n            return preferredProvider;\n        } catch (e) {\n            // If preferred extension fails for whatever reason, fallback to using any installed extension\n            const backupProvider = new NativeMessageHandler(\n                logger,\n                handshakeTimeoutMs,\n                performanceClient\n            );\n            await backupProvider.sendHandshakeRequest();\n            return backupProvider;\n        }\n    }\n\n    /**\n     * Send handshake request helper.\n     */\n    private async sendHandshakeRequest(): Promise<void> {\n        this.logger.trace(\n            \"NativeMessageHandler - sendHandshakeRequest called.\"\n        );\n        // Register this event listener before sending handshake\n        window.addEventListener(\"message\", this.windowListener, false); // false is important, because content script message processing should work first\n\n        const req: NativeExtensionRequest = {\n            channel: NativeConstants.CHANNEL_ID,\n            extensionId: this.extensionId,\n            responseId: createNewGuid(),\n            body: {\n                method: NativeExtensionMethod.HandshakeRequest,\n            },\n        };\n        this.handshakeEvent.add({\n            extensionId: this.extensionId,\n            extensionHandshakeTimeoutMs: this.handshakeTimeoutMs,\n        });\n\n        this.messageChannel.port1.onmessage = (event) => {\n            this.onChannelMessage(event);\n        };\n\n        window.postMessage(req, window.origin, [this.messageChannel.port2]);\n\n        return new Promise((resolve, reject) => {\n            this.handshakeResolvers.set(req.responseId, { resolve, reject });\n            this.timeoutId = window.setTimeout(() => {\n                /*\n                 * Throw an error if neither HandshakeResponse nor original Handshake request are received in a reasonable timeframe.\n                 * This typically suggests an event handler stopped propagation of the Handshake request but did not respond to it on the MessageChannel port\n                 */\n                window.removeEventListener(\n                    \"message\",\n                    this.windowListener,\n                    false\n                );\n                this.messageChannel.port1.close();\n                this.messageChannel.port2.close();\n                this.handshakeEvent.end({\n                    extensionHandshakeTimedOut: true,\n                    success: false,\n                });\n                reject(\n                    createBrowserAuthError(\n                        BrowserAuthErrorCodes.nativeHandshakeTimeout\n                    )\n                );\n                this.handshakeResolvers.delete(req.responseId);\n            }, this.handshakeTimeoutMs); // Use a reasonable timeout in milliseconds here\n        });\n    }\n\n    /**\n     * Invoked when a message is posted to the window. If a handshake request is received it means the extension is not installed.\n     * @param event\n     */\n    private onWindowMessage(event: MessageEvent): void {\n        this.logger.trace(\"NativeMessageHandler - onWindowMessage called\");\n        // We only accept messages from ourselves\n        if (event.source !== window) {\n            return;\n        }\n\n        const request = event.data;\n\n        if (\n            !request.channel ||\n            request.channel !== NativeConstants.CHANNEL_ID\n        ) {\n            return;\n        }\n\n        if (request.extensionId && request.extensionId !== this.extensionId) {\n            return;\n        }\n\n        if (request.body.method === NativeExtensionMethod.HandshakeRequest) {\n            const handshakeResolver = this.handshakeResolvers.get(\n                request.responseId\n            );\n            /*\n             * Filter out responses with no matched resolvers sooner to keep channel ports open while waiting for\n             * the proper response.\n             */\n            if (!handshakeResolver) {\n                this.logger.trace(\n                    `NativeMessageHandler.onWindowMessage - resolver can't be found for request ${request.responseId}`\n                );\n                return;\n            }\n\n            // If we receive this message back it means no extension intercepted the request, meaning no extension supporting handshake protocol is installed\n            this.logger.verbose(\n                request.extensionId\n                    ? `Extension with id: ${request.extensionId} not installed`\n                    : \"No extension installed\"\n            );\n            clearTimeout(this.timeoutId);\n            this.messageChannel.port1.close();\n            this.messageChannel.port2.close();\n            window.removeEventListener(\"message\", this.windowListener, false);\n            this.handshakeEvent.end({\n                success: false,\n                extensionInstalled: false,\n            });\n            handshakeResolver.reject(\n                createBrowserAuthError(\n                    BrowserAuthErrorCodes.nativeExtensionNotInstalled\n                )\n            );\n        }\n    }\n\n    /**\n     * Invoked when a message is received from the extension on the MessageChannel port\n     * @param event\n     */\n    private onChannelMessage(event: MessageEvent): void {\n        this.logger.trace(\"NativeMessageHandler - onChannelMessage called.\");\n        const request = event.data;\n\n        const resolver = this.resolvers.get(request.responseId);\n        const handshakeResolver = this.handshakeResolvers.get(\n            request.responseId\n        );\n\n        try {\n            const method = request.body.method;\n\n            if (method === NativeExtensionMethod.Response) {\n                if (!resolver) {\n                    return;\n                }\n                const response = request.body.response;\n                this.logger.trace(\n                    \"NativeMessageHandler - Received response from browser extension\"\n                );\n                this.logger.tracePii(\n                    `NativeMessageHandler - Received response from browser extension: ${JSON.stringify(\n                        response\n                    )}`\n                );\n                if (response.status !== \"Success\") {\n                    resolver.reject(\n                        createNativeAuthError(\n                            response.code,\n                            response.description,\n                            response.ext\n                        )\n                    );\n                } else if (response.result) {\n                    if (\n                        response.result[\"code\"] &&\n                        response.result[\"description\"]\n                    ) {\n                        resolver.reject(\n                            createNativeAuthError(\n                                response.result[\"code\"],\n                                response.result[\"description\"],\n                                response.result[\"ext\"]\n                            )\n                        );\n                    } else {\n                        resolver.resolve(response.result);\n                    }\n                } else {\n                    throw createAuthError(\n                        AuthErrorCodes.unexpectedError,\n                        \"Event does not contain result.\"\n                    );\n                }\n                this.resolvers.delete(request.responseId);\n            } else if (method === NativeExtensionMethod.HandshakeResponse) {\n                if (!handshakeResolver) {\n                    this.logger.trace(\n                        `NativeMessageHandler.onChannelMessage - resolver can't be found for request ${request.responseId}`\n                    );\n                    return;\n                }\n                clearTimeout(this.timeoutId); // Clear setTimeout\n                window.removeEventListener(\n                    \"message\",\n                    this.windowListener,\n                    false\n                ); // Remove 'No extension' listener\n                this.extensionId = request.extensionId;\n                this.extensionVersion = request.body.version;\n                this.logger.verbose(\n                    `NativeMessageHandler - Received HandshakeResponse from extension: ${this.extensionId}`\n                );\n                this.handshakeEvent.end({\n                    extensionInstalled: true,\n                    success: true,\n                });\n\n                handshakeResolver.resolve();\n                this.handshakeResolvers.delete(request.responseId);\n            }\n            // Do nothing if method is not Response or HandshakeResponse\n        } catch (err) {\n            this.logger.error(\"Error parsing response from WAM Extension\");\n            this.logger.errorPii(\n                `Error parsing response from WAM Extension: ${err as string}`\n            );\n            this.logger.errorPii(`Unable to parse ${event}`);\n\n            if (resolver) {\n                resolver.reject(err as AuthError);\n            } else if (handshakeResolver) {\n                handshakeResolver.reject(err as AuthError);\n            }\n        }\n    }\n\n    /**\n     * Returns the Id for the browser extension this handler is communicating with\n     * @returns\n     */\n    getExtensionId(): string | undefined {\n        return this.extensionId;\n    }\n\n    /**\n     * Returns the version for the browser extension this handler is communicating with\n     * @returns\n     */\n    getExtensionVersion(): string | undefined {\n        return this.extensionVersion;\n    }\n\n    /**\n     * Returns boolean indicating whether or not the request should attempt to use native broker\n     * @param logger\n     * @param config\n     * @param nativeExtensionProvider\n     * @param authenticationScheme\n     */\n    static isNativeAvailable(\n        config: BrowserConfiguration,\n        logger: Logger,\n        nativeExtensionProvider?: NativeMessageHandler,\n        authenticationScheme?: AuthenticationScheme\n    ): boolean {\n        logger.trace(\"isNativeAvailable called\");\n        if (!config.system.allowNativeBroker) {\n            logger.trace(\n                \"isNativeAvailable: allowNativeBroker is not enabled, returning false\"\n            );\n            // Developer disabled WAM\n            return false;\n        }\n\n        if (!nativeExtensionProvider) {\n            logger.trace(\n                \"isNativeAvailable: WAM extension provider is not initialized, returning false\"\n            );\n            // Extension is not available\n            return false;\n        }\n\n        if (authenticationScheme) {\n            switch (authenticationScheme) {\n                case AuthenticationScheme.BEARER:\n                case AuthenticationScheme.POP:\n                    logger.trace(\n                        \"isNativeAvailable: authenticationScheme is supported, returning true\"\n                    );\n                    return true;\n                default:\n                    logger.trace(\n                        \"isNativeAvailable: authenticationScheme is not supported, returning false\"\n                    );\n                    return false;\n            }\n        }\n\n        return true;\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    AuthorizationCodePayload,\n    CommonAuthorizationCodeRequest,\n    AuthorizationCodeClient,\n    CcsCredential,\n    Logger,\n    ServerError,\n    IPerformanceClient,\n    PerformanceEvents,\n    invokeAsync,\n    CcsCredentialType,\n    ServerAuthorizationCodeResponse,\n} from \"@azure/msal-common\";\n\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\n\n/**\n * Abstract class which defines operations for a browser interaction handling class.\n */\nexport class InteractionHandler {\n    protected authModule: AuthorizationCodeClient;\n    protected browserStorage: BrowserCacheManager;\n    protected authCodeRequest: CommonAuthorizationCodeRequest;\n    protected logger: Logger;\n    protected performanceClient: IPerformanceClient;\n\n    constructor(\n        authCodeModule: AuthorizationCodeClient,\n        storageImpl: BrowserCacheManager,\n        authCodeRequest: CommonAuthorizationCodeRequest,\n        logger: Logger,\n        performanceClient: IPerformanceClient\n    ) {\n        this.authModule = authCodeModule;\n        this.browserStorage = storageImpl;\n        this.authCodeRequest = authCodeRequest;\n        this.logger = logger;\n        this.performanceClient = performanceClient;\n    }\n\n    /**\n     * Function to handle response parameters from hash.\n     * @param locationHash\n     */\n    async handleCodeResponse(\n        response: ServerAuthorizationCodeResponse,\n        request: AuthorizationUrlRequest\n    ): Promise<AuthenticationResult> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.HandleCodeResponse,\n            request.correlationId\n        );\n\n        let authCodeResponse;\n        try {\n            authCodeResponse = this.authModule.handleFragmentResponse(\n                response,\n                request.state\n            );\n        } catch (e) {\n            if (\n                e instanceof ServerError &&\n                e.subError === BrowserAuthErrorCodes.userCancelled\n            ) {\n                // Translate server error caused by user closing native prompt to corresponding first class MSAL error\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.userCancelled\n                );\n            } else {\n                throw e;\n            }\n        }\n\n        return invokeAsync(\n            this.handleCodeResponseFromServer.bind(this),\n            PerformanceEvents.HandleCodeResponseFromServer,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(authCodeResponse, request);\n    }\n\n    /**\n     * Process auth code response from AAD\n     * @param authCodeResponse\n     * @param state\n     * @param authority\n     * @param networkModule\n     * @returns\n     */\n    async handleCodeResponseFromServer(\n        authCodeResponse: AuthorizationCodePayload,\n        request: AuthorizationUrlRequest,\n        validateNonce: boolean = true\n    ): Promise<AuthenticationResult> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.HandleCodeResponseFromServer,\n            request.correlationId\n        );\n        this.logger.trace(\n            \"InteractionHandler.handleCodeResponseFromServer called\"\n        );\n\n        // Assign code to request\n        this.authCodeRequest.code = authCodeResponse.code;\n\n        // Check for new cloud instance\n        if (authCodeResponse.cloud_instance_host_name) {\n            await invokeAsync(\n                this.authModule.updateAuthority.bind(this.authModule),\n                PerformanceEvents.UpdateTokenEndpointAuthority,\n                this.logger,\n                this.performanceClient,\n                request.correlationId\n            )(authCodeResponse.cloud_instance_host_name, request.correlationId);\n        }\n\n        // Nonce validation not needed when redirect not involved (e.g. hybrid spa, renewing token via rt)\n        if (validateNonce) {\n            // TODO: Assigning \"response nonce\" to \"request nonce\" is confusing. Refactor the function doing validation to accept request nonce directly\n            authCodeResponse.nonce = request.nonce || undefined;\n        }\n\n        authCodeResponse.state = request.state;\n\n        // Add CCS parameters if available\n        if (authCodeResponse.client_info) {\n            this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n        } else {\n            const ccsCred = this.createCcsCredentials(request);\n            if (ccsCred) {\n                this.authCodeRequest.ccsCredential = ccsCred;\n            }\n        }\n\n        // Acquire token with retrieved code.\n        const tokenResponse = (await invokeAsync(\n            this.authModule.acquireToken.bind(this.authModule),\n            PerformanceEvents.AuthClientAcquireToken,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(this.authCodeRequest, authCodeResponse)) as AuthenticationResult;\n        return tokenResponse;\n    }\n\n    /**\n     * Build ccs creds if available\n     */\n    protected createCcsCredentials(\n        request: AuthorizationUrlRequest\n    ): CcsCredential | null {\n        if (request.account) {\n            return {\n                credential: request.account.homeAccountId,\n                type: CcsCredentialType.HOME_ACCOUNT_ID,\n            };\n        } else if (request.loginHint) {\n            return {\n                credential: request.loginHint,\n                type: CcsCredentialType.UPN,\n            };\n        }\n\n        return null;\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    ICrypto,\n    Logger,\n    ServerAuthorizationCodeResponse,\n    UrlUtils,\n} from \"@azure/msal-common\";\nimport {\n    BrowserAuthErrorCodes,\n    createBrowserAuthError,\n} from \"../error/BrowserAuthError\";\nimport { extractBrowserRequestState } from \"../utils/BrowserProtocolUtils\";\nimport { InteractionType } from \"../utils/BrowserConstants\";\n\nexport function deserializeResponse(\n    responseString: string,\n    responseLocation: string,\n    logger: Logger\n): ServerAuthorizationCodeResponse {\n    // Deserialize hash fragment response parameters.\n    const serverParams = UrlUtils.getDeserializedResponse(responseString);\n    if (!serverParams) {\n        if (!UrlUtils.stripLeadingHashOrQuery(responseString)) {\n            // Hash or Query string is empty\n            logger.error(\n                `The request has returned to the redirectUri but a ${responseLocation} is not present. It's likely that the ${responseLocation} has been removed or the page has been redirected by code running on the redirectUri page.`\n            );\n            throw createBrowserAuthError(BrowserAuthErrorCodes.hashEmptyError);\n        } else {\n            logger.error(\n                `A ${responseLocation} is present in the iframe but it does not contain known properties. It's likely that the ${responseLocation} has been replaced by code running on the redirectUri page.`\n            );\n            logger.errorPii(\n                `The ${responseLocation} detected is: ${responseString}`\n            );\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.hashDoesNotContainKnownProperties\n            );\n        }\n    }\n    return serverParams;\n}\n\n/**\n * Returns the interaction type that the response object belongs to\n */\nexport function validateInteractionType(\n    response: ServerAuthorizationCodeResponse,\n    browserCrypto: ICrypto,\n    interactionType: InteractionType\n): void {\n    if (!response.state) {\n        throw createBrowserAuthError(BrowserAuthErrorCodes.noStateInHash);\n    }\n\n    const platformStateObj = extractBrowserRequestState(\n        browserCrypto,\n        response.state\n    );\n    if (!platformStateObj) {\n        throw createBrowserAuthError(BrowserAuthErrorCodes.unableToParseState);\n    }\n\n    if (platformStateObj.interactionType !== interactionType) {\n        throw createBrowserAuthError(\n            BrowserAuthErrorCodes.stateInteractionTypeMismatch\n        );\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    CommonAuthorizationCodeRequest,\n    AuthorizationCodeClient,\n    ThrottlingUtils,\n    CommonEndSessionRequest,\n    UrlString,\n    AuthError,\n    OIDC_DEFAULT_SCOPES,\n    ProtocolUtils,\n    PerformanceEvents,\n    IPerformanceClient,\n    Logger,\n    ICrypto,\n    ProtocolMode,\n    ServerResponseType,\n    invokeAsync,\n    invoke,\n} from \"@azure/msal-common\";\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { EventType } from \"../event/EventType\";\nimport {\n    InteractionType,\n    ApiId,\n    BrowserConstants,\n} from \"../utils/BrowserConstants\";\nimport { EndSessionPopupRequest } from \"../request/EndSessionPopupRequest\";\nimport { NavigationOptions } from \"../navigation/NavigationOptions\";\nimport * as BrowserUtils from \"../utils/BrowserUtils\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { NativeInteractionClient } from \"./NativeInteractionClient\";\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { InteractionHandler } from \"../interaction_handler/InteractionHandler\";\nimport { PopupWindowAttributes } from \"../request/PopupWindowAttributes\";\nimport { EventError } from \"../event/EventMessage\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport * as ResponseHandler from \"../response/ResponseHandler\";\n\nexport type PopupParams = {\n    popup?: Window | null;\n    popupName: string;\n    popupWindowAttributes: PopupWindowAttributes;\n};\n\nexport class PopupClient extends StandardInteractionClient {\n    private currentWindow: Window | undefined;\n    protected nativeStorage: BrowserCacheManager;\n\n    constructor(\n        config: BrowserConfiguration,\n        storageImpl: BrowserCacheManager,\n        browserCrypto: ICrypto,\n        logger: Logger,\n        eventHandler: EventHandler,\n        navigationClient: INavigationClient,\n        performanceClient: IPerformanceClient,\n        nativeStorageImpl: BrowserCacheManager,\n        nativeMessageHandler?: NativeMessageHandler,\n        correlationId?: string\n    ) {\n        super(\n            config,\n            storageImpl,\n            browserCrypto,\n            logger,\n            eventHandler,\n            navigationClient,\n            performanceClient,\n            nativeMessageHandler,\n            correlationId\n        );\n        // Properly sets this reference for the unload event.\n        this.unloadWindow = this.unloadWindow.bind(this);\n        this.nativeStorage = nativeStorageImpl;\n    }\n\n    /**\n     * Acquires tokens by opening a popup window to the /authorize endpoint of the authority\n     * @param request\n     */\n    acquireToken(request: PopupRequest): Promise<AuthenticationResult> {\n        try {\n            const popupName = this.generatePopupName(\n                request.scopes || OIDC_DEFAULT_SCOPES,\n                request.authority || this.config.auth.authority\n            );\n            const popupWindowAttributes = request.popupWindowAttributes || {};\n\n            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n            if (this.config.system.asyncPopups) {\n                this.logger.verbose(\"asyncPopups set to true, acquiring token\");\n                // Passes on popup position and dimensions if in request\n                return this.acquireTokenPopupAsync(\n                    request,\n                    popupName,\n                    popupWindowAttributes\n                );\n            } else {\n                // asyncPopups flag is set to false. Opens popup before acquiring token.\n                this.logger.verbose(\n                    \"asyncPopup set to false, opening popup before acquiring token\"\n                );\n                const popup = this.openSizedPopup(\n                    \"about:blank\",\n                    popupName,\n                    popupWindowAttributes\n                );\n                return this.acquireTokenPopupAsync(\n                    request,\n                    popupName,\n                    popupWindowAttributes,\n                    popup\n                );\n            }\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    }\n\n    /**\n     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\n     * @param logoutRequest\n     */\n    logout(logoutRequest?: EndSessionPopupRequest): Promise<void> {\n        try {\n            this.logger.verbose(\"logoutPopup called\");\n            const validLogoutRequest =\n                this.initializeLogoutRequest(logoutRequest);\n\n            const popupName = this.generateLogoutPopupName(validLogoutRequest);\n            const authority = logoutRequest && logoutRequest.authority;\n            const mainWindowRedirectUri =\n                logoutRequest && logoutRequest.mainWindowRedirectUri;\n            const popupWindowAttributes =\n                logoutRequest?.popupWindowAttributes || {};\n\n            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n            if (this.config.system.asyncPopups) {\n                this.logger.verbose(\"asyncPopups set to true\");\n                // Passes on popup position and dimensions if in request\n                return this.logoutPopupAsync(\n                    validLogoutRequest,\n                    popupName,\n                    popupWindowAttributes,\n                    authority,\n                    undefined,\n                    mainWindowRedirectUri\n                );\n            } else {\n                // asyncPopups flag is set to false. Opens popup before logging out.\n                this.logger.verbose(\"asyncPopup set to false, opening popup\");\n                const popup = this.openSizedPopup(\n                    \"about:blank\",\n                    popupName,\n                    popupWindowAttributes\n                );\n                return this.logoutPopupAsync(\n                    validLogoutRequest,\n                    popupName,\n                    popupWindowAttributes,\n                    authority,\n                    popup,\n                    mainWindowRedirectUri\n                );\n            }\n        } catch (e) {\n            // Since this function is synchronous we need to reject\n            return Promise.reject(e);\n        }\n    }\n\n    /**\n     * Helper which obtains an access_token for your API via opening a popup window in the user's browser\n     * @param validRequest\n     * @param popupName\n     * @param popup\n     * @param popupWindowAttributes\n     *\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    protected async acquireTokenPopupAsync(\n        request: PopupRequest,\n        popupName: string,\n        popupWindowAttributes: PopupWindowAttributes,\n        popup?: Window | null\n    ): Promise<AuthenticationResult> {\n        this.logger.verbose(\"acquireTokenPopupAsync called\");\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\n            ApiId.acquireTokenPopup\n        );\n\n        const validRequest = await invokeAsync(\n            this.initializeAuthorizationRequest.bind(this),\n            PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(request, InteractionType.Popup);\n\n        BrowserUtils.preconnect(validRequest.authority);\n\n        try {\n            // Create auth code request and generate PKCE params\n            const authCodeRequest: CommonAuthorizationCodeRequest =\n                await invokeAsync(\n                    this.initializeAuthorizationCodeRequest.bind(this),\n                    PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest,\n                    this.logger,\n                    this.performanceClient,\n                    this.correlationId\n                )(validRequest);\n\n            // Initialize the client\n            const authClient: AuthorizationCodeClient = await invokeAsync(\n                this.createAuthCodeClient.bind(this),\n                PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\n                this.logger,\n                this.performanceClient,\n                this.correlationId\n            )(\n                serverTelemetryManager,\n                validRequest.authority,\n                validRequest.azureCloudOptions,\n                validRequest.account\n            );\n\n            const isNativeBroker = NativeMessageHandler.isNativeAvailable(\n                this.config,\n                this.logger,\n                this.nativeMessageHandler,\n                request.authenticationScheme\n            );\n            // Start measurement for server calls with native brokering enabled\n            let fetchNativeAccountIdMeasurement;\n            if (isNativeBroker) {\n                fetchNativeAccountIdMeasurement =\n                    this.performanceClient.startMeasurement(\n                        PerformanceEvents.FetchAccountIdWithNativeBroker,\n                        request.correlationId\n                    );\n            }\n\n            // Create acquire token url.\n            const navigateUrl = await authClient.getAuthCodeUrl({\n                ...validRequest,\n                nativeBroker: isNativeBroker,\n            });\n\n            // Create popup interaction handler.\n            const interactionHandler = new InteractionHandler(\n                authClient,\n                this.browserStorage,\n                authCodeRequest,\n                this.logger,\n                this.performanceClient\n            );\n\n            // Show the UI once the url has been created. Get the window handle for the popup.\n            const popupParameters: PopupParams = {\n                popup,\n                popupName,\n                popupWindowAttributes,\n            };\n            const popupWindow: Window = this.initiateAuthRequest(\n                navigateUrl,\n                popupParameters\n            );\n            this.eventHandler.emitEvent(\n                EventType.POPUP_OPENED,\n                InteractionType.Popup,\n                { popupWindow },\n                null\n            );\n\n            // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n            const responseString = await this.monitorPopupForHash(popupWindow);\n\n            const serverParams = invoke(\n                ResponseHandler.deserializeResponse,\n                PerformanceEvents.DeserializeResponse,\n                this.logger,\n                this.performanceClient,\n                this.correlationId\n            )(\n                responseString,\n                this.config.auth.OIDCOptions.serverResponseType,\n                this.logger\n            );\n            // Remove throttle if it exists\n            ThrottlingUtils.removeThrottle(\n                this.browserStorage,\n                this.config.auth.clientId,\n                authCodeRequest\n            );\n\n            if (serverParams.accountId) {\n                this.logger.verbose(\n                    \"Account id found in hash, calling WAM for token\"\n                );\n                // end measurement for server call with native brokering enabled\n                if (fetchNativeAccountIdMeasurement) {\n                    fetchNativeAccountIdMeasurement.end({\n                        success: true,\n                        isNativeBroker: true,\n                    });\n                }\n\n                if (!this.nativeMessageHandler) {\n                    throw createBrowserAuthError(\n                        BrowserAuthErrorCodes.nativeConnectionNotEstablished\n                    );\n                }\n                const nativeInteractionClient = new NativeInteractionClient(\n                    this.config,\n                    this.browserStorage,\n                    this.browserCrypto,\n                    this.logger,\n                    this.eventHandler,\n                    this.navigationClient,\n                    ApiId.acquireTokenPopup,\n                    this.performanceClient,\n                    this.nativeMessageHandler,\n                    serverParams.accountId,\n                    this.nativeStorage,\n                    validRequest.correlationId\n                );\n                const { userRequestState } = ProtocolUtils.parseRequestState(\n                    this.browserCrypto,\n                    validRequest.state\n                );\n                return await nativeInteractionClient.acquireToken({\n                    ...validRequest,\n                    state: userRequestState,\n                    prompt: undefined, // Server should handle the prompt, ideally native broker can do this part silently\n                });\n            }\n\n            // Handle response from hash string.\n            const result = await interactionHandler.handleCodeResponse(\n                serverParams,\n                validRequest\n            );\n\n            return result;\n        } catch (e) {\n            if (popup) {\n                // Close the synchronous popup if an error is thrown before the window unload event is registered\n                popup.close();\n            }\n\n            if (e instanceof AuthError) {\n                (e as AuthError).setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            throw e;\n        }\n    }\n\n    /**\n     *\n     * @param validRequest\n     * @param popupName\n     * @param requestAuthority\n     * @param popup\n     * @param mainWindowRedirectUri\n     * @param popupWindowAttributes\n     */\n    protected async logoutPopupAsync(\n        validRequest: CommonEndSessionRequest,\n        popupName: string,\n        popupWindowAttributes: PopupWindowAttributes,\n        requestAuthority?: string,\n        popup?: Window | null,\n        mainWindowRedirectUri?: string\n    ): Promise<void> {\n        this.logger.verbose(\"logoutPopupAsync called\");\n        this.eventHandler.emitEvent(\n            EventType.LOGOUT_START,\n            InteractionType.Popup,\n            validRequest\n        );\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\n            ApiId.logoutPopup\n        );\n\n        try {\n            // Clear cache on logout\n            await this.clearCacheOnLogout(validRequest.account);\n\n            // Initialize the client\n            const authClient = await invokeAsync(\n                this.createAuthCodeClient.bind(this),\n                PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\n                this.logger,\n                this.performanceClient,\n                this.correlationId\n            )(\n                serverTelemetryManager,\n                requestAuthority,\n                undefined, // AzureCloudOptions\n                validRequest.account || undefined\n            );\n\n            try {\n                authClient.authority.endSessionEndpoint;\n            } catch {\n                if (\n                    validRequest.account?.homeAccountId &&\n                    validRequest.postLogoutRedirectUri &&\n                    authClient.authority.protocolMode === ProtocolMode.OIDC\n                ) {\n                    void this.browserStorage.removeAccount(\n                        validRequest.account?.homeAccountId\n                    );\n\n                    this.eventHandler.emitEvent(\n                        EventType.LOGOUT_SUCCESS,\n                        InteractionType.Popup,\n                        validRequest\n                    );\n\n                    if (mainWindowRedirectUri) {\n                        const navigationOptions: NavigationOptions = {\n                            apiId: ApiId.logoutPopup,\n                            timeout:\n                                this.config.system.redirectNavigationTimeout,\n                            noHistory: false,\n                        };\n                        const absoluteUrl = UrlString.getAbsoluteUrl(\n                            mainWindowRedirectUri,\n                            BrowserUtils.getCurrentUri()\n                        );\n                        await this.navigationClient.navigateInternal(\n                            absoluteUrl,\n                            navigationOptions\n                        );\n                    }\n\n                    if (popup) {\n                        popup.close();\n                    }\n\n                    return;\n                }\n            }\n\n            // Create logout string and navigate user window to logout.\n            const logoutUri: string = authClient.getLogoutUri(validRequest);\n\n            this.eventHandler.emitEvent(\n                EventType.LOGOUT_SUCCESS,\n                InteractionType.Popup,\n                validRequest\n            );\n\n            // Open the popup window to requestUrl.\n            const popupWindow = this.openPopup(logoutUri, {\n                popupName,\n                popupWindowAttributes,\n                popup,\n            });\n            this.eventHandler.emitEvent(\n                EventType.POPUP_OPENED,\n                InteractionType.Popup,\n                { popupWindow },\n                null\n            );\n\n            await this.monitorPopupForHash(popupWindow).catch(() => {\n                // Swallow any errors related to monitoring the window. Server logout is best effort\n            });\n\n            if (mainWindowRedirectUri) {\n                const navigationOptions: NavigationOptions = {\n                    apiId: ApiId.logoutPopup,\n                    timeout: this.config.system.redirectNavigationTimeout,\n                    noHistory: false,\n                };\n                const absoluteUrl = UrlString.getAbsoluteUrl(\n                    mainWindowRedirectUri,\n                    BrowserUtils.getCurrentUri()\n                );\n\n                this.logger.verbose(\n                    \"Redirecting main window to url specified in the request\"\n                );\n                this.logger.verbosePii(\n                    `Redirecting main window to: ${absoluteUrl}`\n                );\n                await this.navigationClient.navigateInternal(\n                    absoluteUrl,\n                    navigationOptions\n                );\n            } else {\n                this.logger.verbose(\"No main window navigation requested\");\n            }\n        } catch (e) {\n            if (popup) {\n                // Close the synchronous popup if an error is thrown before the window unload event is registered\n                popup.close();\n            }\n\n            if (e instanceof AuthError) {\n                (e as AuthError).setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            this.browserStorage.setInteractionInProgress(false);\n            this.eventHandler.emitEvent(\n                EventType.LOGOUT_FAILURE,\n                InteractionType.Popup,\n                null,\n                e as EventError\n            );\n            this.eventHandler.emitEvent(\n                EventType.LOGOUT_END,\n                InteractionType.Popup\n            );\n            throw e;\n        }\n\n        this.eventHandler.emitEvent(\n            EventType.LOGOUT_END,\n            InteractionType.Popup\n        );\n    }\n\n    /**\n     * Opens a popup window with given request Url.\n     * @param requestUrl\n     */\n    initiateAuthRequest(requestUrl: string, params: PopupParams): Window {\n        // Check that request url is not empty.\n        if (requestUrl) {\n            this.logger.infoPii(`Navigate to: ${requestUrl}`);\n            // Open the popup window to requestUrl.\n            return this.openPopup(requestUrl, params);\n        } else {\n            // Throw error if request URL is empty.\n            this.logger.error(\"Navigate url is empty\");\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.emptyNavigateUri\n            );\n        }\n    }\n\n    /**\n     * Monitors a window until it loads a url with the same origin.\n     * @param popupWindow - window that is being monitored\n     * @param timeout - timeout for processing hash once popup is redirected back to application\n     */\n    monitorPopupForHash(popupWindow: Window): Promise<string> {\n        return new Promise<string>((resolve, reject) => {\n            this.logger.verbose(\n                \"PopupHandler.monitorPopupForHash - polling started\"\n            );\n\n            const intervalId = setInterval(() => {\n                // Window is closed\n                if (popupWindow.closed) {\n                    this.logger.error(\n                        \"PopupHandler.monitorPopupForHash - window closed\"\n                    );\n                    clearInterval(intervalId);\n                    reject(\n                        createBrowserAuthError(\n                            BrowserAuthErrorCodes.userCancelled\n                        )\n                    );\n                    return;\n                }\n\n                let href = \"\";\n                try {\n                    /*\n                     * Will throw if cross origin,\n                     * which should be caught and ignored\n                     * since we need the interval to keep running while on STS UI.\n                     */\n                    href = popupWindow.location.href;\n                } catch (e) {}\n\n                // Don't process blank pages or cross domain\n                if (!href || href === \"about:blank\") {\n                    return;\n                }\n                clearInterval(intervalId);\n\n                let responseString = \"\";\n                const responseType =\n                    this.config.auth.OIDCOptions.serverResponseType;\n                if (popupWindow) {\n                    if (responseType === ServerResponseType.QUERY) {\n                        responseString = popupWindow.location.search;\n                    } else {\n                        responseString = popupWindow.location.hash;\n                    }\n                }\n\n                this.logger.verbose(\n                    \"PopupHandler.monitorPopupForHash - popup window is on same origin as caller\"\n                );\n\n                resolve(responseString);\n            }, this.config.system.pollIntervalMilliseconds);\n        }).finally(() => {\n            this.cleanPopup(popupWindow);\n        });\n    }\n\n    /**\n     * @hidden\n     *\n     * Configures popup window for login.\n     *\n     * @param urlNavigate\n     * @param title\n     * @param popUpWidth\n     * @param popUpHeight\n     * @param popupWindowAttributes\n     * @ignore\n     * @hidden\n     */\n    openPopup(urlNavigate: string, popupParams: PopupParams): Window {\n        try {\n            let popupWindow;\n            // Popup window passed in, setting url to navigate to\n            if (popupParams.popup) {\n                popupWindow = popupParams.popup;\n                this.logger.verbosePii(\n                    `Navigating popup window to: ${urlNavigate}`\n                );\n                popupWindow.location.assign(urlNavigate);\n            } else if (typeof popupParams.popup === \"undefined\") {\n                // Popup will be undefined if it was not passed in\n                this.logger.verbosePii(\n                    `Opening popup window to: ${urlNavigate}`\n                );\n                popupWindow = this.openSizedPopup(\n                    urlNavigate,\n                    popupParams.popupName,\n                    popupParams.popupWindowAttributes\n                );\n            }\n\n            // Popup will be null if popups are blocked\n            if (!popupWindow) {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.emptyWindowError\n                );\n            }\n            if (popupWindow.focus) {\n                popupWindow.focus();\n            }\n            this.currentWindow = popupWindow;\n            window.addEventListener(\"beforeunload\", this.unloadWindow);\n\n            return popupWindow;\n        } catch (e) {\n            this.logger.error(\n                \"error opening popup \" + (e as AuthError).message\n            );\n            this.browserStorage.setInteractionInProgress(false);\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.popupWindowError\n            );\n        }\n    }\n\n    /**\n     * Helper function to set popup window dimensions and position\n     * @param urlNavigate\n     * @param popupName\n     * @param popupWindowAttributes\n     * @returns\n     */\n    openSizedPopup(\n        urlNavigate: string,\n        popupName: string,\n        popupWindowAttributes: PopupWindowAttributes\n    ): Window | null {\n        /**\n         * adding winLeft and winTop to account for dual monitor\n         * using screenLeft and screenTop for IE8 and earlier\n         */\n        const winLeft = window.screenLeft ? window.screenLeft : window.screenX;\n        const winTop = window.screenTop ? window.screenTop : window.screenY;\n        /**\n         * window.innerWidth displays browser window\"s height and width excluding toolbars\n         * using document.documentElement.clientWidth for IE8 and earlier\n         */\n        const winWidth =\n            window.innerWidth ||\n            document.documentElement.clientWidth ||\n            document.body.clientWidth;\n        const winHeight =\n            window.innerHeight ||\n            document.documentElement.clientHeight ||\n            document.body.clientHeight;\n\n        let width = popupWindowAttributes.popupSize?.width;\n        let height = popupWindowAttributes.popupSize?.height;\n        let top = popupWindowAttributes.popupPosition?.top;\n        let left = popupWindowAttributes.popupPosition?.left;\n\n        if (!width || width < 0 || width > winWidth) {\n            this.logger.verbose(\n                \"Default popup window width used. Window width not configured or invalid.\"\n            );\n            width = BrowserConstants.POPUP_WIDTH;\n        }\n\n        if (!height || height < 0 || height > winHeight) {\n            this.logger.verbose(\n                \"Default popup window height used. Window height not configured or invalid.\"\n            );\n            height = BrowserConstants.POPUP_HEIGHT;\n        }\n\n        if (!top || top < 0 || top > winHeight) {\n            this.logger.verbose(\n                \"Default popup window top position used. Window top not configured or invalid.\"\n            );\n            top = Math.max(\n                0,\n                winHeight / 2 - BrowserConstants.POPUP_HEIGHT / 2 + winTop\n            );\n        }\n\n        if (!left || left < 0 || left > winWidth) {\n            this.logger.verbose(\n                \"Default popup window left position used. Window left not configured or invalid.\"\n            );\n            left = Math.max(\n                0,\n                winWidth / 2 - BrowserConstants.POPUP_WIDTH / 2 + winLeft\n            );\n        }\n\n        return window.open(\n            urlNavigate,\n            popupName,\n            `width=${width}, height=${height}, top=${top}, left=${left}, scrollbars=yes`\n        );\n    }\n\n    /**\n     * Event callback to unload main window.\n     */\n    unloadWindow(e: Event): void {\n        this.browserStorage.cleanRequestByInteractionType(\n            InteractionType.Popup\n        );\n        if (this.currentWindow) {\n            this.currentWindow.close();\n        }\n        // Guarantees browser unload will happen, so no other errors will be thrown.\n        e.preventDefault();\n    }\n\n    /**\n     * Closes popup, removes any state vars created during popup calls.\n     * @param popupWindow\n     */\n    cleanPopup(popupWindow?: Window): void {\n        if (popupWindow) {\n            // Close window.\n            popupWindow.close();\n        }\n        // Remove window unload function\n        window.removeEventListener(\"beforeunload\", this.unloadWindow);\n\n        // Interaction is completed - remove interaction status.\n        this.browserStorage.setInteractionInProgress(false);\n    }\n\n    /**\n     * Generates the name for the popup based on the client id and request\n     * @param clientId\n     * @param request\n     */\n    generatePopupName(scopes: Array<string>, authority: string): string {\n        return `${BrowserConstants.POPUP_NAME_PREFIX}.${\n            this.config.auth.clientId\n        }.${scopes.join(\"-\")}.${authority}.${this.correlationId}`;\n    }\n\n    /**\n     * Generates the name for the popup based on the client id and request for logouts\n     * @param clientId\n     * @param request\n     */\n    generateLogoutPopupName(request: CommonEndSessionRequest): string {\n        const homeAccountId = request.account && request.account.homeAccountId;\n        return `${BrowserConstants.POPUP_NAME_PREFIX}.${this.config.auth.clientId}.${homeAccountId}.${this.correlationId}`;\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    AuthorizationCodeClient,\n    CommonAuthorizationCodeRequest,\n    Logger,\n    ServerError,\n    IPerformanceClient,\n    createClientAuthError,\n    ClientAuthErrorCodes,\n    CcsCredential,\n    invokeAsync,\n    PerformanceEvents,\n    ServerAuthorizationCodeResponse,\n} from \"@azure/msal-common\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { ApiId, TemporaryCacheKeys } from \"../utils/BrowserConstants\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { NavigationOptions } from \"../navigation/NavigationOptions\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\n\nexport type RedirectParams = {\n    navigationClient: INavigationClient;\n    redirectTimeout: number;\n    redirectStartPage: string;\n    onRedirectNavigate?: (url: string) => void | boolean;\n};\n\nexport class RedirectHandler {\n    authModule: AuthorizationCodeClient;\n    browserStorage: BrowserCacheManager;\n    authCodeRequest: CommonAuthorizationCodeRequest;\n    logger: Logger;\n    performanceClient: IPerformanceClient;\n\n    constructor(\n        authCodeModule: AuthorizationCodeClient,\n        storageImpl: BrowserCacheManager,\n        authCodeRequest: CommonAuthorizationCodeRequest,\n        logger: Logger,\n        performanceClient: IPerformanceClient\n    ) {\n        this.authModule = authCodeModule;\n        this.browserStorage = storageImpl;\n        this.authCodeRequest = authCodeRequest;\n        this.logger = logger;\n        this.performanceClient = performanceClient;\n    }\n\n    /**\n     * Redirects window to given URL.\n     * @param urlNavigate\n     */\n    async initiateAuthRequest(\n        requestUrl: string,\n        params: RedirectParams\n    ): Promise<void> {\n        this.logger.verbose(\"RedirectHandler.initiateAuthRequest called\");\n        // Navigate if valid URL\n        if (requestUrl) {\n            // Cache start page, returns to this page after redirectUri if navigateToLoginRequestUrl is true\n            if (params.redirectStartPage) {\n                this.logger.verbose(\n                    \"RedirectHandler.initiateAuthRequest: redirectStartPage set, caching start page\"\n                );\n                this.browserStorage.setTemporaryCache(\n                    TemporaryCacheKeys.ORIGIN_URI,\n                    params.redirectStartPage,\n                    true\n                );\n            }\n\n            // Set interaction status in the library.\n            this.browserStorage.setTemporaryCache(\n                TemporaryCacheKeys.CORRELATION_ID,\n                this.authCodeRequest.correlationId,\n                true\n            );\n            this.browserStorage.cacheCodeRequest(this.authCodeRequest);\n            this.logger.infoPii(\n                `RedirectHandler.initiateAuthRequest: Navigate to: ${requestUrl}`\n            );\n            const navigationOptions: NavigationOptions = {\n                apiId: ApiId.acquireTokenRedirect,\n                timeout: params.redirectTimeout,\n                noHistory: false,\n            };\n\n            // If onRedirectNavigate is implemented, invoke it and provide requestUrl\n            if (typeof params.onRedirectNavigate === \"function\") {\n                this.logger.verbose(\n                    \"RedirectHandler.initiateAuthRequest: Invoking onRedirectNavigate callback\"\n                );\n                const navigate = params.onRedirectNavigate(requestUrl);\n\n                // Returning false from onRedirectNavigate will stop navigation\n                if (navigate !== false) {\n                    this.logger.verbose(\n                        \"RedirectHandler.initiateAuthRequest: onRedirectNavigate did not return false, navigating\"\n                    );\n                    await params.navigationClient.navigateExternal(\n                        requestUrl,\n                        navigationOptions\n                    );\n                    return;\n                } else {\n                    this.logger.verbose(\n                        \"RedirectHandler.initiateAuthRequest: onRedirectNavigate returned false, stopping navigation\"\n                    );\n                    return;\n                }\n            } else {\n                // Navigate window to request URL\n                this.logger.verbose(\n                    \"RedirectHandler.initiateAuthRequest: Navigating window to navigate url\"\n                );\n                await params.navigationClient.navigateExternal(\n                    requestUrl,\n                    navigationOptions\n                );\n                return;\n            }\n        } else {\n            // Throw error if request URL is empty.\n            this.logger.info(\n                \"RedirectHandler.initiateAuthRequest: Navigate url is empty\"\n            );\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.emptyNavigateUri\n            );\n        }\n    }\n\n    /**\n     * Handle authorization code response in the window.\n     * @param hash\n     */\n    async handleCodeResponse(\n        response: ServerAuthorizationCodeResponse,\n        state: string\n    ): Promise<AuthenticationResult> {\n        this.logger.verbose(\"RedirectHandler.handleCodeResponse called\");\n\n        // Interaction is completed - remove interaction status.\n        this.browserStorage.setInteractionInProgress(false);\n\n        // Handle code response.\n        const stateKey = this.browserStorage.generateStateKey(state);\n        const requestState = this.browserStorage.getTemporaryCache(stateKey);\n        if (!requestState) {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.stateNotFound,\n                \"Cached State\"\n            );\n        }\n\n        let authCodeResponse;\n        try {\n            authCodeResponse = this.authModule.handleFragmentResponse(\n                response,\n                requestState\n            );\n        } catch (e) {\n            if (\n                e instanceof ServerError &&\n                e.subError === BrowserAuthErrorCodes.userCancelled\n            ) {\n                // Translate server error caused by user closing native prompt to corresponding first class MSAL error\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.userCancelled\n                );\n            } else {\n                throw e;\n            }\n        }\n\n        // Get cached items\n        const nonceKey = this.browserStorage.generateNonceKey(requestState);\n        const cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\n\n        // Assign code to request\n        this.authCodeRequest.code = authCodeResponse.code;\n\n        // Check for new cloud instance\n        if (authCodeResponse.cloud_instance_host_name) {\n            await invokeAsync(\n                this.authModule.updateAuthority.bind(this.authModule),\n                PerformanceEvents.UpdateTokenEndpointAuthority,\n                this.logger,\n                this.performanceClient,\n                this.authCodeRequest.correlationId\n            )(\n                authCodeResponse.cloud_instance_host_name,\n                this.authCodeRequest.correlationId\n            );\n        }\n\n        authCodeResponse.nonce = cachedNonce || undefined;\n        authCodeResponse.state = requestState;\n\n        // Add CCS parameters if available\n        if (authCodeResponse.client_info) {\n            this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n        } else {\n            const cachedCcsCred = this.checkCcsCredentials();\n            if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n            }\n        }\n\n        // Acquire token with retrieved code.\n        const tokenResponse = (await this.authModule.acquireToken(\n            this.authCodeRequest,\n            authCodeResponse\n        )) as AuthenticationResult;\n\n        this.browserStorage.cleanRequestByState(state);\n        return tokenResponse;\n    }\n\n    /**\n     * Looks up ccs creds in the cache\n     */\n    protected checkCcsCredentials(): CcsCredential | null {\n        // Look up ccs credential in temp cache\n        const cachedCcsCred = this.browserStorage.getTemporaryCache(\n            TemporaryCacheKeys.CCS_CREDENTIAL,\n            true\n        );\n        if (cachedCcsCred) {\n            try {\n                return JSON.parse(cachedCcsCred) as CcsCredential;\n            } catch (e) {\n                this.authModule.logger.error(\n                    \"Cache credential could not be parsed\"\n                );\n                this.authModule.logger.errorPii(\n                    `Cache credential could not be parsed: ${cachedCcsCred}`\n                );\n            }\n        }\n        return null;\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    CommonAuthorizationCodeRequest,\n    AuthorizationCodeClient,\n    UrlString,\n    AuthError,\n    ServerTelemetryManager,\n    Constants,\n    ProtocolUtils,\n    ServerAuthorizationCodeResponse,\n    ThrottlingUtils,\n    ICrypto,\n    Logger,\n    IPerformanceClient,\n    PerformanceEvents,\n    ProtocolMode,\n    invokeAsync,\n    ServerResponseType,\n    UrlUtils,\n    InProgressPerformanceEvent,\n} from \"@azure/msal-common\";\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport {\n    ApiId,\n    InteractionType,\n    TemporaryCacheKeys,\n} from \"../utils/BrowserConstants\";\nimport { RedirectHandler } from \"../interaction_handler/RedirectHandler\";\nimport * as BrowserUtils from \"../utils/BrowserUtils\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport { EventType } from \"../event/EventType\";\nimport { NavigationOptions } from \"../navigation/NavigationOptions\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { NativeInteractionClient } from \"./NativeInteractionClient\";\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { EventError } from \"../event/EventMessage\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport * as ResponseHandler from \"../response/ResponseHandler\";\n\nexport class RedirectClient extends StandardInteractionClient {\n    protected nativeStorage: BrowserCacheManager;\n\n    constructor(\n        config: BrowserConfiguration,\n        storageImpl: BrowserCacheManager,\n        browserCrypto: ICrypto,\n        logger: Logger,\n        eventHandler: EventHandler,\n        navigationClient: INavigationClient,\n        performanceClient: IPerformanceClient,\n        nativeStorageImpl: BrowserCacheManager,\n        nativeMessageHandler?: NativeMessageHandler,\n        correlationId?: string\n    ) {\n        super(\n            config,\n            storageImpl,\n            browserCrypto,\n            logger,\n            eventHandler,\n            navigationClient,\n            performanceClient,\n            nativeMessageHandler,\n            correlationId\n        );\n        this.nativeStorage = nativeStorageImpl;\n    }\n\n    /**\n     * Redirects the page to the /authorize endpoint of the IDP\n     * @param request\n     */\n    async acquireToken(request: RedirectRequest): Promise<void> {\n        const validRequest = await invokeAsync(\n            this.initializeAuthorizationRequest.bind(this),\n            PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(request, InteractionType.Redirect);\n\n        this.browserStorage.updateCacheEntries(\n            validRequest.state,\n            validRequest.nonce,\n            validRequest.authority,\n            validRequest.loginHint || \"\",\n            validRequest.account || null\n        );\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\n            ApiId.acquireTokenRedirect\n        );\n\n        const handleBackButton = (event: PageTransitionEvent) => {\n            // Clear temporary cache if the back button is clicked during the redirect flow.\n            if (event.persisted) {\n                this.logger.verbose(\n                    \"Page was restored from back/forward cache. Clearing temporary cache.\"\n                );\n                this.browserStorage.cleanRequestByState(validRequest.state);\n                this.eventHandler.emitEvent(\n                    EventType.RESTORE_FROM_BFCACHE,\n                    InteractionType.Redirect\n                );\n            }\n        };\n\n        try {\n            // Create auth code request and generate PKCE params\n            const authCodeRequest: CommonAuthorizationCodeRequest =\n                await invokeAsync(\n                    this.initializeAuthorizationCodeRequest.bind(this),\n                    PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest,\n                    this.logger,\n                    this.performanceClient,\n                    this.correlationId\n                )(validRequest);\n\n            // Initialize the client\n            const authClient: AuthorizationCodeClient = await invokeAsync(\n                this.createAuthCodeClient.bind(this),\n                PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\n                this.logger,\n                this.performanceClient,\n                this.correlationId\n            )(\n                serverTelemetryManager,\n                validRequest.authority,\n                validRequest.azureCloudOptions,\n                validRequest.account\n            );\n\n            // Create redirect interaction handler.\n            const interactionHandler = new RedirectHandler(\n                authClient,\n                this.browserStorage,\n                authCodeRequest,\n                this.logger,\n                this.performanceClient\n            );\n\n            // Create acquire token url.\n            const navigateUrl = await authClient.getAuthCodeUrl({\n                ...validRequest,\n                nativeBroker: NativeMessageHandler.isNativeAvailable(\n                    this.config,\n                    this.logger,\n                    this.nativeMessageHandler,\n                    request.authenticationScheme\n                ),\n            });\n\n            const redirectStartPage = this.getRedirectStartPage(\n                request.redirectStartPage\n            );\n            this.logger.verbosePii(`Redirect start page: ${redirectStartPage}`);\n\n            // Clear temporary cache if the back button is clicked during the redirect flow.\n            window.addEventListener(\"pageshow\", handleBackButton);\n\n            // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.\n            return await interactionHandler.initiateAuthRequest(navigateUrl, {\n                navigationClient: this.navigationClient,\n                redirectTimeout: this.config.system.redirectNavigationTimeout,\n                redirectStartPage: redirectStartPage,\n                onRedirectNavigate: request.onRedirectNavigate,\n            });\n        } catch (e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            window.removeEventListener(\"pageshow\", handleBackButton);\n            this.browserStorage.cleanRequestByState(validRequest.state);\n            throw e;\n        }\n    }\n\n    /**\n     * Checks if navigateToLoginRequestUrl is set, and:\n     * - if true, performs logic to cache and navigate\n     * - if false, handles hash string and parses response\n     * @param hash {string} url hash\n     * @param parentMeasurement {InProgressPerformanceEvent} parent measurement\n     */\n    async handleRedirectPromise(\n        hash: string = \"\",\n        parentMeasurement: InProgressPerformanceEvent\n    ): Promise<AuthenticationResult | null> {\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\n            ApiId.handleRedirectPromise\n        );\n        try {\n            if (!this.browserStorage.isInteractionInProgress(true)) {\n                this.logger.info(\n                    \"handleRedirectPromise called but there is no interaction in progress, returning null.\"\n                );\n                return null;\n            }\n            const [serverParams, responseString] = this.getRedirectResponse(\n                hash || \"\"\n            );\n            if (!serverParams) {\n                // Not a recognized server response hash or hash not associated with a redirect request\n                this.logger.info(\n                    \"handleRedirectPromise did not detect a response as a result of a redirect. Cleaning temporary cache.\"\n                );\n                this.browserStorage.cleanRequestByInteractionType(\n                    InteractionType.Redirect\n                );\n                parentMeasurement.event.errorCode = \"no_server_response\";\n                return null;\n            }\n\n            // If navigateToLoginRequestUrl is true, get the url where the redirect request was initiated\n            const loginRequestUrl =\n                this.browserStorage.getTemporaryCache(\n                    TemporaryCacheKeys.ORIGIN_URI,\n                    true\n                ) || Constants.EMPTY_STRING;\n            const loginRequestUrlNormalized =\n                UrlString.removeHashFromUrl(loginRequestUrl);\n            const currentUrlNormalized = UrlString.removeHashFromUrl(\n                window.location.href\n            );\n\n            if (\n                loginRequestUrlNormalized === currentUrlNormalized &&\n                this.config.auth.navigateToLoginRequestUrl\n            ) {\n                // We are on the page we need to navigate to - handle hash\n                this.logger.verbose(\n                    \"Current page is loginRequestUrl, handling response\"\n                );\n\n                if (loginRequestUrl.indexOf(\"#\") > -1) {\n                    // Replace current hash with non-msal hash, if present\n                    BrowserUtils.replaceHash(loginRequestUrl);\n                }\n\n                const handleHashResult = await this.handleResponse(\n                    serverParams,\n                    serverTelemetryManager\n                );\n\n                return handleHashResult;\n            } else if (!this.config.auth.navigateToLoginRequestUrl) {\n                this.logger.verbose(\n                    \"NavigateToLoginRequestUrl set to false, handling response\"\n                );\n                return await this.handleResponse(\n                    serverParams,\n                    serverTelemetryManager\n                );\n            } else if (\n                !BrowserUtils.isInIframe() ||\n                this.config.system.allowRedirectInIframe\n            ) {\n                /*\n                 * Returned from authority using redirect - need to perform navigation before processing response\n                 * Cache the hash to be retrieved after the next redirect\n                 */\n                this.browserStorage.setTemporaryCache(\n                    TemporaryCacheKeys.URL_HASH,\n                    responseString,\n                    true\n                );\n                const navigationOptions: NavigationOptions = {\n                    apiId: ApiId.handleRedirectPromise,\n                    timeout: this.config.system.redirectNavigationTimeout,\n                    noHistory: true,\n                };\n\n                /**\n                 * Default behavior is to redirect to the start page and not process the hash now.\n                 * The start page is expected to also call handleRedirectPromise which will process the hash in one of the checks above.\n                 */\n                let processHashOnRedirect: boolean = true;\n                if (!loginRequestUrl || loginRequestUrl === \"null\") {\n                    // Redirect to home page if login request url is null (real null or the string null)\n                    const homepage = BrowserUtils.getHomepage();\n                    // Cache the homepage under ORIGIN_URI to ensure cached hash is processed on homepage\n                    this.browserStorage.setTemporaryCache(\n                        TemporaryCacheKeys.ORIGIN_URI,\n                        homepage,\n                        true\n                    );\n                    this.logger.warning(\n                        \"Unable to get valid login request url from cache, redirecting to home page\"\n                    );\n                    processHashOnRedirect =\n                        await this.navigationClient.navigateInternal(\n                            homepage,\n                            navigationOptions\n                        );\n                } else {\n                    // Navigate to page that initiated the redirect request\n                    this.logger.verbose(\n                        `Navigating to loginRequestUrl: ${loginRequestUrl}`\n                    );\n                    processHashOnRedirect =\n                        await this.navigationClient.navigateInternal(\n                            loginRequestUrl,\n                            navigationOptions\n                        );\n                }\n\n                // If navigateInternal implementation returns false, handle the hash now\n                if (!processHashOnRedirect) {\n                    return await this.handleResponse(\n                        serverParams,\n                        serverTelemetryManager\n                    );\n                }\n            }\n\n            return null;\n        } catch (e) {\n            if (e instanceof AuthError) {\n                (e as AuthError).setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            this.browserStorage.cleanRequestByInteractionType(\n                InteractionType.Redirect\n            );\n            throw e;\n        }\n    }\n\n    /**\n     * Gets the response hash for a redirect request\n     * Returns null if interactionType in the state value is not \"redirect\" or the hash does not contain known properties\n     * @param hash\n     */\n    protected getRedirectResponse(\n        userProvidedResponse: string\n    ): [ServerAuthorizationCodeResponse | null, string] {\n        this.logger.verbose(\"getRedirectResponseHash called\");\n        // Get current location hash from window or cache.\n        let responseString = userProvidedResponse;\n        if (!responseString) {\n            if (\n                this.config.auth.OIDCOptions.serverResponseType ===\n                ServerResponseType.QUERY\n            ) {\n                responseString = window.location.search;\n            } else {\n                responseString = window.location.hash;\n            }\n        }\n        let response = UrlUtils.getDeserializedResponse(responseString);\n\n        if (response) {\n            try {\n                ResponseHandler.validateInteractionType(\n                    response,\n                    this.browserCrypto,\n                    InteractionType.Redirect\n                );\n            } catch (e) {\n                if (e instanceof AuthError) {\n                    this.logger.error(\n                        `Interaction type validation failed due to ${e.errorCode}: ${e.errorMessage}`\n                    );\n                }\n                return [null, \"\"];\n            }\n\n            BrowserUtils.clearHash(window);\n            this.logger.verbose(\n                \"Hash contains known properties, returning response hash\"\n            );\n            return [response, responseString];\n        }\n\n        const cachedHash = this.browserStorage.getTemporaryCache(\n            TemporaryCacheKeys.URL_HASH,\n            true\n        );\n        this.browserStorage.removeItem(\n            this.browserStorage.generateCacheKey(TemporaryCacheKeys.URL_HASH)\n        );\n\n        if (cachedHash) {\n            response = UrlUtils.getDeserializedResponse(cachedHash);\n            if (response) {\n                this.logger.verbose(\n                    \"Hash does not contain known properties, returning cached hash\"\n                );\n                return [response, cachedHash];\n            }\n        }\n\n        return [null, \"\"];\n    }\n\n    /**\n     * Checks if hash exists and handles in window.\n     * @param hash\n     * @param state\n     */\n    protected async handleResponse(\n        serverParams: ServerAuthorizationCodeResponse,\n        serverTelemetryManager: ServerTelemetryManager\n    ): Promise<AuthenticationResult> {\n        const state = serverParams.state;\n        if (!state) {\n            throw createBrowserAuthError(BrowserAuthErrorCodes.noStateInHash);\n        }\n\n        const cachedRequest = this.browserStorage.getCachedRequest(state);\n        this.logger.verbose(\"handleResponse called, retrieved cached request\");\n\n        if (serverParams.accountId) {\n            this.logger.verbose(\n                \"Account id found in hash, calling WAM for token\"\n            );\n            if (!this.nativeMessageHandler) {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.nativeConnectionNotEstablished\n                );\n            }\n            const nativeInteractionClient = new NativeInteractionClient(\n                this.config,\n                this.browserStorage,\n                this.browserCrypto,\n                this.logger,\n                this.eventHandler,\n                this.navigationClient,\n                ApiId.acquireTokenPopup,\n                this.performanceClient,\n                this.nativeMessageHandler,\n                serverParams.accountId,\n                this.nativeStorage,\n                cachedRequest.correlationId\n            );\n            const { userRequestState } = ProtocolUtils.parseRequestState(\n                this.browserCrypto,\n                state\n            );\n            return nativeInteractionClient\n                .acquireToken({\n                    ...cachedRequest,\n                    state: userRequestState,\n                    prompt: undefined, // Server should handle the prompt, ideally native broker can do this part silently\n                })\n                .finally(() => {\n                    this.browserStorage.cleanRequestByState(state);\n                });\n        }\n\n        // Hash contains known properties - handle and return in callback\n        const currentAuthority = this.browserStorage.getCachedAuthority(state);\n        if (!currentAuthority) {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.noCachedAuthorityError\n            );\n        }\n\n        const authClient = await invokeAsync(\n            this.createAuthCodeClient.bind(this),\n            PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(serverTelemetryManager, currentAuthority);\n\n        ThrottlingUtils.removeThrottle(\n            this.browserStorage,\n            this.config.auth.clientId,\n            cachedRequest\n        );\n        const interactionHandler = new RedirectHandler(\n            authClient,\n            this.browserStorage,\n            cachedRequest,\n            this.logger,\n            this.performanceClient\n        );\n        return interactionHandler.handleCodeResponse(serverParams, state);\n    }\n\n    /**\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\n     * Default behaviour is to redirect the user to `window.location.href`.\n     * @param logoutRequest\n     */\n    async logout(logoutRequest?: EndSessionRequest): Promise<void> {\n        this.logger.verbose(\"logoutRedirect called\");\n        const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\n            ApiId.logout\n        );\n\n        try {\n            this.eventHandler.emitEvent(\n                EventType.LOGOUT_START,\n                InteractionType.Redirect,\n                logoutRequest\n            );\n\n            // Clear cache on logout\n            await this.clearCacheOnLogout(validLogoutRequest.account);\n\n            const navigationOptions: NavigationOptions = {\n                apiId: ApiId.logout,\n                timeout: this.config.system.redirectNavigationTimeout,\n                noHistory: false,\n            };\n\n            const authClient = await invokeAsync(\n                this.createAuthCodeClient.bind(this),\n                PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\n                this.logger,\n                this.performanceClient,\n                this.correlationId\n            )(\n                serverTelemetryManager,\n                logoutRequest && logoutRequest.authority,\n                undefined, // AzureCloudOptions\n                (logoutRequest && logoutRequest.account) || undefined\n            );\n\n            if (authClient.authority.protocolMode === ProtocolMode.OIDC) {\n                try {\n                    authClient.authority.endSessionEndpoint;\n                } catch {\n                    if (validLogoutRequest.account?.homeAccountId) {\n                        void this.browserStorage.removeAccount(\n                            validLogoutRequest.account?.homeAccountId\n                        );\n\n                        this.eventHandler.emitEvent(\n                            EventType.LOGOUT_SUCCESS,\n                            InteractionType.Redirect,\n                            validLogoutRequest\n                        );\n\n                        return;\n                    }\n                }\n            }\n\n            // Create logout string and navigate user window to logout.\n            const logoutUri: string =\n                authClient.getLogoutUri(validLogoutRequest);\n\n            this.eventHandler.emitEvent(\n                EventType.LOGOUT_SUCCESS,\n                InteractionType.Redirect,\n                validLogoutRequest\n            );\n            // Check if onRedirectNavigate is implemented, and invoke it if so\n            if (\n                logoutRequest &&\n                typeof logoutRequest.onRedirectNavigate === \"function\"\n            ) {\n                const navigate = logoutRequest.onRedirectNavigate(logoutUri);\n\n                if (navigate !== false) {\n                    this.logger.verbose(\n                        \"Logout onRedirectNavigate did not return false, navigating\"\n                    );\n                    // Ensure interaction is in progress\n                    if (!this.browserStorage.getInteractionInProgress()) {\n                        this.browserStorage.setInteractionInProgress(true);\n                    }\n                    await this.navigationClient.navigateExternal(\n                        logoutUri,\n                        navigationOptions\n                    );\n                    return;\n                } else {\n                    // Ensure interaction is not in progress\n                    this.browserStorage.setInteractionInProgress(false);\n                    this.logger.verbose(\n                        \"Logout onRedirectNavigate returned false, stopping navigation\"\n                    );\n                }\n            } else {\n                // Ensure interaction is in progress\n                if (!this.browserStorage.getInteractionInProgress()) {\n                    this.browserStorage.setInteractionInProgress(true);\n                }\n                await this.navigationClient.navigateExternal(\n                    logoutUri,\n                    navigationOptions\n                );\n                return;\n            }\n        } catch (e) {\n            if (e instanceof AuthError) {\n                (e as AuthError).setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            this.eventHandler.emitEvent(\n                EventType.LOGOUT_FAILURE,\n                InteractionType.Redirect,\n                null,\n                e as EventError\n            );\n            this.eventHandler.emitEvent(\n                EventType.LOGOUT_END,\n                InteractionType.Redirect\n            );\n            throw e;\n        }\n\n        this.eventHandler.emitEvent(\n            EventType.LOGOUT_END,\n            InteractionType.Redirect\n        );\n    }\n\n    /**\n     * Use to get the redirectStartPage either from request or use current window\n     * @param requestStartPage\n     */\n    protected getRedirectStartPage(requestStartPage?: string): string {\n        const redirectStartPage = requestStartPage || window.location.href;\n        return UrlString.getAbsoluteUrl(\n            redirectStartPage,\n            BrowserUtils.getCurrentUri()\n        );\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    Logger,\n    IPerformanceClient,\n    PerformanceEvents,\n    invokeAsync,\n    invoke,\n    ServerResponseType,\n} from \"@azure/msal-common\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { DEFAULT_IFRAME_TIMEOUT_MS } from \"../config/Configuration\";\n\n/**\n * Creates a hidden iframe to given URL using user-requested scopes as an id.\n * @param urlNavigate\n * @param userRequestScopes\n */\nexport async function initiateAuthRequest(\n    requestUrl: string,\n    performanceClient: IPerformanceClient,\n    logger: Logger,\n    correlationId: string,\n    navigateFrameWait?: number\n): Promise<HTMLIFrameElement> {\n    performanceClient.addQueueMeasurement(\n        PerformanceEvents.SilentHandlerInitiateAuthRequest,\n        correlationId\n    );\n\n    if (!requestUrl) {\n        // Throw error if request URL is empty.\n        logger.info(\"Navigate url is empty\");\n        throw createBrowserAuthError(BrowserAuthErrorCodes.emptyNavigateUri);\n    }\n    if (navigateFrameWait) {\n        return invokeAsync(\n            loadFrame,\n            PerformanceEvents.SilentHandlerLoadFrame,\n            logger,\n            performanceClient,\n            correlationId\n        )(requestUrl, navigateFrameWait, performanceClient, correlationId);\n    }\n    return invoke(\n        loadFrameSync,\n        PerformanceEvents.SilentHandlerLoadFrameSync,\n        logger,\n        performanceClient,\n        correlationId\n    )(requestUrl);\n}\n\n/**\n * Monitors an iframe content window until it loads a url with a known hash, or hits a specified timeout.\n * @param iframe\n * @param timeout\n */\nexport async function monitorIframeForHash(\n    iframe: HTMLIFrameElement,\n    timeout: number,\n    pollIntervalMilliseconds: number,\n    performanceClient: IPerformanceClient,\n    logger: Logger,\n    correlationId: string,\n    responseType: ServerResponseType\n): Promise<string> {\n    performanceClient.addQueueMeasurement(\n        PerformanceEvents.SilentHandlerMonitorIframeForHash,\n        correlationId\n    );\n\n    return new Promise<string>((resolve, reject) => {\n        if (timeout < DEFAULT_IFRAME_TIMEOUT_MS) {\n            logger.warning(\n                `system.loadFrameTimeout or system.iframeHashTimeout set to lower (${timeout}ms) than the default (${DEFAULT_IFRAME_TIMEOUT_MS}ms). This may result in timeouts.`\n            );\n        }\n\n        /*\n         * Polling for iframes can be purely timing based,\n         * since we don't need to account for interaction.\n         */\n        const timeoutId = window.setTimeout(() => {\n            window.clearInterval(intervalId);\n            reject(\n                createBrowserAuthError(\n                    BrowserAuthErrorCodes.monitorWindowTimeout\n                )\n            );\n        }, timeout);\n\n        const intervalId = window.setInterval(() => {\n            let href: string = \"\";\n            const contentWindow = iframe.contentWindow;\n            try {\n                /*\n                 * Will throw if cross origin,\n                 * which should be caught and ignored\n                 * since we need the interval to keep running while on STS UI.\n                 */\n                href = contentWindow ? contentWindow.location.href : \"\";\n            } catch (e) {}\n\n            if (!href || href === \"about:blank\") {\n                return;\n            }\n\n            let responseString = \"\";\n            if (contentWindow) {\n                if (responseType === ServerResponseType.QUERY) {\n                    responseString = contentWindow.location.search;\n                } else {\n                    responseString = contentWindow.location.hash;\n                }\n            }\n            window.clearTimeout(timeoutId);\n            window.clearInterval(intervalId);\n            resolve(responseString);\n        }, pollIntervalMilliseconds);\n    }).finally(() => {\n        invoke(\n            removeHiddenIframe,\n            PerformanceEvents.RemoveHiddenIframe,\n            logger,\n            performanceClient,\n            correlationId\n        )(iframe);\n    });\n}\n\n/**\n * @hidden\n * Loads iframe with authorization endpoint URL\n * @ignore\n * @deprecated\n */\nfunction loadFrame(\n    urlNavigate: string,\n    navigateFrameWait: number,\n    performanceClient: IPerformanceClient,\n    correlationId: string\n): Promise<HTMLIFrameElement> {\n    performanceClient.addQueueMeasurement(\n        PerformanceEvents.SilentHandlerLoadFrame,\n        correlationId\n    );\n\n    /*\n     * This trick overcomes iframe navigation in IE\n     * IE does not load the page consistently in iframe\n     */\n\n    return new Promise((resolve, reject) => {\n        const frameHandle = createHiddenIframe();\n\n        window.setTimeout(() => {\n            if (!frameHandle) {\n                reject(\"Unable to load iframe\");\n                return;\n            }\n\n            frameHandle.src = urlNavigate;\n\n            resolve(frameHandle);\n        }, navigateFrameWait);\n    });\n}\n/**\n * @hidden\n * Loads the iframe synchronously when the navigateTimeFrame is set to `0`\n * @param urlNavigate\n * @param frameName\n * @param logger\n */\nfunction loadFrameSync(urlNavigate: string): HTMLIFrameElement {\n    const frameHandle = createHiddenIframe();\n\n    frameHandle.src = urlNavigate;\n\n    return frameHandle;\n}\n\n/**\n * @hidden\n * Creates a new hidden iframe or gets an existing one for silent token renewal.\n * @ignore\n */\nfunction createHiddenIframe(): HTMLIFrameElement {\n    const authFrame = document.createElement(\"iframe\");\n\n    authFrame.className = \"msalSilentIframe\";\n    authFrame.style.visibility = \"hidden\";\n    authFrame.style.position = \"absolute\";\n    authFrame.style.width = authFrame.style.height = \"0\";\n    authFrame.style.border = \"0\";\n    authFrame.setAttribute(\n        \"sandbox\",\n        \"allow-scripts allow-same-origin allow-forms\"\n    );\n    document.body.appendChild(authFrame);\n\n    return authFrame;\n}\n\n/**\n * @hidden\n * Removes a hidden iframe from the page.\n * @ignore\n */\nfunction removeHiddenIframe(iframe: HTMLIFrameElement): void {\n    if (document.body === iframe.parentNode) {\n        document.body.removeChild(iframe);\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    ICrypto,\n    Logger,\n    PromptValue,\n    CommonAuthorizationCodeRequest,\n    AuthorizationCodeClient,\n    AuthError,\n    ProtocolUtils,\n    IPerformanceClient,\n    PerformanceEvents,\n    invokeAsync,\n    invoke,\n} from \"@azure/msal-common\";\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { InteractionType, ApiId } from \"../utils/BrowserConstants\";\nimport {\n    initiateAuthRequest,\n    monitorIframeForHash,\n} from \"../interaction_handler/SilentHandler\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\nimport { NativeInteractionClient } from \"./NativeInteractionClient\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { InteractionHandler } from \"../interaction_handler/InteractionHandler\";\nimport * as BrowserUtils from \"../utils/BrowserUtils\";\nimport * as ResponseHandler from \"../response/ResponseHandler\";\n\nexport class SilentIframeClient extends StandardInteractionClient {\n    protected apiId: ApiId;\n    protected nativeStorage: BrowserCacheManager;\n\n    constructor(\n        config: BrowserConfiguration,\n        storageImpl: BrowserCacheManager,\n        browserCrypto: ICrypto,\n        logger: Logger,\n        eventHandler: EventHandler,\n        navigationClient: INavigationClient,\n        apiId: ApiId,\n        performanceClient: IPerformanceClient,\n        nativeStorageImpl: BrowserCacheManager,\n        nativeMessageHandler?: NativeMessageHandler,\n        correlationId?: string\n    ) {\n        super(\n            config,\n            storageImpl,\n            browserCrypto,\n            logger,\n            eventHandler,\n            navigationClient,\n            performanceClient,\n            nativeMessageHandler,\n            correlationId\n        );\n        this.apiId = apiId;\n        this.nativeStorage = nativeStorageImpl;\n    }\n\n    /**\n     * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none or prompt=no_session\n     * @param request\n     */\n    async acquireToken(\n        request: SsoSilentRequest\n    ): Promise<AuthenticationResult> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.SilentIframeClientAcquireToken,\n            request.correlationId\n        );\n        // Check that we have some SSO data\n        if (\n            !request.loginHint &&\n            !request.sid &&\n            (!request.account || !request.account.username)\n        ) {\n            this.logger.warning(\n                \"No user hint provided. The authorization server may need more information to complete this request.\"\n            );\n        }\n\n        // Check the prompt value\n        const inputRequest = { ...request };\n        if (inputRequest.prompt) {\n            if (\n                inputRequest.prompt !== PromptValue.NONE &&\n                inputRequest.prompt !== PromptValue.NO_SESSION\n            ) {\n                this.logger.warning(\n                    `SilentIframeClient. Replacing invalid prompt ${inputRequest.prompt} with ${PromptValue.NONE}`\n                );\n                inputRequest.prompt = PromptValue.NONE;\n            }\n        } else {\n            inputRequest.prompt = PromptValue.NONE;\n        }\n\n        // Create silent request\n        const silentRequest: AuthorizationUrlRequest = await invokeAsync(\n            this.initializeAuthorizationRequest.bind(this),\n            PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(inputRequest, InteractionType.Silent);\n        BrowserUtils.preconnect(silentRequest.authority);\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\n            this.apiId\n        );\n\n        try {\n            // Initialize the client\n            const authClient: AuthorizationCodeClient = await invokeAsync(\n                this.createAuthCodeClient.bind(this),\n                PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\n                this.logger,\n                this.performanceClient,\n                request.correlationId\n            )(\n                serverTelemetryManager,\n                silentRequest.authority,\n                silentRequest.azureCloudOptions,\n                silentRequest.account\n            );\n\n            return await invokeAsync(\n                this.silentTokenHelper.bind(this),\n                PerformanceEvents.SilentIframeClientTokenHelper,\n                this.logger,\n                this.performanceClient,\n                request.correlationId\n            )(authClient, silentRequest);\n        } catch (e) {\n            if (e instanceof AuthError) {\n                (e as AuthError).setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            throw e;\n        }\n    }\n\n    /**\n     * Currently Unsupported\n     */\n    logout(): Promise<void> {\n        // Synchronous so we must reject\n        return Promise.reject(\n            createBrowserAuthError(\n                BrowserAuthErrorCodes.silentLogoutUnsupported\n            )\n        );\n    }\n\n    /**\n     * Helper which acquires an authorization code silently using a hidden iframe from given url\n     * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.\n     * @param navigateUrl\n     * @param userRequestScopes\n     */\n    protected async silentTokenHelper(\n        authClient: AuthorizationCodeClient,\n        silentRequest: AuthorizationUrlRequest\n    ): Promise<AuthenticationResult> {\n        const correlationId = silentRequest.correlationId;\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.SilentIframeClientTokenHelper,\n            correlationId\n        );\n\n        // Create auth code request and generate PKCE params\n        const authCodeRequest: CommonAuthorizationCodeRequest =\n            await invokeAsync(\n                this.initializeAuthorizationCodeRequest.bind(this),\n                PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest,\n                this.logger,\n                this.performanceClient,\n                correlationId\n            )(silentRequest);\n\n        // Create authorize request url\n        const navigateUrl = await invokeAsync(\n            authClient.getAuthCodeUrl.bind(authClient),\n            PerformanceEvents.GetAuthCodeUrl,\n            this.logger,\n            this.performanceClient,\n            correlationId\n        )({\n            ...silentRequest,\n            nativeBroker: NativeMessageHandler.isNativeAvailable(\n                this.config,\n                this.logger,\n                this.nativeMessageHandler,\n                silentRequest.authenticationScheme\n            ),\n        });\n\n        // Create silent handler\n        const interactionHandler = new InteractionHandler(\n            authClient,\n            this.browserStorage,\n            authCodeRequest,\n            this.logger,\n            this.performanceClient\n        );\n        // Get the frame handle for the silent request\n        const msalFrame = await invokeAsync(\n            initiateAuthRequest,\n            PerformanceEvents.SilentHandlerInitiateAuthRequest,\n            this.logger,\n            this.performanceClient,\n            correlationId\n        )(\n            navigateUrl,\n            this.performanceClient,\n            this.logger,\n            correlationId,\n            this.config.system.navigateFrameWait\n        );\n        const responseType = this.config.auth.OIDCOptions.serverResponseType;\n        // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n        const responseString = await invokeAsync(\n            monitorIframeForHash,\n            PerformanceEvents.SilentHandlerMonitorIframeForHash,\n            this.logger,\n            this.performanceClient,\n            correlationId\n        )(\n            msalFrame,\n            this.config.system.iframeHashTimeout,\n            this.config.system.pollIntervalMilliseconds,\n            this.performanceClient,\n            this.logger,\n            correlationId,\n            responseType\n        );\n        const serverParams = invoke(\n            ResponseHandler.deserializeResponse,\n            PerformanceEvents.DeserializeResponse,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(responseString, responseType, this.logger);\n\n        if (serverParams.accountId) {\n            this.logger.verbose(\n                \"Account id found in hash, calling WAM for token\"\n            );\n            if (!this.nativeMessageHandler) {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.nativeConnectionNotEstablished\n                );\n            }\n            const nativeInteractionClient = new NativeInteractionClient(\n                this.config,\n                this.browserStorage,\n                this.browserCrypto,\n                this.logger,\n                this.eventHandler,\n                this.navigationClient,\n                this.apiId,\n                this.performanceClient,\n                this.nativeMessageHandler,\n                serverParams.accountId,\n                this.browserStorage,\n                correlationId\n            );\n            const { userRequestState } = ProtocolUtils.parseRequestState(\n                this.browserCrypto,\n                silentRequest.state\n            );\n            return invokeAsync(\n                nativeInteractionClient.acquireToken.bind(\n                    nativeInteractionClient\n                ),\n                PerformanceEvents.NativeInteractionClientAcquireToken,\n                this.logger,\n                this.performanceClient,\n                correlationId\n            )({\n                ...silentRequest,\n                state: userRequestState,\n                prompt: silentRequest.prompt || PromptValue.NONE,\n            });\n        }\n\n        // Handle response from hash string\n        return invokeAsync(\n            interactionHandler.handleCodeResponse.bind(interactionHandler),\n            PerformanceEvents.HandleCodeResponse,\n            this.logger,\n            this.performanceClient,\n            correlationId\n        )(serverParams, silentRequest);\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport {\n    CommonSilentFlowRequest,\n    ServerTelemetryManager,\n    RefreshTokenClient,\n    AuthError,\n    AzureCloudOptions,\n    PerformanceEvents,\n    invokeAsync,\n    AccountInfo,\n} from \"@azure/msal-common\";\nimport { ApiId } from \"../utils/BrowserConstants\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { initializeBaseRequest } from \"../request/RequestHelpers\";\n\nexport class SilentRefreshClient extends StandardInteractionClient {\n    /**\n     * Exchanges the refresh token for new tokens\n     * @param request\n     */\n    async acquireToken(\n        request: CommonSilentFlowRequest\n    ): Promise<AuthenticationResult> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.SilentRefreshClientAcquireToken,\n            request.correlationId\n        );\n\n        const baseRequest = await invokeAsync(\n            initializeBaseRequest,\n            PerformanceEvents.InitializeBaseRequest,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(request, this.config, this.performanceClient, this.logger);\n        const silentRequest: CommonSilentFlowRequest = {\n            ...request,\n            ...baseRequest,\n        };\n\n        if (request.redirectUri) {\n            // Make sure any passed redirectUri is converted to an absolute URL - redirectUri is not a required parameter for refresh token redemption so only include if explicitly provided\n            silentRequest.redirectUri = this.getRedirectUri(\n                request.redirectUri\n            );\n        }\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\n            ApiId.acquireTokenSilent_silentFlow\n        );\n\n        const refreshTokenClient = await this.createRefreshTokenClient(\n            serverTelemetryManager,\n            silentRequest.authority,\n            silentRequest.azureCloudOptions,\n            silentRequest.account\n        );\n        // Send request to renew token. Auth module will throw errors if token cannot be renewed.\n        return invokeAsync(\n            refreshTokenClient.acquireTokenByRefreshToken.bind(\n                refreshTokenClient\n            ),\n            PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(silentRequest).catch((e: AuthError) => {\n            (e as AuthError).setCorrelationId(this.correlationId);\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        }) as Promise<AuthenticationResult>;\n    }\n\n    /**\n     * Currently Unsupported\n     */\n    logout(): Promise<void> {\n        // Synchronous so we must reject\n        return Promise.reject(\n            createBrowserAuthError(\n                BrowserAuthErrorCodes.silentLogoutUnsupported\n            )\n        );\n    }\n\n    /**\n     * Creates a Refresh Client with the given authority, or the default authority.\n     * @param serverTelemetryManager\n     * @param authorityUrl\n     */\n    protected async createRefreshTokenClient(\n        serverTelemetryManager: ServerTelemetryManager,\n        authorityUrl?: string,\n        azureCloudOptions?: AzureCloudOptions,\n        account?: AccountInfo\n    ): Promise<RefreshTokenClient> {\n        // Create auth module.\n        const clientConfig = await invokeAsync(\n            this.getClientConfiguration.bind(this),\n            PerformanceEvents.StandardInteractionClientGetClientConfiguration,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(serverTelemetryManager, authorityUrl, azureCloudOptions, account);\n        return new RefreshTokenClient(clientConfig, this.performanceClient);\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    AccessTokenEntity,\n    ICrypto,\n    IdTokenEntity,\n    Logger,\n    ScopeSet,\n    Authority,\n    AuthorityOptions,\n    ExternalTokenResponse,\n    AccountEntity,\n    AuthToken,\n    RefreshTokenEntity,\n    CacheRecord,\n    TokenClaims,\n    CacheHelpers,\n    buildAccountToCache,\n} from \"@azure/msal-common\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { BrowserCacheManager } from \"./BrowserCacheManager\";\nimport { ITokenCache } from \"./ITokenCache\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { base64Decode } from \"../encode/Base64Decode\";\nimport * as BrowserCrypto from \"../crypto/BrowserCrypto\";\n\nexport type LoadTokenOptions = {\n    clientInfo?: string;\n    expiresOn?: number;\n    extendedExpiresOn?: number;\n};\n\n/**\n * Token cache manager\n */\nexport class TokenCache implements ITokenCache {\n    // Flag to indicate if in browser environment\n    public isBrowserEnvironment: boolean;\n    // Input configuration by developer/user\n    protected config: BrowserConfiguration;\n    // Browser cache storage\n    private storage: BrowserCacheManager;\n    // Logger\n    private logger: Logger;\n    // Crypto class\n    private cryptoObj: ICrypto;\n\n    constructor(\n        configuration: BrowserConfiguration,\n        storage: BrowserCacheManager,\n        logger: Logger,\n        cryptoObj: ICrypto\n    ) {\n        this.isBrowserEnvironment = typeof window !== \"undefined\";\n        this.config = configuration;\n        this.storage = storage;\n        this.logger = logger;\n        this.cryptoObj = cryptoObj;\n    }\n\n    // Move getAllAccounts here and cache utility APIs\n\n    /**\n     * API to load tokens to msal-browser cache.\n     * @param request\n     * @param response\n     * @param options\n     * @returns `AuthenticationResult` for the response that was loaded.\n     */\n    loadExternalTokens(\n        request: SilentRequest,\n        response: ExternalTokenResponse,\n        options: LoadTokenOptions\n    ): AuthenticationResult {\n        if (!this.isBrowserEnvironment) {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.nonBrowserEnvironment\n            );\n        }\n\n        const idTokenClaims = response.id_token\n            ? AuthToken.extractTokenClaims(response.id_token, base64Decode)\n            : undefined;\n\n        const authorityOptions: AuthorityOptions = {\n            protocolMode: this.config.auth.protocolMode,\n            knownAuthorities: this.config.auth.knownAuthorities,\n            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n            authorityMetadata: this.config.auth.authorityMetadata,\n            skipAuthorityMetadataCache:\n                this.config.auth.skipAuthorityMetadataCache,\n        };\n        const authority = request.authority\n            ? new Authority(\n                  Authority.generateAuthority(\n                      request.authority,\n                      request.azureCloudOptions\n                  ),\n                  this.config.system.networkClient,\n                  this.storage,\n                  authorityOptions,\n                  this.logger,\n                  request.correlationId || BrowserCrypto.createNewGuid()\n              )\n            : undefined;\n\n        const cacheRecordAccount: AccountEntity = this.loadAccount(\n            request,\n            options.clientInfo || response.client_info || \"\",\n            idTokenClaims,\n            authority\n        );\n\n        const idToken = this.loadIdToken(\n            response,\n            cacheRecordAccount.homeAccountId,\n            cacheRecordAccount.environment,\n            cacheRecordAccount.realm\n        );\n\n        const accessToken = this.loadAccessToken(\n            request,\n            response,\n            cacheRecordAccount.homeAccountId,\n            cacheRecordAccount.environment,\n            cacheRecordAccount.realm,\n            options\n        );\n\n        const refreshToken = this.loadRefreshToken(\n            response,\n            cacheRecordAccount.homeAccountId,\n            cacheRecordAccount.environment\n        );\n\n        return this.generateAuthenticationResult(\n            request,\n            {\n                account: cacheRecordAccount,\n                idToken,\n                accessToken,\n                refreshToken,\n            },\n            idTokenClaims,\n            authority\n        );\n    }\n\n    /**\n     * Helper function to load account to msal-browser cache\n     * @param idToken\n     * @param environment\n     * @param clientInfo\n     * @param authorityType\n     * @param requestHomeAccountId\n     * @returns `AccountEntity`\n     */\n    private loadAccount(\n        request: SilentRequest,\n        clientInfo: string,\n        idTokenClaims?: TokenClaims,\n        authority?: Authority\n    ): AccountEntity {\n        this.logger.verbose(\"TokenCache - loading account\");\n\n        if (request.account) {\n            const accountEntity = AccountEntity.createFromAccountInfo(\n                request.account\n            );\n            this.storage.setAccount(accountEntity);\n            return accountEntity;\n        } else if (!authority || (!clientInfo && !idTokenClaims)) {\n            this.logger.error(\n                \"TokenCache - if an account is not provided on the request, authority and either clientInfo or idToken must be provided instead.\"\n            );\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.unableToLoadToken\n            );\n        }\n\n        const homeAccountId = AccountEntity.generateHomeAccountId(\n            clientInfo,\n            authority.authorityType,\n            this.logger,\n            this.cryptoObj,\n            idTokenClaims\n        );\n\n        const claimsTenantId = idTokenClaims?.tid;\n\n        const cachedAccount = buildAccountToCache(\n            this.storage,\n            authority,\n            homeAccountId,\n            base64Decode,\n            idTokenClaims,\n            clientInfo,\n            authority.hostnameAndPort,\n            claimsTenantId,\n            undefined, // authCodePayload\n            undefined, // nativeAccountId\n            this.logger\n        );\n\n        this.storage.setAccount(cachedAccount);\n        return cachedAccount;\n    }\n\n    /**\n     * Helper function to load id tokens to msal-browser cache\n     * @param idToken\n     * @param homeAccountId\n     * @param environment\n     * @param tenantId\n     * @returns `IdTokenEntity`\n     */\n    private loadIdToken(\n        response: ExternalTokenResponse,\n        homeAccountId: string,\n        environment: string,\n        tenantId: string\n    ): IdTokenEntity | null {\n        if (!response.id_token) {\n            this.logger.verbose(\"TokenCache - no id token found in response\");\n            return null;\n        }\n\n        this.logger.verbose(\"TokenCache - loading id token\");\n        const idTokenEntity = CacheHelpers.createIdTokenEntity(\n            homeAccountId,\n            environment,\n            response.id_token,\n            this.config.auth.clientId,\n            tenantId\n        );\n\n        this.storage.setIdTokenCredential(idTokenEntity);\n        return idTokenEntity;\n    }\n\n    /**\n     * Helper function to load access tokens to msal-browser cache\n     * @param request\n     * @param response\n     * @param homeAccountId\n     * @param environment\n     * @param tenantId\n     * @returns `AccessTokenEntity`\n     */\n    private loadAccessToken(\n        request: SilentRequest,\n        response: ExternalTokenResponse,\n        homeAccountId: string,\n        environment: string,\n        tenantId: string,\n        options: LoadTokenOptions\n    ): AccessTokenEntity | null {\n        if (!response.access_token) {\n            this.logger.verbose(\n                \"TokenCache - no access token found in response\"\n            );\n            return null;\n        } else if (!response.expires_in) {\n            this.logger.error(\n                \"TokenCache - no expiration set on the access token. Cannot add it to the cache.\"\n            );\n            return null;\n        } else if (\n            !response.scope &&\n            (!request.scopes || !request.scopes.length)\n        ) {\n            this.logger.error(\n                \"TokenCache - scopes not specified in the request or response. Cannot add token to the cache.\"\n            );\n            return null;\n        }\n\n        this.logger.verbose(\"TokenCache - loading access token\");\n\n        const scopes = response.scope\n            ? ScopeSet.fromString(response.scope)\n            : new ScopeSet(request.scopes);\n        const expiresOn =\n            options.expiresOn ||\n            response.expires_in + new Date().getTime() / 1000;\n\n        const extendedExpiresOn =\n            options.extendedExpiresOn ||\n            (response.ext_expires_in || response.expires_in) +\n                new Date().getTime() / 1000;\n\n        const accessTokenEntity = CacheHelpers.createAccessTokenEntity(\n            homeAccountId,\n            environment,\n            response.access_token,\n            this.config.auth.clientId,\n            tenantId,\n            scopes.printScopes(),\n            expiresOn,\n            extendedExpiresOn,\n            base64Decode\n        );\n\n        this.storage.setAccessTokenCredential(accessTokenEntity);\n        return accessTokenEntity;\n    }\n\n    /**\n     * Helper function to load refresh tokens to msal-browser cache\n     * @param request\n     * @param response\n     * @param homeAccountId\n     * @param environment\n     * @returns `RefreshTokenEntity`\n     */\n    private loadRefreshToken(\n        response: ExternalTokenResponse,\n        homeAccountId: string,\n        environment: string\n    ): RefreshTokenEntity | null {\n        if (!response.refresh_token) {\n            this.logger.verbose(\n                \"TokenCache - no refresh token found in response\"\n            );\n            return null;\n        }\n\n        this.logger.verbose(\"TokenCache - loading refresh token\");\n        const refreshTokenEntity = CacheHelpers.createRefreshTokenEntity(\n            homeAccountId,\n            environment,\n            response.refresh_token,\n            this.config.auth.clientId,\n            response.foci,\n            undefined, // userAssertionHash\n            response.refresh_token_expires_in\n        );\n\n        this.storage.setRefreshTokenCredential(refreshTokenEntity);\n        return refreshTokenEntity;\n    }\n\n    /**\n     * Helper function to generate an `AuthenticationResult` for the result.\n     * @param request\n     * @param idTokenObj\n     * @param cacheRecord\n     * @param authority\n     * @returns `AuthenticationResult`\n     */\n    private generateAuthenticationResult(\n        request: SilentRequest,\n        cacheRecord: CacheRecord & { account: AccountEntity },\n        idTokenClaims?: TokenClaims,\n        authority?: Authority\n    ): AuthenticationResult {\n        let accessToken: string = \"\";\n        let responseScopes: Array<string> = [];\n        let expiresOn: Date | null = null;\n        let extExpiresOn: Date | undefined;\n\n        if (cacheRecord?.accessToken) {\n            accessToken = cacheRecord.accessToken.secret;\n            responseScopes = ScopeSet.fromString(\n                cacheRecord.accessToken.target\n            ).asArray();\n            expiresOn = new Date(\n                Number(cacheRecord.accessToken.expiresOn) * 1000\n            );\n            extExpiresOn = new Date(\n                Number(cacheRecord.accessToken.extendedExpiresOn) * 1000\n            );\n        }\n\n        const accountEntity = cacheRecord.account;\n\n        return {\n            authority: authority ? authority.canonicalAuthority : \"\",\n            uniqueId: cacheRecord.account.localAccountId,\n            tenantId: cacheRecord.account.realm,\n            scopes: responseScopes,\n            account: accountEntity.getAccountInfo(),\n            idToken: cacheRecord.idToken?.secret || \"\",\n            idTokenClaims: idTokenClaims || {},\n            accessToken: accessToken,\n            fromCache: true,\n            expiresOn: expiresOn,\n            correlationId: request.correlationId || \"\",\n            requestId: \"\",\n            extExpiresOn: extExpiresOn,\n            familyId: cacheRecord.refreshToken?.familyId || \"\",\n            tokenType: cacheRecord?.accessToken?.tokenType || \"\",\n            state: request.state || \"\",\n            cloudGraphHostName: accountEntity.cloudGraphHostName || \"\",\n            msGraphHost: accountEntity.msGraphHost || \"\",\n            fromNativeBroker: false,\n        };\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    AuthorizationCodeClient,\n    ClientConfiguration,\n} from \"@azure/msal-common\";\n\nexport class HybridSpaAuthorizationCodeClient extends AuthorizationCodeClient {\n    constructor(config: ClientConfiguration) {\n        super(config);\n        this.includeRedirectUri = false;\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    ICrypto,\n    Logger,\n    CommonAuthorizationCodeRequest,\n    AuthError,\n    IPerformanceClient,\n    PerformanceEvents,\n    invokeAsync,\n} from \"@azure/msal-common\";\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { InteractionType, ApiId } from \"../utils/BrowserConstants\";\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\nimport { HybridSpaAuthorizationCodeClient } from \"./HybridSpaAuthorizationCodeClient\";\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { InteractionHandler } from \"../interaction_handler/InteractionHandler\";\n\nexport class SilentAuthCodeClient extends StandardInteractionClient {\n    private apiId: ApiId;\n\n    constructor(\n        config: BrowserConfiguration,\n        storageImpl: BrowserCacheManager,\n        browserCrypto: ICrypto,\n        logger: Logger,\n        eventHandler: EventHandler,\n        navigationClient: INavigationClient,\n        apiId: ApiId,\n        performanceClient: IPerformanceClient,\n        nativeMessageHandler?: NativeMessageHandler,\n        correlationId?: string\n    ) {\n        super(\n            config,\n            storageImpl,\n            browserCrypto,\n            logger,\n            eventHandler,\n            navigationClient,\n            performanceClient,\n            nativeMessageHandler,\n            correlationId\n        );\n        this.apiId = apiId;\n    }\n\n    /**\n     * Acquires a token silently by redeeming an authorization code against the /token endpoint\n     * @param request\n     */\n    async acquireToken(\n        request: AuthorizationCodeRequest\n    ): Promise<AuthenticationResult> {\n        // Auth code payload is required\n        if (!request.code) {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.authCodeRequired\n            );\n        }\n\n        // Create silent request\n        const silentRequest: AuthorizationUrlRequest = await invokeAsync(\n            this.initializeAuthorizationRequest.bind(this),\n            PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(request, InteractionType.Silent);\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\n            this.apiId\n        );\n\n        try {\n            // Create auth code request (PKCE not needed)\n            const authCodeRequest: CommonAuthorizationCodeRequest = {\n                ...silentRequest,\n                code: request.code,\n            };\n\n            // Initialize the client\n            const clientConfig = await invokeAsync(\n                this.getClientConfiguration.bind(this),\n                PerformanceEvents.StandardInteractionClientGetClientConfiguration,\n                this.logger,\n                this.performanceClient,\n                request.correlationId\n            )(\n                serverTelemetryManager,\n                silentRequest.authority,\n                silentRequest.azureCloudOptions,\n                silentRequest.account\n            );\n            const authClient: HybridSpaAuthorizationCodeClient =\n                new HybridSpaAuthorizationCodeClient(clientConfig);\n            this.logger.verbose(\"Auth code client created\");\n\n            // Create silent handler\n            const interactionHandler = new InteractionHandler(\n                authClient,\n                this.browserStorage,\n                authCodeRequest,\n                this.logger,\n                this.performanceClient\n            );\n\n            // Handle auth code parameters from request\n            return await invokeAsync(\n                interactionHandler.handleCodeResponseFromServer.bind(\n                    interactionHandler\n                ),\n                PerformanceEvents.HandleCodeResponseFromServer,\n                this.logger,\n                this.performanceClient,\n                request.correlationId\n            )(\n                {\n                    code: request.code,\n                    msgraph_host: request.msGraphHost,\n                    cloud_graph_host_name: request.cloudGraphHostName,\n                    cloud_instance_host_name: request.cloudInstanceHostName,\n                },\n                silentRequest,\n                false\n            );\n        } catch (e) {\n            if (e instanceof AuthError) {\n                (e as AuthError).setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            throw e;\n        }\n    }\n\n    /**\n     * Currently Unsupported\n     */\n    logout(): Promise<void> {\n        // Synchronous so we must reject\n        return Promise.reject(\n            createBrowserAuthError(\n                BrowserAuthErrorCodes.silentLogoutUnsupported\n            )\n        );\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { CryptoOps } from \"../crypto/CryptoOps\";\nimport {\n    InteractionRequiredAuthError,\n    AccountInfo,\n    Constants,\n    INetworkModule,\n    Logger,\n    CommonSilentFlowRequest,\n    ICrypto,\n    DEFAULT_CRYPTO_IMPLEMENTATION,\n    AuthError,\n    PerformanceEvents,\n    PerformanceCallbackFunction,\n    IPerformanceClient,\n    BaseAuthRequest,\n    PromptValue,\n    InProgressPerformanceEvent,\n    RequestThumbprint,\n    AccountEntity,\n    invokeAsync,\n    createClientAuthError,\n    ClientAuthErrorCodes,\n    AccountFilter,\n    buildStaticAuthorityOptions,\n    InteractionRequiredAuthErrorCodes,\n} from \"@azure/msal-common\";\nimport {\n    BrowserCacheManager,\n    DEFAULT_BROWSER_CACHE_MANAGER,\n} from \"../cache/BrowserCacheManager\";\nimport * as AccountManager from \"../cache/AccountManager\";\nimport { BrowserConfiguration, CacheOptions } from \"../config/Configuration\";\nimport {\n    InteractionType,\n    ApiId,\n    BrowserCacheLocation,\n    WrapperSKU,\n    TemporaryCacheKeys,\n    CacheLookupPolicy,\n    DEFAULT_REQUEST,\n    BrowserConstants,\n    iFrameRenewalPolicies,\n} from \"../utils/BrowserConstants\";\nimport * as BrowserUtils from \"../utils/BrowserUtils\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport { EventCallbackFunction, EventError } from \"../event/EventMessage\";\nimport { EventType } from \"../event/EventType\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport { EndSessionPopupRequest } from \"../request/EndSessionPopupRequest\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { PopupClient } from \"../interaction_client/PopupClient\";\nimport { RedirectClient } from \"../interaction_client/RedirectClient\";\nimport { SilentIframeClient } from \"../interaction_client/SilentIframeClient\";\nimport { SilentRefreshClient } from \"../interaction_client/SilentRefreshClient\";\nimport { TokenCache } from \"../cache/TokenCache\";\nimport { ITokenCache } from \"../cache/ITokenCache\";\nimport { NativeInteractionClient } from \"../interaction_client/NativeInteractionClient\";\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport {\n    NativeAuthError,\n    isFatalNativeAuthError,\n} from \"../error/NativeAuthError\";\nimport { SilentCacheClient } from \"../interaction_client/SilentCacheClient\";\nimport { SilentAuthCodeClient } from \"../interaction_client/SilentAuthCodeClient\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\nimport { NativeTokenRequest } from \"../broker/nativeBroker/NativeRequest\";\nimport { StandardOperatingContext } from \"../operatingcontext/StandardOperatingContext\";\nimport { BaseOperatingContext } from \"../operatingcontext/BaseOperatingContext\";\nimport { IController } from \"./IController\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { ClearCacheRequest } from \"../request/ClearCacheRequest\";\nimport { createNewGuid } from \"../crypto/BrowserCrypto\";\nimport { initializeSilentRequest } from \"../request/RequestHelpers\";\nimport { InitializeApplicationRequest } from \"../request/InitializeApplicationRequest\";\n\nfunction getAccountType(\n    account?: AccountInfo\n): \"AAD\" | \"MSA\" | \"B2C\" | undefined {\n    const idTokenClaims = account?.idTokenClaims;\n    if (idTokenClaims?.tfp || idTokenClaims?.acr) {\n        return \"B2C\";\n    }\n\n    if (!idTokenClaims?.tid) {\n        return undefined;\n    } else if (idTokenClaims?.tid === \"9188040d-6c67-4c5b-b112-36a304b66dad\") {\n        return \"MSA\";\n    }\n    return \"AAD\";\n}\n\nfunction preflightCheck(\n    initialized: boolean,\n    performanceEvent: InProgressPerformanceEvent\n) {\n    try {\n        BrowserUtils.preflightCheck(initialized);\n    } catch (e) {\n        performanceEvent.end({ success: false }, e);\n        throw e;\n    }\n}\n\nexport class StandardController implements IController {\n    // OperatingContext\n    protected readonly operatingContext: StandardOperatingContext;\n\n    // Crypto interface implementation\n    protected readonly browserCrypto: ICrypto;\n\n    // Storage interface implementation\n    protected readonly browserStorage: BrowserCacheManager;\n\n    // Native Cache in memory storage implementation\n    protected readonly nativeInternalStorage: BrowserCacheManager;\n\n    // Network interface implementation\n    protected readonly networkClient: INetworkModule;\n\n    // Navigation interface implementation\n    protected navigationClient: INavigationClient;\n\n    // Input configuration by developer/user\n    protected readonly config: BrowserConfiguration;\n\n    // Token cache implementation\n    private tokenCache: TokenCache;\n\n    // Logger\n    protected logger: Logger;\n\n    // Flag to indicate if in browser environment\n    protected isBrowserEnvironment: boolean;\n\n    protected readonly eventHandler: EventHandler;\n\n    // Redirect Response Object\n    protected readonly redirectResponse: Map<\n        string,\n        Promise<AuthenticationResult | null>\n    >;\n\n    // Native Extension Provider\n    protected nativeExtensionProvider: NativeMessageHandler | undefined;\n\n    // Hybrid auth code responses\n    private hybridAuthCodeResponses: Map<string, Promise<AuthenticationResult>>;\n\n    // Performance telemetry client\n    protected readonly performanceClient: IPerformanceClient;\n\n    // Flag representing whether or not the initialize API has been called and completed\n    protected initialized: boolean;\n\n    // Active requests\n    private activeSilentTokenRequests: Map<\n        string,\n        Promise<AuthenticationResult>\n    >;\n\n    // Active Iframe request\n    private activeIframeRequest: [Promise<boolean>, string] | undefined;\n\n    private ssoSilentMeasurement?: InProgressPerformanceEvent;\n    private acquireTokenByCodeAsyncMeasurement?: InProgressPerformanceEvent;\n    /**\n     * @constructor\n     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\n     *\n     * Important attributes in the Configuration object for auth are:\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\n     * - authority: the authority URL for your application.\n     * - redirect_uri: the uri of your application registered in the portal.\n     *\n     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\n     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\n     *\n     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\n     * Full B2C functionality will be available in this library in future versions.\n     *\n     * @param configuration Object for the MSAL PublicClientApplication instance\n     */\n    constructor(operatingContext: StandardOperatingContext) {\n        this.operatingContext = operatingContext;\n        this.isBrowserEnvironment =\n            this.operatingContext.isBrowserEnvironment();\n        // Set the configuration.\n        this.config = operatingContext.getConfig();\n        this.initialized = false;\n\n        // Initialize logger\n        this.logger = this.operatingContext.getLogger();\n\n        // Initialize the network module class.\n        this.networkClient = this.config.system.networkClient;\n\n        // Initialize the navigation client class.\n        this.navigationClient = this.config.system.navigationClient;\n\n        // Initialize redirectResponse Map\n        this.redirectResponse = new Map();\n\n        // Initial hybrid spa map\n        this.hybridAuthCodeResponses = new Map();\n\n        // Initialize performance client\n        this.performanceClient = this.config.telemetry.client;\n\n        // Initialize the crypto class.\n        this.browserCrypto = this.isBrowserEnvironment\n            ? new CryptoOps(this.logger, this.performanceClient)\n            : DEFAULT_CRYPTO_IMPLEMENTATION;\n\n        this.eventHandler = new EventHandler(this.logger, this.browserCrypto);\n\n        // Initialize the browser storage class.\n        this.browserStorage = this.isBrowserEnvironment\n            ? new BrowserCacheManager(\n                  this.config.auth.clientId,\n                  this.config.cache,\n                  this.browserCrypto,\n                  this.logger,\n                  buildStaticAuthorityOptions(this.config.auth),\n                  this.performanceClient\n              )\n            : DEFAULT_BROWSER_CACHE_MANAGER(\n                  this.config.auth.clientId,\n                  this.logger\n              );\n\n        // initialize in memory storage for native flows\n        const nativeCacheOptions: Required<CacheOptions> = {\n            cacheLocation: BrowserCacheLocation.MemoryStorage,\n            temporaryCacheLocation: BrowserCacheLocation.MemoryStorage,\n            storeAuthStateInCookie: false,\n            secureCookies: false,\n            cacheMigrationEnabled: false,\n            claimsBasedCachingEnabled: false,\n        };\n        this.nativeInternalStorage = new BrowserCacheManager(\n            this.config.auth.clientId,\n            nativeCacheOptions,\n            this.browserCrypto,\n            this.logger,\n            undefined,\n            this.performanceClient\n        );\n\n        // Initialize the token cache\n        this.tokenCache = new TokenCache(\n            this.config,\n            this.browserStorage,\n            this.logger,\n            this.browserCrypto\n        );\n\n        this.activeSilentTokenRequests = new Map();\n\n        // Register listener functions\n        this.trackPageVisibility = this.trackPageVisibility.bind(this);\n\n        // Register listener functions\n        this.trackPageVisibilityWithMeasurement =\n            this.trackPageVisibilityWithMeasurement.bind(this);\n    }\n\n    static async createController(\n        operatingContext: BaseOperatingContext,\n        request?: InitializeApplicationRequest\n    ): Promise<IController> {\n        const controller = new StandardController(operatingContext);\n        await controller.initialize(request);\n        return controller;\n    }\n\n    private trackPageVisibility(correlationId?: string): void {\n        if (!correlationId) {\n            return;\n        }\n        this.logger.info(\"Perf: Visibility change detected\");\n        this.performanceClient.incrementFields(\n            { visibilityChangeCount: 1 },\n            correlationId\n        );\n    }\n\n    /**\n     * Initializer function to perform async startup tasks such as connecting to WAM extension\n     * @param request {?InitializeApplicationRequest} correlation id\n     */\n    async initialize(request?: InitializeApplicationRequest): Promise<void> {\n        this.logger.trace(\"initialize called\");\n        if (this.initialized) {\n            this.logger.info(\n                \"initialize has already been called, exiting early.\"\n            );\n            return;\n        }\n\n        const initCorrelationId =\n            request?.correlationId || this.getRequestCorrelationId();\n        const allowNativeBroker = this.config.system.allowNativeBroker;\n        const initMeasurement = this.performanceClient.startMeasurement(\n            PerformanceEvents.InitializeClientApplication,\n            initCorrelationId\n        );\n        this.eventHandler.emitEvent(EventType.INITIALIZE_START);\n\n        if (allowNativeBroker) {\n            try {\n                this.nativeExtensionProvider =\n                    await NativeMessageHandler.createProvider(\n                        this.logger,\n                        this.config.system.nativeBrokerHandshakeTimeout,\n                        this.performanceClient\n                    );\n            } catch (e) {\n                this.logger.verbose(e as string);\n            }\n        }\n\n        if (!this.config.cache.claimsBasedCachingEnabled) {\n            this.logger.verbose(\n                \"Claims-based caching is disabled. Clearing the previous cache with claims\"\n            );\n\n            await invokeAsync(\n                this.browserStorage.clearTokensAndKeysWithClaims.bind(\n                    this.browserStorage\n                ),\n                PerformanceEvents.ClearTokensAndKeysWithClaims,\n                this.logger,\n                this.performanceClient,\n                initCorrelationId\n            )(this.performanceClient, initCorrelationId);\n        }\n\n        this.initialized = true;\n        this.eventHandler.emitEvent(EventType.INITIALIZE_END);\n\n        initMeasurement.end({ allowNativeBroker, success: true });\n    }\n\n    // #region Redirect Flow\n\n    /**\n     * Event handler function which allows users to fire events after the PublicClientApplication object\n     * has loaded during redirect flows. This should be invoked on all page loads involved in redirect\n     * auth flows.\n     * @param hash Hash to process. Defaults to the current value of window.location.hash. Only needs to be provided explicitly if the response to be handled is not contained in the current value.\n     * @returns Token response or null. If the return value is null, then no auth redirect was detected.\n     */\n    async handleRedirectPromise(\n        hash?: string\n    ): Promise<AuthenticationResult | null> {\n        this.logger.verbose(\"handleRedirectPromise called\");\n        // Block token acquisition before initialize has been called\n        BrowserUtils.blockAPICallsBeforeInitialize(this.initialized);\n\n        if (this.isBrowserEnvironment) {\n            /**\n             * Store the promise on the PublicClientApplication instance if this is the first invocation of handleRedirectPromise,\n             * otherwise return the promise from the first invocation. Prevents race conditions when handleRedirectPromise is called\n             * several times concurrently.\n             */\n            const redirectResponseKey = hash || \"\";\n            let response = this.redirectResponse.get(redirectResponseKey);\n            if (typeof response === \"undefined\") {\n                response = this.handleRedirectPromiseInternal(hash);\n                this.redirectResponse.set(redirectResponseKey, response);\n                this.logger.verbose(\n                    \"handleRedirectPromise has been called for the first time, storing the promise\"\n                );\n            } else {\n                this.logger.verbose(\n                    \"handleRedirectPromise has been called previously, returning the result from the first call\"\n                );\n            }\n\n            return response;\n        }\n        this.logger.verbose(\n            \"handleRedirectPromise returns null, not browser environment\"\n        );\n        return null;\n    }\n\n    /**\n     * The internal details of handleRedirectPromise. This is separated out to a helper to allow handleRedirectPromise to memoize requests\n     * @param hash\n     * @returns\n     */\n    private async handleRedirectPromiseInternal(\n        hash?: string\n    ): Promise<AuthenticationResult | null> {\n        const loggedInAccounts = this.getAllAccounts();\n        const request: NativeTokenRequest | null =\n            this.browserStorage.getCachedNativeRequest();\n        const useNative =\n            request &&\n            NativeMessageHandler.isNativeAvailable(\n                this.config,\n                this.logger,\n                this.nativeExtensionProvider\n            ) &&\n            this.nativeExtensionProvider &&\n            !hash;\n        const correlationId = useNative\n            ? request?.correlationId\n            : this.browserStorage.getTemporaryCache(\n                  TemporaryCacheKeys.CORRELATION_ID,\n                  true\n              ) || \"\";\n        const rootMeasurement = this.performanceClient.startMeasurement(\n            PerformanceEvents.AcquireTokenRedirect,\n            correlationId\n        );\n        this.eventHandler.emitEvent(\n            EventType.HANDLE_REDIRECT_START,\n            InteractionType.Redirect\n        );\n\n        let redirectResponse: Promise<AuthenticationResult | null>;\n        if (useNative && this.nativeExtensionProvider) {\n            this.logger.trace(\n                \"handleRedirectPromise - acquiring token from native platform\"\n            );\n            const nativeClient = new NativeInteractionClient(\n                this.config,\n                this.browserStorage,\n                this.browserCrypto,\n                this.logger,\n                this.eventHandler,\n                this.navigationClient,\n                ApiId.handleRedirectPromise,\n                this.performanceClient,\n                this.nativeExtensionProvider,\n                request.accountId,\n                this.nativeInternalStorage,\n                request.correlationId\n            );\n\n            redirectResponse = invokeAsync(\n                nativeClient.handleRedirectPromise.bind(nativeClient),\n                PerformanceEvents.HandleNativeRedirectPromiseMeasurement,\n                this.logger,\n                this.performanceClient,\n                rootMeasurement.event.correlationId\n            )(this.performanceClient, rootMeasurement.event.correlationId);\n        } else {\n            this.logger.trace(\n                \"handleRedirectPromise - acquiring token from web flow\"\n            );\n            const redirectClient = this.createRedirectClient(correlationId);\n            redirectResponse = invokeAsync(\n                redirectClient.handleRedirectPromise.bind(redirectClient),\n                PerformanceEvents.HandleRedirectPromiseMeasurement,\n                this.logger,\n                this.performanceClient,\n                rootMeasurement.event.correlationId\n            )(hash, rootMeasurement);\n        }\n\n        return redirectResponse\n            .then((result: AuthenticationResult | null) => {\n                if (result) {\n                    // Emit login event if number of accounts change\n\n                    const isLoggingIn =\n                        loggedInAccounts.length < this.getAllAccounts().length;\n                    if (isLoggingIn) {\n                        this.eventHandler.emitEvent(\n                            EventType.LOGIN_SUCCESS,\n                            InteractionType.Redirect,\n                            result\n                        );\n                        this.logger.verbose(\n                            \"handleRedirectResponse returned result, login success\"\n                        );\n                    } else {\n                        this.eventHandler.emitEvent(\n                            EventType.ACQUIRE_TOKEN_SUCCESS,\n                            InteractionType.Redirect,\n                            result\n                        );\n                        this.logger.verbose(\n                            \"handleRedirectResponse returned result, acquire token success\"\n                        );\n                    }\n                    rootMeasurement.end({\n                        success: true,\n                        accountType: getAccountType(result.account),\n                    });\n                } else {\n                    /*\n                     * Instrument an event only if an error code is set. Otherwise, discard it when the redirect response\n                     * is empty and the error code is missing.\n                     */\n                    if (rootMeasurement.event.errorCode) {\n                        rootMeasurement.end({ success: false });\n                    } else {\n                        rootMeasurement.discard();\n                    }\n                }\n\n                this.eventHandler.emitEvent(\n                    EventType.HANDLE_REDIRECT_END,\n                    InteractionType.Redirect\n                );\n\n                return result;\n            })\n            .catch((e) => {\n                const eventError = e as EventError;\n                // Emit login event if there is an account\n                if (loggedInAccounts.length > 0) {\n                    this.eventHandler.emitEvent(\n                        EventType.ACQUIRE_TOKEN_FAILURE,\n                        InteractionType.Redirect,\n                        null,\n                        eventError\n                    );\n                } else {\n                    this.eventHandler.emitEvent(\n                        EventType.LOGIN_FAILURE,\n                        InteractionType.Redirect,\n                        null,\n                        eventError\n                    );\n                }\n                this.eventHandler.emitEvent(\n                    EventType.HANDLE_REDIRECT_END,\n                    InteractionType.Redirect\n                );\n\n                rootMeasurement.end(\n                    {\n                        success: false,\n                    },\n                    eventError\n                );\n\n                throw e;\n            });\n    }\n\n    /**\n     * Use when you want to obtain an access_token for your API by redirecting the user's browser window to the authorization endpoint. This function redirects\n     * the page, so any code that follows this function will not execute.\n     *\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\n     *\n     * @param request\n     */\n    async acquireTokenRedirect(request: RedirectRequest): Promise<void> {\n        // Preflight request\n        const correlationId = this.getRequestCorrelationId(request);\n        this.logger.verbose(\"acquireTokenRedirect called\", correlationId);\n\n        const atrMeasurement = this.performanceClient.startMeasurement(\n            PerformanceEvents.AcquireTokenPreRedirect,\n            correlationId\n        );\n        atrMeasurement.add({\n            accountType: getAccountType(request.account),\n            scenarioId: request.scenarioId,\n        });\n\n        const onRedirectNavigateCb = request.onRedirectNavigate;\n        request.onRedirectNavigate = (url: string) => {\n            const navigate =\n                typeof onRedirectNavigateCb === \"function\"\n                    ? onRedirectNavigateCb(url)\n                    : undefined;\n            if (navigate !== false) {\n                atrMeasurement.end({ success: true });\n            } else {\n                atrMeasurement.discard();\n            }\n            return navigate;\n        };\n\n        // If logged in, emit acquire token events\n        const isLoggedIn = this.getAllAccounts().length > 0;\n        try {\n            BrowserUtils.redirectPreflightCheck(this.initialized, this.config);\n            this.browserStorage.setInteractionInProgress(true);\n\n            if (isLoggedIn) {\n                this.eventHandler.emitEvent(\n                    EventType.ACQUIRE_TOKEN_START,\n                    InteractionType.Redirect,\n                    request\n                );\n            } else {\n                this.eventHandler.emitEvent(\n                    EventType.LOGIN_START,\n                    InteractionType.Redirect,\n                    request\n                );\n            }\n\n            let result: Promise<void>;\n\n            if (this.nativeExtensionProvider && this.canUseNative(request)) {\n                const nativeClient = new NativeInteractionClient(\n                    this.config,\n                    this.browserStorage,\n                    this.browserCrypto,\n                    this.logger,\n                    this.eventHandler,\n                    this.navigationClient,\n                    ApiId.acquireTokenRedirect,\n                    this.performanceClient,\n                    this.nativeExtensionProvider,\n                    this.getNativeAccountId(request),\n                    this.nativeInternalStorage,\n                    correlationId\n                );\n                result = nativeClient\n                    .acquireTokenRedirect(request, atrMeasurement)\n                    .catch((e: AuthError) => {\n                        if (\n                            e instanceof NativeAuthError &&\n                            isFatalNativeAuthError(e)\n                        ) {\n                            this.nativeExtensionProvider = undefined; // If extension gets uninstalled during session prevent future requests from continuing to attempt\n                            const redirectClient =\n                                this.createRedirectClient(correlationId);\n                            return redirectClient.acquireToken(request);\n                        } else if (e instanceof InteractionRequiredAuthError) {\n                            this.logger.verbose(\n                                \"acquireTokenRedirect - Resolving interaction required error thrown by native broker by falling back to web flow\"\n                            );\n                            const redirectClient =\n                                this.createRedirectClient(correlationId);\n                            return redirectClient.acquireToken(request);\n                        }\n                        this.browserStorage.setInteractionInProgress(false);\n                        throw e;\n                    });\n            } else {\n                const redirectClient = this.createRedirectClient(correlationId);\n                result = redirectClient.acquireToken(request);\n            }\n\n            return await result;\n        } catch (e) {\n            atrMeasurement.end({ success: false }, e);\n            if (isLoggedIn) {\n                this.eventHandler.emitEvent(\n                    EventType.ACQUIRE_TOKEN_FAILURE,\n                    InteractionType.Redirect,\n                    null,\n                    e as EventError\n                );\n            } else {\n                this.eventHandler.emitEvent(\n                    EventType.LOGIN_FAILURE,\n                    InteractionType.Redirect,\n                    null,\n                    e as EventError\n                );\n            }\n            throw e;\n        }\n    }\n\n    // #endregion\n\n    // #region Popup Flow\n\n    /**\n     * Use when you want to obtain an access_token for your API via opening a popup window in the user's browser\n     *\n     * @param request\n     *\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    acquireTokenPopup(request: PopupRequest): Promise<AuthenticationResult> {\n        const correlationId = this.getRequestCorrelationId(request);\n        const atPopupMeasurement = this.performanceClient.startMeasurement(\n            PerformanceEvents.AcquireTokenPopup,\n            correlationId\n        );\n\n        atPopupMeasurement.add({\n            scenarioId: request.scenarioId,\n            accountType: getAccountType(request.account),\n        });\n\n        try {\n            this.logger.verbose(\"acquireTokenPopup called\", correlationId);\n            preflightCheck(this.initialized, atPopupMeasurement);\n            this.browserStorage.setInteractionInProgress(true);\n        } catch (e) {\n            // Since this function is syncronous we need to reject\n            return Promise.reject(e);\n        }\n\n        // If logged in, emit acquire token events\n        const loggedInAccounts = this.getAllAccounts();\n        if (loggedInAccounts.length > 0) {\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_START,\n                InteractionType.Popup,\n                request\n            );\n        } else {\n            this.eventHandler.emitEvent(\n                EventType.LOGIN_START,\n                InteractionType.Popup,\n                request\n            );\n        }\n\n        let result: Promise<AuthenticationResult>;\n\n        if (this.canUseNative(request)) {\n            result = this.acquireTokenNative(\n                {\n                    ...request,\n                    correlationId,\n                },\n                ApiId.acquireTokenPopup\n            )\n                .then((response) => {\n                    this.browserStorage.setInteractionInProgress(false);\n                    atPopupMeasurement.end({\n                        success: true,\n                        isNativeBroker: true,\n                        requestId: response.requestId,\n                        accountType: getAccountType(response.account),\n                    });\n                    return response;\n                })\n                .catch((e: AuthError) => {\n                    if (\n                        e instanceof NativeAuthError &&\n                        isFatalNativeAuthError(e)\n                    ) {\n                        this.nativeExtensionProvider = undefined; // If extension gets uninstalled during session prevent future requests from continuing to attempt\n                        const popupClient =\n                            this.createPopupClient(correlationId);\n                        return popupClient.acquireToken(request);\n                    } else if (e instanceof InteractionRequiredAuthError) {\n                        this.logger.verbose(\n                            \"acquireTokenPopup - Resolving interaction required error thrown by native broker by falling back to web flow\"\n                        );\n                        const popupClient =\n                            this.createPopupClient(correlationId);\n                        return popupClient.acquireToken(request);\n                    }\n                    this.browserStorage.setInteractionInProgress(false);\n                    throw e;\n                });\n        } else {\n            const popupClient = this.createPopupClient(correlationId);\n            result = popupClient.acquireToken(request);\n        }\n\n        return result\n            .then((result) => {\n                /*\n                 *  If logged in, emit acquire token events\n                 */\n                const isLoggingIn =\n                    loggedInAccounts.length < this.getAllAccounts().length;\n                if (isLoggingIn) {\n                    this.eventHandler.emitEvent(\n                        EventType.LOGIN_SUCCESS,\n                        InteractionType.Popup,\n                        result\n                    );\n                } else {\n                    this.eventHandler.emitEvent(\n                        EventType.ACQUIRE_TOKEN_SUCCESS,\n                        InteractionType.Popup,\n                        result\n                    );\n                }\n\n                atPopupMeasurement.end({\n                    success: true,\n                    requestId: result.requestId,\n                    accessTokenSize: result.accessToken.length,\n                    idTokenSize: result.idToken.length,\n                    accountType: getAccountType(result.account),\n                });\n                return result;\n            })\n            .catch((e: Error) => {\n                if (loggedInAccounts.length > 0) {\n                    this.eventHandler.emitEvent(\n                        EventType.ACQUIRE_TOKEN_FAILURE,\n                        InteractionType.Popup,\n                        null,\n                        e\n                    );\n                } else {\n                    this.eventHandler.emitEvent(\n                        EventType.LOGIN_FAILURE,\n                        InteractionType.Popup,\n                        null,\n                        e\n                    );\n                }\n\n                atPopupMeasurement.end(\n                    {\n                        success: false,\n                    },\n                    e\n                );\n\n                // Since this function is syncronous we need to reject\n                return Promise.reject(e);\n            });\n    }\n\n    private trackPageVisibilityWithMeasurement(): void {\n        const measurement =\n            this.ssoSilentMeasurement ||\n            this.acquireTokenByCodeAsyncMeasurement;\n        if (!measurement) {\n            return;\n        }\n\n        this.logger.info(\n            \"Perf: Visibility change detected in \",\n            measurement.event.name\n        );\n        measurement.increment({\n            visibilityChangeCount: 1,\n        });\n    }\n    // #endregion\n\n    // #region Silent Flow\n\n    /**\n     * This function uses a hidden iframe to fetch an authorization code from the eSTS. There are cases where this may not work:\n     * - Any browser using a form of Intelligent Tracking Prevention\n     * - If there is not an established session with the service\n     *\n     * In these cases, the request must be done inside a popup or full frame redirect.\n     *\n     * For the cases where interaction is required, you cannot send a request with prompt=none.\n     *\n     * If your refresh token has expired, you can use this function to fetch a new set of tokens silently as long as\n     * you session on the server still exists.\n     * @param request {@link SsoSilentRequest}\n     *\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    async ssoSilent(request: SsoSilentRequest): Promise<AuthenticationResult> {\n        const correlationId = this.getRequestCorrelationId(request);\n        const validRequest = {\n            ...request,\n            // will be PromptValue.NONE or PromptValue.NO_SESSION\n            prompt: request.prompt,\n            correlationId: correlationId,\n        };\n        this.ssoSilentMeasurement = this.performanceClient.startMeasurement(\n            PerformanceEvents.SsoSilent,\n            correlationId\n        );\n        this.ssoSilentMeasurement?.add({\n            scenarioId: request.scenarioId,\n            accountType: getAccountType(request.account),\n        });\n        preflightCheck(this.initialized, this.ssoSilentMeasurement);\n        this.ssoSilentMeasurement?.increment({\n            visibilityChangeCount: 0,\n        });\n\n        document.addEventListener(\n            \"visibilitychange\",\n            this.trackPageVisibilityWithMeasurement\n        );\n        this.logger.verbose(\"ssoSilent called\", correlationId);\n        this.eventHandler.emitEvent(\n            EventType.SSO_SILENT_START,\n            InteractionType.Silent,\n            validRequest\n        );\n\n        let result: Promise<AuthenticationResult>;\n\n        if (this.canUseNative(validRequest)) {\n            result = this.acquireTokenNative(\n                validRequest,\n                ApiId.ssoSilent\n            ).catch((e: AuthError) => {\n                // If native token acquisition fails for availability reasons fallback to standard flow\n                if (e instanceof NativeAuthError && isFatalNativeAuthError(e)) {\n                    this.nativeExtensionProvider = undefined; // If extension gets uninstalled during session prevent future requests from continuing to attempt\n                    const silentIframeClient = this.createSilentIframeClient(\n                        validRequest.correlationId\n                    );\n                    return silentIframeClient.acquireToken(validRequest);\n                }\n                throw e;\n            });\n        } else {\n            const silentIframeClient = this.createSilentIframeClient(\n                validRequest.correlationId\n            );\n            result = silentIframeClient.acquireToken(validRequest);\n        }\n\n        return result\n            .then((response) => {\n                this.eventHandler.emitEvent(\n                    EventType.SSO_SILENT_SUCCESS,\n                    InteractionType.Silent,\n                    response\n                );\n                this.ssoSilentMeasurement?.end({\n                    success: true,\n                    isNativeBroker: response.fromNativeBroker,\n                    requestId: response.requestId,\n                    accessTokenSize: response.accessToken.length,\n                    idTokenSize: response.idToken.length,\n                    accountType: getAccountType(response.account),\n                });\n                return response;\n            })\n            .catch((e: Error) => {\n                this.eventHandler.emitEvent(\n                    EventType.SSO_SILENT_FAILURE,\n                    InteractionType.Silent,\n                    null,\n                    e\n                );\n                this.ssoSilentMeasurement?.end(\n                    {\n                        success: false,\n                    },\n                    e\n                );\n                throw e;\n            })\n            .finally(() => {\n                document.removeEventListener(\n                    \"visibilitychange\",\n                    this.trackPageVisibilityWithMeasurement\n                );\n            });\n    }\n\n    /**\n     * This function redeems an authorization code (passed as code) from the eSTS token endpoint.\n     * This authorization code should be acquired server-side using a confidential client to acquire a spa_code.\n     * This API is not indended for normal authorization code acquisition and redemption.\n     *\n     * Redemption of this authorization code will not require PKCE, as it was acquired by a confidential client.\n     *\n     * @param request {@link AuthorizationCodeRequest}\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    async acquireTokenByCode(\n        request: AuthorizationCodeRequest\n    ): Promise<AuthenticationResult> {\n        const correlationId = this.getRequestCorrelationId(request);\n        this.logger.trace(\"acquireTokenByCode called\", correlationId);\n        const atbcMeasurement = this.performanceClient.startMeasurement(\n            PerformanceEvents.AcquireTokenByCode,\n            correlationId\n        );\n        preflightCheck(this.initialized, atbcMeasurement);\n        this.eventHandler.emitEvent(\n            EventType.ACQUIRE_TOKEN_BY_CODE_START,\n            InteractionType.Silent,\n            request\n        );\n        atbcMeasurement.add({ scenarioId: request.scenarioId });\n\n        try {\n            if (request.code && request.nativeAccountId) {\n                // Throw error in case server returns both spa_code and spa_accountid in exchange for auth code.\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.spaCodeAndNativeAccountIdPresent\n                );\n            } else if (request.code) {\n                const hybridAuthCode = request.code;\n                let response = this.hybridAuthCodeResponses.get(hybridAuthCode);\n                if (!response) {\n                    this.logger.verbose(\n                        \"Initiating new acquireTokenByCode request\",\n                        correlationId\n                    );\n                    response = this.acquireTokenByCodeAsync({\n                        ...request,\n                        correlationId,\n                    })\n                        .then((result: AuthenticationResult) => {\n                            this.eventHandler.emitEvent(\n                                EventType.ACQUIRE_TOKEN_BY_CODE_SUCCESS,\n                                InteractionType.Silent,\n                                result\n                            );\n                            this.hybridAuthCodeResponses.delete(hybridAuthCode);\n                            atbcMeasurement.end({\n                                success: true,\n                                isNativeBroker: result.fromNativeBroker,\n                                requestId: result.requestId,\n                                accessTokenSize: result.accessToken.length,\n                                idTokenSize: result.idToken.length,\n                                accountType: getAccountType(result.account),\n                            });\n                            return result;\n                        })\n                        .catch((error: Error) => {\n                            this.hybridAuthCodeResponses.delete(hybridAuthCode);\n                            this.eventHandler.emitEvent(\n                                EventType.ACQUIRE_TOKEN_BY_CODE_FAILURE,\n                                InteractionType.Silent,\n                                null,\n                                error\n                            );\n                            atbcMeasurement.end(\n                                {\n                                    success: false,\n                                },\n                                error\n                            );\n                            throw error;\n                        });\n                    this.hybridAuthCodeResponses.set(hybridAuthCode, response);\n                } else {\n                    this.logger.verbose(\n                        \"Existing acquireTokenByCode request found\",\n                        correlationId\n                    );\n                    atbcMeasurement.discard();\n                }\n                return await response;\n            } else if (request.nativeAccountId) {\n                if (this.canUseNative(request, request.nativeAccountId)) {\n                    const result = await this.acquireTokenNative(\n                        {\n                            ...request,\n                            correlationId,\n                        },\n                        ApiId.acquireTokenByCode,\n                        request.nativeAccountId\n                    ).catch((e: AuthError) => {\n                        // If native token acquisition fails for availability reasons fallback to standard flow\n                        if (\n                            e instanceof NativeAuthError &&\n                            isFatalNativeAuthError(e)\n                        ) {\n                            this.nativeExtensionProvider = undefined; // If extension gets uninstalled during session prevent future requests from continuing to attempt\n                        }\n                        throw e;\n                    });\n                    atbcMeasurement.end({\n                        accountType: getAccountType(result.account),\n                        success: true,\n                    });\n                    return result;\n                } else {\n                    throw createBrowserAuthError(\n                        BrowserAuthErrorCodes.unableToAcquireTokenFromNativePlatform\n                    );\n                }\n            } else {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.authCodeOrNativeAccountIdRequired\n                );\n            }\n        } catch (e) {\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_BY_CODE_FAILURE,\n                InteractionType.Silent,\n                null,\n                e as EventError\n            );\n            atbcMeasurement.end(\n                {\n                    success: false,\n                },\n                e\n            );\n            throw e;\n        }\n    }\n\n    /**\n     * Creates a SilentAuthCodeClient to redeem an authorization code.\n     * @param request\n     * @returns Result of the operation to redeem the authorization code\n     */\n    private async acquireTokenByCodeAsync(\n        request: AuthorizationCodeRequest\n    ): Promise<AuthenticationResult> {\n        this.logger.trace(\n            \"acquireTokenByCodeAsync called\",\n            request.correlationId\n        );\n        this.acquireTokenByCodeAsyncMeasurement =\n            this.performanceClient.startMeasurement(\n                PerformanceEvents.AcquireTokenByCodeAsync,\n                request.correlationId\n            );\n        this.acquireTokenByCodeAsyncMeasurement?.increment({\n            visibilityChangeCount: 0,\n        });\n        document.addEventListener(\n            \"visibilitychange\",\n            this.trackPageVisibilityWithMeasurement\n        );\n        const silentAuthCodeClient = this.createSilentAuthCodeClient(\n            request.correlationId\n        );\n        const silentTokenResult = await silentAuthCodeClient\n            .acquireToken(request)\n            .then((response) => {\n                this.acquireTokenByCodeAsyncMeasurement?.end({\n                    success: true,\n                    fromCache: response.fromCache,\n                    isNativeBroker: response.fromNativeBroker,\n                    requestId: response.requestId,\n                });\n                return response;\n            })\n            .catch((tokenRenewalError: Error) => {\n                this.acquireTokenByCodeAsyncMeasurement?.end(\n                    {\n                        success: false,\n                    },\n                    tokenRenewalError\n                );\n                throw tokenRenewalError;\n            })\n            .finally(() => {\n                document.removeEventListener(\n                    \"visibilitychange\",\n                    this.trackPageVisibilityWithMeasurement\n                );\n            });\n        return silentTokenResult;\n    }\n\n    /**\n     * Attempt to acquire an access token from the cache\n     * @param silentCacheClient SilentCacheClient\n     * @param commonRequest CommonSilentFlowRequest\n     * @param silentRequest SilentRequest\n     * @returns A promise that, when resolved, returns the access token\n     */\n    protected async acquireTokenFromCache(\n        commonRequest: CommonSilentFlowRequest,\n        cacheLookupPolicy: CacheLookupPolicy\n    ): Promise<AuthenticationResult> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.AcquireTokenFromCache,\n            commonRequest.correlationId\n        );\n        switch (cacheLookupPolicy) {\n            case CacheLookupPolicy.Default:\n            case CacheLookupPolicy.AccessToken:\n            case CacheLookupPolicy.AccessTokenAndRefreshToken:\n                const silentCacheClient = this.createSilentCacheClient(\n                    commonRequest.correlationId\n                );\n                return invokeAsync(\n                    silentCacheClient.acquireToken.bind(silentCacheClient),\n                    PerformanceEvents.SilentCacheClientAcquireToken,\n                    this.logger,\n                    this.performanceClient,\n                    commonRequest.correlationId\n                )(commonRequest);\n            default:\n                throw createClientAuthError(\n                    ClientAuthErrorCodes.tokenRefreshRequired\n                );\n        }\n    }\n\n    /**\n     * Attempt to acquire an access token via a refresh token\n     * @param commonRequest CommonSilentFlowRequest\n     * @param cacheLookupPolicy CacheLookupPolicy\n     * @returns A promise that, when resolved, returns the access token\n     */\n    public async acquireTokenByRefreshToken(\n        commonRequest: CommonSilentFlowRequest,\n        cacheLookupPolicy: CacheLookupPolicy\n    ): Promise<AuthenticationResult> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.AcquireTokenByRefreshToken,\n            commonRequest.correlationId\n        );\n        switch (cacheLookupPolicy) {\n            case CacheLookupPolicy.Default:\n            case CacheLookupPolicy.AccessTokenAndRefreshToken:\n            case CacheLookupPolicy.RefreshToken:\n            case CacheLookupPolicy.RefreshTokenAndNetwork:\n                const silentRefreshClient = this.createSilentRefreshClient(\n                    commonRequest.correlationId\n                );\n\n                return invokeAsync(\n                    silentRefreshClient.acquireToken.bind(silentRefreshClient),\n                    PerformanceEvents.SilentRefreshClientAcquireToken,\n                    this.logger,\n                    this.performanceClient,\n                    commonRequest.correlationId\n                )(commonRequest);\n            default:\n                throw createClientAuthError(\n                    ClientAuthErrorCodes.tokenRefreshRequired\n                );\n        }\n    }\n\n    /**\n     * Attempt to acquire an access token via an iframe\n     * @param request CommonSilentFlowRequest\n     * @returns A promise that, when resolved, returns the access token\n     */\n    protected async acquireTokenBySilentIframe(\n        request: CommonSilentFlowRequest\n    ): Promise<AuthenticationResult> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.AcquireTokenBySilentIframe,\n            request.correlationId\n        );\n\n        const silentIframeClient = this.createSilentIframeClient(\n            request.correlationId\n        );\n\n        return invokeAsync(\n            silentIframeClient.acquireToken.bind(silentIframeClient),\n            PerformanceEvents.SilentIframeClientAcquireToken,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(request);\n    }\n\n    // #endregion\n\n    // #region Logout\n\n    /**\n     * Deprecated logout function. Use logoutRedirect or logoutPopup instead\n     * @param logoutRequest\n     * @deprecated\n     */\n    async logout(logoutRequest?: EndSessionRequest): Promise<void> {\n        const correlationId = this.getRequestCorrelationId(logoutRequest);\n        this.logger.warning(\n            \"logout API is deprecated and will be removed in msal-browser v3.0.0. Use logoutRedirect instead.\",\n            correlationId\n        );\n        return this.logoutRedirect({\n            correlationId,\n            ...logoutRequest,\n        });\n    }\n\n    /**\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\n     * Default behaviour is to redirect the user to `window.location.href`.\n     * @param logoutRequest\n     */\n    async logoutRedirect(logoutRequest?: EndSessionRequest): Promise<void> {\n        const correlationId = this.getRequestCorrelationId(logoutRequest);\n        BrowserUtils.redirectPreflightCheck(this.initialized, this.config);\n        this.browserStorage.setInteractionInProgress(true);\n\n        const redirectClient = this.createRedirectClient(correlationId);\n        return redirectClient.logout(logoutRequest);\n    }\n\n    /**\n     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\n     * @param logoutRequest\n     */\n    logoutPopup(logoutRequest?: EndSessionPopupRequest): Promise<void> {\n        try {\n            const correlationId = this.getRequestCorrelationId(logoutRequest);\n            BrowserUtils.preflightCheck(this.initialized);\n            this.browserStorage.setInteractionInProgress(true);\n\n            const popupClient = this.createPopupClient(correlationId);\n            return popupClient.logout(logoutRequest);\n        } catch (e) {\n            // Since this function is syncronous we need to reject\n            return Promise.reject(e);\n        }\n    }\n\n    /**\n     * Creates a cache interaction client to clear broswer cache.\n     * @param logoutRequest\n     */\n    async clearCache(logoutRequest?: ClearCacheRequest): Promise<void> {\n        const correlationId = this.getRequestCorrelationId(logoutRequest);\n        const cacheClient = this.createSilentCacheClient(correlationId);\n        return cacheClient.logout(logoutRequest);\n    }\n\n    // #endregion\n\n    // #region Account APIs\n\n    /**\n     * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.\n     * @param accountFilter - (Optional) filter to narrow down the accounts returned\n     * @returns Array of AccountInfo objects in cache\n     */\n    getAllAccounts(accountFilter?: AccountFilter): AccountInfo[] {\n        return AccountManager.getAllAccounts(\n            this.logger,\n            this.browserStorage,\n            this.isBrowserEnvironment,\n            accountFilter\n        );\n    }\n\n    /**\n     * Returns the first account found in the cache that matches the account filter passed in.\n     * @param accountFilter\n     * @returns The first account found in the cache matching the provided filter or null if no account could be found.\n     */\n    getAccount(accountFilter: AccountFilter): AccountInfo | null {\n        return AccountManager.getAccount(\n            accountFilter,\n            this.logger,\n            this.browserStorage\n        );\n    }\n\n    /**\n     * Returns the signed in account matching username.\n     * (the account object is created at the time of successful login)\n     * or null when no matching account is found.\n     * This API is provided for convenience but getAccountById should be used for best reliability\n     * @param username\n     * @returns The account object stored in MSAL\n     */\n    getAccountByUsername(username: string): AccountInfo | null {\n        return AccountManager.getAccountByUsername(\n            username,\n            this.logger,\n            this.browserStorage\n        );\n    }\n\n    /**\n     * Returns the signed in account matching homeAccountId.\n     * (the account object is created at the time of successful login)\n     * or null when no matching account is found\n     * @param homeAccountId\n     * @returns The account object stored in MSAL\n     */\n    getAccountByHomeId(homeAccountId: string): AccountInfo | null {\n        return AccountManager.getAccountByHomeId(\n            homeAccountId,\n            this.logger,\n            this.browserStorage\n        );\n    }\n\n    /**\n     * Returns the signed in account matching localAccountId.\n     * (the account object is created at the time of successful login)\n     * or null when no matching account is found\n     * @param localAccountId\n     * @returns The account object stored in MSAL\n     */\n    getAccountByLocalId(localAccountId: string): AccountInfo | null {\n        return AccountManager.getAccountByLocalId(\n            localAccountId,\n            this.logger,\n            this.browserStorage\n        );\n    }\n\n    /**\n     * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.\n     * @param account\n     */\n    setActiveAccount(account: AccountInfo | null): void {\n        AccountManager.setActiveAccount(account, this.browserStorage);\n    }\n\n    /**\n     * Gets the currently active account\n     */\n    getActiveAccount(): AccountInfo | null {\n        return AccountManager.getActiveAccount(this.browserStorage);\n    }\n\n    // #endregion\n\n    /**\n     * Hydrates the cache with the tokens from an AuthenticationResult\n     * @param result\n     * @param request\n     * @returns\n     */\n    async hydrateCache(\n        result: AuthenticationResult,\n        request:\n            | SilentRequest\n            | SsoSilentRequest\n            | RedirectRequest\n            | PopupRequest\n    ): Promise<void> {\n        this.logger.verbose(\"hydrateCache called\");\n\n        // Account gets saved to browser storage regardless of native or not\n        const accountEntity = AccountEntity.createFromAccountInfo(\n            result.account,\n            result.cloudGraphHostName,\n            result.msGraphHost\n        );\n        this.browserStorage.setAccount(accountEntity);\n\n        if (result.fromNativeBroker) {\n            this.logger.verbose(\n                \"Response was from native broker, storing in-memory\"\n            );\n            // Tokens from native broker are stored in-memory\n            return this.nativeInternalStorage.hydrateCache(result, request);\n        } else {\n            return this.browserStorage.hydrateCache(result, request);\n        }\n    }\n\n    // #region Helpers\n\n    /**\n     * Acquire a token from native device (e.g. WAM)\n     * @param request\n     */\n    public async acquireTokenNative(\n        request: PopupRequest | SilentRequest | SsoSilentRequest,\n        apiId: ApiId,\n        accountId?: string\n    ): Promise<AuthenticationResult> {\n        this.logger.trace(\"acquireTokenNative called\");\n        if (!this.nativeExtensionProvider) {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.nativeConnectionNotEstablished\n            );\n        }\n\n        const nativeClient = new NativeInteractionClient(\n            this.config,\n            this.browserStorage,\n            this.browserCrypto,\n            this.logger,\n            this.eventHandler,\n            this.navigationClient,\n            apiId,\n            this.performanceClient,\n            this.nativeExtensionProvider,\n            accountId || this.getNativeAccountId(request),\n            this.nativeInternalStorage,\n            request.correlationId\n        );\n\n        return nativeClient.acquireToken(request);\n    }\n\n    /**\n     * Returns boolean indicating if this request can use the native broker\n     * @param request\n     */\n    public canUseNative(\n        request: RedirectRequest | PopupRequest | SsoSilentRequest,\n        accountId?: string\n    ): boolean {\n        this.logger.trace(\"canUseNative called\");\n        if (\n            !NativeMessageHandler.isNativeAvailable(\n                this.config,\n                this.logger,\n                this.nativeExtensionProvider,\n                request.authenticationScheme\n            )\n        ) {\n            this.logger.trace(\n                \"canUseNative: isNativeAvailable returned false, returning false\"\n            );\n            return false;\n        }\n\n        if (request.prompt) {\n            switch (request.prompt) {\n                case PromptValue.NONE:\n                case PromptValue.CONSENT:\n                case PromptValue.LOGIN:\n                    this.logger.trace(\n                        \"canUseNative: prompt is compatible with native flow\"\n                    );\n                    break;\n                default:\n                    this.logger.trace(\n                        `canUseNative: prompt = ${request.prompt} is not compatible with native flow, returning false`\n                    );\n                    return false;\n            }\n        }\n\n        if (!accountId && !this.getNativeAccountId(request)) {\n            this.logger.trace(\n                \"canUseNative: nativeAccountId is not available, returning false\"\n            );\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Get the native accountId from the account\n     * @param request\n     * @returns\n     */\n    public getNativeAccountId(\n        request: RedirectRequest | PopupRequest | SsoSilentRequest\n    ): string {\n        const account =\n            request.account ||\n            this.getAccount({\n                loginHint: request.loginHint,\n                sid: request.sid,\n            }) ||\n            this.getActiveAccount();\n\n        return (account && account.nativeAccountId) || \"\";\n    }\n\n    /**\n     * Returns new instance of the Popup Interaction Client\n     * @param correlationId\n     */\n    public createPopupClient(correlationId?: string): PopupClient {\n        return new PopupClient(\n            this.config,\n            this.browserStorage,\n            this.browserCrypto,\n            this.logger,\n            this.eventHandler,\n            this.navigationClient,\n            this.performanceClient,\n            this.nativeInternalStorage,\n            this.nativeExtensionProvider,\n            correlationId\n        );\n    }\n\n    /**\n     * Returns new instance of the Redirect Interaction Client\n     * @param correlationId\n     */\n    protected createRedirectClient(correlationId?: string): RedirectClient {\n        return new RedirectClient(\n            this.config,\n            this.browserStorage,\n            this.browserCrypto,\n            this.logger,\n            this.eventHandler,\n            this.navigationClient,\n            this.performanceClient,\n            this.nativeInternalStorage,\n            this.nativeExtensionProvider,\n            correlationId\n        );\n    }\n\n    /**\n     * Returns new instance of the Silent Iframe Interaction Client\n     * @param correlationId\n     */\n    public createSilentIframeClient(\n        correlationId?: string\n    ): SilentIframeClient {\n        return new SilentIframeClient(\n            this.config,\n            this.browserStorage,\n            this.browserCrypto,\n            this.logger,\n            this.eventHandler,\n            this.navigationClient,\n            ApiId.ssoSilent,\n            this.performanceClient,\n            this.nativeInternalStorage,\n            this.nativeExtensionProvider,\n            correlationId\n        );\n    }\n\n    /**\n     * Returns new instance of the Silent Cache Interaction Client\n     */\n    protected createSilentCacheClient(\n        correlationId?: string\n    ): SilentCacheClient {\n        return new SilentCacheClient(\n            this.config,\n            this.browserStorage,\n            this.browserCrypto,\n            this.logger,\n            this.eventHandler,\n            this.navigationClient,\n            this.performanceClient,\n            this.nativeExtensionProvider,\n            correlationId\n        );\n    }\n\n    /**\n     * Returns new instance of the Silent Refresh Interaction Client\n     */\n    protected createSilentRefreshClient(\n        correlationId?: string\n    ): SilentRefreshClient {\n        return new SilentRefreshClient(\n            this.config,\n            this.browserStorage,\n            this.browserCrypto,\n            this.logger,\n            this.eventHandler,\n            this.navigationClient,\n            this.performanceClient,\n            this.nativeExtensionProvider,\n            correlationId\n        );\n    }\n\n    /**\n     * Returns new instance of the Silent AuthCode Interaction Client\n     */\n    protected createSilentAuthCodeClient(\n        correlationId?: string\n    ): SilentAuthCodeClient {\n        return new SilentAuthCodeClient(\n            this.config,\n            this.browserStorage,\n            this.browserCrypto,\n            this.logger,\n            this.eventHandler,\n            this.navigationClient,\n            ApiId.acquireTokenByCode,\n            this.performanceClient,\n            this.nativeExtensionProvider,\n            correlationId\n        );\n    }\n\n    /**\n     * Adds event callbacks to array\n     * @param callback\n     */\n    addEventCallback(callback: EventCallbackFunction): string | null {\n        return this.eventHandler.addEventCallback(callback);\n    }\n\n    /**\n     * Removes callback with provided id from callback array\n     * @param callbackId\n     */\n    removeEventCallback(callbackId: string): void {\n        this.eventHandler.removeEventCallback(callbackId);\n    }\n\n    /**\n     * Registers a callback to receive performance events.\n     *\n     * @param {PerformanceCallbackFunction} callback\n     * @returns {string}\n     */\n    addPerformanceCallback(callback: PerformanceCallbackFunction): string {\n        return this.performanceClient.addPerformanceCallback(callback);\n    }\n\n    /**\n     * Removes a callback registered with addPerformanceCallback.\n     *\n     * @param {string} callbackId\n     * @returns {boolean}\n     */\n    removePerformanceCallback(callbackId: string): boolean {\n        return this.performanceClient.removePerformanceCallback(callbackId);\n    }\n\n    /**\n     * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\n     */\n    enableAccountStorageEvents(): void {\n        this.eventHandler.enableAccountStorageEvents();\n    }\n\n    /**\n     * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\n     */\n    disableAccountStorageEvents(): void {\n        this.eventHandler.disableAccountStorageEvents();\n    }\n\n    /**\n     * Gets the token cache for the application.\n     */\n    getTokenCache(): ITokenCache {\n        return this.tokenCache;\n    }\n\n    /**\n     * Returns the logger instance\n     */\n    public getLogger(): Logger {\n        return this.logger;\n    }\n\n    /**\n     * Replaces the default logger set in configurations with new Logger with new configurations\n     * @param logger Logger instance\n     */\n    setLogger(logger: Logger): void {\n        this.logger = logger;\n    }\n\n    /**\n     * Called by wrapper libraries (Angular & React) to set SKU and Version passed down to telemetry, logger, etc.\n     * @param sku\n     * @param version\n     */\n    initializeWrapperLibrary(sku: WrapperSKU, version: string): void {\n        // Validate the SKU passed in is one we expect\n        this.browserStorage.setWrapperMetadata(sku, version);\n    }\n\n    /**\n     * Sets navigation client\n     * @param navigationClient\n     */\n    setNavigationClient(navigationClient: INavigationClient): void {\n        this.navigationClient = navigationClient;\n    }\n\n    /**\n     * Returns the configuration object\n     */\n    public getConfiguration(): BrowserConfiguration {\n        return this.config;\n    }\n\n    /**\n     * Returns the performance client\n     */\n    public getPerformanceClient(): IPerformanceClient {\n        return this.performanceClient;\n    }\n\n    /**\n     * Returns the browser env indicator\n     */\n    public isBrowserEnv(): boolean {\n        return this.isBrowserEnvironment;\n    }\n\n    /**\n     * Returns the event handler\n     */\n    getEventHandler(): EventHandler {\n        return this.eventHandler;\n    }\n\n    /**\n     * Generates a correlation id for a request if none is provided.\n     *\n     * @protected\n     * @param {?Partial<BaseAuthRequest>} [request]\n     * @returns {string}\n     */\n    protected getRequestCorrelationId(\n        request?: Partial<BaseAuthRequest>\n    ): string {\n        if (request?.correlationId) {\n            return request.correlationId;\n        }\n\n        if (this.isBrowserEnvironment) {\n            return createNewGuid();\n        }\n\n        /*\n         * Included for fallback for non-browser environments,\n         * and to ensure this method always returns a string.\n         */\n        return Constants.EMPTY_STRING;\n    }\n\n    // #endregion\n\n    /**\n     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\n     * any code that follows this function will not execute.\n     *\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\n     *\n     * @param request\n     */\n    async loginRedirect(request?: RedirectRequest): Promise<void> {\n        const correlationId: string = this.getRequestCorrelationId(request);\n        this.logger.verbose(\"loginRedirect called\", correlationId);\n        return this.acquireTokenRedirect({\n            correlationId,\n            ...(request || DEFAULT_REQUEST),\n        });\n    }\n\n    /**\n     * Use when initiating the login process via opening a popup window in the user's browser\n     *\n     * @param request\n     *\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    loginPopup(request?: PopupRequest): Promise<AuthenticationResult> {\n        const correlationId: string = this.getRequestCorrelationId(request);\n        this.logger.verbose(\"loginPopup called\", correlationId);\n        return this.acquireTokenPopup({\n            correlationId,\n            ...(request || DEFAULT_REQUEST),\n        });\n    }\n\n    /**\n     * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\n     *\n     * @param {@link (SilentRequest:type)}\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\n     */\n    async acquireTokenSilent(\n        request: SilentRequest\n    ): Promise<AuthenticationResult> {\n        const correlationId = this.getRequestCorrelationId(request);\n        const atsMeasurement = this.performanceClient.startMeasurement(\n            PerformanceEvents.AcquireTokenSilent,\n            correlationId\n        );\n        atsMeasurement.add({\n            cacheLookupPolicy: request.cacheLookupPolicy,\n            scenarioId: request.scenarioId,\n        });\n\n        preflightCheck(this.initialized, atsMeasurement);\n        this.logger.verbose(\"acquireTokenSilent called\", correlationId);\n\n        const account = request.account || this.getActiveAccount();\n        if (!account) {\n            throw createBrowserAuthError(BrowserAuthErrorCodes.noAccountError);\n        }\n        atsMeasurement.add({ accountType: getAccountType(account) });\n\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.auth.clientId,\n            authority: request.authority || Constants.EMPTY_STRING,\n            scopes: request.scopes,\n            homeAccountIdentifier: account.homeAccountId,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid,\n            shrOptions: request.shrOptions,\n        };\n        const silentRequestKey = JSON.stringify(thumbprint);\n\n        const cachedResponse =\n            this.activeSilentTokenRequests.get(silentRequestKey);\n        if (typeof cachedResponse === \"undefined\") {\n            this.logger.verbose(\n                \"acquireTokenSilent called for the first time, storing active request\",\n                correlationId\n            );\n\n            const response = invokeAsync(\n                this.acquireTokenSilentAsync.bind(this),\n                PerformanceEvents.AcquireTokenSilentAsync,\n                this.logger,\n                this.performanceClient,\n                correlationId\n            )(\n                {\n                    ...request,\n                    correlationId,\n                },\n                account\n            )\n                .then((result) => {\n                    this.activeSilentTokenRequests.delete(silentRequestKey);\n                    atsMeasurement.end({\n                        success: true,\n                        fromCache: result.fromCache,\n                        isNativeBroker: result.fromNativeBroker,\n                        cacheLookupPolicy: request.cacheLookupPolicy,\n                        requestId: result.requestId,\n                        accessTokenSize: result.accessToken.length,\n                        idTokenSize: result.idToken.length,\n                    });\n                    return result;\n                })\n                .catch((error: Error) => {\n                    this.activeSilentTokenRequests.delete(silentRequestKey);\n                    atsMeasurement.end(\n                        {\n                            success: false,\n                        },\n                        error\n                    );\n                    throw error;\n                });\n            this.activeSilentTokenRequests.set(silentRequestKey, response);\n            return {\n                ...(await response),\n                state: request.state,\n            };\n        } else {\n            this.logger.verbose(\n                \"acquireTokenSilent has been called previously, returning the result from the first call\",\n                correlationId\n            );\n            // Discard measurements for memoized calls, as they are usually only a couple of ms and will artificially deflate metrics\n            atsMeasurement.discard();\n            return {\n                ...(await cachedResponse),\n                state: request.state,\n            };\n        }\n    }\n\n    /**\n     * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.\n     * @param {@link (SilentRequest:type)}\n     * @param {@link (AccountInfo:type)}\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse}\n     */\n    protected async acquireTokenSilentAsync(\n        request: SilentRequest & { correlationId: string },\n        account: AccountInfo\n    ): Promise<AuthenticationResult> {\n        const trackPageVisibility = () =>\n            this.trackPageVisibility(request.correlationId);\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.AcquireTokenSilentAsync,\n            request.correlationId\n        );\n\n        this.eventHandler.emitEvent(\n            EventType.ACQUIRE_TOKEN_START,\n            InteractionType.Silent,\n            request\n        );\n\n        if (request.correlationId) {\n            this.performanceClient.incrementFields(\n                { visibilityChangeCount: 0 },\n                request.correlationId\n            );\n        }\n\n        document.addEventListener(\"visibilitychange\", trackPageVisibility);\n\n        const silentRequest = await invokeAsync(\n            initializeSilentRequest,\n            PerformanceEvents.InitializeSilentRequest,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(request, account, this.config, this.performanceClient, this.logger);\n        const cacheLookupPolicy =\n            request.cacheLookupPolicy || CacheLookupPolicy.Default;\n\n        const result = this.acquireTokenSilentNoIframe(\n            silentRequest,\n            cacheLookupPolicy\n        ).catch(async (refreshTokenError: AuthError) => {\n            const shouldTryToResolveSilently =\n                checkIfRefreshTokenErrorCanBeResolvedSilently(\n                    refreshTokenError,\n                    cacheLookupPolicy\n                );\n\n            if (shouldTryToResolveSilently) {\n                if (!this.activeIframeRequest) {\n                    let _resolve: (result: boolean) => void;\n                    // Always set the active request tracker immediately after checking it to prevent races\n                    this.activeIframeRequest = [\n                        new Promise((resolve) => {\n                            _resolve = resolve;\n                        }),\n                        silentRequest.correlationId,\n                    ];\n                    this.logger.verbose(\n                        \"Refresh token expired/invalid or CacheLookupPolicy is set to Skip, attempting acquire token by iframe.\",\n                        silentRequest.correlationId\n                    );\n                    return invokeAsync(\n                        this.acquireTokenBySilentIframe.bind(this),\n                        PerformanceEvents.AcquireTokenBySilentIframe,\n                        this.logger,\n                        this.performanceClient,\n                        silentRequest.correlationId\n                    )(silentRequest)\n                        .then((iframeResult) => {\n                            _resolve(true);\n                            return iframeResult;\n                        })\n                        .catch((e) => {\n                            _resolve(false);\n                            throw e;\n                        })\n                        .finally(() => {\n                            this.activeIframeRequest = undefined;\n                        });\n                } else if (cacheLookupPolicy !== CacheLookupPolicy.Skip) {\n                    const [activePromise, activeCorrelationId] =\n                        this.activeIframeRequest;\n                    this.logger.verbose(\n                        `Iframe request is already in progress, awaiting resolution for request with correlationId: ${activeCorrelationId}`,\n                        silentRequest.correlationId\n                    );\n                    const awaitConcurrentIframeMeasure =\n                        this.performanceClient.startMeasurement(\n                            PerformanceEvents.AwaitConcurrentIframe,\n                            silentRequest.correlationId\n                        );\n                    awaitConcurrentIframeMeasure.add({\n                        awaitIframeCorrelationId: activeCorrelationId,\n                    });\n\n                    const activePromiseResult = await activePromise;\n                    awaitConcurrentIframeMeasure.end({\n                        success: activePromiseResult,\n                    });\n                    if (activePromiseResult) {\n                        this.logger.verbose(\n                            `Parallel iframe request with correlationId: ${activeCorrelationId} succeeded. Retrying cache and/or RT redemption`,\n                            silentRequest.correlationId\n                        );\n                        // Retry cache lookup and/or RT exchange after iframe completes\n                        return this.acquireTokenSilentNoIframe(\n                            silentRequest,\n                            cacheLookupPolicy\n                        );\n                    } else {\n                        this.logger.info(\n                            `Iframe request with correlationId: ${activeCorrelationId} failed. Interaction is required.`\n                        );\n                        // If previous iframe request failed, it's unlikely to succeed this time. Throw original error.\n                        throw refreshTokenError;\n                    }\n                } else {\n                    // Cache policy set to skip and another iframe request is already in progress\n                    this.logger.warning(\n                        \"Another iframe request is currently in progress and CacheLookupPolicy is set to Skip. This may result in degraded performance and/or reliability for both calls. Please consider changing the CacheLookupPolicy to take advantage of request queuing and token cache.\",\n                        silentRequest.correlationId\n                    );\n                    return invokeAsync(\n                        this.acquireTokenBySilentIframe.bind(this),\n                        PerformanceEvents.AcquireTokenBySilentIframe,\n                        this.logger,\n                        this.performanceClient,\n                        silentRequest.correlationId\n                    )(silentRequest);\n                }\n            } else {\n                // Error cannot be silently resolved or iframe renewal is not allowed, interaction required\n                throw refreshTokenError;\n            }\n        });\n\n        return result\n            .then((response) => {\n                this.eventHandler.emitEvent(\n                    EventType.ACQUIRE_TOKEN_SUCCESS,\n                    InteractionType.Silent,\n                    response\n                );\n                if (request.correlationId) {\n                    this.performanceClient.addFields(\n                        {\n                            fromCache: response.fromCache,\n                            isNativeBroker: response.fromNativeBroker,\n                            requestId: response.requestId,\n                        },\n                        request.correlationId\n                    );\n                }\n\n                return response;\n            })\n            .catch((tokenRenewalError: Error) => {\n                this.eventHandler.emitEvent(\n                    EventType.ACQUIRE_TOKEN_FAILURE,\n                    InteractionType.Silent,\n                    null,\n                    tokenRenewalError\n                );\n                throw tokenRenewalError;\n            })\n            .finally(() => {\n                document.removeEventListener(\n                    \"visibilitychange\",\n                    trackPageVisibility\n                );\n            });\n    }\n\n    /**\n     * AcquireTokenSilent without the iframe fallback. This is used to enable the correct fallbacks in cases where there's a potential for multiple silent requests to be made in parallel and prevent those requests from making concurrent iframe requests.\n     * @param silentRequest\n     * @param cacheLookupPolicy\n     * @returns\n     */\n    private async acquireTokenSilentNoIframe(\n        silentRequest: CommonSilentFlowRequest,\n        cacheLookupPolicy: CacheLookupPolicy\n    ): Promise<AuthenticationResult> {\n        if (\n            NativeMessageHandler.isNativeAvailable(\n                this.config,\n                this.logger,\n                this.nativeExtensionProvider,\n                silentRequest.authenticationScheme\n            ) &&\n            silentRequest.account.nativeAccountId\n        ) {\n            this.logger.verbose(\n                \"acquireTokenSilent - attempting to acquire token from native platform\"\n            );\n            return this.acquireTokenNative(\n                silentRequest,\n                ApiId.acquireTokenSilent_silentFlow\n            ).catch(async (e: AuthError) => {\n                // If native token acquisition fails for availability reasons fallback to web flow\n                if (e instanceof NativeAuthError && isFatalNativeAuthError(e)) {\n                    this.logger.verbose(\n                        \"acquireTokenSilent - native platform unavailable, falling back to web flow\"\n                    );\n                    this.nativeExtensionProvider = undefined; // Prevent future requests from continuing to attempt\n\n                    // Cache will not contain tokens, given that previous WAM requests succeeded. Skip cache and RT renewal and go straight to iframe renewal\n                    throw createClientAuthError(\n                        ClientAuthErrorCodes.tokenRefreshRequired\n                    );\n                }\n                throw e;\n            });\n        } else {\n            this.logger.verbose(\n                \"acquireTokenSilent - attempting to acquire token from web flow\"\n            );\n            return invokeAsync(\n                this.acquireTokenFromCache.bind(this),\n                PerformanceEvents.AcquireTokenFromCache,\n                this.logger,\n                this.performanceClient,\n                silentRequest.correlationId\n            )(silentRequest, cacheLookupPolicy).catch(\n                (cacheError: AuthError) => {\n                    if (cacheLookupPolicy === CacheLookupPolicy.AccessToken) {\n                        throw cacheError;\n                    }\n\n                    this.eventHandler.emitEvent(\n                        EventType.ACQUIRE_TOKEN_NETWORK_START,\n                        InteractionType.Silent,\n                        silentRequest\n                    );\n\n                    return invokeAsync(\n                        this.acquireTokenByRefreshToken.bind(this),\n                        PerformanceEvents.AcquireTokenByRefreshToken,\n                        this.logger,\n                        this.performanceClient,\n                        silentRequest.correlationId\n                    )(silentRequest, cacheLookupPolicy);\n                }\n            );\n        }\n    }\n}\n\n/**\n * Determines whether an error thrown by the refresh token endpoint can be resolved without interaction\n * @param refreshTokenError\n * @param silentRequest\n * @param cacheLookupPolicy\n * @returns\n */\nfunction checkIfRefreshTokenErrorCanBeResolvedSilently(\n    refreshTokenError: AuthError,\n    cacheLookupPolicy: CacheLookupPolicy\n): boolean {\n    const noInteractionRequired = !(\n        refreshTokenError instanceof InteractionRequiredAuthError &&\n        // For refresh token errors, bad_token does not always require interaction (silently resolvable)\n        refreshTokenError.subError !==\n            InteractionRequiredAuthErrorCodes.badToken\n    );\n\n    // Errors that result when the refresh token needs to be replaced\n    const refreshTokenRefreshRequired =\n        refreshTokenError.errorCode === BrowserConstants.INVALID_GRANT_ERROR ||\n        refreshTokenError.errorCode ===\n            ClientAuthErrorCodes.tokenRefreshRequired;\n\n    // Errors that may be resolved before falling back to interaction (through iframe renewal)\n    const isSilentlyResolvable =\n        (noInteractionRequired && refreshTokenRefreshRequired) ||\n        refreshTokenError.errorCode ===\n            InteractionRequiredAuthErrorCodes.noTokensFound ||\n        refreshTokenError.errorCode ===\n            InteractionRequiredAuthErrorCodes.refreshTokenExpired;\n\n    // Only these policies allow for an iframe renewal attempt\n    const tryIframeRenewal = iFrameRenewalPolicies.includes(cacheLookupPolicy);\n\n    return isSilentlyResolvable && tryIframeRenewal;\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BridgeStatusCode } from \"./BridgeStatusCode\";\n\nexport type BridgeError = {\n    status: BridgeStatusCode;\n    code?: string; // auth_flow_last_error such as invalid_grant\n    subError?: string; // server_suberror_code such as consent_required\n    description?: string;\n    properties?: object; // additional telemetry info\n};\n\nexport function isBridgeError(error: unknown): error is BridgeError {\n    return (error as BridgeError).status !== undefined;\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { TokenRequest } from \"../TokenRequest\";\nimport { AccountInfo as NaaAccountInfo } from \"../AccountInfo\";\nimport { RedirectRequest } from \"../../request/RedirectRequest\";\nimport { PopupRequest } from \"../../request/PopupRequest\";\nimport {\n    AccountInfo as MsalAccountInfo,\n    AuthError,\n    ClientAuthError,\n    ClientConfigurationError,\n    InteractionRequiredAuthError,\n    ServerError,\n    ICrypto,\n    Logger,\n    AuthToken,\n    TokenClaims,\n    ClientAuthErrorCodes,\n    AuthenticationScheme,\n    RequestParameterBuilder,\n    StringUtils,\n    createClientAuthError,\n    OIDC_DEFAULT_SCOPES,\n    AccountInfo,\n    IdTokenEntity,\n    AccessTokenEntity,\n    TenantProfile,\n    buildTenantProfile,\n} from \"@azure/msal-common\";\nimport { isBridgeError } from \"../BridgeError\";\nimport { BridgeStatusCode } from \"../BridgeStatusCode\";\nimport { AuthenticationResult } from \"../../response/AuthenticationResult\";\nimport {} from \"../../error/BrowserAuthErrorCodes\";\nimport { AuthResult } from \"../AuthResult\";\nimport { SsoSilentRequest } from \"../../request/SsoSilentRequest\";\nimport { SilentRequest } from \"../../request/SilentRequest\";\n\nexport class NestedAppAuthAdapter {\n    protected crypto: ICrypto;\n    protected logger: Logger;\n    protected clientId: string;\n    protected clientCapabilities: string[];\n\n    constructor(\n        clientId: string,\n        clientCapabilities: string[],\n        crypto: ICrypto,\n        logger: Logger\n    ) {\n        this.clientId = clientId;\n        this.clientCapabilities = clientCapabilities;\n        this.crypto = crypto;\n        this.logger = logger;\n    }\n\n    public toNaaTokenRequest(\n        request:\n            | PopupRequest\n            | RedirectRequest\n            | SilentRequest\n            | SsoSilentRequest\n    ): TokenRequest {\n        let extraParams: Map<string, string>;\n        if (request.extraQueryParameters === undefined) {\n            extraParams = new Map<string, string>();\n        } else {\n            extraParams = new Map<string, string>(\n                Object.entries(request.extraQueryParameters)\n            );\n        }\n\n        const requestBuilder = new RequestParameterBuilder();\n        const claims = requestBuilder.addClientCapabilitiesToClaims(\n            request.claims,\n            this.clientCapabilities\n        );\n        const scopes = request.scopes || OIDC_DEFAULT_SCOPES;\n        const tokenRequest: TokenRequest = {\n            platformBrokerId: request.account?.homeAccountId,\n            clientId: this.clientId,\n            authority: request.authority,\n            scope: scopes.join(\" \"),\n            correlationId:\n                request.correlationId !== undefined\n                    ? request.correlationId\n                    : this.crypto.createNewGuid(),\n            claims: !StringUtils.isEmptyObj(claims) ? claims : undefined,\n            state: request.state,\n            authenticationScheme:\n                request.authenticationScheme || AuthenticationScheme.BEARER,\n            extraParameters: extraParams,\n        };\n\n        return tokenRequest;\n    }\n\n    public fromNaaTokenResponse(\n        request: TokenRequest,\n        response: AuthResult,\n        reqTimestamp: number\n    ): AuthenticationResult {\n        if (!response.token.id_token || !response.token.access_token) {\n            throw createClientAuthError(ClientAuthErrorCodes.nullOrEmptyToken);\n        }\n\n        const expiresOn = new Date(\n            (reqTimestamp + (response.token.expires_in || 0)) * 1000\n        );\n        const idTokenClaims = AuthToken.extractTokenClaims(\n            response.token.id_token,\n            this.crypto.base64Decode\n        );\n        const account = this.fromNaaAccountInfo(\n            response.account,\n            response.token.id_token,\n            idTokenClaims\n        );\n        const scopes = response.token.scope || request.scope;\n\n        const authenticationResult: AuthenticationResult = {\n            authority: response.token.authority || account.environment,\n            uniqueId: account.localAccountId,\n            tenantId: account.tenantId,\n            scopes: scopes.split(\" \"),\n            account,\n            idToken: response.token.id_token,\n            idTokenClaims,\n            accessToken: response.token.access_token,\n            fromCache: false,\n            expiresOn: expiresOn,\n            tokenType:\n                request.authenticationScheme || AuthenticationScheme.BEARER,\n            correlationId: request.correlationId,\n            extExpiresOn: expiresOn,\n            state: request.state,\n        };\n\n        return authenticationResult;\n    }\n\n    /*\n     *  export type AccountInfo = {\n     *     homeAccountId: string;\n     *     environment: string;\n     *     tenantId: string;\n     *     username: string;\n     *     localAccountId: string;\n     *     name?: string;\n     *     idToken?: string;\n     *     idTokenClaims?: TokenClaims & {\n     *         [key: string]:\n     *             | string\n     *             | number\n     *             | string[]\n     *             | object\n     *             | undefined\n     *             | unknown;\n     *     };\n     *     nativeAccountId?: string;\n     *     authorityType?: string;\n     * };\n     */\n    public fromNaaAccountInfo(\n        fromAccount: NaaAccountInfo,\n        idToken?: string,\n        idTokenClaims?: TokenClaims\n    ): MsalAccountInfo {\n        const effectiveIdTokenClaims =\n            idTokenClaims || (fromAccount.idTokenClaims as TokenClaims);\n\n        const localAccountId =\n            fromAccount.localAccountId ||\n            effectiveIdTokenClaims?.oid ||\n            effectiveIdTokenClaims?.sub ||\n            \"\";\n\n        const tenantId =\n            fromAccount.tenantId || effectiveIdTokenClaims?.tid || \"\";\n\n        const homeAccountId =\n            fromAccount.homeAccountId || `${localAccountId}.${tenantId}`;\n\n        const username =\n            fromAccount.username ||\n            effectiveIdTokenClaims?.preferred_username ||\n            \"\";\n\n        const name = fromAccount.name || effectiveIdTokenClaims?.name;\n\n        const tenantProfiles = new Map<string, TenantProfile>();\n\n        const tenantProfile = buildTenantProfile(\n            homeAccountId,\n            localAccountId,\n            tenantId,\n            effectiveIdTokenClaims\n        );\n        tenantProfiles.set(tenantId, tenantProfile);\n\n        const account: MsalAccountInfo = {\n            homeAccountId,\n            environment: fromAccount.environment,\n            tenantId,\n            username,\n            localAccountId,\n            name,\n            idToken: idToken,\n            idTokenClaims: effectiveIdTokenClaims,\n            tenantProfiles,\n        };\n\n        return account;\n    }\n\n    /**\n     *\n     * @param error BridgeError\n     * @returns AuthError, ClientAuthError, ClientConfigurationError, ServerError, InteractionRequiredError\n     */\n    public fromBridgeError(\n        error: unknown\n    ):\n        | AuthError\n        | ClientAuthError\n        | ClientConfigurationError\n        | ServerError\n        | InteractionRequiredAuthError {\n        if (isBridgeError(error)) {\n            switch (error.status) {\n                case BridgeStatusCode.UserCancel:\n                    return new ClientAuthError(\n                        ClientAuthErrorCodes.userCanceled\n                    );\n                case BridgeStatusCode.NoNetwork:\n                    return new ClientAuthError(\n                        ClientAuthErrorCodes.noNetworkConnectivity\n                    );\n                case BridgeStatusCode.AccountUnavailable:\n                    return new ClientAuthError(\n                        ClientAuthErrorCodes.noAccountFound\n                    );\n                case BridgeStatusCode.Disabled:\n                    return new ClientAuthError(\n                        ClientAuthErrorCodes.nestedAppAuthBridgeDisabled\n                    );\n                case BridgeStatusCode.NestedAppAuthUnavailable:\n                    return new ClientAuthError(\n                        error.code ||\n                            ClientAuthErrorCodes.nestedAppAuthBridgeDisabled,\n                        error.description\n                    );\n                case BridgeStatusCode.TransientError:\n                case BridgeStatusCode.PersistentError:\n                    return new ServerError(error.code, error.description);\n                case BridgeStatusCode.UserInteractionRequired:\n                    return new InteractionRequiredAuthError(\n                        error.code,\n                        error.description\n                    );\n                default:\n                    return new AuthError(error.code, error.description);\n            }\n        } else {\n            return new AuthError(\"unknown_error\", \"An unknown error occurred\");\n        }\n    }\n\n    /**\n     * Returns an AuthenticationResult from the given cache items\n     *\n     * @param account\n     * @param idToken\n     * @param accessToken\n     * @param reqTimestamp\n     * @returns\n     */\n    public toAuthenticationResultFromCache(\n        account: AccountInfo,\n        idToken: IdTokenEntity,\n        accessToken: AccessTokenEntity,\n        request: SilentRequest,\n        correlationId: string\n    ): AuthenticationResult {\n        if (!idToken || !accessToken) {\n            throw createClientAuthError(ClientAuthErrorCodes.nullOrEmptyToken);\n        }\n\n        const idTokenClaims = AuthToken.extractTokenClaims(\n            idToken.secret,\n            this.crypto.base64Decode\n        );\n\n        const scopes = accessToken.target || request.scopes.join(\" \");\n\n        const authenticationResult: AuthenticationResult = {\n            authority: accessToken.environment || account.environment,\n            uniqueId: account.localAccountId,\n            tenantId: account.tenantId,\n            scopes: scopes.split(\" \"),\n            account,\n            idToken: idToken.secret,\n            idTokenClaims: idTokenClaims || {},\n            accessToken: accessToken.secret,\n            fromCache: true,\n            expiresOn: new Date(Number(accessToken.expiresOn) * 1000),\n            tokenType:\n                request.authenticationScheme || AuthenticationScheme.BEARER,\n            correlationId,\n            extExpiresOn: new Date(\n                Number(accessToken.extendedExpiresOn) * 1000\n            ),\n            state: request.state,\n        };\n\n        return authenticationResult;\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError } from \"@azure/msal-common\";\n\n/**\n * NestedAppAuthErrorMessage class containing string constants used by error codes and messages.\n */\nexport const NestedAppAuthErrorMessage = {\n    unsupportedMethod: {\n        code: \"unsupported_method\",\n        desc: \"This method is not supported in nested app environment.\",\n    },\n};\n\nexport class NestedAppAuthError extends AuthError {\n    constructor(errorCode: string, errorMessage?: string) {\n        super(errorCode, errorMessage);\n\n        Object.setPrototypeOf(this, NestedAppAuthError.prototype);\n        this.name = \"NestedAppAuthError\";\n    }\n\n    public static createUnsupportedError(): NestedAppAuthError {\n        return new NestedAppAuthError(\n            NestedAppAuthErrorMessage.unsupportedMethod.code,\n            NestedAppAuthErrorMessage.unsupportedMethod.desc\n        );\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    CommonAuthorizationUrlRequest,\n    CommonSilentFlowRequest,\n    PerformanceCallbackFunction,\n    AccountInfo,\n    Logger,\n    ICrypto,\n    IPerformanceClient,\n    DEFAULT_CRYPTO_IMPLEMENTATION,\n    PerformanceEvents,\n    TimeUtils,\n    buildStaticAuthorityOptions,\n    AccountEntity,\n    OIDC_DEFAULT_SCOPES,\n    BaseAuthRequest,\n    AccountFilter,\n} from \"@azure/msal-common\";\nimport { ITokenCache } from \"../cache/ITokenCache\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\nimport { EndSessionPopupRequest } from \"../request/EndSessionPopupRequest\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport {\n    ApiId,\n    WrapperSKU,\n    InteractionType,\n    DEFAULT_REQUEST,\n} from \"../utils/BrowserConstants\";\nimport { IController } from \"./IController\";\nimport { NestedAppOperatingContext } from \"../operatingcontext/NestedAppOperatingContext\";\nimport { IBridgeProxy } from \"../naa/IBridgeProxy\";\nimport { CryptoOps } from \"../crypto/CryptoOps\";\nimport { NestedAppAuthAdapter } from \"../naa/mapping/NestedAppAuthAdapter\";\nimport { NestedAppAuthError } from \"../error/NestedAppAuthError\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { EventType } from \"../event/EventType\";\nimport { EventCallbackFunction, EventError } from \"../event/EventMessage\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport {\n    BrowserCacheManager,\n    DEFAULT_BROWSER_CACHE_MANAGER,\n} from \"../cache/BrowserCacheManager\";\nimport { ClearCacheRequest } from \"../request/ClearCacheRequest\";\nimport * as AccountManager from \"../cache/AccountManager\";\n\nexport class NestedAppAuthController implements IController {\n    // OperatingContext\n    protected readonly operatingContext: NestedAppOperatingContext;\n\n    // BridgeProxy\n    protected readonly bridgeProxy: IBridgeProxy;\n\n    // Crypto interface implementation\n    protected readonly browserCrypto: ICrypto;\n\n    // Input configuration by developer/user\n    protected readonly config: BrowserConfiguration;\n\n    // Storage interface implementation\n    protected readonly browserStorage!: BrowserCacheManager;\n\n    // Logger\n    protected logger: Logger;\n\n    // Performance telemetry client\n    protected readonly performanceClient: IPerformanceClient;\n\n    // EventHandler\n    protected readonly eventHandler: EventHandler;\n\n    // NestedAppAuthAdapter\n    protected readonly nestedAppAuthAdapter: NestedAppAuthAdapter;\n\n    constructor(operatingContext: NestedAppOperatingContext) {\n        this.operatingContext = operatingContext;\n        const proxy = this.operatingContext.getBridgeProxy();\n        if (proxy !== undefined) {\n            this.bridgeProxy = proxy;\n        } else {\n            throw new Error(\"unexpected: bridgeProxy is undefined\");\n        }\n\n        // Set the configuration.\n        this.config = operatingContext.getConfig();\n\n        // Initialize logger\n        this.logger = this.operatingContext.getLogger();\n\n        // Initialize performance client\n        this.performanceClient = this.config.telemetry.client;\n\n        // Initialize the crypto class.\n        this.browserCrypto = operatingContext.isBrowserEnvironment()\n            ? new CryptoOps(this.logger, this.performanceClient)\n            : DEFAULT_CRYPTO_IMPLEMENTATION;\n\n        // Initialize the browser storage class.\n        this.browserStorage = this.operatingContext.isBrowserEnvironment()\n            ? new BrowserCacheManager(\n                  this.config.auth.clientId,\n                  this.config.cache,\n                  this.browserCrypto,\n                  this.logger,\n                  buildStaticAuthorityOptions(this.config.auth)\n              )\n            : DEFAULT_BROWSER_CACHE_MANAGER(\n                  this.config.auth.clientId,\n                  this.logger\n              );\n\n        this.eventHandler = new EventHandler(this.logger, this.browserCrypto);\n\n        this.nestedAppAuthAdapter = new NestedAppAuthAdapter(\n            this.config.auth.clientId,\n            this.config.auth.clientCapabilities,\n            this.browserCrypto,\n            this.logger\n        );\n\n        // Set the active account if available\n        const accountContext = this.bridgeProxy.getAccountContext();\n        if (accountContext) {\n            const cachedAccount = AccountManager.getAccount(\n                accountContext,\n                this.logger,\n                this.browserStorage\n            );\n\n            AccountManager.setActiveAccount(cachedAccount, this.browserStorage);\n        }\n    }\n\n    /**\n     * Returns the event handler instance\n     * @returns EventHandler\n     */\n    getEventHandler(): EventHandler {\n        return this.eventHandler;\n    }\n\n    /**\n     * Factory function to create a new instance of NestedAppAuthController\n     * @param operatingContext\n     * @returns Promise<IController>\n     */\n    static async createController(\n        operatingContext: NestedAppOperatingContext\n    ): Promise<IController> {\n        const controller = new NestedAppAuthController(operatingContext);\n        return Promise.resolve(controller);\n    }\n\n    /**\n     * Specific implementation of initialize function for NestedAppAuthController\n     * @returns\n     */\n    initialize(): Promise<void> {\n        // do nothing not required by this controller\n        return Promise.resolve();\n    }\n\n    /**\n     * Validate the incoming request and add correlationId if not present\n     * @param request\n     * @returns\n     */\n    private ensureValidRequest<\n        T extends\n            | SsoSilentRequest\n            | SilentRequest\n            | PopupRequest\n            | RedirectRequest\n    >(request: T): T {\n        if (request?.correlationId) {\n            return request;\n        }\n        return {\n            ...request,\n            correlationId: this.browserCrypto.createNewGuid(),\n        };\n    }\n\n    /**\n     * Internal implementation of acquireTokenInteractive flow\n     * @param request\n     * @returns\n     */\n    private async acquireTokenInteractive(\n        request: PopupRequest | RedirectRequest\n    ): Promise<AuthenticationResult> {\n        const validRequest = this.ensureValidRequest(request);\n\n        this.eventHandler.emitEvent(\n            EventType.ACQUIRE_TOKEN_START,\n            InteractionType.Popup,\n            validRequest\n        );\n\n        const atPopupMeasurement = this.performanceClient.startMeasurement(\n            PerformanceEvents.AcquireTokenPopup,\n            validRequest.correlationId\n        );\n\n        atPopupMeasurement?.add({ nestedAppAuthRequest: true });\n\n        try {\n            const naaRequest =\n                this.nestedAppAuthAdapter.toNaaTokenRequest(validRequest);\n            const reqTimestamp = TimeUtils.nowSeconds();\n            const response = await this.bridgeProxy.getTokenInteractive(\n                naaRequest\n            );\n            const result: AuthenticationResult =\n                this.nestedAppAuthAdapter.fromNaaTokenResponse(\n                    naaRequest,\n                    response,\n                    reqTimestamp\n                );\n\n            // cache the tokens in the response\n            await this.hydrateCache(result, request);\n\n            this.browserStorage.setActiveAccount(result.account);\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_SUCCESS,\n                InteractionType.Popup,\n                result\n            );\n\n            atPopupMeasurement.add({\n                accessTokenSize: result.accessToken.length,\n                idTokenSize: result.idToken.length,\n            });\n\n            atPopupMeasurement.end({\n                success: true,\n                requestId: result.requestId,\n            });\n\n            return result;\n        } catch (e) {\n            const error = this.nestedAppAuthAdapter.fromBridgeError(e);\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_FAILURE,\n                InteractionType.Popup,\n                null,\n                e as EventError\n            );\n\n            atPopupMeasurement.end(\n                {\n                    success: false,\n                },\n                e\n            );\n\n            throw error;\n        }\n    }\n\n    /**\n     * Internal implementation of acquireTokenSilent flow\n     * @param request\n     * @returns\n     */\n    private async acquireTokenSilentInternal(\n        request: SilentRequest\n    ): Promise<AuthenticationResult> {\n        const validRequest = this.ensureValidRequest(request);\n        this.eventHandler.emitEvent(\n            EventType.ACQUIRE_TOKEN_START,\n            InteractionType.Silent,\n            validRequest\n        );\n\n        // Look for tokens in the cache first\n        const result = await this.acquireTokenFromCache(validRequest);\n\n        if (result) {\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_SUCCESS,\n                InteractionType.Silent,\n                result\n            );\n            return result;\n        }\n\n        // proceed with acquiring tokens via the host\n        const ssoSilentMeasurement = this.performanceClient.startMeasurement(\n            PerformanceEvents.SsoSilent,\n            validRequest.correlationId\n        );\n\n        ssoSilentMeasurement?.increment({\n            visibilityChangeCount: 0,\n        });\n\n        ssoSilentMeasurement?.add({\n            nestedAppAuthRequest: true,\n        });\n\n        try {\n            const naaRequest =\n                this.nestedAppAuthAdapter.toNaaTokenRequest(validRequest);\n            const reqTimestamp = TimeUtils.nowSeconds();\n            const response = await this.bridgeProxy.getTokenSilent(naaRequest);\n\n            const result: AuthenticationResult =\n                this.nestedAppAuthAdapter.fromNaaTokenResponse(\n                    naaRequest,\n                    response,\n                    reqTimestamp\n                );\n\n            // cache the tokens in the response\n            await this.hydrateCache(result, request);\n\n            this.browserStorage.setActiveAccount(result.account);\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_SUCCESS,\n                InteractionType.Silent,\n                result\n            );\n            ssoSilentMeasurement?.add({\n                accessTokenSize: result.accessToken.length,\n                idTokenSize: result.idToken.length,\n            });\n            ssoSilentMeasurement?.end({\n                success: true,\n                requestId: result.requestId,\n            });\n            return result;\n        } catch (e) {\n            const error = this.nestedAppAuthAdapter.fromBridgeError(e);\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_FAILURE,\n                InteractionType.Silent,\n                null,\n                e as EventError\n            );\n            ssoSilentMeasurement?.end(\n                {\n                    success: false,\n                },\n                e\n            );\n            throw error;\n        }\n    }\n\n    /**\n     * acquires tokens from cache\n     * @param request\n     * @returns\n     */\n    private async acquireTokenFromCache(\n        request: SilentRequest\n    ): Promise<AuthenticationResult | null> {\n        const atsMeasurement = this.performanceClient.startMeasurement(\n            PerformanceEvents.AcquireTokenSilent,\n            request.correlationId\n        );\n\n        atsMeasurement?.add({\n            nestedAppAuthRequest: true,\n        });\n\n        const result = await this.acquireTokenFromCacheInternal(request);\n\n        if (result) {\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_SUCCESS,\n                InteractionType.Silent,\n                result\n            );\n            atsMeasurement?.add({\n                accessTokenSize: result?.accessToken.length,\n                idTokenSize: result?.idToken.length,\n            });\n            atsMeasurement?.end({\n                success: true,\n            });\n            return result;\n        }\n\n        this.logger.error(\n            \"Cached tokens are not found for the account, proceeding with silent token request.\"\n        );\n\n        this.eventHandler.emitEvent(\n            EventType.ACQUIRE_TOKEN_FAILURE,\n            InteractionType.Silent,\n            null\n        );\n        atsMeasurement?.end({\n            success: false,\n        });\n\n        return null;\n    }\n\n    /**\n     *\n     * @param request\n     * @returns\n     */\n    private async acquireTokenFromCacheInternal(\n        request: SilentRequest\n    ): Promise<AuthenticationResult | null> {\n        const accountContext = this.bridgeProxy.getAccountContext();\n        let currentAccount = null;\n        if (accountContext) {\n            const hubAccount = AccountManager.getAccount(\n                accountContext,\n                this.logger,\n                this.browserStorage\n            );\n            // always prioritize for hub account context, the reqirement of `request.account` will be removed soon\n            currentAccount = hubAccount || request.account;\n        }\n\n        // fall back to brokering if no cached account is found\n        if (!currentAccount) {\n            this.logger.verbose(\n                \"No active account found, falling back to the host\"\n            );\n            return Promise.resolve(null);\n        }\n\n        this.logger.verbose(\n            \"active account found, attempting to acquire token silently\"\n        );\n\n        const authRequest: BaseAuthRequest = {\n            ...request,\n            correlationId:\n                request.correlationId || this.browserCrypto.createNewGuid(),\n            authority: request.authority || currentAccount.environment,\n            scopes: request.scopes?.length\n                ? request.scopes\n                : [...OIDC_DEFAULT_SCOPES],\n        };\n\n        // fetch access token and check for expiry\n        const tokenKeys = this.browserStorage.getTokenKeys();\n        const cachedAccessToken = this.browserStorage.getAccessToken(\n            currentAccount,\n            authRequest,\n            tokenKeys,\n            currentAccount.tenantId,\n            this.performanceClient,\n            authRequest.correlationId\n        );\n\n        // If there is no access token, log it and return null\n        if (!cachedAccessToken) {\n            this.logger.verbose(\"No cached access token found\");\n            return Promise.resolve(null);\n            // If access token has expired, remove the token from cache and return null\n        } else if (\n            TimeUtils.wasClockTurnedBack(cachedAccessToken.cachedAt) ||\n            TimeUtils.isTokenExpired(\n                cachedAccessToken.expiresOn,\n                this.config.system.tokenRenewalOffsetSeconds\n            )\n        ) {\n            this.logger.verbose(\n                \"Cached access token has expired, deleting all related tokens from cache\"\n            );\n            const accountEntity =\n                AccountEntity.createFromAccountInfo(currentAccount);\n            await this.browserStorage.removeAccountContext(accountEntity);\n            return Promise.resolve(null);\n        }\n\n        const cachedIdToken = this.browserStorage.getIdToken(\n            currentAccount,\n            tokenKeys,\n            currentAccount.tenantId,\n            this.performanceClient,\n            authRequest.correlationId\n        );\n\n        if (!cachedIdToken) {\n            this.logger.verbose(\"No cached id token found\");\n            return Promise.resolve(null);\n        }\n\n        return this.nestedAppAuthAdapter.toAuthenticationResultFromCache(\n            currentAccount,\n            cachedIdToken,\n            cachedAccessToken,\n            authRequest,\n            authRequest.correlationId\n        );\n    }\n\n    /**\n     * acquireTokenPopup flow implementation\n     * @param request\n     * @returns\n     */\n    async acquireTokenPopup(\n        request: PopupRequest\n    ): Promise<AuthenticationResult> {\n        return this.acquireTokenInteractive(request);\n    }\n\n    /**\n     * acquireTokenRedirect flow is not supported in nested app auth\n     * @param request\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    acquireTokenRedirect(request: RedirectRequest): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    /**\n     * acquireTokenSilent flow implementation\n     * @param silentRequest\n     * @returns\n     */\n    async acquireTokenSilent(\n        silentRequest: SilentRequest\n    ): Promise<AuthenticationResult> {\n        return this.acquireTokenSilentInternal(silentRequest);\n    }\n\n    /**\n     * Hybrid flow is not currently supported in nested app auth\n     * @param request\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    acquireTokenByCode(\n        request: AuthorizationCodeRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<AuthenticationResult> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    /**\n     * acquireTokenNative flow is not currently supported in nested app auth\n     * @param request\n     * @param apiId\n     * @param accountId\n     */\n    acquireTokenNative(\n        request: // eslint-disable-line @typescript-eslint/no-unused-vars\n        | SilentRequest\n            | Partial<\n                  Omit<\n                      CommonAuthorizationUrlRequest,\n                      | \"requestedClaimsHash\"\n                      | \"responseMode\"\n                      | \"codeChallenge\"\n                      | \"codeChallengeMethod\"\n                      | \"nativeBroker\"\n                  >\n              >\n            | PopupRequest,\n        apiId: ApiId, // eslint-disable-line @typescript-eslint/no-unused-vars\n        accountId?: string | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<AuthenticationResult> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    /**\n     * acquireTokenByRefreshToken flow is not currently supported in nested app auth\n     * @param commonRequest\n     * @param silentRequest\n     */\n    acquireTokenByRefreshToken(\n        commonRequest: CommonSilentFlowRequest, // eslint-disable-line @typescript-eslint/no-unused-vars\n        silentRequest: SilentRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<AuthenticationResult> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    /**\n     * Adds event callbacks to array\n     * @param callback\n     */\n    addEventCallback(callback: EventCallbackFunction): string | null {\n        return this.eventHandler.addEventCallback(callback);\n    }\n\n    /**\n     * Removes callback with provided id from callback array\n     * @param callbackId\n     */\n    removeEventCallback(callbackId: string): void {\n        this.eventHandler.removeEventCallback(callbackId);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    addPerformanceCallback(callback: PerformanceCallbackFunction): string {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    removePerformanceCallback(callbackId: string): boolean {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    enableAccountStorageEvents(): void {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    disableAccountStorageEvents(): void {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    // #region Account APIs\n\n    /**\n     * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.\n     * @param accountFilter - (Optional) filter to narrow down the accounts returned\n     * @returns Array of AccountInfo objects in cache\n     */\n    getAllAccounts(accountFilter?: AccountFilter): AccountInfo[] {\n        return AccountManager.getAllAccounts(\n            this.logger,\n            this.browserStorage,\n            this.isBrowserEnv(),\n            accountFilter\n        );\n    }\n\n    /**\n     * Returns the first account found in the cache that matches the account filter passed in.\n     * @param accountFilter\n     * @returns The first account found in the cache matching the provided filter or null if no account could be found.\n     */\n    getAccount(accountFilter: AccountFilter): AccountInfo | null {\n        return AccountManager.getAccount(\n            accountFilter,\n            this.logger,\n            this.browserStorage\n        );\n    }\n\n    /**\n     * Returns the signed in account matching username.\n     * (the account object is created at the time of successful login)\n     * or null when no matching account is found.\n     * This API is provided for convenience but getAccountById should be used for best reliability\n     * @param username\n     * @returns The account object stored in MSAL\n     */\n    getAccountByUsername(username: string): AccountInfo | null {\n        return AccountManager.getAccountByUsername(\n            username,\n            this.logger,\n            this.browserStorage\n        );\n    }\n\n    /**\n     * Returns the signed in account matching homeAccountId.\n     * (the account object is created at the time of successful login)\n     * or null when no matching account is found\n     * @param homeAccountId\n     * @returns The account object stored in MSAL\n     */\n    getAccountByHomeId(homeAccountId: string): AccountInfo | null {\n        return AccountManager.getAccountByHomeId(\n            homeAccountId,\n            this.logger,\n            this.browserStorage\n        );\n    }\n\n    /**\n     * Returns the signed in account matching localAccountId.\n     * (the account object is created at the time of successful login)\n     * or null when no matching account is found\n     * @param localAccountId\n     * @returns The account object stored in MSAL\n     */\n    getAccountByLocalId(localAccountId: string): AccountInfo | null {\n        return AccountManager.getAccountByLocalId(\n            localAccountId,\n            this.logger,\n            this.browserStorage\n        );\n    }\n\n    /**\n     * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.\n     * @param account\n     */\n    setActiveAccount(account: AccountInfo | null): void {\n        /*\n         * StandardController uses this to allow the developer to set the active account\n         * in the nested app auth scenario the active account is controlled by the app hosting the nested app\n         */\n        return AccountManager.setActiveAccount(account, this.browserStorage);\n    }\n\n    /**\n     * Gets the currently active account\n     */\n    getActiveAccount(): AccountInfo | null {\n        return AccountManager.getActiveAccount(this.browserStorage);\n    }\n\n    // #endregion\n\n    handleRedirectPromise(\n        hash?: string | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<AuthenticationResult | null> {\n        return Promise.resolve(null);\n    }\n    loginPopup(\n        request?: PopupRequest | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<AuthenticationResult> {\n        return this.acquireTokenInteractive(request || DEFAULT_REQUEST);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    loginRedirect(request?: RedirectRequest | undefined): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    logout(logoutRequest?: EndSessionRequest | undefined): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    logoutRedirect(\n        logoutRequest?: EndSessionRequest | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    logoutPopup(\n        logoutRequest?: EndSessionPopupRequest | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    ssoSilent(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        request: Partial<\n            Omit<\n                CommonAuthorizationUrlRequest,\n                | \"requestedClaimsHash\"\n                | \"responseMode\"\n                | \"codeChallenge\"\n                | \"codeChallengeMethod\"\n                | \"nativeBroker\"\n            >\n        >\n    ): Promise<AuthenticationResult> {\n        return this.acquireTokenSilentInternal(request as SilentRequest);\n    }\n    getTokenCache(): ITokenCache {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    /**\n     * Returns the logger instance\n     */\n    public getLogger(): Logger {\n        return this.logger;\n    }\n\n    /**\n     * Replaces the default logger set in configurations with new Logger with new configurations\n     * @param logger Logger instance\n     */\n    setLogger(logger: Logger): void {\n        this.logger = logger;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    initializeWrapperLibrary(sku: WrapperSKU, version: string): void {\n        /*\n         * Standard controller uses this to set the sku and version of the wrapper library in the storage\n         * we do nothing here\n         */\n        return;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setNavigationClient(navigationClient: INavigationClient): void {\n        this.logger.warning(\n            \"setNavigationClient is not supported in nested app auth\"\n        );\n    }\n\n    getConfiguration(): BrowserConfiguration {\n        return this.config;\n    }\n\n    isBrowserEnv(): boolean {\n        return this.operatingContext.isBrowserEnvironment();\n    }\n\n    getBrowserCrypto(): ICrypto {\n        return this.browserCrypto;\n    }\n\n    getPerformanceClient(): IPerformanceClient {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    getRedirectResponse(): Map<string, Promise<AuthenticationResult | null>> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async clearCache(logoutRequest?: ClearCacheRequest): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    async hydrateCache(\n        result: AuthenticationResult,\n        request:\n            | SilentRequest\n            | SsoSilentRequest\n            | RedirectRequest\n            | PopupRequest\n    ): Promise<void> {\n        this.logger.verbose(\"hydrateCache called\");\n\n        const accountEntity = AccountEntity.createFromAccountInfo(\n            result.account,\n            result.cloudGraphHostName,\n            result.msGraphHost\n        );\n        this.browserStorage.setAccount(accountEntity);\n        return this.browserStorage.hydrateCache(result, request);\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { NestedAppOperatingContext } from \"../operatingcontext/NestedAppOperatingContext\";\nimport { StandardOperatingContext } from \"../operatingcontext/StandardOperatingContext\";\nimport { IController } from \"./IController\";\nimport { Configuration } from \"../config/Configuration\";\nimport { StandardController } from \"./StandardController\";\nimport { NestedAppAuthController } from \"./NestedAppAuthController\";\nimport { InitializeApplicationRequest } from \"../request/InitializeApplicationRequest\";\n\nexport async function createV3Controller(\n    config: Configuration,\n    request?: InitializeApplicationRequest\n): Promise<IController> {\n    const standard = new StandardOperatingContext(config);\n\n    await standard.initialize();\n    return StandardController.createController(standard, request);\n}\n\nexport async function createController(\n    config: Configuration\n): Promise<IController | null> {\n    const standard = new StandardOperatingContext(config);\n    const nestedApp = new NestedAppOperatingContext(config);\n\n    const operatingContexts = [standard.initialize(), nestedApp.initialize()];\n\n    await Promise.all(operatingContexts);\n\n    if (nestedApp.isAvailable() && config.auth.supportsNestedAppAuth) {\n        return NestedAppAuthController.createController(nestedApp);\n    } else if (standard.isAvailable()) {\n        return StandardController.createController(standard);\n    } else {\n        // Since neither of the actual operating contexts are available keep the UnknownOperatingContextController\n        return null;\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ITokenCache } from \"../cache/ITokenCache\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { WrapperSKU } from \"../utils/BrowserConstants\";\nimport { IPublicClientApplication } from \"./IPublicClientApplication\";\nimport { IController } from \"../controllers/IController\";\nimport {\n    PerformanceCallbackFunction,\n    AccountInfo,\n    AccountFilter,\n    Logger,\n} from \"@azure/msal-common\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport * as ControllerFactory from \"../controllers/ControllerFactory\";\nimport { StandardController } from \"../controllers/StandardController\";\nimport { BrowserConfiguration, Configuration } from \"../config/Configuration\";\nimport { StandardOperatingContext } from \"../operatingcontext/StandardOperatingContext\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { EventCallbackFunction } from \"../event/EventMessage\";\nimport { ClearCacheRequest } from \"../request/ClearCacheRequest\";\nimport { EndSessionPopupRequest } from \"../request/EndSessionPopupRequest\";\nimport { NestedAppAuthController } from \"../controllers/NestedAppAuthController\";\nimport { NestedAppOperatingContext } from \"../operatingcontext/NestedAppOperatingContext\";\nimport { InitializeApplicationRequest } from \"../request/InitializeApplicationRequest\";\n\n/**\n * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications\n * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.\n */\nexport class PublicClientApplication implements IPublicClientApplication {\n    protected controller: IController;\n\n    /**\n     * Creates StandardController and passes it to the PublicClientApplication\n     *\n     * @param configuration {Configuration}\n     */\n    public static async createPublicClientApplication(\n        configuration: Configuration\n    ): Promise<IPublicClientApplication> {\n        const controller = await ControllerFactory.createV3Controller(\n            configuration\n        );\n        const pca = new PublicClientApplication(configuration, controller);\n\n        return pca;\n    }\n\n    /**\n     * @constructor\n     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\n     *\n     * Important attributes in the Configuration object for auth are:\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\n     * - authority: the authority URL for your application.\n     * - redirect_uri: the uri of your application registered in the portal.\n     *\n     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\n     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\n     *\n     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\n     * Full B2C functionality will be available in this library in future versions.\n     *\n     * @param configuration Object for the MSAL PublicClientApplication instance\n     * @param IController Optional parameter to explictly set the controller. (Will be removed when we remove public constructor)\n     */\n    public constructor(configuration: Configuration, controller?: IController) {\n        this.controller =\n            controller ||\n            new StandardController(new StandardOperatingContext(configuration));\n    }\n\n    /**\n     * Initializer function to perform async startup tasks such as connecting to WAM extension\n     * @param request {?InitializeApplicationRequest}\n     */\n    async initialize(request?: InitializeApplicationRequest): Promise<void> {\n        return this.controller.initialize(request);\n    }\n\n    /**\n     * Use when you want to obtain an access_token for your API via opening a popup window in the user's browser\n     *\n     * @param request\n     *\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    async acquireTokenPopup(\n        request: PopupRequest\n    ): Promise<AuthenticationResult> {\n        return this.controller.acquireTokenPopup(request);\n    }\n\n    /**\n     * Use when you want to obtain an access_token for your API by redirecting the user's browser window to the authorization endpoint. This function redirects\n     * the page, so any code that follows this function will not execute.\n     *\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\n     *\n     * @param request\n     */\n    acquireTokenRedirect(request: RedirectRequest): Promise<void> {\n        return this.controller.acquireTokenRedirect(request);\n    }\n\n    /**\n     * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\n     *\n     * @param {@link (SilentRequest:type)}\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthenticationResult} object\n     */\n    acquireTokenSilent(\n        silentRequest: SilentRequest\n    ): Promise<AuthenticationResult> {\n        return this.controller.acquireTokenSilent(silentRequest);\n    }\n\n    /**\n     * This function redeems an authorization code (passed as code) from the eSTS token endpoint.\n     * This authorization code should be acquired server-side using a confidential client to acquire a spa_code.\n     * This API is not indended for normal authorization code acquisition and redemption.\n     *\n     * Redemption of this authorization code will not require PKCE, as it was acquired by a confidential client.\n     *\n     * @param request {@link AuthorizationCodeRequest}\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    acquireTokenByCode(\n        request: AuthorizationCodeRequest\n    ): Promise<AuthenticationResult> {\n        return this.controller.acquireTokenByCode(request);\n    }\n\n    /**\n     * Adds event callbacks to array\n     * @param callback\n     */\n    addEventCallback(callback: EventCallbackFunction): string | null {\n        return this.controller.addEventCallback(callback);\n    }\n\n    /**\n     * Removes callback with provided id from callback array\n     * @param callbackId\n     */\n    removeEventCallback(callbackId: string): void {\n        return this.controller.removeEventCallback(callbackId);\n    }\n\n    /**\n     * Registers a callback to receive performance events.\n     *\n     * @param {PerformanceCallbackFunction} callback\n     * @returns {string}\n     */\n    addPerformanceCallback(callback: PerformanceCallbackFunction): string {\n        return this.controller.addPerformanceCallback(callback);\n    }\n\n    /**\n     * Removes a callback registered with addPerformanceCallback.\n     *\n     * @param {string} callbackId\n     * @returns {boolean}\n     */\n    removePerformanceCallback(callbackId: string): boolean {\n        return this.controller.removePerformanceCallback(callbackId);\n    }\n\n    /**\n     * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\n     */\n    enableAccountStorageEvents(): void {\n        this.controller.enableAccountStorageEvents();\n    }\n\n    /**\n     * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\n     */\n    disableAccountStorageEvents(): void {\n        this.controller.disableAccountStorageEvents();\n    }\n\n    /**\n     * Returns the first account found in the cache that matches the account filter passed in.\n     * @param accountFilter\n     * @returns The first account found in the cache matching the provided filter or null if no account could be found.\n     */\n    getAccount(accountFilter: AccountFilter): AccountInfo | null {\n        return this.controller.getAccount(accountFilter);\n    }\n\n    /**\n     * Returns the signed in account matching homeAccountId.\n     * (the account object is created at the time of successful login)\n     * or null when no matching account is found\n     * @param homeAccountId\n     * @returns The account object stored in MSAL\n     * @deprecated - Use getAccount instead\n     */\n    getAccountByHomeId(homeAccountId: string): AccountInfo | null {\n        return this.controller.getAccountByHomeId(homeAccountId);\n    }\n\n    /**\n     * Returns the signed in account matching localAccountId.\n     * (the account object is created at the time of successful login)\n     * or null when no matching account is found\n     * @param localAccountId\n     * @returns The account object stored in MSAL\n     * @deprecated - Use getAccount instead\n     */\n    getAccountByLocalId(localId: string): AccountInfo | null {\n        return this.controller.getAccountByLocalId(localId);\n    }\n\n    /**\n     * Returns the signed in account matching username.\n     * (the account object is created at the time of successful login)\n     * or null when no matching account is found.\n     * This API is provided for convenience but getAccountById should be used for best reliability\n     * @param userName\n     * @returns The account object stored in MSAL\n     * @deprecated - Use getAccount instead\n     */\n    getAccountByUsername(userName: string): AccountInfo | null {\n        return this.controller.getAccountByUsername(userName);\n    }\n\n    /**\n     * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.\n     * @param accountFilter - (Optional) filter to narrow down the accounts returned\n     * @returns Array of AccountInfo objects in cache\n     */\n    getAllAccounts(accountFilter?: AccountFilter): AccountInfo[] {\n        return this.controller.getAllAccounts(accountFilter);\n    }\n\n    /**\n     * Event handler function which allows users to fire events after the PublicClientApplication object\n     * has loaded during redirect flows. This should be invoked on all page loads involved in redirect\n     * auth flows.\n     * @param hash Hash to process. Defaults to the current value of window.location.hash. Only needs to be provided explicitly if the response to be handled is not contained in the current value.\n     * @returns Token response or null. If the return value is null, then no auth redirect was detected.\n     */\n    handleRedirectPromise(\n        hash?: string | undefined\n    ): Promise<AuthenticationResult | null> {\n        return this.controller.handleRedirectPromise(hash);\n    }\n\n    /**\n     * Use when initiating the login process via opening a popup window in the user's browser\n     *\n     * @param request\n     *\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    loginPopup(\n        request?: PopupRequest | undefined\n    ): Promise<AuthenticationResult> {\n        return this.controller.loginPopup(request);\n    }\n\n    /**\n     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\n     * any code that follows this function will not execute.\n     *\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\n     *\n     * @param request\n     */\n    loginRedirect(request?: RedirectRequest | undefined): Promise<void> {\n        return this.controller.loginRedirect(request);\n    }\n\n    /**\n     * Deprecated logout function. Use logoutRedirect or logoutPopup instead\n     * @param logoutRequest\n     * @deprecated\n     */\n    logout(logoutRequest?: EndSessionRequest): Promise<void> {\n        return this.controller.logout(logoutRequest);\n    }\n\n    /**\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\n     * Default behaviour is to redirect the user to `window.location.href`.\n     * @param logoutRequest\n     */\n    logoutRedirect(logoutRequest?: EndSessionRequest): Promise<void> {\n        return this.controller.logoutRedirect(logoutRequest);\n    }\n\n    /**\n     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\n     * @param logoutRequest\n     */\n    logoutPopup(logoutRequest?: EndSessionPopupRequest): Promise<void> {\n        return this.controller.logoutPopup(logoutRequest);\n    }\n\n    /**\n     * This function uses a hidden iframe to fetch an authorization code from the eSTS. There are cases where this may not work:\n     * - Any browser using a form of Intelligent Tracking Prevention\n     * - If there is not an established session with the service\n     *\n     * In these cases, the request must be done inside a popup or full frame redirect.\n     *\n     * For the cases where interaction is required, you cannot send a request with prompt=none.\n     *\n     * If your refresh token has expired, you can use this function to fetch a new set of tokens silently as long as\n     * you session on the server still exists.\n     * @param request {@link SsoSilentRequest}\n     *\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    ssoSilent(request: SsoSilentRequest): Promise<AuthenticationResult> {\n        return this.controller.ssoSilent(request);\n    }\n\n    /**\n     * Gets the token cache for the application.\n     */\n    getTokenCache(): ITokenCache {\n        return this.controller.getTokenCache();\n    }\n\n    /**\n     * Returns the logger instance\n     */\n    getLogger(): Logger {\n        return this.controller.getLogger();\n    }\n\n    /**\n     * Replaces the default logger set in configurations with new Logger with new configurations\n     * @param logger Logger instance\n     */\n    setLogger(logger: Logger): void {\n        this.controller.setLogger(logger);\n    }\n\n    /**\n     * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.\n     * @param account\n     */\n    setActiveAccount(account: AccountInfo | null): void {\n        this.controller.setActiveAccount(account);\n    }\n\n    /**\n     * Gets the currently active account\n     */\n    getActiveAccount(): AccountInfo | null {\n        return this.controller.getActiveAccount();\n    }\n\n    /**\n     * Called by wrapper libraries (Angular & React) to set SKU and Version passed down to telemetry, logger, etc.\n     * @param sku\n     * @param version\n     */\n    initializeWrapperLibrary(sku: WrapperSKU, version: string): void {\n        return this.controller.initializeWrapperLibrary(sku, version);\n    }\n\n    /**\n     * Sets navigation client\n     * @param navigationClient\n     */\n    setNavigationClient(navigationClient: INavigationClient): void {\n        this.controller.setNavigationClient(navigationClient);\n    }\n\n    /**\n     * Returns the configuration object\n     * @internal\n     */\n    getConfiguration(): BrowserConfiguration {\n        return this.controller.getConfiguration();\n    }\n\n    /**\n     * Hydrates cache with the tokens and account in the AuthenticationResult object\n     * @param result\n     * @param request - The request object that was used to obtain the AuthenticationResult\n     * @returns\n     */\n    async hydrateCache(\n        result: AuthenticationResult,\n        request:\n            | SilentRequest\n            | SsoSilentRequest\n            | RedirectRequest\n            | PopupRequest\n    ): Promise<void> {\n        return this.controller.hydrateCache(result, request);\n    }\n\n    /**\n     * Clears tokens and account from the browser cache.\n     * @param logoutRequest\n     */\n    clearCache(logoutRequest?: ClearCacheRequest): Promise<void> {\n        return this.controller.clearCache(logoutRequest);\n    }\n}\n\n/**\n * creates NestedAppAuthController and passes it to the PublicClientApplication,\n * falls back to StandardController if NestedAppAuthController is not available\n *\n * @param configuration\n * @returns IPublicClientApplication\n *\n */\nexport async function createNestablePublicClientApplication(\n    configuration: Configuration\n): Promise<IPublicClientApplication> {\n    const nestedAppAuth = new NestedAppOperatingContext(configuration);\n    await nestedAppAuth.initialize();\n\n    if (nestedAppAuth.isAvailable()) {\n        const controller = new NestedAppAuthController(nestedAppAuth);\n        return new PublicClientApplication(configuration, controller);\n    }\n\n    return createStandardPublicClientApplication(configuration);\n}\n\n/**\n * creates PublicClientApplication using StandardController\n *\n * @param configuration\n * @returns IPublicClientApplication\n *\n */\nexport async function createStandardPublicClientApplication(\n    configuration: Configuration\n): Promise<IPublicClientApplication> {\n    const pca = new PublicClientApplication(configuration);\n    await pca.initialize();\n    return pca;\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    CommonAuthorizationUrlRequest,\n    CommonSilentFlowRequest,\n    PerformanceCallbackFunction,\n    AccountInfo,\n    Logger,\n    ICrypto,\n    IPerformanceClient,\n    DEFAULT_CRYPTO_IMPLEMENTATION,\n    AccountFilter,\n} from \"@azure/msal-common\";\nimport { ITokenCache } from \"../cache/ITokenCache\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport {\n    BrowserCacheManager,\n    DEFAULT_BROWSER_CACHE_MANAGER,\n} from \"../cache/BrowserCacheManager\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\nimport { EndSessionPopupRequest } from \"../request/EndSessionPopupRequest\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { ApiId, WrapperSKU } from \"../utils/BrowserConstants\";\nimport { IController } from \"./IController\";\nimport { UnknownOperatingContext } from \"../operatingcontext/UnknownOperatingContext\";\nimport { CryptoOps } from \"../crypto/CryptoOps\";\nimport {\n    blockAPICallsBeforeInitialize,\n    blockNonBrowserEnvironment,\n} from \"../utils/BrowserUtils\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { EventCallbackFunction } from \"../event/EventMessage\";\nimport { ClearCacheRequest } from \"../request/ClearCacheRequest\";\n\n/**\n * UnknownOperatingContextController class\n *\n * - Until initialize method is called, this controller is the default\n * - AFter initialize method is called, this controller will be swapped out for the appropriate controller\n * if the operating context can be determined; otherwise this controller will continued be used\n *\n * - Why do we have this?  We don't want to dynamically import (download) all of the code in StandardController if we don't need to.\n *\n * - Only includes implementation for getAccounts and handleRedirectPromise\n *   - All other methods are will throw initialization error (because either initialize method or the factory method were not used)\n *   - This controller is necessary for React Native wrapper, server side rendering and any other scenario where we don't have a DOM\n *\n */\nexport class UnknownOperatingContextController implements IController {\n    // OperatingContext\n    protected readonly operatingContext: UnknownOperatingContext;\n\n    // Logger\n    protected logger: Logger;\n\n    // Storage interface implementation\n    protected readonly browserStorage: BrowserCacheManager;\n\n    // Input configuration by developer/user\n    protected readonly config: BrowserConfiguration;\n\n    // Performance telemetry client\n    protected readonly performanceClient: IPerformanceClient;\n\n    // Crypto interface implementation\n    protected readonly browserCrypto: ICrypto;\n\n    // Flag to indicate if in browser environment\n    protected isBrowserEnvironment: boolean;\n\n    // Flag representing whether or not the initialize API has been called and completed\n    protected initialized: boolean = false;\n\n    protected readonly eventHandler: EventHandler;\n\n    constructor(operatingContext: UnknownOperatingContext) {\n        this.operatingContext = operatingContext;\n\n        this.isBrowserEnvironment =\n            this.operatingContext.isBrowserEnvironment();\n\n        this.config = operatingContext.getConfig();\n\n        this.logger = operatingContext.getLogger();\n\n        // Initialize performance client\n        this.performanceClient = this.config.telemetry.client;\n\n        // Initialize the crypto class.\n        this.browserCrypto = this.isBrowserEnvironment\n            ? new CryptoOps(this.logger, this.performanceClient)\n            : DEFAULT_CRYPTO_IMPLEMENTATION;\n\n        // Initialize the browser storage class.\n        this.browserStorage = this.isBrowserEnvironment\n            ? new BrowserCacheManager(\n                  this.config.auth.clientId,\n                  this.config.cache,\n                  this.browserCrypto,\n                  this.logger,\n                  undefined,\n                  this.performanceClient\n              )\n            : DEFAULT_BROWSER_CACHE_MANAGER(\n                  this.config.auth.clientId,\n                  this.logger\n              );\n\n        this.eventHandler = new EventHandler(this.logger, this.browserCrypto);\n    }\n    getBrowserStorage(): BrowserCacheManager {\n        return this.browserStorage;\n    }\n\n    getEventHandler(): EventHandler {\n        return this.eventHandler;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getAccount(accountFilter: AccountFilter): AccountInfo | null {\n        return null;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getAccountByHomeId(homeAccountId: string): AccountInfo | null {\n        return null;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getAccountByLocalId(localAccountId: string): AccountInfo | null {\n        return null;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getAccountByUsername(username: string): AccountInfo | null {\n        return null;\n    }\n    getAllAccounts(): AccountInfo[] {\n        return [];\n    }\n    initialize(): Promise<void> {\n        this.initialized = true;\n        return Promise.resolve();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    acquireTokenPopup(request: PopupRequest): Promise<AuthenticationResult> {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return {} as Promise<AuthenticationResult>;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    acquireTokenRedirect(request: RedirectRequest): Promise<void> {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return Promise.resolve();\n    }\n    acquireTokenSilent(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        silentRequest: SilentRequest\n    ): Promise<AuthenticationResult> {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return {} as Promise<AuthenticationResult>;\n    }\n    acquireTokenByCode(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        request: AuthorizationCodeRequest\n    ): Promise<AuthenticationResult> {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return {} as Promise<AuthenticationResult>;\n    }\n    acquireTokenNative(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        request:\n            | PopupRequest\n            | SilentRequest\n            | Partial<\n                  Omit<\n                      CommonAuthorizationUrlRequest,\n                      | \"responseMode\"\n                      | \"codeChallenge\"\n                      | \"codeChallengeMethod\"\n                      | \"requestedClaimsHash\"\n                      | \"nativeBroker\"\n                  >\n              >,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        apiId: ApiId,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        accountId?: string | undefined\n    ): Promise<AuthenticationResult> {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return {} as Promise<AuthenticationResult>;\n    }\n    acquireTokenByRefreshToken(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        commonRequest: CommonSilentFlowRequest,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        silentRequest: SilentRequest\n    ): Promise<AuthenticationResult> {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return {} as Promise<AuthenticationResult>;\n    }\n    addEventCallback(callback: EventCallbackFunction): string | null {\n        return this.eventHandler.addEventCallback(callback);\n    }\n    removeEventCallback(callbackId: string): void {\n        this.eventHandler.removeEventCallback(callbackId);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    addPerformanceCallback(callback: PerformanceCallbackFunction): string {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return \"\";\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    removePerformanceCallback(callbackId: string): boolean {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return true;\n    }\n    enableAccountStorageEvents(): void {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n    }\n    disableAccountStorageEvents(): void {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n    }\n\n    handleRedirectPromise(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        hash?: string | undefined\n    ): Promise<AuthenticationResult | null> {\n        blockAPICallsBeforeInitialize(this.initialized);\n        return Promise.resolve(null);\n    }\n    loginPopup(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        request?: PopupRequest | undefined\n    ): Promise<AuthenticationResult> {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return {} as Promise<AuthenticationResult>;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    loginRedirect(request?: RedirectRequest | undefined): Promise<void> {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return {} as Promise<void>;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    logout(logoutRequest?: EndSessionRequest | undefined): Promise<void> {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return {} as Promise<void>;\n    }\n    logoutRedirect(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        logoutRequest?: EndSessionRequest | undefined\n    ): Promise<void> {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return {} as Promise<void>;\n    }\n    logoutPopup(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        logoutRequest?: EndSessionPopupRequest | undefined\n    ): Promise<void> {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return {} as Promise<void>;\n    }\n    ssoSilent(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        request: Partial<\n            Omit<\n                CommonAuthorizationUrlRequest,\n                | \"responseMode\"\n                | \"codeChallenge\"\n                | \"codeChallengeMethod\"\n                | \"requestedClaimsHash\"\n                | \"nativeBroker\"\n            >\n        >\n    ): Promise<AuthenticationResult> {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return {} as Promise<AuthenticationResult>;\n    }\n    getTokenCache(): ITokenCache {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return {} as ITokenCache;\n    }\n    getLogger(): Logger {\n        return this.logger;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setLogger(logger: Logger): void {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setActiveAccount(account: AccountInfo | null): void {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n    }\n    getActiveAccount(): AccountInfo | null {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return null;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    initializeWrapperLibrary(sku: WrapperSKU, version: string): void {\n        this.browserStorage.setWrapperMetadata(sku, version);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setNavigationClient(navigationClient: INavigationClient): void {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n    }\n    getConfiguration(): BrowserConfiguration {\n        return this.config;\n    }\n    isBrowserEnv(): boolean {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return true;\n    }\n    getBrowserCrypto(): ICrypto {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return {} as ICrypto;\n    }\n    getPerformanceClient(): IPerformanceClient {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return {} as IPerformanceClient;\n    }\n    getRedirectResponse(): Map<string, Promise<AuthenticationResult | null>> {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n        return {} as Map<string, Promise<AuthenticationResult | null>>;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async clearCache(logoutRequest?: ClearCacheRequest): Promise<void> {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async hydrateCache(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        result: AuthenticationResult,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        request:\n            | SilentRequest\n            | SsoSilentRequest\n            | RedirectRequest\n            | PopupRequest\n    ): Promise<void> {\n        blockAPICallsBeforeInitialize(this.initialized);\n        blockNonBrowserEnvironment();\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BaseOperatingContext } from \"./BaseOperatingContext\";\n\nexport class UnknownOperatingContext extends BaseOperatingContext {\n    /*\n     * TODO: Once we have determine the bundling code return here to specify the name of the bundle\n     * containing the implementation for this operating context\n     */\n    static readonly MODULE_NAME: string = \"\";\n\n    /**\n     * Unique identifier for the operating context\n     */\n    static readonly ID: string = \"UnknownOperatingContext\";\n\n    /**\n     * Returns the unique identifier for this operating context\n     * @returns string\n     */\n    getId(): string {\n        return UnknownOperatingContext.ID;\n    }\n\n    /**\n     * Return the module name.  Intended for use with import() to enable dynamic import\n     * of the implementation associated with this operating context\n     * @returns\n     */\n    getModuleName(): string {\n        return UnknownOperatingContext.MODULE_NAME;\n    }\n\n    /**\n     * Checks whether the operating context is available.\n     * Confirms that the code is running a browser rather.  This is required.\n     * @returns Promise<boolean> indicating whether this operating context is currently available.\n     */\n    async initialize(): Promise<boolean> {\n        /**\n         * This operating context is in use when we have not checked for what the operating context is.\n         * The context is unknown until we check it.\n         */\n        return true;\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ITokenCache } from \"../cache/ITokenCache\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { WrapperSKU } from \"../utils/BrowserConstants\";\nimport { IPublicClientApplication } from \"./IPublicClientApplication\";\nimport { IController } from \"../controllers/IController\";\nimport {\n    PerformanceCallbackFunction,\n    AccountInfo,\n    AccountFilter,\n    Logger,\n} from \"@azure/msal-common\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport * as ControllerFactory from \"../controllers/ControllerFactory\";\nimport { BrowserConfiguration, Configuration } from \"../config/Configuration\";\nimport { EventCallbackFunction } from \"../event/EventMessage\";\nimport { ClearCacheRequest } from \"../request/ClearCacheRequest\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { UnknownOperatingContextController } from \"../controllers/UnknownOperatingContextController\";\nimport { UnknownOperatingContext } from \"../operatingcontext/UnknownOperatingContext\";\n\n/**\n * PublicClientNext is an early look at the planned implementation of PublicClientApplication in the next major version of MSAL.js.\n * It contains support for multiple API implementations based on the runtime environment that it is running in.\n *\n * The goals of these changes are to provide a clean separation of behavior between different operating contexts (Nested App Auth, Platform Brokers, Plain old Browser, etc.)\n * while still providing a consistent API surface for developers.\n *\n * Please use PublicClientApplication for any prod/real-world scenarios.\n * Note: PublicClientNext is experimental and subject to breaking changes without following semver\n *\n */\nexport class PublicClientNext implements IPublicClientApplication {\n    /*\n     * Definite assignment assertion used below\n     * https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#definite-assignment-assertions\n     */\n    protected controller!: IController;\n    protected configuration: Configuration;\n\n    public static async createPublicClientApplication(\n        configuration: Configuration\n    ): Promise<IPublicClientApplication> {\n        const controller = await ControllerFactory.createController(\n            configuration\n        );\n        let pca;\n        if (controller !== null) {\n            pca = new PublicClientNext(configuration, controller);\n        } else {\n            pca = new PublicClientNext(configuration);\n        }\n        return pca;\n    }\n\n    /**\n     * @constructor\n     * Constructor for the PublicClientNext used to instantiate the PublicClientNext object\n     *\n     * Important attributes in the Configuration object for auth are:\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\n     * - authority: the authority URL for your application.\n     * - redirect_uri: the uri of your application registered in the portal.\n     *\n     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\n     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\n     *\n     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\n     * Full B2C functionality will be available in this library in future versions.\n     *\n     * @param configuration Object for the MSAL PublicClientApplication instance\n     * @param IController Optional parameter to explictly set the controller. (Will be removed when we remove public constructor)\n     */\n    private constructor(\n        configuration: Configuration,\n        controller?: IController\n    ) {\n        this.configuration = configuration;\n        if (controller) {\n            this.controller = controller;\n        } else {\n            const operatingContext = new UnknownOperatingContext(configuration);\n            this.controller = new UnknownOperatingContextController(\n                operatingContext\n            );\n        }\n    }\n\n    /**\n     * Initializer function to perform async startup tasks such as connecting to WAM extension\n     */\n    async initialize(): Promise<void> {\n        if (this.controller instanceof UnknownOperatingContextController) {\n            const result = await ControllerFactory.createController(\n                this.configuration\n            );\n            if (result !== null) {\n                this.controller = result;\n            }\n            return this.controller.initialize();\n        }\n        return Promise.resolve();\n    }\n\n    /**\n     * Use when you want to obtain an access_token for your API via opening a popup window in the user's browser\n     *\n     * @param request\n     *\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    async acquireTokenPopup(\n        request: PopupRequest\n    ): Promise<AuthenticationResult> {\n        return this.controller.acquireTokenPopup(request);\n    }\n\n    /**\n     * Use when you want to obtain an access_token for your API by redirecting the user's browser window to the authorization endpoint. This function redirects\n     * the page, so any code that follows this function will not execute.\n     *\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\n     *\n     * @param request\n     */\n    acquireTokenRedirect(request: RedirectRequest): Promise<void> {\n        return this.controller.acquireTokenRedirect(request);\n    }\n\n    /**\n     * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\n     *\n     * @param {@link (SilentRequest:type)}\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthenticationResult} object\n     */\n    acquireTokenSilent(\n        silentRequest: SilentRequest\n    ): Promise<AuthenticationResult> {\n        return this.controller.acquireTokenSilent(silentRequest);\n    }\n\n    /**\n     * This function redeems an authorization code (passed as code) from the eSTS token endpoint.\n     * This authorization code should be acquired server-side using a confidential client to acquire a spa_code.\n     * This API is not indended for normal authorization code acquisition and redemption.\n     *\n     * Redemption of this authorization code will not require PKCE, as it was acquired by a confidential client.\n     *\n     * @param request {@link AuthorizationCodeRequest}\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    acquireTokenByCode(\n        request: AuthorizationCodeRequest\n    ): Promise<AuthenticationResult> {\n        return this.controller.acquireTokenByCode(request);\n    }\n\n    /**\n     * Adds event callbacks to array\n     * @param callback\n     */\n    addEventCallback(callback: EventCallbackFunction): string | null {\n        return this.controller.addEventCallback(callback);\n    }\n\n    /**\n     * Removes callback with provided id from callback array\n     * @param callbackId\n     */\n    removeEventCallback(callbackId: string): void {\n        return this.controller.removeEventCallback(callbackId);\n    }\n\n    /**\n     * Registers a callback to receive performance events.\n     *\n     * @param {PerformanceCallbackFunction} callback\n     * @returns {string}\n     */\n    addPerformanceCallback(callback: PerformanceCallbackFunction): string {\n        return this.controller.addPerformanceCallback(callback);\n    }\n\n    /**\n     * Removes a callback registered with addPerformanceCallback.\n     *\n     * @param {string} callbackId\n     * @returns {boolean}\n     */\n    removePerformanceCallback(callbackId: string): boolean {\n        return this.controller.removePerformanceCallback(callbackId);\n    }\n\n    /**\n     * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\n     */\n    enableAccountStorageEvents(): void {\n        this.controller.enableAccountStorageEvents();\n    }\n\n    /**\n     * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\n     */\n    disableAccountStorageEvents(): void {\n        this.controller.disableAccountStorageEvents();\n    }\n\n    /**\n     * Returns the first account found in the cache that matches the account filter passed in.\n     * @param accountFilter\n     * @returns The first account found in the cache matching the provided filter or null if no account could be found.\n     */\n    getAccount(accountFilter: AccountFilter): AccountInfo | null {\n        return this.controller.getAccount(accountFilter);\n    }\n\n    /**\n     * Returns the signed in account matching homeAccountId.\n     * (the account object is created at the time of successful login)\n     * or null when no matching account is found\n     * @param homeAccountId\n     * @returns The account object stored in MSAL\n     * @deprecated - Use getAccount instead\n     */\n    getAccountByHomeId(homeAccountId: string): AccountInfo | null {\n        return this.controller.getAccountByHomeId(homeAccountId);\n    }\n\n    /**\n     * Returns the signed in account matching localAccountId.\n     * (the account object is created at the time of successful login)\n     * or null when no matching account is found\n     * @param localAccountId\n     * @returns The account object stored in MSAL\n     * @deprecated - Use getAccount instead\n     */\n    getAccountByLocalId(localId: string): AccountInfo | null {\n        return this.controller.getAccountByLocalId(localId);\n    }\n\n    /**\n     * Returns the signed in account matching username.\n     * (the account object is created at the time of successful login)\n     * or null when no matching account is found.\n     * This API is provided for convenience but getAccountById should be used for best reliability\n     * @param userName\n     * @returns The account object stored in MSAL\n     * @deprecated - Use getAccount instead\n     */\n    getAccountByUsername(userName: string): AccountInfo | null {\n        return this.controller.getAccountByUsername(userName);\n    }\n\n    /**\n     * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.\n     * @param accountFilter - (Optional) filter to narrow down the accounts returned\n     * @returns Array of AccountInfo objects in cache\n     */\n    getAllAccounts(accountFilter?: AccountFilter): AccountInfo[] {\n        return this.controller.getAllAccounts(accountFilter);\n    }\n\n    /**\n     * Event handler function which allows users to fire events after the PublicClientApplication object\n     * has loaded during redirect flows. This should be invoked on all page loads involved in redirect\n     * auth flows.\n     * @param hash Hash to process. Defaults to the current value of window.location.hash. Only needs to be provided explicitly if the response to be handled is not contained in the current value.\n     * @returns Token response or null. If the return value is null, then no auth redirect was detected.\n     */\n    handleRedirectPromise(\n        hash?: string | undefined\n    ): Promise<AuthenticationResult | null> {\n        return this.controller.handleRedirectPromise(hash);\n    }\n\n    /**\n     * Use when initiating the login process via opening a popup window in the user's browser\n     *\n     * @param request\n     *\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    loginPopup(\n        request?: PopupRequest | undefined\n    ): Promise<AuthenticationResult> {\n        return this.controller.loginPopup(request);\n    }\n\n    /**\n     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\n     * any code that follows this function will not execute.\n     *\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\n     *\n     * @param request\n     */\n    loginRedirect(request?: RedirectRequest | undefined): Promise<void> {\n        return this.controller.loginRedirect(request);\n    }\n\n    /**\n     * Deprecated logout function. Use logoutRedirect or logoutPopup instead\n     * @param logoutRequest\n     * @deprecated\n     */\n    logout(logoutRequest?: EndSessionRequest): Promise<void> {\n        return this.controller.logout(logoutRequest);\n    }\n\n    /**\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\n     * Default behaviour is to redirect the user to `window.location.href`.\n     * @param logoutRequest\n     */\n    logoutRedirect(logoutRequest?: EndSessionRequest): Promise<void> {\n        return this.controller.logoutRedirect(logoutRequest);\n    }\n\n    /**\n     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\n     * @param logoutRequest\n     */\n    logoutPopup(logoutRequest?: EndSessionRequest): Promise<void> {\n        return this.controller.logoutPopup(logoutRequest);\n    }\n\n    /**\n     * This function uses a hidden iframe to fetch an authorization code from the eSTS. There are cases where this may not work:\n     * - Any browser using a form of Intelligent Tracking Prevention\n     * - If there is not an established session with the service\n     *\n     * In these cases, the request must be done inside a popup or full frame redirect.\n     *\n     * For the cases where interaction is required, you cannot send a request with prompt=none.\n     *\n     * If your refresh token has expired, you can use this function to fetch a new set of tokens silently as long as\n     * you session on the server still exists.\n     * @param request {@link SsoSilentRequest}\n     *\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    ssoSilent(request: SsoSilentRequest): Promise<AuthenticationResult> {\n        return this.controller.ssoSilent(request);\n    }\n\n    /**\n     * Gets the token cache for the application.\n     */\n    getTokenCache(): ITokenCache {\n        return this.controller.getTokenCache();\n    }\n\n    /**\n     * Returns the logger instance\n     */\n    getLogger(): Logger {\n        return this.controller.getLogger();\n    }\n\n    /**\n     * Replaces the default logger set in configurations with new Logger with new configurations\n     * @param logger Logger instance\n     */\n    setLogger(logger: Logger): void {\n        this.controller.setLogger(logger);\n    }\n\n    /**\n     * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.\n     * @param account\n     */\n    setActiveAccount(account: AccountInfo | null): void {\n        this.controller.setActiveAccount(account);\n    }\n\n    /**\n     * Gets the currently active account\n     */\n    getActiveAccount(): AccountInfo | null {\n        return this.controller.getActiveAccount();\n    }\n\n    /**\n     * Called by wrapper libraries (Angular & React) to set SKU and Version passed down to telemetry, logger, etc.\n     * @param sku\n     * @param version\n     */\n    initializeWrapperLibrary(sku: WrapperSKU, version: string): void {\n        return this.controller.initializeWrapperLibrary(sku, version);\n    }\n\n    /**\n     * Sets navigation client\n     * @param navigationClient\n     */\n    setNavigationClient(navigationClient: INavigationClient): void {\n        this.controller.setNavigationClient(navigationClient);\n    }\n\n    /**\n     * Returns the configuration object\n     * @internal\n     */\n    getConfiguration(): BrowserConfiguration {\n        return this.controller.getConfiguration();\n    }\n\n    /**\n     * Hydrates cache with the tokens and account in the AuthenticationResult object\n     * @param result\n     * @param request - The request object that was used to obtain the AuthenticationResult\n     * @returns\n     */\n    async hydrateCache(\n        result: AuthenticationResult,\n        request:\n            | SilentRequest\n            | SsoSilentRequest\n            | RedirectRequest\n            | PopupRequest\n    ): Promise<void> {\n        return this.controller.hydrateCache(result, request);\n    }\n\n    /**\n     * Clears tokens and account from the browser cache.\n     * @param logoutRequest\n     */\n    clearCache(logoutRequest?: ClearCacheRequest): Promise<void> {\n        return this.controller.clearCache(logoutRequest);\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    AccountFilter,\n    AccountInfo,\n    Logger,\n    PerformanceCallbackFunction,\n} from \"@azure/msal-common\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport {\n    BrowserConfigurationAuthErrorCodes,\n    createBrowserConfigurationAuthError,\n} from \"../error/BrowserConfigurationAuthError\";\nimport { WrapperSKU } from \"../utils/BrowserConstants\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { EndSessionPopupRequest } from \"../request/EndSessionPopupRequest\";\nimport { ITokenCache } from \"../cache/ITokenCache\";\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { EventCallbackFunction } from \"../event/EventMessage\";\nimport { ClearCacheRequest } from \"../request/ClearCacheRequest\";\nimport { InitializeApplicationRequest } from \"../request/InitializeApplicationRequest\";\n\nexport interface IPublicClientApplication {\n    // TODO: Make request mandatory in the next major version?\n    initialize(request?: InitializeApplicationRequest): Promise<void>;\n    acquireTokenPopup(request: PopupRequest): Promise<AuthenticationResult>;\n    acquireTokenRedirect(request: RedirectRequest): Promise<void>;\n    acquireTokenSilent(\n        silentRequest: SilentRequest\n    ): Promise<AuthenticationResult>;\n    acquireTokenByCode(\n        request: AuthorizationCodeRequest\n    ): Promise<AuthenticationResult>;\n    addEventCallback(callback: EventCallbackFunction): string | null;\n    removeEventCallback(callbackId: string): void;\n    addPerformanceCallback(callback: PerformanceCallbackFunction): string;\n    removePerformanceCallback(callbackId: string): boolean;\n    enableAccountStorageEvents(): void;\n    disableAccountStorageEvents(): void;\n    getAccount(accountFilter: AccountFilter): AccountInfo | null;\n    getAccountByHomeId(homeAccountId: string): AccountInfo | null;\n    getAccountByLocalId(localId: string): AccountInfo | null;\n    getAccountByUsername(userName: string): AccountInfo | null;\n    getAllAccounts(): AccountInfo[];\n    handleRedirectPromise(hash?: string): Promise<AuthenticationResult | null>;\n    loginPopup(request?: PopupRequest): Promise<AuthenticationResult>;\n    loginRedirect(request?: RedirectRequest): Promise<void>;\n    logout(logoutRequest?: EndSessionRequest): Promise<void>;\n    logoutRedirect(logoutRequest?: EndSessionRequest): Promise<void>;\n    logoutPopup(logoutRequest?: EndSessionPopupRequest): Promise<void>;\n    ssoSilent(request: SsoSilentRequest): Promise<AuthenticationResult>;\n    getTokenCache(): ITokenCache;\n    getLogger(): Logger;\n    setLogger(logger: Logger): void;\n    setActiveAccount(account: AccountInfo | null): void;\n    getActiveAccount(): AccountInfo | null;\n    initializeWrapperLibrary(sku: WrapperSKU, version: string): void;\n    setNavigationClient(navigationClient: INavigationClient): void;\n    /** @internal */\n    getConfiguration(): BrowserConfiguration;\n    hydrateCache(\n        result: AuthenticationResult,\n        request:\n            | SilentRequest\n            | SsoSilentRequest\n            | RedirectRequest\n            | PopupRequest\n    ): Promise<void>;\n    clearCache(logoutRequest?: ClearCacheRequest): Promise<void>;\n}\n\nexport const stubbedPublicClientApplication: IPublicClientApplication = {\n    initialize: () => {\n        return Promise.reject(\n            createBrowserConfigurationAuthError(\n                BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\n            )\n        );\n    },\n    acquireTokenPopup: () => {\n        return Promise.reject(\n            createBrowserConfigurationAuthError(\n                BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\n            )\n        );\n    },\n    acquireTokenRedirect: () => {\n        return Promise.reject(\n            createBrowserConfigurationAuthError(\n                BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\n            )\n        );\n    },\n    acquireTokenSilent: () => {\n        return Promise.reject(\n            createBrowserConfigurationAuthError(\n                BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\n            )\n        );\n    },\n    acquireTokenByCode: () => {\n        return Promise.reject(\n            createBrowserConfigurationAuthError(\n                BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\n            )\n        );\n    },\n    getAllAccounts: () => {\n        return [];\n    },\n    getAccount: () => {\n        return null;\n    },\n    getAccountByHomeId: () => {\n        return null;\n    },\n    getAccountByUsername: () => {\n        return null;\n    },\n    getAccountByLocalId: () => {\n        return null;\n    },\n    handleRedirectPromise: () => {\n        return Promise.reject(\n            createBrowserConfigurationAuthError(\n                BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\n            )\n        );\n    },\n    loginPopup: () => {\n        return Promise.reject(\n            createBrowserConfigurationAuthError(\n                BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\n            )\n        );\n    },\n    loginRedirect: () => {\n        return Promise.reject(\n            createBrowserConfigurationAuthError(\n                BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\n            )\n        );\n    },\n    logout: () => {\n        return Promise.reject(\n            createBrowserConfigurationAuthError(\n                BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\n            )\n        );\n    },\n    logoutRedirect: () => {\n        return Promise.reject(\n            createBrowserConfigurationAuthError(\n                BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\n            )\n        );\n    },\n    logoutPopup: () => {\n        return Promise.reject(\n            createBrowserConfigurationAuthError(\n                BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\n            )\n        );\n    },\n    ssoSilent: () => {\n        return Promise.reject(\n            createBrowserConfigurationAuthError(\n                BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\n            )\n        );\n    },\n    addEventCallback: () => {\n        return null;\n    },\n    removeEventCallback: () => {\n        return;\n    },\n    addPerformanceCallback: () => {\n        return \"\";\n    },\n    removePerformanceCallback: () => {\n        return false;\n    },\n    enableAccountStorageEvents: () => {\n        return;\n    },\n    disableAccountStorageEvents: () => {\n        return;\n    },\n    getTokenCache: () => {\n        throw createBrowserConfigurationAuthError(\n            BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\n        );\n    },\n    getLogger: () => {\n        throw createBrowserConfigurationAuthError(\n            BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\n        );\n    },\n    setLogger: () => {\n        return;\n    },\n    setActiveAccount: () => {\n        return;\n    },\n    getActiveAccount: () => {\n        return null;\n    },\n    initializeWrapperLibrary: () => {\n        return;\n    },\n    setNavigationClient: () => {\n        return;\n    },\n    getConfiguration: () => {\n        throw createBrowserConfigurationAuthError(\n            BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\n        );\n    },\n    hydrateCache: () => {\n        return Promise.reject(\n            createBrowserConfigurationAuthError(\n                BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\n            )\n        );\n    },\n    clearCache: () => {\n        return Promise.reject(\n            createBrowserConfigurationAuthError(\n                BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\n            )\n        );\n    },\n};\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError, AccountInfo } from \"@azure/msal-common\";\nimport { EventType } from \"./EventType\";\nimport { InteractionStatus, InteractionType } from \"../utils/BrowserConstants\";\nimport {\n    PopupRequest,\n    RedirectRequest,\n    SilentRequest,\n    SsoSilentRequest,\n    EndSessionRequest,\n    AuthenticationResult,\n} from \"..\";\n\nexport type EventMessage = {\n    eventType: EventType;\n    interactionType: InteractionType | null;\n    payload: EventPayload;\n    error: EventError;\n    timestamp: number;\n};\n\nexport type PopupEvent = {\n    popupWindow: Window;\n};\n\nexport type EventPayload =\n    | AccountInfo\n    | PopupRequest\n    | RedirectRequest\n    | SilentRequest\n    | SsoSilentRequest\n    | EndSessionRequest\n    | AuthenticationResult\n    | PopupEvent\n    | null;\n\nexport type EventError = AuthError | Error | null;\n\nexport type EventCallbackFunction = (message: EventMessage) => void;\n\nexport class EventMessageUtils {\n    /**\n     * Gets interaction status from event message\n     * @param message\n     * @param currentStatus\n     */\n    static getInteractionStatusFromEvent(\n        message: EventMessage,\n        currentStatus?: InteractionStatus\n    ): InteractionStatus | null {\n        switch (message.eventType) {\n            case EventType.LOGIN_START:\n                return InteractionStatus.Login;\n            case EventType.SSO_SILENT_START:\n                return InteractionStatus.SsoSilent;\n            case EventType.ACQUIRE_TOKEN_START:\n                if (\n                    message.interactionType === InteractionType.Redirect ||\n                    message.interactionType === InteractionType.Popup\n                ) {\n                    return InteractionStatus.AcquireToken;\n                }\n                break;\n            case EventType.HANDLE_REDIRECT_START:\n                return InteractionStatus.HandleRedirect;\n            case EventType.LOGOUT_START:\n                return InteractionStatus.Logout;\n            case EventType.SSO_SILENT_SUCCESS:\n            case EventType.SSO_SILENT_FAILURE:\n                if (\n                    currentStatus &&\n                    currentStatus !== InteractionStatus.SsoSilent\n                ) {\n                    // Prevent this event from clearing any status other than ssoSilent\n                    break;\n                }\n                return InteractionStatus.None;\n            case EventType.LOGOUT_END:\n                if (\n                    currentStatus &&\n                    currentStatus !== InteractionStatus.Logout\n                ) {\n                    // Prevent this event from clearing any status other than logout\n                    break;\n                }\n                return InteractionStatus.None;\n            case EventType.HANDLE_REDIRECT_END:\n                if (\n                    currentStatus &&\n                    currentStatus !== InteractionStatus.HandleRedirect\n                ) {\n                    // Prevent this event from clearing any status other than handleRedirect\n                    break;\n                }\n                return InteractionStatus.None;\n            case EventType.LOGIN_SUCCESS:\n            case EventType.LOGIN_FAILURE:\n            case EventType.ACQUIRE_TOKEN_SUCCESS:\n            case EventType.ACQUIRE_TOKEN_FAILURE:\n            case EventType.RESTORE_FROM_BFCACHE:\n                if (\n                    message.interactionType === InteractionType.Redirect ||\n                    message.interactionType === InteractionType.Popup\n                ) {\n                    if (\n                        currentStatus &&\n                        currentStatus !== InteractionStatus.Login &&\n                        currentStatus !== InteractionStatus.AcquireToken\n                    ) {\n                        // Prevent this event from clearing any status other than login or acquireToken\n                        break;\n                    }\n                    return InteractionStatus.None;\n                }\n                break;\n            default:\n                break;\n        }\n        return null;\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { CryptoOps } from \"./CryptoOps\";\nimport {\n    Logger,\n    LoggerOptions,\n    PopTokenGenerator,\n    SignedHttpRequestParameters,\n} from \"@azure/msal-common\";\nimport { version, name } from \"../packageMetadata\";\n\nexport type SignedHttpRequestOptions = {\n    loggerOptions: LoggerOptions;\n};\n\nexport class SignedHttpRequest {\n    private popTokenGenerator: PopTokenGenerator;\n    private cryptoOps: CryptoOps;\n    private shrParameters: SignedHttpRequestParameters;\n    private logger: Logger;\n\n    constructor(\n        shrParameters: SignedHttpRequestParameters,\n        shrOptions?: SignedHttpRequestOptions\n    ) {\n        const loggerOptions = (shrOptions && shrOptions.loggerOptions) || {};\n        this.logger = new Logger(loggerOptions, name, version);\n        this.cryptoOps = new CryptoOps(this.logger);\n        this.popTokenGenerator = new PopTokenGenerator(this.cryptoOps);\n        this.shrParameters = shrParameters;\n    }\n\n    /**\n     * Generates and caches a keypair for the given request options.\n     * @returns Public key digest, which should be sent to the token issuer.\n     */\n    async generatePublicKeyThumbprint(): Promise<string> {\n        const { kid } = await this.popTokenGenerator.generateKid(\n            this.shrParameters\n        );\n\n        return kid;\n    }\n\n    /**\n     * Generates a signed http request for the given payload with the given key.\n     * @param payload Payload to sign (e.g. access token)\n     * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\n     * @param claims Additional claims to include/override in the signed JWT\n     * @returns Pop token signed with the corresponding private key\n     */\n    async signRequest(\n        payload: string,\n        publicKeyThumbprint: string,\n        claims?: object\n    ): Promise<string> {\n        return this.popTokenGenerator.signPayload(\n            payload,\n            publicKeyThumbprint,\n            this.shrParameters,\n            claims\n        );\n    }\n\n    /**\n     * Removes cached keys from browser for given public key thumbprint\n     * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\n     * @returns If keys are properly deleted\n     */\n    async removeKeys(publicKeyThumbprint: string): Promise<boolean> {\n        return this.cryptoOps.removeTokenBindingKey(publicKeyThumbprint);\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    Constants,\n    InProgressPerformanceEvent,\n    IPerformanceClient,\n    Logger,\n    PerformanceClient,\n    PerformanceEvent,\n    PerformanceEvents,\n    PreQueueEvent,\n    SubMeasurement,\n} from \"@azure/msal-common\";\nimport { Configuration } from \"../config/Configuration\";\nimport { name, version } from \"../packageMetadata\";\nimport {\n    BROWSER_PERF_ENABLED_KEY,\n    BrowserCacheLocation,\n} from \"../utils/BrowserConstants\";\nimport * as BrowserCrypto from \"../crypto/BrowserCrypto\";\n\n/**\n * Returns browser performance measurement module if session flag is enabled. Returns undefined otherwise.\n */\nfunction getPerfMeasurementModule() {\n    let sessionStorage: Storage | undefined;\n    try {\n        sessionStorage = window[BrowserCacheLocation.SessionStorage];\n        const perfEnabled = sessionStorage?.getItem(BROWSER_PERF_ENABLED_KEY);\n        if (Number(perfEnabled) === 1) {\n            return import(\"./BrowserPerformanceMeasurement\");\n        }\n        // Mute errors if it's a non-browser environment or cookies are blocked.\n    } catch (e) {}\n\n    return undefined;\n}\n\n/**\n * Returns boolean, indicating whether browser supports window.performance.now() function.\n */\nfunction supportsBrowserPerformanceNow(): boolean {\n    return (\n        typeof window !== \"undefined\" &&\n        typeof window.performance !== \"undefined\" &&\n        typeof window.performance.now === \"function\"\n    );\n}\n\n/**\n * Returns event duration in milliseconds using window performance API if available. Returns undefined otherwise.\n * @param startTime {DOMHighResTimeStamp | undefined}\n * @returns {number | undefined}\n */\nfunction getPerfDurationMs(\n    startTime: DOMHighResTimeStamp | undefined\n): number | undefined {\n    if (!startTime || !supportsBrowserPerformanceNow()) {\n        return undefined;\n    }\n\n    return Math.round(window.performance.now() - startTime);\n}\n\nexport class BrowserPerformanceClient\n    extends PerformanceClient\n    implements IPerformanceClient\n{\n    constructor(\n        configuration: Configuration,\n        intFields?: Set<string>,\n        abbreviations?: Map<string, string>\n    ) {\n        super(\n            configuration.auth.clientId,\n            configuration.auth.authority || `${Constants.DEFAULT_AUTHORITY}`,\n            new Logger(\n                configuration.system?.loggerOptions || {},\n                name,\n                version\n            ),\n            name,\n            version,\n            configuration.telemetry?.application || {\n                appName: \"\",\n                appVersion: \"\",\n            },\n            intFields,\n            abbreviations\n        );\n    }\n\n    generateId(): string {\n        return BrowserCrypto.createNewGuid();\n    }\n\n    private getPageVisibility(): string | null {\n        return document.visibilityState?.toString() || null;\n    }\n\n    private deleteIncompleteSubMeasurements(\n        inProgressEvent: InProgressPerformanceEvent\n    ): void {\n        void getPerfMeasurementModule()?.then((module) => {\n            const rootEvent = this.eventsByCorrelationId.get(\n                inProgressEvent.event.correlationId\n            );\n            const isRootEvent =\n                rootEvent &&\n                rootEvent.eventId === inProgressEvent.event.eventId;\n            const incompleteMeasurements: SubMeasurement[] = [];\n            if (isRootEvent && rootEvent?.incompleteSubMeasurements) {\n                rootEvent.incompleteSubMeasurements.forEach(\n                    (subMeasurement: SubMeasurement) => {\n                        incompleteMeasurements.push({ ...subMeasurement });\n                    }\n                );\n            }\n            // Clean up remaining marks for incomplete sub-measurements\n            module.BrowserPerformanceMeasurement.flushMeasurements(\n                inProgressEvent.event.correlationId,\n                incompleteMeasurements\n            );\n        });\n    }\n\n    /**\n     * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\n     * Also captures browser page visibilityState.\n     *\n     * @param {PerformanceEvents} measureName\n     * @param {?string} [correlationId]\n     * @returns {((event?: Partial<PerformanceEvent>) => PerformanceEvent| null)}\n     */\n    startMeasurement(\n        measureName: string,\n        correlationId?: string\n    ): InProgressPerformanceEvent {\n        // Capture page visibilityState and then invoke start/end measurement\n        const startPageVisibility = this.getPageVisibility();\n        const inProgressEvent = super.startMeasurement(\n            measureName,\n            correlationId\n        );\n        const startTime: number | undefined = supportsBrowserPerformanceNow()\n            ? window.performance.now()\n            : undefined;\n\n        const browserMeasurement = getPerfMeasurementModule()?.then(\n            (module) => {\n                return new module.BrowserPerformanceMeasurement(\n                    measureName,\n                    inProgressEvent.event.correlationId\n                );\n            }\n        );\n        void browserMeasurement?.then((measurement) =>\n            measurement.startMeasurement()\n        );\n\n        return {\n            ...inProgressEvent,\n            end: (\n                event?: Partial<PerformanceEvent>,\n                error?: unknown\n            ): PerformanceEvent | null => {\n                const res = inProgressEvent.end(\n                    {\n                        ...event,\n                        startPageVisibility,\n                        endPageVisibility: this.getPageVisibility(),\n                        durationMs: getPerfDurationMs(startTime),\n                    },\n                    error\n                );\n                void browserMeasurement?.then((measurement) =>\n                    measurement.endMeasurement()\n                );\n                this.deleteIncompleteSubMeasurements(inProgressEvent);\n\n                return res;\n            },\n            discard: () => {\n                inProgressEvent.discard();\n                void browserMeasurement?.then((measurement) =>\n                    measurement.flushMeasurement()\n                );\n                this.deleteIncompleteSubMeasurements(inProgressEvent);\n            },\n        };\n    }\n\n    /**\n     * Adds pre-queue time to preQueueTimeByCorrelationId map.\n     * @param {PerformanceEvents} eventName\n     * @param {?string} correlationId\n     * @returns\n     */\n    setPreQueueTime(\n        eventName: PerformanceEvents,\n        correlationId?: string\n    ): void {\n        if (!supportsBrowserPerformanceNow()) {\n            this.logger.trace(\n                `BrowserPerformanceClient: window performance API not available, unable to set telemetry queue time for ${eventName}`\n            );\n            return;\n        }\n\n        if (!correlationId) {\n            this.logger.trace(\n                `BrowserPerformanceClient: correlationId for ${eventName} not provided, unable to set telemetry queue time`\n            );\n            return;\n        }\n\n        const preQueueEvent: PreQueueEvent | undefined =\n            this.preQueueTimeByCorrelationId.get(correlationId);\n        /**\n         * Manually complete queue measurement if there is an incomplete pre-queue event.\n         * Incomplete pre-queue events are instrumentation bugs that should be fixed.\n         */\n        if (preQueueEvent) {\n            this.logger.trace(\n                `BrowserPerformanceClient: Incomplete pre-queue ${preQueueEvent.name} found`,\n                correlationId\n            );\n            this.addQueueMeasurement(\n                preQueueEvent.name,\n                correlationId,\n                undefined,\n                true\n            );\n        }\n        this.preQueueTimeByCorrelationId.set(correlationId, {\n            name: eventName,\n            time: window.performance.now(),\n        });\n    }\n\n    /**\n     * Calculates and adds queue time measurement for given performance event.\n     *\n     * @param {PerformanceEvents} eventName\n     * @param {?string} correlationId\n     * @param {?number} queueTime\n     * @param {?boolean} manuallyCompleted - indicator for manually completed queue measurements\n     * @returns\n     */\n    addQueueMeasurement(\n        eventName: string,\n        correlationId?: string,\n        queueTime?: number,\n        manuallyCompleted?: boolean\n    ): void {\n        if (!supportsBrowserPerformanceNow()) {\n            this.logger.trace(\n                `BrowserPerformanceClient: window performance API not available, unable to add queue measurement for ${eventName}`\n            );\n            return;\n        }\n\n        if (!correlationId) {\n            this.logger.trace(\n                `BrowserPerformanceClient: correlationId for ${eventName} not provided, unable to add queue measurement`\n            );\n            return;\n        }\n\n        const preQueueTime = super.getPreQueueTime(eventName, correlationId);\n        if (!preQueueTime) {\n            return;\n        }\n\n        const currentTime = window.performance.now();\n        const resQueueTime =\n            queueTime || super.calculateQueuedTime(preQueueTime, currentTime);\n\n        return super.addQueueMeasurement(\n            eventName,\n            correlationId,\n            resQueueTime,\n            manuallyCompleted\n        );\n    }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AuthenticationRecord, MsalAccountInfo, MsalToken, ValidMsalToken } from \"./types\";\nimport { AuthenticationRequiredError, CredentialUnavailableError } from \"../errors\";\nimport { CredentialLogger, credentialLogger, formatError } from \"../util/logging\";\nimport { DefaultAuthorityHost, DefaultTenantId } from \"../constants\";\nimport { randomUUID as coreRandomUUID, isNode } from \"@azure/core-util\";\n\nimport { AbortError } from \"@azure/abort-controller\";\nimport { AzureLogLevel } from \"@azure/logger\";\nimport { GetTokenOptions } from \"@azure/core-auth\";\nimport { msalCommon } from \"./msal\";\n\nexport interface ILoggerCallback {\n  (level: msalCommon.LogLevel, message: string, containsPii: boolean): void;\n}\n\n/**\n * @internal\n */\nconst logger = credentialLogger(\"IdentityUtils\");\n\n/**\n * Latest AuthenticationRecord version\n * @internal\n */\nconst LatestAuthenticationRecordVersion = \"1.0\";\n\n/**\n * Ensures the validity of the MSAL token\n * @internal\n */\nexport function ensureValidMsalToken(\n  scopes: string | string[],\n  msalToken?: MsalToken | null,\n  getTokenOptions?: GetTokenOptions,\n): asserts msalToken is ValidMsalToken {\n  const error = (message: string): Error => {\n    logger.getToken.info(message);\n    return new AuthenticationRequiredError({\n      scopes: Array.isArray(scopes) ? scopes : [scopes],\n      getTokenOptions,\n      message,\n    });\n  };\n  if (!msalToken) {\n    throw error(\"No response\");\n  }\n  if (!msalToken.expiresOn) {\n    throw error(`Response had no \"expiresOn\" property.`);\n  }\n  if (!msalToken.accessToken) {\n    throw error(`Response had no \"accessToken\" property.`);\n  }\n}\n\n/**\n * Generates a valid authority by combining a host with a tenantId.\n * @internal\n */\nexport function getAuthority(tenantId: string, host?: string): string {\n  if (!host) {\n    host = DefaultAuthorityHost;\n  }\n  if (new RegExp(`${tenantId}/?$`).test(host)) {\n    return host;\n  }\n  if (host.endsWith(\"/\")) {\n    return host + tenantId;\n  } else {\n    return `${host}/${tenantId}`;\n  }\n}\n\n/**\n * Generates the known authorities.\n * If the Tenant Id is `adfs`, the authority can't be validated since the format won't match the expected one.\n * For that reason, we have to force MSAL to disable validating the authority\n * by sending it within the known authorities in the MSAL configuration.\n * @internal\n */\nexport function getKnownAuthorities(\n  tenantId: string,\n  authorityHost: string,\n  disableInstanceDiscovery?: boolean,\n): string[] {\n  if ((tenantId === \"adfs\" && authorityHost) || disableInstanceDiscovery) {\n    return [authorityHost];\n  }\n  return [];\n}\n\n/**\n * Generates a logger that can be passed to the MSAL clients.\n * @param credLogger - The logger of the credential.\n * @internal\n */\nexport const defaultLoggerCallback: (\n  logger: CredentialLogger,\n  platform?: \"Node\" | \"Browser\",\n) => ILoggerCallback =\n  (credLogger: CredentialLogger, platform: \"Node\" | \"Browser\" = isNode ? \"Node\" : \"Browser\") =>\n  (level, message, containsPii): void => {\n    if (containsPii) {\n      return;\n    }\n    switch (level) {\n      case msalCommon.LogLevel.Error:\n        credLogger.info(`MSAL ${platform} V2 error: ${message}`);\n        return;\n      case msalCommon.LogLevel.Info:\n        credLogger.info(`MSAL ${platform} V2 info message: ${message}`);\n        return;\n      case msalCommon.LogLevel.Verbose:\n        credLogger.info(`MSAL ${platform} V2 verbose message: ${message}`);\n        return;\n      case msalCommon.LogLevel.Warning:\n        credLogger.info(`MSAL ${platform} V2 warning: ${message}`);\n        return;\n    }\n  };\n\n/**\n * @internal\n */\nexport function getMSALLogLevel(logLevel: AzureLogLevel | undefined): msalCommon.LogLevel {\n  switch (logLevel) {\n    case \"error\":\n      return msalCommon.LogLevel.Error;\n    case \"info\":\n      return msalCommon.LogLevel.Info;\n    case \"verbose\":\n      return msalCommon.LogLevel.Verbose;\n    case \"warning\":\n      return msalCommon.LogLevel.Warning;\n    default:\n      // default msal logging level should be Info\n      return msalCommon.LogLevel.Info;\n  }\n}\n\n/**\n * Wraps core-util's randomUUID in order to allow for mocking in tests.\n * This prepares the library for the upcoming core-util update to ESM.\n *\n * @internal\n * @returns A string containing a random UUID\n */\nexport function randomUUID(): string {\n  return coreRandomUUID();\n}\n\n/**\n * Handles MSAL errors.\n */\nexport function handleMsalError(\n  scopes: string[],\n  error: Error,\n  getTokenOptions?: GetTokenOptions,\n): Error {\n  if (\n    error.name === \"AuthError\" ||\n    error.name === \"ClientAuthError\" ||\n    error.name === \"BrowserAuthError\"\n  ) {\n    const msalError = error as msalCommon.AuthError;\n    switch (msalError.errorCode) {\n      case \"endpoints_resolution_error\":\n        logger.info(formatError(scopes, error.message));\n        return new CredentialUnavailableError(error.message);\n      case \"device_code_polling_cancelled\":\n        return new AbortError(\"The authentication has been aborted by the caller.\");\n      case \"consent_required\":\n      case \"interaction_required\":\n      case \"login_required\":\n        logger.info(\n          formatError(scopes, `Authentication returned errorCode ${msalError.errorCode}`),\n        );\n        break;\n      default:\n        logger.info(formatError(scopes, `Failed to acquire token: ${error.message}`));\n        break;\n    }\n  }\n  if (\n    error.name === \"ClientConfigurationError\" ||\n    error.name === \"BrowserConfigurationAuthError\" ||\n    error.name === \"AbortError\"\n  ) {\n    return error;\n  }\n  if (error.name === \"NativeAuthError\") {\n    logger.info(\n      formatError(\n        scopes,\n        `Error from the native broker: ${error.message} with status code: ${\n          (error as any).statusCode\n        }`,\n      ),\n    );\n    return error;\n  }\n  return new AuthenticationRequiredError({ scopes, getTokenOptions, message: error.message });\n}\n\n// transformations.ts\n\nexport function publicToMsal(account: AuthenticationRecord): msalCommon.AccountInfo {\n  const [environment] = account.authority.match(/([a-z]*\\.[a-z]*\\.[a-z]*)/) || [\"\"];\n  return {\n    ...account,\n    localAccountId: account.homeAccountId,\n    environment,\n  };\n}\n\nexport function msalToPublic(clientId: string, account: MsalAccountInfo): AuthenticationRecord {\n  const record = {\n    authority: getAuthority(account.tenantId, account.environment),\n    homeAccountId: account.homeAccountId,\n    tenantId: account.tenantId || DefaultTenantId,\n    username: account.username,\n    clientId,\n    version: LatestAuthenticationRecordVersion,\n  };\n  return record;\n}\n\n/**\n * Serializes an `AuthenticationRecord` into a string.\n *\n * The output of a serialized authentication record will contain the following properties:\n *\n * - \"authority\"\n * - \"homeAccountId\"\n * - \"clientId\"\n * - \"tenantId\"\n * - \"username\"\n * - \"version\"\n *\n * To later convert this string to a serialized `AuthenticationRecord`, please use the exported function `deserializeAuthenticationRecord()`.\n */\nexport function serializeAuthenticationRecord(record: AuthenticationRecord): string {\n  return JSON.stringify(record);\n}\n\n/**\n * Deserializes a previously serialized authentication record from a string into an object.\n *\n * The input string must contain the following properties:\n *\n * - \"authority\"\n * - \"homeAccountId\"\n * - \"clientId\"\n * - \"tenantId\"\n * - \"username\"\n * - \"version\"\n *\n * If the version we receive is unsupported, an error will be thrown.\n *\n * At the moment, the only available version is: \"1.0\", which is always set when the authentication record is serialized.\n *\n * @param serializedRecord - Authentication record previously serialized into string.\n * @returns AuthenticationRecord.\n */\nexport function deserializeAuthenticationRecord(serializedRecord: string): AuthenticationRecord {\n  const parsed: AuthenticationRecord & { version?: string } = JSON.parse(serializedRecord);\n\n  if (parsed.version && parsed.version !== LatestAuthenticationRecordVersion) {\n    throw Error(\"Unsupported AuthenticationRecord version\");\n  }\n\n  return parsed;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { HttpClient, PipelineRequest, PipelineResponse, SendRequest } from \"./interfaces.js\";\n\n/**\n * Policies are executed in phases.\n * The execution order is:\n * 1. Serialize Phase\n * 2. Policies not in a phase\n * 3. Deserialize Phase\n * 4. Retry Phase\n * 5. Sign Phase\n */\nexport type PipelinePhase = \"Deserialize\" | \"Serialize\" | \"Retry\" | \"Sign\";\n\nconst ValidPhaseNames = new Set<PipelinePhase>([\"Deserialize\", \"Serialize\", \"Retry\", \"Sign\"]);\n\n/**\n * Options when adding a policy to the pipeline.\n * Used to express dependencies on other policies.\n */\nexport interface AddPolicyOptions {\n  /**\n   * Policies that this policy must come before.\n   */\n  beforePolicies?: string[];\n  /**\n   * Policies that this policy must come after.\n   */\n  afterPolicies?: string[];\n  /**\n   * The phase that this policy must come after.\n   */\n  afterPhase?: PipelinePhase;\n  /**\n   * The phase this policy belongs to.\n   */\n  phase?: PipelinePhase;\n}\n\n/**\n * A pipeline policy manipulates a request as it travels through the pipeline.\n * It is conceptually a middleware that is allowed to modify the request before\n * it is made as well as the response when it is received.\n */\nexport interface PipelinePolicy {\n  /**\n   * The policy name. Must be a unique string in the pipeline.\n   */\n  name: string;\n  /**\n   * The main method to implement that manipulates a request/response.\n   * @param request - The request being performed.\n   * @param next - The next policy in the pipeline. Must be called to continue the pipeline.\n   */\n  sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse>;\n}\n\n/**\n * Represents a pipeline for making a HTTP request to a URL.\n * Pipelines can have multiple policies to manage manipulating each request\n * before and after it is made to the server.\n */\nexport interface Pipeline {\n  /**\n   * Add a new policy to the pipeline.\n   * @param policy - A policy that manipulates a request.\n   * @param options - A set of options for when the policy should run.\n   */\n  addPolicy(policy: PipelinePolicy, options?: AddPolicyOptions): void;\n  /**\n   * Remove a policy from the pipeline.\n   * @param options - Options that let you specify which policies to remove.\n   */\n  removePolicy(options: { name?: string; phase?: PipelinePhase }): PipelinePolicy[];\n  /**\n   * Uses the pipeline to make a HTTP request.\n   * @param httpClient - The HttpClient that actually performs the request.\n   * @param request - The request to be made.\n   */\n  sendRequest(httpClient: HttpClient, request: PipelineRequest): Promise<PipelineResponse>;\n  /**\n   * Returns the current set of policies in the pipeline in the order in which\n   * they will be applied to the request. Later in the list is closer to when\n   * the request is performed.\n   */\n  getOrderedPolicies(): PipelinePolicy[];\n  /**\n   * Duplicates this pipeline to allow for modifying an existing one without mutating it.\n   */\n  clone(): Pipeline;\n}\n\ninterface PipelineDescriptor {\n  policy: PipelinePolicy;\n  options: AddPolicyOptions;\n}\n\ninterface PolicyGraphNode {\n  policy: PipelinePolicy;\n  dependsOn: Set<PolicyGraphNode>;\n  dependants: Set<PolicyGraphNode>;\n  afterPhase?: Phase;\n}\n\ninterface Phase {\n  name: PipelinePhase | \"None\";\n  policies: Set<PolicyGraphNode>;\n  hasRun: boolean;\n  hasAfterPolicies: boolean;\n}\n\n/**\n * A private implementation of Pipeline.\n * Do not export this class from the package.\n * @internal\n */\nclass HttpPipeline implements Pipeline {\n  private _policies: PipelineDescriptor[] = [];\n  private _orderedPolicies?: PipelinePolicy[];\n\n  private constructor(policies?: PipelineDescriptor[]) {\n    this._policies = policies?.slice(0) ?? [];\n    this._orderedPolicies = undefined;\n  }\n\n  public addPolicy(policy: PipelinePolicy, options: AddPolicyOptions = {}): void {\n    if (options.phase && options.afterPhase) {\n      throw new Error(\"Policies inside a phase cannot specify afterPhase.\");\n    }\n    if (options.phase && !ValidPhaseNames.has(options.phase)) {\n      throw new Error(`Invalid phase name: ${options.phase}`);\n    }\n    if (options.afterPhase && !ValidPhaseNames.has(options.afterPhase)) {\n      throw new Error(`Invalid afterPhase name: ${options.afterPhase}`);\n    }\n    this._policies.push({\n      policy,\n      options,\n    });\n    this._orderedPolicies = undefined;\n  }\n\n  public removePolicy(options: { name?: string; phase?: string }): PipelinePolicy[] {\n    const removedPolicies: PipelinePolicy[] = [];\n\n    this._policies = this._policies.filter((policyDescriptor) => {\n      if (\n        (options.name && policyDescriptor.policy.name === options.name) ||\n        (options.phase && policyDescriptor.options.phase === options.phase)\n      ) {\n        removedPolicies.push(policyDescriptor.policy);\n        return false;\n      } else {\n        return true;\n      }\n    });\n    this._orderedPolicies = undefined;\n\n    return removedPolicies;\n  }\n\n  public sendRequest(httpClient: HttpClient, request: PipelineRequest): Promise<PipelineResponse> {\n    const policies = this.getOrderedPolicies();\n\n    const pipeline = policies.reduceRight<SendRequest>(\n      (next, policy) => {\n        return (req: PipelineRequest) => {\n          return policy.sendRequest(req, next);\n        };\n      },\n      (req: PipelineRequest) => httpClient.sendRequest(req),\n    );\n\n    return pipeline(request);\n  }\n\n  public getOrderedPolicies(): PipelinePolicy[] {\n    if (!this._orderedPolicies) {\n      this._orderedPolicies = this.orderPolicies();\n    }\n    return this._orderedPolicies;\n  }\n\n  public clone(): Pipeline {\n    return new HttpPipeline(this._policies);\n  }\n\n  public static create(): Pipeline {\n    return new HttpPipeline();\n  }\n\n  private orderPolicies(): PipelinePolicy[] {\n    /**\n     * The goal of this method is to reliably order pipeline policies\n     * based on their declared requirements when they were added.\n     *\n     * Order is first determined by phase:\n     *\n     * 1. Serialize Phase\n     * 2. Policies not in a phase\n     * 3. Deserialize Phase\n     * 4. Retry Phase\n     * 5. Sign Phase\n     *\n     * Within each phase, policies are executed in the order\n     * they were added unless they were specified to execute\n     * before/after other policies or after a particular phase.\n     *\n     * To determine the final order, we will walk the policy list\n     * in phase order multiple times until all dependencies are\n     * satisfied.\n     *\n     * `afterPolicies` are the set of policies that must be\n     * executed before a given policy. This requirement is\n     * considered satisfied when each of the listed policies\n     * have been scheduled.\n     *\n     * `beforePolicies` are the set of policies that must be\n     * executed after a given policy. Since this dependency\n     * can be expressed by converting it into a equivalent\n     * `afterPolicies` declarations, they are normalized\n     * into that form for simplicity.\n     *\n     * An `afterPhase` dependency is considered satisfied when all\n     * policies in that phase have scheduled.\n     *\n     */\n    const result: PipelinePolicy[] = [];\n\n    // Track all policies we know about.\n    const policyMap: Map<string, PolicyGraphNode> = new Map<string, PolicyGraphNode>();\n\n    function createPhase(name: PipelinePhase | \"None\"): Phase {\n      return {\n        name,\n        policies: new Set<PolicyGraphNode>(),\n        hasRun: false,\n        hasAfterPolicies: false,\n      };\n    }\n\n    // Track policies for each phase.\n    const serializePhase = createPhase(\"Serialize\");\n    const noPhase = createPhase(\"None\");\n    const deserializePhase = createPhase(\"Deserialize\");\n    const retryPhase = createPhase(\"Retry\");\n    const signPhase = createPhase(\"Sign\");\n\n    // a list of phases in order\n    const orderedPhases = [serializePhase, noPhase, deserializePhase, retryPhase, signPhase];\n\n    // Small helper function to map phase name to each Phase\n    function getPhase(phase: PipelinePhase | undefined): Phase {\n      if (phase === \"Retry\") {\n        return retryPhase;\n      } else if (phase === \"Serialize\") {\n        return serializePhase;\n      } else if (phase === \"Deserialize\") {\n        return deserializePhase;\n      } else if (phase === \"Sign\") {\n        return signPhase;\n      } else {\n        return noPhase;\n      }\n    }\n\n    // First walk each policy and create a node to track metadata.\n    for (const descriptor of this._policies) {\n      const policy = descriptor.policy;\n      const options = descriptor.options;\n      const policyName = policy.name;\n      if (policyMap.has(policyName)) {\n        throw new Error(\"Duplicate policy names not allowed in pipeline\");\n      }\n      const node: PolicyGraphNode = {\n        policy,\n        dependsOn: new Set<PolicyGraphNode>(),\n        dependants: new Set<PolicyGraphNode>(),\n      };\n      if (options.afterPhase) {\n        node.afterPhase = getPhase(options.afterPhase);\n        node.afterPhase.hasAfterPolicies = true;\n      }\n      policyMap.set(policyName, node);\n      const phase = getPhase(options.phase);\n      phase.policies.add(node);\n    }\n\n    // Now that each policy has a node, connect dependency references.\n    for (const descriptor of this._policies) {\n      const { policy, options } = descriptor;\n      const policyName = policy.name;\n      const node = policyMap.get(policyName);\n      if (!node) {\n        throw new Error(`Missing node for policy ${policyName}`);\n      }\n\n      if (options.afterPolicies) {\n        for (const afterPolicyName of options.afterPolicies) {\n          const afterNode = policyMap.get(afterPolicyName);\n          if (afterNode) {\n            // Linking in both directions helps later\n            // when we want to notify dependants.\n            node.dependsOn.add(afterNode);\n            afterNode.dependants.add(node);\n          }\n        }\n      }\n      if (options.beforePolicies) {\n        for (const beforePolicyName of options.beforePolicies) {\n          const beforeNode = policyMap.get(beforePolicyName);\n          if (beforeNode) {\n            // To execute before another node, make it\n            // depend on the current node.\n            beforeNode.dependsOn.add(node);\n            node.dependants.add(beforeNode);\n          }\n        }\n      }\n    }\n\n    function walkPhase(phase: Phase): void {\n      phase.hasRun = true;\n      // Sets iterate in insertion order\n      for (const node of phase.policies) {\n        if (node.afterPhase && (!node.afterPhase.hasRun || node.afterPhase.policies.size)) {\n          // If this node is waiting on a phase to complete,\n          // we need to skip it for now.\n          // Even if the phase is empty, we should wait for it\n          // to be walked to avoid re-ordering policies.\n          continue;\n        }\n        if (node.dependsOn.size === 0) {\n          // If there's nothing else we're waiting for, we can\n          // add this policy to the result list.\n          result.push(node.policy);\n          // Notify anything that depends on this policy that\n          // the policy has been scheduled.\n          for (const dependant of node.dependants) {\n            dependant.dependsOn.delete(node);\n          }\n          policyMap.delete(node.policy.name);\n          phase.policies.delete(node);\n        }\n      }\n    }\n\n    function walkPhases(): void {\n      for (const phase of orderedPhases) {\n        walkPhase(phase);\n        // if the phase isn't complete\n        if (phase.policies.size > 0 && phase !== noPhase) {\n          if (!noPhase.hasRun) {\n            // Try running noPhase to see if that unblocks this phase next tick.\n            // This can happen if a phase that happens before noPhase\n            // is waiting on a noPhase policy to complete.\n            walkPhase(noPhase);\n          }\n          // Don't proceed to the next phase until this phase finishes.\n          return;\n        }\n\n        if (phase.hasAfterPolicies) {\n          // Run any policies unblocked by this phase\n          walkPhase(noPhase);\n        }\n      }\n    }\n\n    // Iterate until we've put every node in the result list.\n    let iteration = 0;\n    while (policyMap.size > 0) {\n      iteration++;\n      const initialResultLength = result.length;\n      // Keep walking each phase in order until we can order every node.\n      walkPhases();\n      // The result list *should* get at least one larger each time\n      // after the first full pass.\n      // Otherwise, we're going to loop forever.\n      if (result.length <= initialResultLength && iteration > 1) {\n        throw new Error(\"Cannot satisfy policy dependencies due to requirements cycle.\");\n      }\n    }\n\n    return result;\n  }\n}\n\n/**\n * Creates a totally empty pipeline.\n * Useful for testing or creating a custom one.\n */\nexport function createEmptyPipeline(): Pipeline {\n  return HttpPipeline.create();\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createClientLogger } from \"@azure/logger\";\nexport const logger = createClientLogger(\"core-rest-pipeline\");\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { type UnknownObject, isObject } from \"@azure/core-util\";\n\n/**\n * @internal\n */\nexport interface SanitizerOptions {\n  /**\n   * Header names whose values will be logged when logging is enabled.\n   * Defaults include a list of well-known safe headers. Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   */\n  additionalAllowedHeaderNames?: string[];\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   */\n  additionalAllowedQueryParameters?: string[];\n}\n\nconst RedactedString = \"REDACTED\";\n\n// Make sure this list is up-to-date with the one under core/logger/Readme#Keyconcepts\nconst defaultAllowedHeaderNames = [\n  \"x-ms-client-request-id\",\n  \"x-ms-return-client-request-id\",\n  \"x-ms-useragent\",\n  \"x-ms-correlation-request-id\",\n  \"x-ms-request-id\",\n  \"client-request-id\",\n  \"ms-cv\",\n  \"return-client-request-id\",\n  \"traceparent\",\n\n  \"Access-Control-Allow-Credentials\",\n  \"Access-Control-Allow-Headers\",\n  \"Access-Control-Allow-Methods\",\n  \"Access-Control-Allow-Origin\",\n  \"Access-Control-Expose-Headers\",\n  \"Access-Control-Max-Age\",\n  \"Access-Control-Request-Headers\",\n  \"Access-Control-Request-Method\",\n  \"Origin\",\n\n  \"Accept\",\n  \"Accept-Encoding\",\n  \"Cache-Control\",\n  \"Connection\",\n  \"Content-Length\",\n  \"Content-Type\",\n  \"Date\",\n  \"ETag\",\n  \"Expires\",\n  \"If-Match\",\n  \"If-Modified-Since\",\n  \"If-None-Match\",\n  \"If-Unmodified-Since\",\n  \"Last-Modified\",\n  \"Pragma\",\n  \"Request-Id\",\n  \"Retry-After\",\n  \"Server\",\n  \"Transfer-Encoding\",\n  \"User-Agent\",\n  \"WWW-Authenticate\",\n];\n\nconst defaultAllowedQueryParameters: string[] = [\"api-version\"];\n\n/**\n * @internal\n */\nexport class Sanitizer {\n  private allowedHeaderNames: Set<string>;\n  private allowedQueryParameters: Set<string>;\n\n  constructor({\n    additionalAllowedHeaderNames: allowedHeaderNames = [],\n    additionalAllowedQueryParameters: allowedQueryParameters = [],\n  }: SanitizerOptions = {}) {\n    allowedHeaderNames = defaultAllowedHeaderNames.concat(allowedHeaderNames);\n    allowedQueryParameters = defaultAllowedQueryParameters.concat(allowedQueryParameters);\n\n    this.allowedHeaderNames = new Set(allowedHeaderNames.map((n) => n.toLowerCase()));\n    this.allowedQueryParameters = new Set(allowedQueryParameters.map((p) => p.toLowerCase()));\n  }\n\n  public sanitize(obj: unknown): string {\n    const seen = new Set<unknown>();\n    return JSON.stringify(\n      obj,\n      (key: string, value: unknown) => {\n        // Ensure Errors include their interesting non-enumerable members\n        if (value instanceof Error) {\n          return {\n            ...value,\n            name: value.name,\n            message: value.message,\n          };\n        }\n\n        if (key === \"headers\") {\n          return this.sanitizeHeaders(value as UnknownObject);\n        } else if (key === \"url\") {\n          return this.sanitizeUrl(value as string);\n        } else if (key === \"query\") {\n          return this.sanitizeQuery(value as UnknownObject);\n        } else if (key === \"body\") {\n          // Don't log the request body\n          return undefined;\n        } else if (key === \"response\") {\n          // Don't log response again\n          return undefined;\n        } else if (key === \"operationSpec\") {\n          // When using sendOperationRequest, the request carries a massive\n          // field with the autorest spec. No need to log it.\n          return undefined;\n        } else if (Array.isArray(value) || isObject(value)) {\n          if (seen.has(value)) {\n            return \"[Circular]\";\n          }\n          seen.add(value);\n        }\n\n        return value;\n      },\n      2,\n    );\n  }\n\n  public sanitizeUrl(value: string): string {\n    if (typeof value !== \"string\" || value === null || value === \"\") {\n      return value;\n    }\n\n    const url = new URL(value);\n\n    if (!url.search) {\n      return value;\n    }\n\n    for (const [key] of url.searchParams) {\n      if (!this.allowedQueryParameters.has(key.toLowerCase())) {\n        url.searchParams.set(key, RedactedString);\n      }\n    }\n\n    return url.toString();\n  }\n\n  private sanitizeHeaders(obj: UnknownObject): UnknownObject {\n    const sanitized: UnknownObject = {};\n    for (const key of Object.keys(obj)) {\n      if (this.allowedHeaderNames.has(key.toLowerCase())) {\n        sanitized[key] = obj[key];\n      } else {\n        sanitized[key] = RedactedString;\n      }\n    }\n    return sanitized;\n  }\n\n  private sanitizeQuery(value: UnknownObject): UnknownObject {\n    if (typeof value !== \"object\" || value === null) {\n      return value;\n    }\n\n    const sanitized: UnknownObject = {};\n\n    for (const k of Object.keys(value)) {\n      if (this.allowedQueryParameters.has(k.toLowerCase())) {\n        sanitized[k] = value[k];\n      } else {\n        sanitized[k] = RedactedString;\n      }\n    }\n\n    return sanitized;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { Debugger } from \"@azure/logger\";\nimport type { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces.js\";\nimport type { PipelinePolicy } from \"../pipeline.js\";\nimport { logger as coreLogger } from \"../log.js\";\nimport { Sanitizer } from \"../util/sanitizer.js\";\n\n/**\n * The programmatic identifier of the logPolicy.\n */\nexport const logPolicyName = \"logPolicy\";\n\n/**\n * Options to configure the logPolicy.\n */\nexport interface LogPolicyOptions {\n  /**\n   * Header names whose values will be logged when logging is enabled.\n   * Defaults include a list of well-known safe headers. Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   */\n  additionalAllowedHeaderNames?: string[];\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   */\n  additionalAllowedQueryParameters?: string[];\n\n  /**\n   * The log function to use for writing pipeline logs.\n   * Defaults to core-http's built-in logger.\n   * Compatible with the `debug` library.\n   */\n  logger?: Debugger;\n}\n\n/**\n * A policy that logs all requests and responses.\n * @param options - Options to configure logPolicy.\n */\nexport function logPolicy(options: LogPolicyOptions = {}): PipelinePolicy {\n  const logger = options.logger ?? coreLogger.info;\n  const sanitizer = new Sanitizer({\n    additionalAllowedHeaderNames: options.additionalAllowedHeaderNames,\n    additionalAllowedQueryParameters: options.additionalAllowedQueryParameters,\n  });\n  return {\n    name: logPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      if (!logger.enabled) {\n        return next(request);\n      }\n\n      logger(`Request: ${sanitizer.sanitize(request)}`);\n\n      const response = await next(request);\n\n      logger(`Response status code: ${response.status}`);\n      logger(`Headers: ${sanitizer.sanitize(response.headers)}`);\n\n      return response;\n    },\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces.js\";\nimport type { PipelinePolicy } from \"../pipeline.js\";\n\n/**\n * The programmatic identifier of the redirectPolicy.\n */\nexport const redirectPolicyName = \"redirectPolicy\";\n\n/**\n * Methods that are allowed to follow redirects 301 and 302\n */\nconst allowedRedirect = [\"GET\", \"HEAD\"];\n\n/**\n * Options for how redirect responses are handled.\n */\nexport interface RedirectPolicyOptions {\n  /**\n   * The maximum number of times the redirect URL will be tried before\n   * failing.  Defaults to 20.\n   */\n  maxRetries?: number;\n}\n\n/**\n * A policy to follow Location headers from the server in order\n * to support server-side redirection.\n * In the browser, this policy is not used.\n * @param options - Options to control policy behavior.\n */\nexport function redirectPolicy(options: RedirectPolicyOptions = {}): PipelinePolicy {\n  const { maxRetries = 20 } = options;\n  return {\n    name: redirectPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      const response = await next(request);\n      return handleRedirect(next, response, maxRetries);\n    },\n  };\n}\n\nasync function handleRedirect(\n  next: SendRequest,\n  response: PipelineResponse,\n  maxRetries: number,\n  currentRetries: number = 0,\n): Promise<PipelineResponse> {\n  const { request, status, headers } = response;\n  const locationHeader = headers.get(\"location\");\n  if (\n    locationHeader &&\n    (status === 300 ||\n      (status === 301 && allowedRedirect.includes(request.method)) ||\n      (status === 302 && allowedRedirect.includes(request.method)) ||\n      (status === 303 && request.method === \"POST\") ||\n      status === 307) &&\n    currentRetries < maxRetries\n  ) {\n    const url = new URL(locationHeader, request.url);\n    request.url = url.toString();\n\n    // POST request with Status code 303 should be converted into a\n    // redirected GET request if the redirect url is present in the location header\n    if (status === 303) {\n      request.method = \"GET\";\n      request.headers.delete(\"Content-Length\");\n      delete request.body;\n    }\n\n    request.headers.delete(\"Authorization\");\n\n    const res = await next(request);\n    return handleRedirect(next, res, maxRetries, currentRetries + 1);\n  }\n\n  return response;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * @internal\n */\nexport function getHeaderName(): string {\n  return \"x-ms-useragent\";\n}\n\ninterface BrowserBrand {\n  brand: string;\n  version: string;\n}\n\ninterface NavigatorEx extends Navigator {\n  userAgentData?: {\n    brands: BrowserBrand[];\n    mobile: boolean;\n    platform?: string;\n    getHighEntropyValues: (hints: string[]) => Promise<{\n      architecture: string;\n      bitness: string;\n      brands: BrowserBrand[];\n      formFactor: string;\n      fullVersionList: BrowserBrand[];\n      mobile: boolean;\n      model: string;\n      platform: string;\n      platformVersion: string;\n      wow64: boolean;\n    }>;\n  };\n}\n\ndeclare const globalThis: {\n  navigator?: NavigatorEx;\n  EdgeRuntime?: unknown;\n};\n\nfunction getBrowserInfo(userAgent: string): BrowserBrand | undefined {\n  const browserRegexes = [\n    { name: \"Firefox\", regex: /Firefox\\/([\\d.]+)/ },\n    { name: \"Safari\", regex: /Version\\/([\\d.]+).*Safari/ },\n  ];\n\n  for (const browser of browserRegexes) {\n    const match = userAgent.match(browser.regex);\n    if (match) {\n      return { brand: browser.name, version: match[1] };\n    }\n  }\n\n  return undefined;\n}\n\nfunction getBrandVersionString(brands: BrowserBrand[]): BrowserBrand | undefined {\n  const brandOrder = [\"Google Chrome\", \"Microsoft Edge\", \"Opera\", \"Brave\", \"Chromium\"];\n  for (const brand of brandOrder) {\n    const foundBrand = brands.find((b) => b.brand === brand);\n    if (foundBrand) {\n      return foundBrand;\n    }\n  }\n  return undefined;\n}\n\n/**\n * @internal\n */\nexport async function setPlatformSpecificData(map: Map<string, string>): Promise<void> {\n  const localNavigator = globalThis.navigator as NavigatorEx;\n  let osPlatform = \"unknown\";\n  if (localNavigator?.userAgentData) {\n    const entropyValues = await localNavigator.userAgentData.getHighEntropyValues([\n      \"architecture\",\n      \"platformVersion\",\n    ]);\n    osPlatform = `${entropyValues.architecture}-${entropyValues.platform}-${entropyValues.platformVersion}`;\n\n    // Get the brand and version\n    const brand = getBrandVersionString(localNavigator.userAgentData.brands);\n    if (brand) {\n      map.set(brand.brand, brand.version);\n    }\n  } else if (localNavigator?.platform) {\n    osPlatform = localNavigator.platform;\n    const brand = getBrowserInfo(localNavigator.userAgent);\n    if (brand) {\n      map.set(brand.brand, brand.version);\n    }\n  } else if (typeof globalThis.EdgeRuntime === \"string\") {\n    map.set(\"EdgeRuntime\", globalThis.EdgeRuntime);\n  }\n\n  map.set(\"OS\", osPlatform);\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport const SDK_VERSION: string = \"1.16.2\";\n\nexport const DEFAULT_RETRY_POLICY_COUNT = 3;\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { getHeaderName, setPlatformSpecificData } from \"./userAgentPlatform.js\";\nimport { SDK_VERSION } from \"../constants.js\";\n\nfunction getUserAgentString(telemetryInfo: Map<string, string>): string {\n  const parts: string[] = [];\n  for (const [key, value] of telemetryInfo) {\n    const token = value ? `${key}/${value}` : key;\n    parts.push(token);\n  }\n  return parts.join(\" \");\n}\n\n/**\n * @internal\n */\nexport function getUserAgentHeaderName(): string {\n  return getHeaderName();\n}\n\n/**\n * @internal\n */\nexport async function getUserAgentValue(prefix?: string): Promise<string> {\n  const runtimeInfo = new Map<string, string>();\n  runtimeInfo.set(\"core-rest-pipeline\", SDK_VERSION);\n  await setPlatformSpecificData(runtimeInfo);\n  const defaultAgent = getUserAgentString(runtimeInfo);\n  const userAgentValue = prefix ? `${prefix} ${defaultAgent}` : defaultAgent;\n  return userAgentValue;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces.js\";\nimport type { PipelinePolicy } from \"../pipeline.js\";\nimport { getUserAgentHeaderName, getUserAgentValue } from \"../util/userAgent.js\";\n\nconst UserAgentHeaderName = getUserAgentHeaderName();\n\n/**\n * The programmatic identifier of the userAgentPolicy.\n */\nexport const userAgentPolicyName = \"userAgentPolicy\";\n\n/**\n * Options for adding user agent details to outgoing requests.\n */\nexport interface UserAgentPolicyOptions {\n  /**\n   * String prefix to add to the user agent for outgoing requests.\n   * Defaults to an empty string.\n   */\n  userAgentPrefix?: string;\n}\n\n/**\n * A policy that sets the User-Agent header (or equivalent) to reflect\n * the library version.\n * @param options - Options to customize the user agent value.\n */\nexport function userAgentPolicy(options: UserAgentPolicyOptions = {}): PipelinePolicy {\n  const userAgentValue = getUserAgentValue(options.userAgentPrefix);\n  return {\n    name: userAgentPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      if (!request.headers.has(UserAgentHeaderName)) {\n        request.headers.set(UserAgentHeaderName, await userAgentValue);\n      }\n      return next(request);\n    },\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport function isNodeReadableStream(x: unknown): x is NodeJS.ReadableStream {\n  return Boolean(x && typeof (x as NodeJS.ReadableStream)[\"pipe\"] === \"function\");\n}\n\nexport function isWebReadableStream(x: unknown): x is ReadableStream {\n  return Boolean(\n    x &&\n      typeof (x as ReadableStream).getReader === \"function\" &&\n      typeof (x as ReadableStream).tee === \"function\",\n  );\n}\n\nexport function isReadableStream(x: unknown): x is ReadableStream | NodeJS.ReadableStream {\n  return isNodeReadableStream(x) || isWebReadableStream(x);\n}\n\nexport function isBlob(x: unknown): x is Blob {\n  return typeof (x as Blob).stream === \"function\";\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { isNodeLike } from \"@azure/core-util\";\nimport { isNodeReadableStream } from \"./typeGuards.js\";\n\n/**\n * Options passed into createFile specifying metadata about the file.\n */\nexport interface CreateFileOptions {\n  /**\n   * The MIME type of the file.\n   */\n  type?: string;\n\n  /**\n   * Last modified time of the file as a UNIX timestamp.\n   * This will default to the current date.\n   */\n  lastModified?: number;\n\n  /**\n   * relative path of this file when uploading a directory.\n   */\n  webkitRelativePath?: string;\n}\n\n/**\n * Extra options for createFile when a stream is being passed in.\n */\nexport interface CreateFileFromStreamOptions extends CreateFileOptions {\n  /**\n   * Size of the file represented by the stream in bytes.\n   *\n   * This will be used by the pipeline when calculating the Content-Length header\n   * for the overall request.\n   */\n  size?: number;\n}\n\nconst unimplementedMethods = {\n  arrayBuffer: () => {\n    throw new Error(\"Not implemented\");\n  },\n  slice: () => {\n    throw new Error(\"Not implemented\");\n  },\n  text: () => {\n    throw new Error(\"Not implemented\");\n  },\n};\n\n/**\n * Private symbol used as key on objects created using createFile containing the\n * original source of the file object.\n *\n * This is used in Node to access the original Node stream without using Blob#stream, which\n * returns a web stream. This is done to avoid a couple of bugs to do with Blob#stream and\n * Readable#to/fromWeb in Node versions we support:\n * - https://github.com/nodejs/node/issues/42694 (fixed in Node 18.14)\n * - https://github.com/nodejs/node/issues/48916 (fixed in Node 20.6)\n *\n * Once these versions are no longer supported, we may be able to stop doing this.\n *\n * @internal\n */\nconst rawContent: unique symbol = Symbol(\"rawContent\");\n\n/**\n * Type signature of a blob-like object with a raw content property.\n */\ninterface RawContent {\n  [rawContent](): Uint8Array | NodeJS.ReadableStream | ReadableStream<Uint8Array>;\n}\n\nfunction hasRawContent(x: unknown): x is RawContent {\n  return typeof (x as RawContent)[rawContent] === \"function\";\n}\n\n/**\n * Extract the raw content from a given blob-like object. If the input was created using createFile\n * or createFileFromStream, the exact content passed into createFile/createFileFromStream will be used.\n * For true instances of Blob and File, returns the blob's content as a Web ReadableStream<Uint8Array>.\n *\n * @internal\n */\nexport function getRawContent(\n  blob: Blob,\n): NodeJS.ReadableStream | ReadableStream<Uint8Array> | Uint8Array {\n  if (hasRawContent(blob)) {\n    return blob[rawContent]();\n  } else {\n    return blob.stream();\n  }\n}\n\n/**\n * Create an object that implements the File interface. This object is intended to be\n * passed into RequestBodyType.formData, and is not guaranteed to work as expected in\n * other situations.\n *\n * Use this function to:\n * - Create a File object for use in RequestBodyType.formData in environments where the\n *   global File object is unavailable.\n * - Create a File-like object from a readable stream without reading the stream into memory.\n *\n * @param stream - the content of the file as a callback returning a stream. When a File object made using createFile is\n *                  passed in a request's form data map, the stream will not be read into memory\n *                  and instead will be streamed when the request is made. In the event of a retry, the\n *                  stream needs to be read again, so this callback SHOULD return a fresh stream if possible.\n * @param name - the name of the file.\n * @param options - optional metadata about the file, e.g. file name, file size, MIME type.\n */\nexport function createFileFromStream(\n  stream: () => ReadableStream<Uint8Array> | NodeJS.ReadableStream,\n  name: string,\n  options: CreateFileFromStreamOptions = {},\n): File {\n  return {\n    ...unimplementedMethods,\n    type: options.type ?? \"\",\n    lastModified: options.lastModified ?? new Date().getTime(),\n    webkitRelativePath: options.webkitRelativePath ?? \"\",\n    size: options.size ?? -1,\n    name,\n    stream: () => {\n      const s = stream();\n      if (isNodeReadableStream(s)) {\n        throw new Error(\n          \"Not supported: a Node stream was provided as input to createFileFromStream.\",\n        );\n      }\n\n      return s;\n    },\n    [rawContent]: stream,\n  } as File & RawContent;\n}\n\n/**\n * Create an object that implements the File interface. This object is intended to be\n * passed into RequestBodyType.formData, and is not guaranteed to work as expected in\n * other situations.\n *\n * Use this function create a File object for use in RequestBodyType.formData in environments where the global File object is unavailable.\n *\n * @param content - the content of the file as a Uint8Array in memory.\n * @param name - the name of the file.\n * @param options - optional metadata about the file, e.g. file name, file size, MIME type.\n */\nexport function createFile(\n  content: Uint8Array,\n  name: string,\n  options: CreateFileOptions = {},\n): File {\n  if (isNodeLike) {\n    return {\n      ...unimplementedMethods,\n      type: options.type ?? \"\",\n      lastModified: options.lastModified ?? new Date().getTime(),\n      webkitRelativePath: options.webkitRelativePath ?? \"\",\n      size: content.byteLength,\n      name,\n      arrayBuffer: async () => content.buffer,\n      stream: () => new Blob([content]).stream(),\n      [rawContent]: () => content,\n    } as File & RawContent;\n  } else {\n    return new File([content], name, options);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { getRawContent } from \"./file.js\";\nimport { isNodeReadableStream, isWebReadableStream } from \"./typeGuards.js\";\n\n/**\n * Drain the content of the given ReadableStream into a Blob.\n * The blob's content may end up in memory or on disk dependent on size.\n */\nfunction drain(stream: ReadableStream<Uint8Array>): Promise<Blob> {\n  return new Response(stream).blob();\n}\n\nasync function toBlobPart(\n  source: ReadableStream<Uint8Array> | Blob | Uint8Array,\n): Promise<BlobPart> {\n  if (source instanceof Blob || source instanceof Uint8Array) {\n    return source;\n  }\n\n  if (isWebReadableStream(source)) {\n    return drain(source);\n  }\n\n  // If it's not a true Blob, and it's not a Uint8Array, we can assume the source\n  // is a fake File created by createFileFromStream and we can get the original stream\n  // using getRawContent.\n  const rawContent = getRawContent(source);\n\n  // Shouldn't happen but guard for it anyway\n  if (isNodeReadableStream(rawContent)) {\n    throw new Error(\n      \"Encountered unexpected type. In the browser, `concat` supports Web ReadableStream, Blob, Uint8Array, and files created using `createFile` only.\",\n    );\n  }\n\n  return toBlobPart(rawContent);\n}\n\n/**\n * Accepted binary data types for concat\n *\n * @internal\n */\ntype ConcatSource = ReadableStream<Uint8Array> | Blob | Uint8Array;\n\n/**\n * Utility function that concatenates a set of binary inputs into one combined output.\n *\n * @param sources - array of sources for the concatenation\n * @returns - in Node, a (() =\\> NodeJS.ReadableStream) which, when read, produces a concatenation of all the inputs.\n *           In browser, returns a `Blob` representing all the concatenated inputs.\n *\n * @internal\n */\nexport async function concat(\n  sources: (ConcatSource | (() => ConcatSource))[],\n): Promise<(() => NodeJS.ReadableStream) | Blob> {\n  const parts = [];\n  for (const source of sources) {\n    parts.push(await toBlobPart(typeof source === \"function\" ? source() : source));\n  }\n\n  return new Blob(parts);\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { randomUUID, stringToUint8Array } from \"@azure/core-util\";\nimport type { BodyPart, HttpHeaders, PipelineRequest, PipelineResponse } from \"../interfaces.js\";\nimport type { PipelinePolicy } from \"../pipeline.js\";\nimport { concat } from \"../util/concat.js\";\nimport { isBlob } from \"../util/typeGuards.js\";\n\nfunction generateBoundary(): string {\n  return `----AzSDKFormBoundary${randomUUID()}`;\n}\n\nfunction encodeHeaders(headers: HttpHeaders): string {\n  let result = \"\";\n  for (const [key, value] of headers) {\n    result += `${key}: ${value}\\r\\n`;\n  }\n  return result;\n}\n\nfunction getLength(\n  source:\n    | (() => ReadableStream<Uint8Array>)\n    | (() => NodeJS.ReadableStream)\n    | Uint8Array\n    | Blob\n    | ReadableStream\n    | NodeJS.ReadableStream,\n): number | undefined {\n  if (source instanceof Uint8Array) {\n    return source.byteLength;\n  } else if (isBlob(source)) {\n    // if was created using createFile then -1 means we have an unknown size\n    return source.size === -1 ? undefined : source.size;\n  } else {\n    return undefined;\n  }\n}\n\nfunction getTotalLength(\n  sources: (\n    | (() => ReadableStream<Uint8Array>)\n    | (() => NodeJS.ReadableStream)\n    | Uint8Array\n    | Blob\n    | ReadableStream\n    | NodeJS.ReadableStream\n  )[],\n): number | undefined {\n  let total = 0;\n  for (const source of sources) {\n    const partLength = getLength(source);\n    if (partLength === undefined) {\n      return undefined;\n    } else {\n      total += partLength;\n    }\n  }\n  return total;\n}\n\nasync function buildRequestBody(\n  request: PipelineRequest,\n  parts: BodyPart[],\n  boundary: string,\n): Promise<void> {\n  const sources = [\n    stringToUint8Array(`--${boundary}`, \"utf-8\"),\n    ...parts.flatMap((part) => [\n      stringToUint8Array(\"\\r\\n\", \"utf-8\"),\n      stringToUint8Array(encodeHeaders(part.headers), \"utf-8\"),\n      stringToUint8Array(\"\\r\\n\", \"utf-8\"),\n      part.body,\n      stringToUint8Array(`\\r\\n--${boundary}`, \"utf-8\"),\n    ]),\n    stringToUint8Array(\"--\\r\\n\\r\\n\", \"utf-8\"),\n  ];\n\n  const contentLength = getTotalLength(sources);\n  if (contentLength) {\n    request.headers.set(\"Content-Length\", contentLength);\n  }\n\n  request.body = await concat(sources);\n}\n\n/**\n * Name of multipart policy\n */\nexport const multipartPolicyName = \"multipartPolicy\";\n\nconst maxBoundaryLength = 70;\nconst validBoundaryCharacters = new Set(\n  `abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'()+,-./:=?`,\n);\n\nfunction assertValidBoundary(boundary: string): void {\n  if (boundary.length > maxBoundaryLength) {\n    throw new Error(`Multipart boundary \"${boundary}\" exceeds maximum length of 70 characters`);\n  }\n\n  if (Array.from(boundary).some((x) => !validBoundaryCharacters.has(x))) {\n    throw new Error(`Multipart boundary \"${boundary}\" contains invalid characters`);\n  }\n}\n\n/**\n * Pipeline policy for multipart requests\n */\nexport function multipartPolicy(): PipelinePolicy {\n  return {\n    name: multipartPolicyName,\n    async sendRequest(request, next): Promise<PipelineResponse> {\n      if (!request.multipartBody) {\n        return next(request);\n      }\n\n      if (request.body) {\n        throw new Error(\"multipartBody and regular body cannot be set at the same time\");\n      }\n\n      let boundary = request.multipartBody.boundary;\n\n      const contentTypeHeader = request.headers.get(\"Content-Type\") ?? \"multipart/mixed\";\n      const parsedHeader = contentTypeHeader.match(/^(multipart\\/[^ ;]+)(?:; *boundary=(.+))?$/);\n      if (!parsedHeader) {\n        throw new Error(\n          `Got multipart request body, but content-type header was not multipart: ${contentTypeHeader}`,\n        );\n      }\n\n      const [, contentType, parsedBoundary] = parsedHeader;\n      if (parsedBoundary && boundary && parsedBoundary !== boundary) {\n        throw new Error(\n          `Multipart boundary was specified as ${parsedBoundary} in the header, but got ${boundary} in the request body`,\n        );\n      }\n\n      boundary ??= parsedBoundary;\n      if (boundary) {\n        assertValidBoundary(boundary);\n      } else {\n        boundary = generateBoundary();\n      }\n      request.headers.set(\"Content-Type\", `${contentType}; boundary=${boundary}`);\n      await buildRequestBody(request, request.multipartBody.parts, boundary);\n\n      request.multipartBody = undefined;\n\n      return next(request);\n    },\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/*\n * NOTE: When moving this file, please update \"browser\" section in package.json\n */\n\nexport const decompressResponsePolicyName = \"decompressResponsePolicy\";\n\n/**\n * decompressResponsePolicy is not supported in the browser and attempting\n * to use it will raise an error.\n */\nexport function decompressResponsePolicy(): never {\n  throw new Error(\"decompressResponsePolicy is not supported in browser environment\");\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * ```ts\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n * ```\n */\nexport class AbortError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = \"AbortError\";\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortError, type AbortSignalLike } from \"@azure/abort-controller\";\nimport type { PipelineResponse } from \"../interfaces.js\";\n\nconst StandardAbortMessage = \"The operation was aborted.\";\n\n/**\n * A wrapper for setTimeout that resolves a promise after delayInMs milliseconds.\n * @param delayInMs - The number of milliseconds to be delayed.\n * @param value - The value to be resolved with after a timeout of t milliseconds.\n * @param options - The options for delay - currently abort options\n *                  - abortSignal - The abortSignal associated with containing operation.\n *                  - abortErrorMsg - The abort error message associated with containing operation.\n * @returns Resolved promise\n */\nexport function delay<T>(\n  delayInMs: number,\n  value?: T,\n  options?: {\n    abortSignal?: AbortSignalLike;\n    abortErrorMsg?: string;\n  },\n): Promise<T | void> {\n  return new Promise((resolve, reject) => {\n    let timer: ReturnType<typeof setTimeout> | undefined = undefined;\n    let onAborted: (() => void) | undefined = undefined;\n\n    const rejectOnAbort = (): void => {\n      return reject(\n        new AbortError(options?.abortErrorMsg ? options?.abortErrorMsg : StandardAbortMessage),\n      );\n    };\n\n    const removeListeners = (): void => {\n      if (options?.abortSignal && onAborted) {\n        options.abortSignal.removeEventListener(\"abort\", onAborted);\n      }\n    };\n\n    onAborted = (): void => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n      removeListeners();\n      return rejectOnAbort();\n    };\n\n    if (options?.abortSignal && options.abortSignal.aborted) {\n      return rejectOnAbort();\n    }\n\n    timer = setTimeout(() => {\n      removeListeners();\n      resolve(value);\n    }, delayInMs);\n\n    if (options?.abortSignal) {\n      options.abortSignal.addEventListener(\"abort\", onAborted);\n    }\n  });\n}\n\n/**\n * @internal\n * @returns the parsed value or undefined if the parsed value is invalid.\n */\nexport function parseHeaderValueAsNumber(\n  response: PipelineResponse,\n  headerName: string,\n): number | undefined {\n  const value = response.headers.get(headerName);\n  if (!value) return;\n  const valueAsNum = Number(value);\n  if (Number.isNaN(valueAsNum)) return;\n  return valueAsNum;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { PipelineResponse } from \"../index.js\";\nimport { parseHeaderValueAsNumber } from \"../util/helpers.js\";\nimport type { RetryStrategy } from \"./retryStrategy.js\";\n\n/**\n * The header that comes back from Azure services representing\n * the amount of time (minimum) to wait to retry (in seconds or timestamp after which we can retry).\n */\nconst RetryAfterHeader = \"Retry-After\";\n/**\n * The headers that come back from Azure services representing\n * the amount of time (minimum) to wait to retry.\n *\n * \"retry-after-ms\", \"x-ms-retry-after-ms\" : milliseconds\n * \"Retry-After\" : seconds or timestamp\n */\nconst AllRetryAfterHeaders: string[] = [\"retry-after-ms\", \"x-ms-retry-after-ms\", RetryAfterHeader];\n\n/**\n * A response is a throttling retry response if it has a throttling status code (429 or 503),\n * as long as one of the [ \"Retry-After\" or \"retry-after-ms\" or \"x-ms-retry-after-ms\" ] headers has a valid value.\n *\n * Returns the `retryAfterInMs` value if the response is a throttling retry response.\n * If not throttling retry response, returns `undefined`.\n *\n * @internal\n */\nfunction getRetryAfterInMs(response?: PipelineResponse): number | undefined {\n  if (!(response && [429, 503].includes(response.status))) return undefined;\n  try {\n    // Headers: \"retry-after-ms\", \"x-ms-retry-after-ms\", \"Retry-After\"\n    for (const header of AllRetryAfterHeaders) {\n      const retryAfterValue = parseHeaderValueAsNumber(response, header);\n      if (retryAfterValue === 0 || retryAfterValue) {\n        // \"Retry-After\" header ==> seconds\n        // \"retry-after-ms\", \"x-ms-retry-after-ms\" headers ==> milli-seconds\n        const multiplyingFactor = header === RetryAfterHeader ? 1000 : 1;\n        return retryAfterValue * multiplyingFactor; // in milli-seconds\n      }\n    }\n\n    // RetryAfterHeader (\"Retry-After\") has a special case where it might be formatted as a date instead of a number of seconds\n    const retryAfterHeader = response.headers.get(RetryAfterHeader);\n    if (!retryAfterHeader) return;\n\n    const date = Date.parse(retryAfterHeader);\n    const diff = date - Date.now();\n    // negative diff would mean a date in the past, so retry asap with 0 milliseconds\n    return Number.isFinite(diff) ? Math.max(0, diff) : undefined;\n  } catch (e: any) {\n    return undefined;\n  }\n}\n\n/**\n * A response is a retry response if it has a throttling status code (429 or 503),\n * as long as one of the [ \"Retry-After\" or \"retry-after-ms\" or \"x-ms-retry-after-ms\" ] headers has a valid value.\n */\nexport function isThrottlingRetryResponse(response?: PipelineResponse): boolean {\n  return Number.isFinite(getRetryAfterInMs(response));\n}\n\nexport function throttlingRetryStrategy(): RetryStrategy {\n  return {\n    name: \"throttlingRetryStrategy\",\n    retry({ response }) {\n      const retryAfterInMs = getRetryAfterInMs(response);\n      if (!Number.isFinite(retryAfterInMs)) {\n        return { skipStrategy: true };\n      }\n      return {\n        retryAfterInMs,\n      };\n    },\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { PipelineResponse } from \"../interfaces.js\";\nimport type { RestError } from \"../restError.js\";\nimport { getRandomIntegerInclusive } from \"@azure/core-util\";\nimport type { RetryStrategy } from \"./retryStrategy.js\";\nimport { isThrottlingRetryResponse } from \"./throttlingRetryStrategy.js\";\n\n// intervals are in milliseconds\nconst DEFAULT_CLIENT_RETRY_INTERVAL = 1000;\nconst DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 64;\n\n/**\n * A retry strategy that retries with an exponentially increasing delay in these two cases:\n * - When there are errors in the underlying transport layer (e.g. DNS lookup failures).\n * - Or otherwise if the outgoing request fails (408, greater or equal than 500, except for 501 and 505).\n */\nexport function exponentialRetryStrategy(\n  options: {\n    /**\n     * The amount of delay in milliseconds between retry attempts. Defaults to 1000\n     * (1 second.) The delay increases exponentially with each retry up to a maximum\n     * specified by maxRetryDelayInMs.\n     */\n    retryDelayInMs?: number;\n\n    /**\n     * The maximum delay in milliseconds allowed before retrying an operation. Defaults\n     * to 64000 (64 seconds).\n     */\n    maxRetryDelayInMs?: number;\n\n    /**\n     * If true it won't retry if it received a system error.\n     */\n    ignoreSystemErrors?: boolean;\n\n    /**\n     * If true it won't retry if it received a non-fatal HTTP status code.\n     */\n    ignoreHttpStatusCodes?: boolean;\n  } = {},\n): RetryStrategy {\n  const retryInterval = options.retryDelayInMs ?? DEFAULT_CLIENT_RETRY_INTERVAL;\n  const maxRetryInterval = options.maxRetryDelayInMs ?? DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n\n  let retryAfterInMs = retryInterval;\n\n  return {\n    name: \"exponentialRetryStrategy\",\n    retry({ retryCount, response, responseError }) {\n      const matchedSystemError = isSystemError(responseError);\n      const ignoreSystemErrors = matchedSystemError && options.ignoreSystemErrors;\n\n      const isExponential = isExponentialRetryResponse(response);\n      const ignoreExponentialResponse = isExponential && options.ignoreHttpStatusCodes;\n      const unknownResponse = response && (isThrottlingRetryResponse(response) || !isExponential);\n\n      if (unknownResponse || ignoreExponentialResponse || ignoreSystemErrors) {\n        return { skipStrategy: true };\n      }\n\n      if (responseError && !matchedSystemError && !isExponential) {\n        return { errorToThrow: responseError };\n      }\n\n      // Exponentially increase the delay each time\n      const exponentialDelay = retryAfterInMs * Math.pow(2, retryCount);\n      // Don't let the delay exceed the maximum\n      const clampedExponentialDelay = Math.min(maxRetryInterval, exponentialDelay);\n      // Allow the final value to have some \"jitter\" (within 50% of the delay size) so\n      // that retries across multiple clients don't occur simultaneously.\n      retryAfterInMs =\n        clampedExponentialDelay / 2 + getRandomIntegerInclusive(0, clampedExponentialDelay / 2);\n      return { retryAfterInMs };\n    },\n  };\n}\n\n/**\n * A response is a retry response if it has status codes:\n * - 408, or\n * - Greater or equal than 500, except for 501 and 505.\n */\nexport function isExponentialRetryResponse(response?: PipelineResponse): boolean {\n  return Boolean(\n    response &&\n      response.status !== undefined &&\n      (response.status >= 500 || response.status === 408) &&\n      response.status !== 501 &&\n      response.status !== 505,\n  );\n}\n\n/**\n * Determines whether an error from a pipeline response was triggered in the network layer.\n */\nexport function isSystemError(err?: RestError): boolean {\n  if (!err) {\n    return false;\n  }\n  return (\n    err.code === \"ETIMEDOUT\" ||\n    err.code === \"ESOCKETTIMEDOUT\" ||\n    err.code === \"ECONNREFUSED\" ||\n    err.code === \"ECONNRESET\" ||\n    err.code === \"ENOENT\" ||\n    err.code === \"ENOTFOUND\"\n  );\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces.js\";\nimport type { PipelinePolicy } from \"../pipeline.js\";\nimport { delay } from \"../util/helpers.js\";\nimport { type AzureLogger, createClientLogger } from \"@azure/logger\";\nimport type { RetryStrategy } from \"../retryStrategies/retryStrategy.js\";\nimport type { RestError } from \"../restError.js\";\nimport { AbortError } from \"@azure/abort-controller\";\nimport { DEFAULT_RETRY_POLICY_COUNT } from \"../constants.js\";\n\nconst retryPolicyLogger = createClientLogger(\"core-rest-pipeline retryPolicy\");\n\n/**\n * The programmatic identifier of the retryPolicy.\n */\nconst retryPolicyName = \"retryPolicy\";\n\n/**\n * Options to the {@link retryPolicy}\n */\nexport interface RetryPolicyOptions {\n  /**\n   * Maximum number of retries. If not specified, it will limit to 3 retries.\n   */\n  maxRetries?: number;\n  /**\n   * Logger. If it's not provided, a default logger is used.\n   */\n  logger?: AzureLogger;\n}\n\n/**\n * retryPolicy is a generic policy to enable retrying requests when certain conditions are met\n */\nexport function retryPolicy(\n  strategies: RetryStrategy[],\n  options: RetryPolicyOptions = { maxRetries: DEFAULT_RETRY_POLICY_COUNT },\n): PipelinePolicy {\n  const logger = options.logger || retryPolicyLogger;\n  return {\n    name: retryPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      let response: PipelineResponse | undefined;\n      let responseError: RestError | undefined;\n      let retryCount = -1;\n\n      // eslint-disable-next-line no-constant-condition\n      retryRequest: while (true) {\n        retryCount += 1;\n        response = undefined;\n        responseError = undefined;\n\n        try {\n          logger.info(`Retry ${retryCount}: Attempting to send request`, request.requestId);\n          response = await next(request);\n          logger.info(`Retry ${retryCount}: Received a response from request`, request.requestId);\n        } catch (e: any) {\n          logger.error(`Retry ${retryCount}: Received an error from request`, request.requestId);\n\n          // RestErrors are valid targets for the retry strategies.\n          // If none of the retry strategies can work with them, they will be thrown later in this policy.\n          // If the received error is not a RestError, it is immediately thrown.\n          responseError = e as RestError;\n          if (!e || responseError.name !== \"RestError\") {\n            throw e;\n          }\n\n          response = responseError.response;\n        }\n\n        if (request.abortSignal?.aborted) {\n          logger.error(`Retry ${retryCount}: Request aborted.`);\n          const abortError = new AbortError();\n          throw abortError;\n        }\n\n        if (retryCount >= (options.maxRetries ?? DEFAULT_RETRY_POLICY_COUNT)) {\n          logger.info(\n            `Retry ${retryCount}: Maximum retries reached. Returning the last received response, or throwing the last received error.`,\n          );\n          if (responseError) {\n            throw responseError;\n          } else if (response) {\n            return response;\n          } else {\n            throw new Error(\"Maximum retries reached with no response or error to throw\");\n          }\n        }\n\n        logger.info(`Retry ${retryCount}: Processing ${strategies.length} retry strategies.`);\n\n        strategiesLoop: for (const strategy of strategies) {\n          const strategyLogger = strategy.logger || retryPolicyLogger;\n          strategyLogger.info(`Retry ${retryCount}: Processing retry strategy ${strategy.name}.`);\n\n          const modifiers = strategy.retry({\n            retryCount,\n            response,\n            responseError,\n          });\n\n          if (modifiers.skipStrategy) {\n            strategyLogger.info(`Retry ${retryCount}: Skipped.`);\n            continue strategiesLoop;\n          }\n\n          const { errorToThrow, retryAfterInMs, redirectTo } = modifiers;\n\n          if (errorToThrow) {\n            strategyLogger.error(\n              `Retry ${retryCount}: Retry strategy ${strategy.name} throws error:`,\n              errorToThrow,\n            );\n            throw errorToThrow;\n          }\n\n          if (retryAfterInMs || retryAfterInMs === 0) {\n            strategyLogger.info(\n              `Retry ${retryCount}: Retry strategy ${strategy.name} retries after ${retryAfterInMs}`,\n            );\n            await delay(retryAfterInMs, undefined, { abortSignal: request.abortSignal });\n            continue retryRequest;\n          }\n\n          if (redirectTo) {\n            strategyLogger.info(\n              `Retry ${retryCount}: Retry strategy ${strategy.name} redirects to ${redirectTo}`,\n            );\n            request.url = redirectTo;\n            continue retryRequest;\n          }\n        }\n\n        if (responseError) {\n          logger.info(\n            `None of the retry strategies could work with the received error. Throwing it.`,\n          );\n          throw responseError;\n        }\n        if (response) {\n          logger.info(\n            `None of the retry strategies could work with the received response. Returning it.`,\n          );\n          return response;\n        }\n\n        // If all the retries skip and there's no response,\n        // we're still in the retry loop, so a new request will be sent\n        // until `maxRetries` is reached.\n      }\n    },\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { PipelineRetryOptions } from \"../interfaces.js\";\nimport type { PipelinePolicy } from \"../pipeline.js\";\nimport { exponentialRetryStrategy } from \"../retryStrategies/exponentialRetryStrategy.js\";\nimport { throttlingRetryStrategy } from \"../retryStrategies/throttlingRetryStrategy.js\";\nimport { retryPolicy } from \"./retryPolicy.js\";\nimport { DEFAULT_RETRY_POLICY_COUNT } from \"../constants.js\";\n\n/**\n * Name of the {@link defaultRetryPolicy}\n */\nexport const defaultRetryPolicyName = \"defaultRetryPolicy\";\n\n/**\n * Options that control how to retry failed requests.\n */\nexport interface DefaultRetryPolicyOptions extends PipelineRetryOptions {}\n\n/**\n * A policy that retries according to three strategies:\n * - When the server sends a 429 response with a Retry-After header.\n * - When there are errors in the underlying transport layer (e.g. DNS lookup failures).\n * - Or otherwise if the outgoing request fails, it will retry with an exponentially increasing delay.\n */\nexport function defaultRetryPolicy(options: DefaultRetryPolicyOptions = {}): PipelinePolicy {\n  return {\n    name: defaultRetryPolicyName,\n    sendRequest: retryPolicy([throttlingRetryStrategy(), exponentialRetryStrategy(options)], {\n      maxRetries: options.maxRetries ?? DEFAULT_RETRY_POLICY_COUNT,\n    }).sendRequest,\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { HttpHeaders, RawHttpHeaders, RawHttpHeadersInput } from \"./interfaces.js\";\n\ninterface HeaderEntry {\n  name: string;\n  value: string;\n}\n\nfunction normalizeName(name: string): string {\n  return name.toLowerCase();\n}\n\nfunction* headerIterator(map: Map<string, HeaderEntry>): IterableIterator<[string, string]> {\n  for (const entry of map.values()) {\n    yield [entry.name, entry.value];\n  }\n}\n\nclass HttpHeadersImpl implements HttpHeaders {\n  private readonly _headersMap: Map<string, HeaderEntry>;\n\n  constructor(rawHeaders?: RawHttpHeaders | RawHttpHeadersInput) {\n    this._headersMap = new Map<string, HeaderEntry>();\n    if (rawHeaders) {\n      for (const headerName of Object.keys(rawHeaders)) {\n        this.set(headerName, rawHeaders[headerName]);\n      }\n    }\n  }\n\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param name - The name of the header to set. This value is case-insensitive.\n   * @param value - The value of the header to set.\n   */\n  public set(name: string, value: string | number | boolean): void {\n    this._headersMap.set(normalizeName(name), { name, value: String(value).trim() });\n  }\n\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param name - The name of the header. This value is case-insensitive.\n   */\n  public get(name: string): string | undefined {\n    return this._headersMap.get(normalizeName(name))?.value;\n  }\n\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   * @param name - The name of the header to set. This value is case-insensitive.\n   */\n  public has(name: string): boolean {\n    return this._headersMap.has(normalizeName(name));\n  }\n\n  /**\n   * Remove the header with the provided headerName.\n   * @param name - The name of the header to remove.\n   */\n  public delete(name: string): void {\n    this._headersMap.delete(normalizeName(name));\n  }\n\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   */\n  public toJSON(options: { preserveCase?: boolean } = {}): RawHttpHeaders {\n    const result: RawHttpHeaders = {};\n    if (options.preserveCase) {\n      for (const entry of this._headersMap.values()) {\n        result[entry.name] = entry.value;\n      }\n    } else {\n      for (const [normalizedName, entry] of this._headersMap) {\n        result[normalizedName] = entry.value;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Get the string representation of this HTTP header collection.\n   */\n  public toString(): string {\n    return JSON.stringify(this.toJSON({ preserveCase: true }));\n  }\n\n  /**\n   * Iterate over tuples of header [name, value] pairs.\n   */\n  [Symbol.iterator](): Iterator<[string, string]> {\n    return headerIterator(this._headersMap);\n  }\n}\n\n/**\n * Creates an object that satisfies the `HttpHeaders` interface.\n * @param rawHeaders - A simple object representing initial headers\n */\nexport function createHttpHeaders(rawHeaders?: RawHttpHeadersInput): HttpHeaders {\n  return new HttpHeadersImpl(rawHeaders);\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { isNodeLike, stringToUint8Array } from \"@azure/core-util\";\nimport { createHttpHeaders } from \"../httpHeaders.js\";\nimport type {\n  BodyPart,\n  FormDataMap,\n  FormDataValue,\n  PipelineRequest,\n  PipelineResponse,\n  SendRequest,\n} from \"../interfaces.js\";\nimport type { PipelinePolicy } from \"../pipeline.js\";\n\n/**\n * The programmatic identifier of the formDataPolicy.\n */\nexport const formDataPolicyName = \"formDataPolicy\";\n\nfunction formDataToFormDataMap(formData: FormData): FormDataMap {\n  const formDataMap: FormDataMap = {};\n  for (const [key, value] of formData.entries()) {\n    formDataMap[key] ??= [];\n    (formDataMap[key] as FormDataValue[]).push(value);\n  }\n  return formDataMap;\n}\n\n/**\n * A policy that encodes FormData on the request into the body.\n */\nexport function formDataPolicy(): PipelinePolicy {\n  return {\n    name: formDataPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      if (isNodeLike && typeof FormData !== \"undefined\" && request.body instanceof FormData) {\n        request.formData = formDataToFormDataMap(request.body);\n        request.body = undefined;\n      }\n\n      if (request.formData) {\n        const contentType = request.headers.get(\"Content-Type\");\n        if (contentType && contentType.indexOf(\"application/x-www-form-urlencoded\") !== -1) {\n          request.body = wwwFormUrlEncode(request.formData);\n        } else {\n          await prepareFormData(request.formData, request);\n        }\n\n        request.formData = undefined;\n      }\n      return next(request);\n    },\n  };\n}\n\nfunction wwwFormUrlEncode(formData: FormDataMap): string {\n  const urlSearchParams = new URLSearchParams();\n  for (const [key, value] of Object.entries(formData)) {\n    if (Array.isArray(value)) {\n      for (const subValue of value) {\n        urlSearchParams.append(key, subValue.toString());\n      }\n    } else {\n      urlSearchParams.append(key, value.toString());\n    }\n  }\n  return urlSearchParams.toString();\n}\n\nasync function prepareFormData(formData: FormDataMap, request: PipelineRequest): Promise<void> {\n  // validate content type (multipart/form-data)\n  const contentType = request.headers.get(\"Content-Type\");\n  if (contentType && !contentType.startsWith(\"multipart/form-data\")) {\n    // content type is specified and is not multipart/form-data. Exit.\n    return;\n  }\n\n  request.headers.set(\"Content-Type\", contentType ?? \"multipart/form-data\");\n\n  // set body to MultipartRequestBody using content from FormDataMap\n  const parts: BodyPart[] = [];\n\n  for (const [fieldName, values] of Object.entries(formData)) {\n    for (const value of Array.isArray(values) ? values : [values]) {\n      if (typeof value === \"string\") {\n        parts.push({\n          headers: createHttpHeaders({\n            \"Content-Disposition\": `form-data; name=\"${fieldName}\"`,\n          }),\n          body: stringToUint8Array(value, \"utf-8\"),\n        });\n      } else if (value === undefined || value === null || typeof value !== \"object\") {\n        throw new Error(\n          `Unexpected value for key ${fieldName}: ${value}. Value should be serialized to string first.`,\n        );\n      } else {\n        // using || instead of ?? here since if value.name is empty we should create a file name\n        const fileName = (value as File).name || \"blob\";\n        const headers = createHttpHeaders();\n        headers.set(\n          \"Content-Disposition\",\n          `form-data; name=\"${fieldName}\"; filename=\"${fileName}\"`,\n        );\n\n        // again, || is used since an empty value.type means the content type is unset\n        headers.set(\"Content-Type\", value.type || \"application/octet-stream\");\n\n        parts.push({\n          headers,\n          body: value,\n        });\n      }\n    }\n  }\n  request.multipartBody = { parts };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport const proxyPolicyName = \"proxyPolicy\";\nconst errorMessage = \"proxyPolicy is not supported in browser environment\";\n\nexport function getDefaultProxySettings(): never {\n  throw new Error(errorMessage);\n}\n\n/**\n * proxyPolicy is not supported in the browser and attempting\n * to use it will raise an error.\n */\nexport function proxyPolicy(): never {\n  throw new Error(errorMessage);\n}\n\n/**\n * A function to reset the cached agents.\n * proxyPolicy is not supported in the browser and attempting\n * to use it will raise an error.\n * @internal\n */\nexport function resetCachedProxyAgents(): never {\n  throw new Error(errorMessage);\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces.js\";\nimport type { PipelinePolicy } from \"../pipeline.js\";\n\n/**\n * The programmatic identifier of the setClientRequestIdPolicy.\n */\nexport const setClientRequestIdPolicyName = \"setClientRequestIdPolicy\";\n\n/**\n * Each PipelineRequest gets a unique id upon creation.\n * This policy passes that unique id along via an HTTP header to enable better\n * telemetry and tracing.\n * @param requestIdHeaderName - The name of the header to pass the request ID to.\n */\nexport function setClientRequestIdPolicy(\n  requestIdHeaderName = \"x-ms-client-request-id\",\n): PipelinePolicy {\n  return {\n    name: setClientRequestIdPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      if (!request.headers.has(requestIdHeaderName)) {\n        request.headers.set(requestIdHeaderName, request.requestId);\n      }\n      return next(request);\n    },\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { PipelinePolicy } from \"../pipeline.js\";\nimport type { TlsSettings } from \"../interfaces.js\";\n\n/**\n * Name of the TLS Policy\n */\nexport const tlsPolicyName = \"tlsPolicy\";\n\n/**\n * Gets a pipeline policy that adds the client certificate to the HttpClient agent for authentication.\n */\nexport function tlsPolicy(tlsSettings?: TlsSettings): PipelinePolicy {\n  return {\n    name: tlsPolicyName,\n    sendRequest: async (req, next) => {\n      // Users may define a request tlsSettings, honor those over the client level one\n      if (!req.tlsSettings) {\n        req.tlsSettings = tlsSettings;\n      }\n      return next(req);\n    },\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport const custom = {};\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { isError } from \"@azure/core-util\";\nimport type { PipelineRequest, PipelineResponse } from \"./interfaces.js\";\nimport { custom } from \"./util/inspect.js\";\nimport { Sanitizer } from \"./util/sanitizer.js\";\n\nconst errorSanitizer = new Sanitizer();\n\n/**\n * The options supported by RestError.\n */\nexport interface RestErrorOptions {\n  /**\n   * The code of the error itself (use statics on RestError if possible.)\n   */\n  code?: string;\n  /**\n   * The HTTP status code of the request (if applicable.)\n   */\n  statusCode?: number;\n  /**\n   * The request that was made.\n   */\n  request?: PipelineRequest;\n  /**\n   * The response received (if any.)\n   */\n  response?: PipelineResponse;\n}\n\n/**\n * A custom error type for failed pipeline requests.\n */\nexport class RestError extends Error {\n  /**\n   * Something went wrong when making the request.\n   * This means the actual request failed for some reason,\n   * such as a DNS issue or the connection being lost.\n   */\n  static readonly REQUEST_SEND_ERROR: string = \"REQUEST_SEND_ERROR\";\n  /**\n   * This means that parsing the response from the server failed.\n   * It may have been malformed.\n   */\n  static readonly PARSE_ERROR: string = \"PARSE_ERROR\";\n\n  /**\n   * The code of the error itself (use statics on RestError if possible.)\n   */\n  public code?: string;\n  /**\n   * The HTTP status code of the request (if applicable.)\n   */\n  public statusCode?: number;\n  /**\n   * The request that was made.\n   */\n  public request?: PipelineRequest;\n  /**\n   * The response received (if any.)\n   */\n  public response?: PipelineResponse;\n  /**\n   * Bonus property set by the throw site.\n   */\n  public details?: unknown;\n\n  constructor(message: string, options: RestErrorOptions = {}) {\n    super(message);\n    this.name = \"RestError\";\n    this.code = options.code;\n    this.statusCode = options.statusCode;\n    this.request = options.request;\n    this.response = options.response;\n\n    Object.setPrototypeOf(this, RestError.prototype);\n  }\n\n  /**\n   * Logging method for util.inspect in Node\n   */\n  [custom](): string {\n    return `RestError: ${this.message} \\n ${errorSanitizer.sanitize(this)}`;\n  }\n}\n\n/**\n * Typeguard for RestError\n * @param e - Something caught by a catch clause.\n */\nexport function isRestError(e: unknown): e is RestError {\n  if (e instanceof RestError) {\n    return true;\n  }\n  return isError(e) && e.name === \"RestError\";\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  type TracingClient,\n  type TracingContext,\n  type TracingSpan,\n  createTracingClient,\n} from \"@azure/core-tracing\";\nimport { SDK_VERSION } from \"../constants.js\";\nimport type { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces.js\";\nimport type { PipelinePolicy } from \"../pipeline.js\";\nimport { getUserAgentValue } from \"../util/userAgent.js\";\nimport { logger } from \"../log.js\";\nimport { getErrorMessage, isError } from \"@azure/core-util\";\nimport { isRestError } from \"../restError.js\";\nimport { Sanitizer } from \"../util/sanitizer.js\";\n\n/**\n * The programmatic identifier of the tracingPolicy.\n */\nexport const tracingPolicyName = \"tracingPolicy\";\n\n/**\n * Options to configure the tracing policy.\n */\nexport interface TracingPolicyOptions {\n  /**\n   * String prefix to add to the user agent logged as metadata\n   * on the generated Span.\n   * Defaults to an empty string.\n   */\n  userAgentPrefix?: string;\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   */\n  additionalAllowedQueryParameters?: string[];\n}\n\n/**\n * A simple policy to create OpenTelemetry Spans for each request made by the pipeline\n * that has SpanOptions with a parent.\n * Requests made without a parent Span will not be recorded.\n * @param options - Options to configure the telemetry logged by the tracing policy.\n */\nexport function tracingPolicy(options: TracingPolicyOptions = {}): PipelinePolicy {\n  const userAgentPromise = getUserAgentValue(options.userAgentPrefix);\n  const sanitizer = new Sanitizer({\n    additionalAllowedQueryParameters: options.additionalAllowedQueryParameters,\n  });\n  const tracingClient = tryCreateTracingClient();\n\n  return {\n    name: tracingPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      if (!tracingClient || !request.tracingOptions?.tracingContext) {\n        return next(request);\n      }\n\n      const userAgent = await userAgentPromise;\n\n      const spanAttributes = {\n        \"http.url\": sanitizer.sanitizeUrl(request.url),\n        \"http.method\": request.method,\n        \"http.user_agent\": userAgent,\n        requestId: request.requestId,\n      };\n      if (userAgent) {\n        spanAttributes[\"http.user_agent\"] = userAgent;\n      }\n\n      const { span, tracingContext } = tryCreateSpan(tracingClient, request, spanAttributes) ?? {};\n\n      if (!span || !tracingContext) {\n        return next(request);\n      }\n\n      try {\n        const response = await tracingClient.withContext(tracingContext, next, request);\n        tryProcessResponse(span, response);\n        return response;\n      } catch (err: any) {\n        tryProcessError(span, err);\n        throw err;\n      }\n    },\n  };\n}\n\nfunction tryCreateTracingClient(): TracingClient | undefined {\n  try {\n    return createTracingClient({\n      namespace: \"\",\n      packageName: \"@azure/core-rest-pipeline\",\n      packageVersion: SDK_VERSION,\n    });\n  } catch (e: unknown) {\n    logger.warning(`Error when creating the TracingClient: ${getErrorMessage(e)}`);\n    return undefined;\n  }\n}\n\nfunction tryCreateSpan(\n  tracingClient: TracingClient,\n  request: PipelineRequest,\n  spanAttributes: Record<string, unknown>,\n): { span: TracingSpan; tracingContext: TracingContext } | undefined {\n  try {\n    // As per spec, we do not need to differentiate between HTTP and HTTPS in span name.\n    const { span, updatedOptions } = tracingClient.startSpan(\n      `HTTP ${request.method}`,\n      { tracingOptions: request.tracingOptions },\n      {\n        spanKind: \"client\",\n        spanAttributes,\n      },\n    );\n\n    // If the span is not recording, don't do any more work.\n    if (!span.isRecording()) {\n      span.end();\n      return undefined;\n    }\n\n    // set headers\n    const headers = tracingClient.createRequestHeaders(\n      updatedOptions.tracingOptions.tracingContext,\n    );\n    for (const [key, value] of Object.entries(headers)) {\n      request.headers.set(key, value);\n    }\n    return { span, tracingContext: updatedOptions.tracingOptions.tracingContext };\n  } catch (e: any) {\n    logger.warning(`Skipping creating a tracing span due to an error: ${getErrorMessage(e)}`);\n    return undefined;\n  }\n}\n\nfunction tryProcessError(span: TracingSpan, error: unknown): void {\n  try {\n    span.setStatus({\n      status: \"error\",\n      error: isError(error) ? error : undefined,\n    });\n    if (isRestError(error) && error.statusCode) {\n      span.setAttribute(\"http.status_code\", error.statusCode);\n    }\n    span.end();\n  } catch (e: any) {\n    logger.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e)}`);\n  }\n}\n\nfunction tryProcessResponse(span: TracingSpan, response: PipelineResponse): void {\n  try {\n    span.setAttribute(\"http.status_code\", response.status);\n    const serviceRequestId = response.headers.get(\"x-ms-request-id\");\n    if (serviceRequestId) {\n      span.setAttribute(\"serviceRequestId\", serviceRequestId);\n    }\n    span.setStatus({\n      status: \"success\",\n    });\n    span.end();\n  } catch (e: any) {\n    logger.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e)}`);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { type LogPolicyOptions, logPolicy } from \"./policies/logPolicy.js\";\nimport { type Pipeline, createEmptyPipeline } from \"./pipeline.js\";\nimport type { PipelineRetryOptions, TlsSettings, ProxySettings } from \"./interfaces.js\";\nimport { type RedirectPolicyOptions, redirectPolicy } from \"./policies/redirectPolicy.js\";\nimport { type UserAgentPolicyOptions, userAgentPolicy } from \"./policies/userAgentPolicy.js\";\nimport { multipartPolicy, multipartPolicyName } from \"./policies/multipartPolicy.js\";\nimport { decompressResponsePolicy } from \"./policies/decompressResponsePolicy.js\";\nimport { defaultRetryPolicy } from \"./policies/defaultRetryPolicy.js\";\nimport { formDataPolicy } from \"./policies/formDataPolicy.js\";\nimport { isNodeLike } from \"@azure/core-util\";\nimport { proxyPolicy } from \"./policies/proxyPolicy.js\";\nimport { setClientRequestIdPolicy } from \"./policies/setClientRequestIdPolicy.js\";\nimport { tlsPolicy } from \"./policies/tlsPolicy.js\";\nimport { tracingPolicy } from \"./policies/tracingPolicy.js\";\n\n/**\n * Defines options that are used to configure the HTTP pipeline for\n * an SDK client.\n */\nexport interface PipelineOptions {\n  /**\n   * Options that control how to retry failed requests.\n   */\n  retryOptions?: PipelineRetryOptions;\n\n  /**\n   * Options to configure a proxy for outgoing requests.\n   */\n  proxyOptions?: ProxySettings;\n\n  /** Options for configuring TLS authentication */\n  tlsOptions?: TlsSettings;\n\n  /**\n   * Options for how redirect responses are handled.\n   */\n  redirectOptions?: RedirectPolicyOptions;\n\n  /**\n   * Options for adding user agent details to outgoing requests.\n   */\n  userAgentOptions?: UserAgentPolicyOptions;\n\n  /**\n   * Options for setting common telemetry and tracing info to outgoing requests.\n   */\n  telemetryOptions?: TelemetryOptions;\n}\n\n/**\n * Defines options that are used to configure common telemetry and tracing info\n */\nexport interface TelemetryOptions {\n  /**\n   * The name of the header to pass the request ID to.\n   */\n  clientRequestIdHeaderName?: string;\n}\n\n/**\n * Defines options that are used to configure internal options of\n * the HTTP pipeline for an SDK client.\n */\nexport interface InternalPipelineOptions extends PipelineOptions {\n  /**\n   * Options to configure request/response logging.\n   */\n  loggingOptions?: LogPolicyOptions;\n}\n\n/**\n * Create a new pipeline with a default set of customizable policies.\n * @param options - Options to configure a custom pipeline.\n */\nexport function createPipelineFromOptions(options: InternalPipelineOptions): Pipeline {\n  const pipeline = createEmptyPipeline();\n\n  if (isNodeLike) {\n    if (options.tlsOptions) {\n      pipeline.addPolicy(tlsPolicy(options.tlsOptions));\n    }\n    pipeline.addPolicy(proxyPolicy(options.proxyOptions));\n    pipeline.addPolicy(decompressResponsePolicy());\n  }\n\n  pipeline.addPolicy(formDataPolicy(), { beforePolicies: [multipartPolicyName] });\n  pipeline.addPolicy(userAgentPolicy(options.userAgentOptions));\n  pipeline.addPolicy(setClientRequestIdPolicy(options.telemetryOptions?.clientRequestIdHeaderName));\n  // The multipart policy is added after policies with no phase, so that\n  // policies can be added between it and formDataPolicy to modify\n  // properties (e.g., making the boundary constant in recorded tests).\n  pipeline.addPolicy(multipartPolicy(), { afterPhase: \"Deserialize\" });\n  pipeline.addPolicy(defaultRetryPolicy(options.retryOptions), { phase: \"Retry\" });\n  pipeline.addPolicy(tracingPolicy({ ...options.userAgentOptions, ...options.loggingOptions }), {\n    afterPhase: \"Retry\",\n  });\n  if (isNodeLike) {\n    // Both XHR and Fetch expect to handle redirects automatically,\n    // so only include this policy when we're in Node.\n    pipeline.addPolicy(redirectPolicy(options.redirectOptions), { afterPhase: \"Retry\" });\n  }\n  pipeline.addPolicy(logPolicy(options.loggingOptions), { afterPhase: \"Sign\" });\n\n  return pipeline;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortError } from \"@azure/abort-controller\";\nimport type {\n  HttpClient,\n  HttpHeaders as PipelineHeaders,\n  PipelineRequest,\n  PipelineResponse,\n  TransferProgressEvent,\n} from \"./interfaces.js\";\nimport { RestError } from \"./restError.js\";\nimport { createHttpHeaders } from \"./httpHeaders.js\";\nimport { isNodeReadableStream, isWebReadableStream } from \"./util/typeGuards.js\";\n\n/**\n * Checks if the body is a Blob or Blob-like\n */\nfunction isBlob(body: unknown): body is Blob {\n  // File objects count as a type of Blob, so we want to use instanceof explicitly\n  return (typeof Blob === \"function\" || typeof Blob === \"object\") && body instanceof Blob;\n}\n\n/**\n * A HttpClient implementation that uses window.fetch to send HTTP requests.\n * @internal\n */\nclass FetchHttpClient implements HttpClient {\n  /**\n   * Makes a request over an underlying transport layer and returns the response.\n   * @param request - The request to be made.\n   */\n  public async sendRequest(request: PipelineRequest): Promise<PipelineResponse> {\n    const url = new URL(request.url);\n    const isInsecure = url.protocol !== \"https:\";\n\n    if (isInsecure && !request.allowInsecureConnection) {\n      throw new Error(`Cannot connect to ${request.url} while allowInsecureConnection is false.`);\n    }\n\n    if (request.proxySettings) {\n      throw new Error(\"HTTP proxy is not supported in browser environment\");\n    }\n\n    try {\n      return await makeRequest(request);\n    } catch (e: any) {\n      throw getError(e, request);\n    }\n  }\n}\n\n/**\n * Sends a request\n */\nasync function makeRequest(request: PipelineRequest): Promise<PipelineResponse> {\n  const { abortController, abortControllerCleanup } = setupAbortSignal(request);\n  try {\n    const headers = buildFetchHeaders(request.headers);\n    const { streaming, body: requestBody } = buildRequestBody(request);\n    const requestInit: RequestInit = {\n      body: requestBody,\n      method: request.method,\n      headers: headers,\n      signal: abortController.signal,\n      // Cloudflare doesn't implement the full Fetch API spec\n      // because of some of it doesn't make sense in the edge.\n      // See https://github.com/cloudflare/workerd/issues/902\n      ...(\"credentials\" in Request.prototype\n        ? { credentials: request.withCredentials ? \"include\" : \"same-origin\" }\n        : {}),\n      ...(\"cache\" in Request.prototype ? { cache: \"no-store\" } : {}),\n    };\n\n    // According to https://fetch.spec.whatwg.org/#fetch-method,\n    // init.duplex must be set when body is a ReadableStream object.\n    // currently \"half\" is the only valid value.\n    if (streaming) {\n      (requestInit as any).duplex = \"half\";\n    }\n    /**\n     * Developers of the future:\n     * Do not set redirect: \"manual\" as part\n     * of request options.\n     * It will not work as you expect.\n     */\n    const response = await fetch(request.url, requestInit);\n    // If we're uploading a blob, we need to fire the progress event manually\n    if (isBlob(request.body) && request.onUploadProgress) {\n      request.onUploadProgress({ loadedBytes: request.body.size });\n    }\n    return buildPipelineResponse(response, request, abortControllerCleanup);\n  } catch (e) {\n    abortControllerCleanup?.();\n    throw e;\n  }\n}\n\n/**\n * Creates a pipeline response from a Fetch response;\n */\nasync function buildPipelineResponse(\n  httpResponse: Response,\n  request: PipelineRequest,\n  abortControllerCleanup?: () => void,\n): Promise<PipelineResponse> {\n  const headers = buildPipelineHeaders(httpResponse);\n  const response: PipelineResponse = {\n    request,\n    headers,\n    status: httpResponse.status,\n  };\n\n  const bodyStream = isWebReadableStream(httpResponse.body)\n    ? buildBodyStream(httpResponse.body, {\n        onProgress: request.onDownloadProgress,\n        onEnd: abortControllerCleanup,\n      })\n    : httpResponse.body;\n\n  if (\n    // Value of POSITIVE_INFINITY in streamResponseStatusCodes is considered as any status code\n    request.streamResponseStatusCodes?.has(Number.POSITIVE_INFINITY) ||\n    request.streamResponseStatusCodes?.has(response.status)\n  ) {\n    if (request.enableBrowserStreams) {\n      response.browserStreamBody = bodyStream ?? undefined;\n    } else {\n      const responseStream = new Response(bodyStream);\n      response.blobBody = responseStream.blob();\n      abortControllerCleanup?.();\n    }\n  } else {\n    const responseStream = new Response(bodyStream);\n\n    response.bodyAsText = await responseStream.text();\n    abortControllerCleanup?.();\n  }\n\n  return response;\n}\n\nfunction setupAbortSignal(request: PipelineRequest): {\n  abortController: AbortController;\n  abortControllerCleanup: (() => void) | undefined;\n} {\n  const abortController = new AbortController();\n\n  // Cleanup function\n  let abortControllerCleanup: (() => void) | undefined;\n\n  /**\n   * Attach an abort listener to the request\n   */\n  let abortListener: ((event: any) => void) | undefined;\n  if (request.abortSignal) {\n    if (request.abortSignal.aborted) {\n      throw new AbortError(\"The operation was aborted.\");\n    }\n\n    abortListener = (event: Event) => {\n      if (event.type === \"abort\") {\n        abortController.abort();\n      }\n    };\n    request.abortSignal.addEventListener(\"abort\", abortListener);\n    abortControllerCleanup = () => {\n      if (abortListener) {\n        request.abortSignal?.removeEventListener(\"abort\", abortListener);\n      }\n    };\n  }\n\n  // If a timeout was passed, call the abort signal once the time elapses\n  if (request.timeout > 0) {\n    setTimeout(() => {\n      abortController.abort();\n    }, request.timeout);\n  }\n\n  return { abortController, abortControllerCleanup };\n}\n\n/**\n * Gets the specific error\n */\n// eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\nfunction getError(e: RestError, request: PipelineRequest): RestError {\n  if (e && e?.name === \"AbortError\") {\n    return e;\n  } else {\n    return new RestError(`Error sending request: ${e.message}`, {\n      code: e?.code ?? RestError.REQUEST_SEND_ERROR,\n      request,\n    });\n  }\n}\n\n/**\n * Converts PipelineRequest headers to Fetch headers\n */\nfunction buildFetchHeaders(pipelineHeaders: PipelineHeaders): Headers {\n  const headers = new Headers();\n  for (const [name, value] of pipelineHeaders) {\n    headers.append(name, value);\n  }\n\n  return headers;\n}\n\nfunction buildPipelineHeaders(httpResponse: Response): PipelineHeaders {\n  const responseHeaders = createHttpHeaders();\n  for (const [name, value] of httpResponse.headers) {\n    responseHeaders.set(name, value);\n  }\n\n  return responseHeaders;\n}\n\ninterface BuildRequestBodyResponse {\n  body:\n    | string\n    | Blob\n    | ReadableStream<Uint8Array>\n    | ArrayBuffer\n    | ArrayBufferView\n    | FormData\n    | null\n    | undefined;\n  streaming: boolean;\n}\n\nfunction buildRequestBody(request: PipelineRequest): BuildRequestBodyResponse {\n  const body = typeof request.body === \"function\" ? request.body() : request.body;\n  if (isNodeReadableStream(body)) {\n    throw new Error(\"Node streams are not supported in browser environment.\");\n  }\n\n  return isWebReadableStream(body)\n    ? { streaming: true, body: buildBodyStream(body, { onProgress: request.onUploadProgress }) }\n    : { streaming: false, body };\n}\n\n/**\n * Reads the request/response original stream and stream it through a new\n * ReadableStream, this is done to be able to report progress in a way that\n * all modern browsers support. TransformStreams would be an alternative,\n * however they are not yet supported by all browsers i.e Firefox\n */\nfunction buildBodyStream(\n  readableStream: ReadableStream<Uint8Array>,\n  options: { onProgress?: (progress: TransferProgressEvent) => void; onEnd?: () => void } = {},\n): ReadableStream<Uint8Array> {\n  let loadedBytes = 0;\n  const { onProgress, onEnd } = options;\n\n  // If the current browser supports pipeThrough we use a TransformStream\n  // to report progress\n  if (isTransformStreamSupported(readableStream)) {\n    return readableStream.pipeThrough(\n      new TransformStream({\n        transform(chunk, controller) {\n          if (chunk === null) {\n            controller.terminate();\n            return;\n          }\n\n          controller.enqueue(chunk);\n          loadedBytes += chunk.length;\n          if (onProgress) {\n            onProgress({ loadedBytes });\n          }\n        },\n        flush() {\n          onEnd?.();\n        },\n      }),\n    );\n  } else {\n    // If we can't use transform streams, wrap the original stream in a new readable stream\n    // and use pull to enqueue each chunk and report progress.\n    const reader = readableStream.getReader();\n    return new ReadableStream({\n      async pull(controller) {\n        const { done, value } = await reader.read();\n        // When no more data needs to be consumed, break the reading\n        if (done || !value) {\n          onEnd?.();\n          // Close the stream\n          controller.close();\n          reader.releaseLock();\n          return;\n        }\n\n        loadedBytes += value?.length ?? 0;\n\n        // Enqueue the next data chunk into our target stream\n        controller.enqueue(value);\n\n        if (onProgress) {\n          onProgress({ loadedBytes });\n        }\n      },\n      cancel(reason?: string) {\n        onEnd?.();\n        return reader.cancel(reason);\n      },\n    });\n  }\n}\n\n/**\n * Create a new HttpClient instance for the browser environment.\n * @internal\n */\nexport function createFetchHttpClient(): HttpClient {\n  return new FetchHttpClient();\n}\n\nfunction isTransformStreamSupported(readableStream: ReadableStream): boolean {\n  return readableStream.pipeThrough !== undefined && self.TransformStream !== undefined;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { HttpClient } from \"./interfaces.js\";\nimport { createFetchHttpClient } from \"./fetchHttpClient.js\";\n\n/**\n * Create the correct HttpClient for the current environment.\n */\nexport function createDefaultHttpClient(): HttpClient {\n  return createFetchHttpClient();\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type {\n  FormDataMap,\n  HttpHeaders,\n  HttpMethods,\n  MultipartRequestBody,\n  PipelineRequest,\n  ProxySettings,\n  RequestBodyType,\n  TransferProgressEvent,\n} from \"./interfaces.js\";\nimport { createHttpHeaders } from \"./httpHeaders.js\";\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\nimport { randomUUID } from \"@azure/core-util\";\nimport type { OperationTracingOptions } from \"@azure/core-tracing\";\n\n/**\n * Settings to initialize a request.\n * Almost equivalent to Partial<PipelineRequest>, but url is mandatory.\n */\nexport interface PipelineRequestOptions {\n  /**\n   * The URL to make the request to.\n   */\n  url: string;\n\n  /**\n   * The HTTP method to use when making the request.\n   */\n  method?: HttpMethods;\n\n  /**\n   * The HTTP headers to use when making the request.\n   */\n  headers?: HttpHeaders;\n\n  /**\n   * The number of milliseconds a request can take before automatically being terminated.\n   * If the request is terminated, an `AbortError` is thrown.\n   * Defaults to 0, which disables the timeout.\n   */\n  timeout?: number;\n\n  /**\n   * If credentials (cookies) should be sent along during an XHR.\n   * Defaults to false.\n   */\n  withCredentials?: boolean;\n\n  /**\n   * A unique identifier for the request. Used for logging and tracing.\n   */\n  requestId?: string;\n\n  /**\n   * The HTTP body content (if any)\n   */\n  body?: RequestBodyType;\n\n  /**\n   * Body for a multipart request.\n   */\n  multipartBody?: MultipartRequestBody;\n\n  /**\n   * To simulate a browser form post\n   */\n  formData?: FormDataMap;\n\n  /**\n   * A list of response status codes whose corresponding PipelineResponse body should be treated as a stream.\n   */\n  streamResponseStatusCodes?: Set<number>;\n\n  /**\n   * BROWSER ONLY\n   *\n   * A browser only option to enable use of the Streams API. If this option is set and streaming is used\n   * (see `streamResponseStatusCodes`), the response will have a property `browserStream` instead of\n   * `blobBody` which will be undefined.\n   *\n   * Default value is false\n   */\n  enableBrowserStreams?: boolean;\n\n  /**\n   * Proxy configuration.\n   */\n  proxySettings?: ProxySettings;\n\n  /**\n   * If the connection should not be reused.\n   */\n  disableKeepAlive?: boolean;\n\n  /**\n   * Used to abort the request later.\n   */\n  abortSignal?: AbortSignalLike;\n\n  /**\n   * Options used to create a span when tracing is enabled.\n   */\n  tracingOptions?: OperationTracingOptions;\n\n  /**\n   * Callback which fires upon upload progress.\n   */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n\n  /** Callback which fires upon download progress. */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n\n  /** Set to true if the request is sent over HTTP instead of HTTPS */\n  allowInsecureConnection?: boolean;\n}\n\nclass PipelineRequestImpl implements PipelineRequest {\n  public url: string;\n  public method: HttpMethods;\n  public headers: HttpHeaders;\n  public timeout: number;\n  public withCredentials: boolean;\n  public body?: RequestBodyType;\n  public multipartBody?: MultipartRequestBody;\n  public formData?: FormDataMap;\n  public streamResponseStatusCodes?: Set<number>;\n  public enableBrowserStreams: boolean;\n\n  public proxySettings?: ProxySettings;\n  public disableKeepAlive: boolean;\n  public abortSignal?: AbortSignalLike;\n  public requestId: string;\n  public tracingOptions?: OperationTracingOptions;\n  public allowInsecureConnection?: boolean;\n  public onUploadProgress?: (progress: TransferProgressEvent) => void;\n  public onDownloadProgress?: (progress: TransferProgressEvent) => void;\n\n  constructor(options: PipelineRequestOptions) {\n    this.url = options.url;\n    this.body = options.body;\n    this.headers = options.headers ?? createHttpHeaders();\n    this.method = options.method ?? \"GET\";\n    this.timeout = options.timeout ?? 0;\n    this.multipartBody = options.multipartBody;\n    this.formData = options.formData;\n    this.disableKeepAlive = options.disableKeepAlive ?? false;\n    this.proxySettings = options.proxySettings;\n    this.streamResponseStatusCodes = options.streamResponseStatusCodes;\n    this.withCredentials = options.withCredentials ?? false;\n    this.abortSignal = options.abortSignal;\n    this.tracingOptions = options.tracingOptions;\n    this.onUploadProgress = options.onUploadProgress;\n    this.onDownloadProgress = options.onDownloadProgress;\n    this.requestId = options.requestId || randomUUID();\n    this.allowInsecureConnection = options.allowInsecureConnection ?? false;\n    this.enableBrowserStreams = options.enableBrowserStreams ?? false;\n  }\n}\n\n/**\n * Creates a new pipeline request with the given options.\n * This method is to allow for the easy setting of default values and not required.\n * @param options - The options to create the request with.\n */\nexport function createPipelineRequest(options: PipelineRequestOptions): PipelineRequest {\n  return new PipelineRequestImpl(options);\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\nimport { delay } from \"./helpers.js\";\n\n/**\n * A function that gets a promise of an access token and allows providing\n * options.\n *\n * @param options - the options to pass to the underlying token provider\n */\nexport type AccessTokenGetter = (\n  scopes: string | string[],\n  options: GetTokenOptions,\n) => Promise<AccessToken>;\n\nexport interface TokenCyclerOptions {\n  /**\n   * The window of time before token expiration during which the token will be\n   * considered unusable due to risk of the token expiring before sending the\n   * request.\n   *\n   * This will only become meaningful if the refresh fails for over\n   * (refreshWindow - forcedRefreshWindow) milliseconds.\n   */\n  forcedRefreshWindowInMs: number;\n  /**\n   * Interval in milliseconds to retry failed token refreshes.\n   */\n  retryIntervalInMs: number;\n  /**\n   * The window of time before token expiration during which\n   * we will attempt to refresh the token.\n   */\n  refreshWindowInMs: number;\n}\n\n// Default options for the cycler if none are provided\nexport const DEFAULT_CYCLER_OPTIONS: TokenCyclerOptions = {\n  forcedRefreshWindowInMs: 1000, // Force waiting for a refresh 1s before the token expires\n  retryIntervalInMs: 3000, // Allow refresh attempts every 3s\n  refreshWindowInMs: 1000 * 60 * 2, // Start refreshing 2m before expiry\n};\n\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - A function that produces a promise of an access token that may fail by returning null.\n * @param retryIntervalInMs - The time (in milliseconds) to wait between retry attempts.\n * @param refreshTimeout - The timestamp after which the refresh attempt will fail, throwing an exception.\n * @returns - A promise that, if it resolves, will resolve with an access token.\n */\nasync function beginRefresh(\n  getAccessToken: () => Promise<AccessToken | null>,\n  retryIntervalInMs: number,\n  refreshTimeout: number,\n): Promise<AccessToken> {\n  // This wrapper handles exceptions gracefully as long as we haven't exceeded\n  // the timeout.\n  async function tryGetAccessToken(): Promise<AccessToken | null> {\n    if (Date.now() < refreshTimeout) {\n      try {\n        return await getAccessToken();\n      } catch {\n        return null;\n      }\n    } else {\n      const finalToken = await getAccessToken();\n\n      // Timeout is up, so throw if it's still null\n      if (finalToken === null) {\n        throw new Error(\"Failed to refresh access token.\");\n      }\n\n      return finalToken;\n    }\n  }\n\n  let token: AccessToken | null = await tryGetAccessToken();\n\n  while (token === null) {\n    await delay(retryIntervalInMs);\n\n    token = await tryGetAccessToken();\n  }\n\n  return token;\n}\n\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nexport function createTokenCycler(\n  credential: TokenCredential,\n  tokenCyclerOptions?: Partial<TokenCyclerOptions>,\n): AccessTokenGetter {\n  let refreshWorker: Promise<AccessToken> | null = null;\n  let token: AccessToken | null = null;\n  let tenantId: string | undefined;\n\n  const options = {\n    ...DEFAULT_CYCLER_OPTIONS,\n    ...tokenCyclerOptions,\n  };\n\n  /**\n   * This little holder defines several predicates that we use to construct\n   * the rules of refreshing the token.\n   */\n  const cycler = {\n    /**\n     * Produces true if a refresh job is currently in progress.\n     */\n    get isRefreshing(): boolean {\n      return refreshWorker !== null;\n    },\n    /**\n     * Produces true if the cycler SHOULD refresh (we are within the refresh\n     * window and not already refreshing)\n     */\n    get shouldRefresh(): boolean {\n      return (\n        !cycler.isRefreshing &&\n        (token?.expiresOnTimestamp ?? 0) - options.refreshWindowInMs < Date.now()\n      );\n    },\n    /**\n     * Produces true if the cycler MUST refresh (null or nearly-expired\n     * token).\n     */\n    get mustRefresh(): boolean {\n      return (\n        token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now()\n      );\n    },\n  };\n\n  /**\n   * Starts a refresh job or returns the existing job if one is already\n   * running.\n   */\n  function refresh(\n    scopes: string | string[],\n    getTokenOptions: GetTokenOptions,\n  ): Promise<AccessToken> {\n    if (!cycler.isRefreshing) {\n      // We bind `scopes` here to avoid passing it around a lot\n      const tryGetAccessToken = (): Promise<AccessToken | null> =>\n        credential.getToken(scopes, getTokenOptions);\n\n      // Take advantage of promise chaining to insert an assignment to `token`\n      // before the refresh can be considered done.\n      refreshWorker = beginRefresh(\n        tryGetAccessToken,\n        options.retryIntervalInMs,\n        // If we don't have a token, then we should timeout immediately\n        token?.expiresOnTimestamp ?? Date.now(),\n      )\n        .then((_token) => {\n          refreshWorker = null;\n          token = _token;\n          tenantId = getTokenOptions.tenantId;\n          return token;\n        })\n        .catch((reason) => {\n          // We also should reset the refresher if we enter a failed state.  All\n          // existing awaiters will throw, but subsequent requests will start a\n          // new retry chain.\n          refreshWorker = null;\n          token = null;\n          tenantId = undefined;\n          throw reason;\n        });\n    }\n\n    return refreshWorker as Promise<AccessToken>;\n  }\n\n  return async (scopes: string | string[], tokenOptions: GetTokenOptions): Promise<AccessToken> => {\n    //\n    // Simple rules:\n    // - If we MUST refresh, then return the refresh task, blocking\n    //   the pipeline until a token is available.\n    // - If we SHOULD refresh, then run refresh but don't return it\n    //   (we can still use the cached token).\n    // - Return the token, since it's fine if we didn't return in\n    //   step 1.\n    //\n\n    const hasClaimChallenge = Boolean(tokenOptions.claims);\n    const tenantIdChanged = tenantId !== tokenOptions.tenantId;\n\n    if (hasClaimChallenge) {\n      // If we've received a claim, we know the existing token isn't valid\n      // We want to clear it so that that refresh worker won't use the old expiration time as a timeout\n      token = null;\n    }\n\n    // If the tenantId passed in token options is different to the one we have\n    // Or if we are in claim challenge and the token was rejected and a new access token need to be issued, we need to\n    // refresh the token with the new tenantId or token.\n    const mustRefresh = tenantIdChanged || hasClaimChallenge || cycler.mustRefresh;\n\n    if (mustRefresh) {\n      return refresh(scopes, tokenOptions);\n    }\n\n    if (cycler.shouldRefresh) {\n      refresh(scopes, tokenOptions);\n    }\n\n    return token as AccessToken;\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\nimport type { AzureLogger } from \"@azure/logger\";\nimport type { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces.js\";\nimport type { PipelinePolicy } from \"../pipeline.js\";\nimport { createTokenCycler } from \"../util/tokenCycler.js\";\nimport { logger as coreLogger } from \"../log.js\";\n\n/**\n * The programmatic identifier of the bearerTokenAuthenticationPolicy.\n */\nexport const bearerTokenAuthenticationPolicyName = \"bearerTokenAuthenticationPolicy\";\n\n/**\n * Options sent to the authorizeRequest callback\n */\nexport interface AuthorizeRequestOptions {\n  /**\n   * The scopes for which the bearer token applies.\n   */\n  scopes: string[];\n  /**\n   * Function that retrieves either a cached access token or a new access token.\n   */\n  getAccessToken: (scopes: string[], options: GetTokenOptions) => Promise<AccessToken | null>;\n  /**\n   * Request that the policy is trying to fulfill.\n   */\n  request: PipelineRequest;\n  /**\n   * A logger, if one was sent through the HTTP pipeline.\n   */\n  logger?: AzureLogger;\n}\n\n/**\n * Options sent to the authorizeRequestOnChallenge callback\n */\nexport interface AuthorizeRequestOnChallengeOptions {\n  /**\n   * The scopes for which the bearer token applies.\n   */\n  scopes: string[];\n  /**\n   * Function that retrieves either a cached access token or a new access token.\n   */\n  getAccessToken: (scopes: string[], options: GetTokenOptions) => Promise<AccessToken | null>;\n  /**\n   * Request that the policy is trying to fulfill.\n   */\n  request: PipelineRequest;\n  /**\n   * Response containing the challenge.\n   */\n  response: PipelineResponse;\n  /**\n   * A logger, if one was sent through the HTTP pipeline.\n   */\n  logger?: AzureLogger;\n}\n\n/**\n * Options to override the processing of [Continuous Access Evaluation](https://docs.microsoft.com/azure/active-directory/conditional-access/concept-continuous-access-evaluation) challenges.\n */\nexport interface ChallengeCallbacks {\n  /**\n   * Allows for the authorization of the main request of this policy before it's sent.\n   */\n  authorizeRequest?(options: AuthorizeRequestOptions): Promise<void>;\n  /**\n   * Allows to handle authentication challenges and to re-authorize the request.\n   * The response containing the challenge is `options.response`.\n   * If this method returns true, the underlying request will be sent once again.\n   * The request may be modified before being sent.\n   */\n  authorizeRequestOnChallenge?(options: AuthorizeRequestOnChallengeOptions): Promise<boolean>;\n}\n\n/**\n * Options to configure the bearerTokenAuthenticationPolicy\n */\nexport interface BearerTokenAuthenticationPolicyOptions {\n  /**\n   * The TokenCredential implementation that can supply the bearer token.\n   */\n  credential?: TokenCredential;\n  /**\n   * The scopes for which the bearer token applies.\n   */\n  scopes: string | string[];\n  /**\n   * Allows for the processing of [Continuous Access Evaluation](https://docs.microsoft.com/azure/active-directory/conditional-access/concept-continuous-access-evaluation) challenges.\n   * If provided, it must contain at least the `authorizeRequestOnChallenge` method.\n   * If provided, after a request is sent, if it has a challenge, it can be processed to re-send the original request with the relevant challenge information.\n   */\n  challengeCallbacks?: ChallengeCallbacks;\n  /**\n   * A logger can be sent for debugging purposes.\n   */\n  logger?: AzureLogger;\n}\n\n/**\n * Default authorize request handler\n */\nasync function defaultAuthorizeRequest(options: AuthorizeRequestOptions): Promise<void> {\n  const { scopes, getAccessToken, request } = options;\n  const getTokenOptions: GetTokenOptions = {\n    abortSignal: request.abortSignal,\n    tracingOptions: request.tracingOptions,\n  };\n  const accessToken = await getAccessToken(scopes, getTokenOptions);\n\n  if (accessToken) {\n    options.request.headers.set(\"Authorization\", `Bearer ${accessToken.token}`);\n  }\n}\n\n/**\n * We will retrieve the challenge only if the response status code was 401,\n * and if the response contained the header \"WWW-Authenticate\" with a non-empty value.\n */\nfunction getChallenge(response: PipelineResponse): string | undefined {\n  const challenge = response.headers.get(\"WWW-Authenticate\");\n  if (response.status === 401 && challenge) {\n    return challenge;\n  }\n  return;\n}\n\n/**\n * A policy that can request a token from a TokenCredential implementation and\n * then apply it to the Authorization header of a request as a Bearer token.\n */\nexport function bearerTokenAuthenticationPolicy(\n  options: BearerTokenAuthenticationPolicyOptions,\n): PipelinePolicy {\n  const { credential, scopes, challengeCallbacks } = options;\n  const logger = options.logger || coreLogger;\n  const callbacks = {\n    authorizeRequest: challengeCallbacks?.authorizeRequest ?? defaultAuthorizeRequest,\n    authorizeRequestOnChallenge: challengeCallbacks?.authorizeRequestOnChallenge,\n    // keep all other properties\n    ...challengeCallbacks,\n  };\n\n  // This function encapsulates the entire process of reliably retrieving the token\n  // The options are left out of the public API until there's demand to configure this.\n  // Remember to extend `BearerTokenAuthenticationPolicyOptions` with `TokenCyclerOptions`\n  // in order to pass through the `options` object.\n  const getAccessToken = credential\n    ? createTokenCycler(credential /* , options */)\n    : () => Promise.resolve(null);\n\n  return {\n    name: bearerTokenAuthenticationPolicyName,\n    /**\n     * If there's no challenge parameter:\n     * - It will try to retrieve the token using the cache, or the credential's getToken.\n     * - Then it will try the next policy with or without the retrieved token.\n     *\n     * It uses the challenge parameters to:\n     * - Skip a first attempt to get the token from the credential if there's no cached token,\n     *   since it expects the token to be retrievable only after the challenge.\n     * - Prepare the outgoing request if the `prepareRequest` method has been provided.\n     * - Send an initial request to receive the challenge if it fails.\n     * - Process a challenge if the response contains it.\n     * - Retrieve a token with the challenge information, then re-send the request.\n     */\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      if (!request.url.toLowerCase().startsWith(\"https://\")) {\n        throw new Error(\n          \"Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.\",\n        );\n      }\n\n      await callbacks.authorizeRequest({\n        scopes: Array.isArray(scopes) ? scopes : [scopes],\n        request,\n        getAccessToken,\n        logger,\n      });\n\n      let response: PipelineResponse;\n      let error: Error | undefined;\n      try {\n        response = await next(request);\n      } catch (err: any) {\n        error = err;\n        response = err.response;\n      }\n\n      if (\n        callbacks.authorizeRequestOnChallenge &&\n        response?.status === 401 &&\n        getChallenge(response)\n      ) {\n        // processes challenge\n        const shouldSendRequest = await callbacks.authorizeRequestOnChallenge({\n          scopes: Array.isArray(scopes) ? scopes : [scopes],\n          request,\n          response,\n          getAccessToken,\n          logger,\n        });\n\n        if (shouldSendRequest) {\n          return next(request);\n        }\n      }\n\n      if (error) {\n        throw error;\n      } else {\n        return response;\n      }\n    },\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { GetTokenOptions } from \"@azure/core-auth\";\n\nfunction createConfigurationErrorMessage(tenantId: string): string {\n  return `The current credential is not configured to acquire tokens for tenant ${tenantId}. To enable acquiring tokens for this tenant add it to the AdditionallyAllowedTenants on the credential options, or add \"*\" to AdditionallyAllowedTenants to allow acquiring tokens for any tenant.`;\n}\n\n/**\n * Of getToken contains a tenantId, this functions allows picking this tenantId as the appropriate for authentication,\n * unless multitenant authentication has been disabled through the AZURE_IDENTITY_DISABLE_MULTITENANTAUTH (on Node.js),\n * or unless the original tenant Id is `adfs`.\n * @internal\n */\nexport function processMultiTenantRequest(\n  tenantId?: string,\n  getTokenOptions?: GetTokenOptions,\n  additionallyAllowedTenantIds: string[] = [],\n): string | undefined {\n  let resolvedTenantId: string | undefined;\n  if (tenantId === \"adfs\") {\n    resolvedTenantId = tenantId;\n  } else {\n    resolvedTenantId = getTokenOptions?.tenantId ?? tenantId;\n  }\n\n  if (\n    tenantId &&\n    resolvedTenantId !== tenantId &&\n    !additionallyAllowedTenantIds.includes(\"*\") &&\n    !additionallyAllowedTenantIds.some((t) => t.localeCompare(resolvedTenantId!) === 0)\n  ) {\n    throw new Error(createConfigurationErrorMessage(tenantId));\n  }\n\n  return resolvedTenantId;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { ALL_TENANTS, DeveloperSignOnClientId } from \"../constants\";\nimport { CredentialLogger, formatError } from \"./logging\";\nexport { processMultiTenantRequest } from \"./processMultiTenantRequest\";\n\n/**\n * @internal\n */\nexport function checkTenantId(logger: CredentialLogger, tenantId: string): void {\n  if (!tenantId.match(/^[0-9a-zA-Z-.]+$/)) {\n    const error = new Error(\n      \"Invalid tenant id provided. You can locate your tenant id by following the instructions listed here: https://learn.microsoft.com/partner-center/find-ids-and-domain-names.\",\n    );\n    logger.info(formatError(\"\", error));\n    throw error;\n  }\n}\n\n/**\n * @internal\n */\nexport function resolveTenantId(\n  logger: CredentialLogger,\n  tenantId?: string,\n  clientId?: string,\n): string {\n  if (tenantId) {\n    checkTenantId(logger, tenantId);\n    return tenantId;\n  }\n  if (!clientId) {\n    clientId = DeveloperSignOnClientId;\n  }\n  if (clientId !== DeveloperSignOnClientId) {\n    return \"common\";\n  }\n  return \"organizations\";\n}\n\n/**\n * @internal\n */\nexport function resolveAdditionallyAllowedTenantIds(\n  additionallyAllowedTenants?: string[],\n): string[] {\n  if (!additionallyAllowedTenants || additionallyAllowedTenants.length === 0) {\n    return [];\n  }\n\n  if (additionallyAllowedTenants.includes(\"*\")) {\n    return ALL_TENANTS;\n  }\n\n  return additionallyAllowedTenants;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  HttpClient,\n  HttpMethods,\n  PipelineOptions,\n  PipelinePolicy,\n  PipelineRequest,\n  PipelineResponse,\n  TransferProgressEvent,\n} from \"@azure/core-rest-pipeline\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { OperationTracingOptions } from \"@azure/core-tracing\";\n\n/**\n * Default key used to access the XML attributes.\n */\nexport const XML_ATTRKEY = \"$\";\n/**\n * Default key used to access the XML value content.\n */\nexport const XML_CHARKEY = \"_\";\n/**\n * Options to govern behavior of xml parser and builder.\n */\nexport interface XmlOptions {\n  /**\n   * indicates the name of the root element in the resulting XML when building XML.\n   */\n  rootName?: string;\n  /**\n   * indicates whether the root element is to be included or not in the output when parsing XML.\n   */\n  includeRoot?: boolean;\n  /**\n   * key used to access the XML value content when parsing XML.\n   */\n  xmlCharKey?: string;\n}\n/**\n * Options to configure serialization/de-serialization behavior.\n */\nexport interface SerializerOptions {\n  /**\n   * Options to configure xml parser/builder behavior.\n   */\n  xml: XmlOptions;\n  /**\n   * Normally additional properties are included in the result object, even if there is no mapper for them.\n   * This flag disables this behavior when true. It is used when parsing headers to avoid polluting the result object.\n   */\n  ignoreUnknownProperties?: boolean;\n}\n\nexport type RequiredSerializerOptions = {\n  [K in keyof SerializerOptions]: Required<SerializerOptions[K]>;\n};\n\n/**\n * A type alias for future proofing.\n */\nexport type OperationRequest = PipelineRequest;\n\n/**\n * Metadata that is used to properly parse a response.\n */\nexport interface OperationRequestInfo {\n  /**\n   * Used to parse the response.\n   */\n  operationSpec?: OperationSpec;\n\n  /**\n   * Used to encode the request.\n   */\n  operationArguments?: OperationArguments;\n\n  /**\n   * A function that returns the proper OperationResponseMap for the given OperationSpec and\n   * PipelineResponse combination. If this is undefined, then a simple status code lookup will\n   * be used.\n   */\n  operationResponseGetter?: (\n    operationSpec: OperationSpec,\n    response: PipelineResponse,\n  ) => undefined | OperationResponseMap;\n\n  /**\n   * Whether or not the PipelineResponse should be deserialized. Defaults to true.\n   */\n  shouldDeserialize?: boolean | ((response: PipelineResponse) => boolean);\n}\n\n/**\n * The base options type for all operations.\n */\nexport interface OperationOptions {\n  /**\n   * The signal which can be used to abort requests.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Options used when creating and sending HTTP requests for this operation.\n   */\n  requestOptions?: OperationRequestOptions;\n  /**\n   * Options used when tracing is enabled.\n   */\n  tracingOptions?: OperationTracingOptions;\n  /**\n   * Options to override serialization/de-serialization behavior.\n   */\n  serializerOptions?: SerializerOptions;\n\n  /**\n   * A function to be called each time a response is received from the server\n   * while performing the requested operation.\n   * May be called multiple times.\n   */\n  onResponse?: RawResponseCallback;\n}\n\n/**\n * Options used when creating and sending HTTP requests for this operation.\n */\nexport interface OperationRequestOptions {\n  /**\n   * User defined custom request headers that\n   * will be applied before the request is sent.\n   */\n  customHeaders?: { [key: string]: string };\n\n  /**\n   * The number of milliseconds a request can take before automatically being terminated.\n   */\n  timeout?: number;\n\n  /**\n   * Callback which fires upon upload progress.\n   */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Callback which fires upon download progress.\n   */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Whether or not the HttpOperationResponse should be deserialized. If this is undefined, then the\n   * HttpOperationResponse should be deserialized.\n   */\n  shouldDeserialize?: boolean | ((response: PipelineResponse) => boolean);\n\n  /**\n   * Set to true if the request is sent over HTTP instead of HTTPS\n   */\n  allowInsecureConnection?: boolean;\n}\n\n/**\n * A collection of properties that apply to a single invocation of an operation.\n */\nexport interface OperationArguments {\n  /**\n   * The parameters that were passed to the operation method.\n   */\n  [parameterName: string]: unknown;\n\n  /**\n   * The optional arguments that are provided to an operation.\n   */\n  options?: OperationOptions;\n}\n\n/**\n * The format that will be used to join an array of values together for a query parameter value.\n */\nexport type QueryCollectionFormat = \"CSV\" | \"SSV\" | \"TSV\" | \"Pipes\" | \"Multi\";\n\n/**\n * Encodes how to reach a particular property on an object.\n */\nexport type ParameterPath = string | string[] | { [propertyName: string]: ParameterPath };\n\n/**\n * A common interface that all Operation parameter's extend.\n */\nexport interface OperationParameter {\n  /**\n   * The path to this parameter's value in OperationArguments or the object that contains paths for\n   * each property's value in OperationArguments.\n   */\n  parameterPath: ParameterPath;\n\n  /**\n   * The mapper that defines how to validate and serialize this parameter's value.\n   */\n  mapper: Mapper;\n}\n\n/**\n * A parameter for an operation that will be substituted into the operation's request URL.\n */\nexport interface OperationURLParameter extends OperationParameter {\n  /**\n   * Whether or not to skip encoding the URL parameter's value before adding it to the URL.\n   */\n  skipEncoding?: boolean;\n}\n\n/**\n * A parameter for an operation that will be added as a query parameter to the operation's HTTP\n * request.\n */\nexport interface OperationQueryParameter extends OperationParameter {\n  /**\n   * Whether or not to skip encoding the query parameter's value before adding it to the URL.\n   */\n  skipEncoding?: boolean;\n\n  /**\n   * If this query parameter's value is a collection, what type of format should the value be\n   * converted to.\n   */\n  collectionFormat?: QueryCollectionFormat;\n}\n\n/**\n * An OperationResponse that can be returned from an operation request for a single status code.\n */\nexport interface OperationResponseMap {\n  /**\n   * The mapper that will be used to deserialize the response headers.\n   */\n  headersMapper?: Mapper;\n\n  /**\n   * The mapper that will be used to deserialize the response body.\n   */\n  bodyMapper?: Mapper;\n\n  /**\n   * Indicates if this is an error response\n   */\n  isError?: boolean;\n}\n\n/**\n * A specification that defines an operation.\n */\nexport interface OperationSpec {\n  /**\n   * The serializer to use in this operation.\n   */\n  readonly serializer: Serializer;\n\n  /**\n   * The HTTP method that should be used by requests for this operation.\n   */\n  readonly httpMethod: HttpMethods;\n\n  /**\n   * The URL that was provided in the service's specification. This will still have all of the URL\n   * template variables in it. If this is not provided when the OperationSpec is created, then it\n   * will be populated by a \"baseUri\" property on the ServiceClient.\n   */\n  readonly baseUrl?: string;\n\n  /**\n   * The fixed path for this operation's URL. This will still have all of the URL template variables\n   * in it.\n   */\n  readonly path?: string;\n\n  /**\n   * The content type of the request body. This value will be used as the \"Content-Type\" header if\n   * it is provided.\n   */\n  readonly contentType?: string;\n\n  /**\n   * The media type of the request body.\n   * This value can be used to aide in serialization if it is provided.\n   */\n  readonly mediaType?:\n    | \"json\"\n    | \"xml\"\n    | \"form\"\n    | \"binary\"\n    | \"multipart\"\n    | \"text\"\n    | \"unknown\"\n    | string;\n  /**\n   * The parameter that will be used to construct the HTTP request's body.\n   */\n  readonly requestBody?: OperationParameter;\n\n  /**\n   * Whether or not this operation uses XML request and response bodies.\n   */\n  readonly isXML?: boolean;\n\n  /**\n   * The parameters to the operation method that will be substituted into the constructed URL.\n   */\n  readonly urlParameters?: ReadonlyArray<OperationURLParameter>;\n\n  /**\n   * The parameters to the operation method that will be added to the constructed URL's query.\n   */\n  readonly queryParameters?: ReadonlyArray<OperationQueryParameter>;\n\n  /**\n   * The parameters to the operation method that will be converted to headers on the operation's\n   * HTTP request.\n   */\n  readonly headerParameters?: ReadonlyArray<OperationParameter>;\n\n  /**\n   * The parameters to the operation method that will be used to create a formdata body for the\n   * operation's HTTP request.\n   */\n  readonly formDataParameters?: ReadonlyArray<OperationParameter>;\n\n  /**\n   * The different types of responses that this operation can return based on what status code is\n   * returned.\n   */\n  readonly responses: { [responseCode: string]: OperationResponseMap };\n}\n\n/**\n * Wrapper object for http request and response. Deserialized object is stored in\n * the `parsedBody` property when the response body is received in JSON or XML.\n */\nexport interface FullOperationResponse extends PipelineResponse {\n  /**\n   * The parsed HTTP response headers.\n   */\n  parsedHeaders?: { [key: string]: unknown };\n\n  /**\n   * The response body as parsed JSON or XML.\n   */\n  parsedBody?: any;\n\n  /**\n   * The request that generated the response.\n   */\n  request: OperationRequest;\n}\n\n/**\n * A function to be called each time a response is received from the server\n * while performing the requested operation.\n * May be called multiple times.\n */\nexport type RawResponseCallback = (\n  rawResponse: FullOperationResponse,\n  flatResponse: unknown,\n  error?: unknown,\n) => void;\n\n/**\n * Used to map raw response objects to final shapes.\n * Helps packing and unpacking Dates and other encoded types that are not intrinsic to JSON.\n * Also allows pulling values from headers, as well as inserting default values and constants.\n */\nexport interface Serializer {\n  /**\n   * The provided model mapper.\n   */\n  readonly modelMappers: { [key: string]: any };\n  /**\n   * Whether the contents are XML or not.\n   */\n  readonly isXML: boolean;\n\n  /**\n   * Validates constraints, if any. This function will throw if the provided value does not respect those constraints.\n   * @param mapper - The definition of data models.\n   * @param value - The value.\n   * @param objectName - Name of the object. Used in the error messages.\n   * @deprecated Removing the constraints validation on client side.\n   */\n  validateConstraints(mapper: Mapper, value: any, objectName: string): void;\n\n  /**\n   * Serialize the given object based on its metadata defined in the mapper.\n   *\n   * @param mapper - The mapper which defines the metadata of the serializable object.\n   * @param object - A valid Javascript object to be serialized.\n   * @param objectName - Name of the serialized object.\n   * @param options - additional options to deserialization.\n   * @returns A valid serialized Javascript object.\n   */\n  serialize(mapper: Mapper, object: any, objectName?: string, options?: SerializerOptions): any;\n\n  /**\n   * Deserialize the given object based on its metadata defined in the mapper.\n   *\n   * @param mapper - The mapper which defines the metadata of the serializable object.\n   * @param responseBody - A valid Javascript entity to be deserialized.\n   * @param objectName - Name of the deserialized object.\n   * @param options - Controls behavior of XML parser and builder.\n   * @returns A valid deserialized Javascript object.\n   */\n  deserialize(\n    mapper: Mapper,\n    responseBody: any,\n    objectName: string,\n    options?: SerializerOptions,\n  ): any;\n}\n\n/**\n * Description of various value constraints such as integer ranges and string regex.\n */\nexport interface MapperConstraints {\n  /**\n   * The value should be less than or equal to the `InclusiveMaximum` value.\n   */\n  InclusiveMaximum?: number;\n  /**\n   * The value should be less than the `ExclusiveMaximum` value.\n   */\n  ExclusiveMaximum?: number;\n  /**\n   * The value should be greater than or equal to the `InclusiveMinimum` value.\n   */\n  InclusiveMinimum?: number;\n  /**\n   * The value should be greater than the `InclusiveMinimum` value.\n   */\n  ExclusiveMinimum?: number;\n  /**\n   * The length should be smaller than the `MaxLength`.\n   */\n  MaxLength?: number;\n  /**\n   * The length should be bigger than the `MinLength`.\n   */\n  MinLength?: number;\n  /**\n   * The value must match the pattern.\n   */\n  Pattern?: RegExp;\n  /**\n   * The value must contain fewer items than the MaxItems value.\n   */\n  MaxItems?: number;\n  /**\n   * The value must contain more items than the `MinItems` value.\n   */\n  MinItems?: number;\n  /**\n   * The value must contain only unique items.\n   */\n  UniqueItems?: true;\n  /**\n   * The value should be exactly divisible by the `MultipleOf` value.\n   */\n  MultipleOf?: number;\n}\n\n/**\n * Type of the mapper. Includes known mappers.\n */\nexport type MapperType =\n  | SimpleMapperType\n  | CompositeMapperType\n  | SequenceMapperType\n  | DictionaryMapperType\n  | EnumMapperType;\n\n/**\n * The type of a simple mapper.\n */\nexport interface SimpleMapperType {\n  /**\n   * Name of the type of the property.\n   */\n  name:\n    | \"Base64Url\"\n    | \"Boolean\"\n    | \"ByteArray\"\n    | \"Date\"\n    | \"DateTime\"\n    | \"DateTimeRfc1123\"\n    | \"Object\"\n    | \"Stream\"\n    | \"String\"\n    | \"TimeSpan\"\n    | \"UnixTime\"\n    | \"Uuid\"\n    | \"Number\"\n    | \"any\";\n}\n\n/**\n * Helps build a mapper that describes how to map a set of properties of an object based on other mappers.\n *\n * Only one of the following properties should be present: `className`, `modelProperties` and `additionalProperties`.\n */\nexport interface CompositeMapperType {\n  /**\n   * Name of the composite mapper type.\n   */\n  name: \"Composite\";\n\n  /**\n   * Use `className` to reference another type definition.\n   */\n  className?: string;\n\n  /**\n   * Use `modelProperties` when the reference to the other type has been resolved.\n   */\n  modelProperties?: { [propertyName: string]: Mapper };\n\n  /**\n   * Used when a model has `additionalProperties: true`. Allows the generic processing of unnamed model properties on the response object.\n   */\n  additionalProperties?: Mapper;\n\n  /**\n   * The name of the top-most parent scheme, the one that has no parents.\n   */\n  uberParent?: string;\n\n  /**\n   * A polymorphic discriminator.\n   */\n  polymorphicDiscriminator?: PolymorphicDiscriminator;\n}\n\n/**\n * Helps build a mapper that describes how to parse a sequence of mapped values.\n */\nexport interface SequenceMapperType {\n  /**\n   * Name of the sequence type mapper.\n   */\n  name: \"Sequence\";\n  /**\n   * The mapper to use to map each one of the properties of the sequence.\n   */\n  element: Mapper;\n}\n\n/**\n * Helps build a mapper that describes how to parse a dictionary of mapped values.\n */\nexport interface DictionaryMapperType {\n  /**\n   * Name of the sequence type mapper.\n   */\n  name: \"Dictionary\";\n  /**\n   * The mapper to use to map the value of each property in the dictionary.\n   */\n  value: Mapper;\n}\n\n/**\n * Helps build a mapper that describes how to parse an enum value.\n */\nexport interface EnumMapperType {\n  /**\n   * Name of the enum type mapper.\n   */\n  name: \"Enum\";\n  /**\n   * Values allowed by this mapper.\n   */\n  allowedValues: any[];\n}\n\n/**\n * The base definition of a mapper. Can be used for XML and plain JavaScript objects.\n */\nexport interface BaseMapper {\n  /**\n   * Name for the xml element\n   */\n  xmlName?: string;\n  /**\n   * Xml element namespace\n   */\n  xmlNamespace?: string;\n  /**\n   * Xml element namespace prefix\n   */\n  xmlNamespacePrefix?: string;\n  /**\n   * Determines if the current property should be serialized as an attribute of the parent xml element\n   */\n  xmlIsAttribute?: boolean;\n  /**\n   * Determines if the current property should be serialized as the inner content of the xml element\n   */\n  xmlIsMsText?: boolean;\n  /**\n   * Name for the xml elements when serializing an array\n   */\n  xmlElementName?: string;\n  /**\n   * Whether or not the current property should have a wrapping XML element\n   */\n  xmlIsWrapped?: boolean;\n  /**\n   * Whether or not the current property is readonly\n   */\n  readOnly?: boolean;\n  /**\n   * Whether or not the current property is a constant\n   */\n  isConstant?: boolean;\n  /**\n   * Whether or not the current property is required\n   */\n  required?: boolean;\n  /**\n   * Whether or not the current property allows mull as a value\n   */\n  nullable?: boolean;\n  /**\n   * The name to use when serializing\n   */\n  serializedName?: string;\n  /**\n   * Type of the mapper\n   */\n  type: MapperType;\n  /**\n   * Default value when one is not explicitly provided\n   */\n  defaultValue?: any;\n  /**\n   * Constraints to test the current value against\n   */\n  constraints?: MapperConstraints;\n}\n\n/**\n * Mappers are definitions of the data models used in the library.\n * These data models are part of the Operation or Client definitions in the responses or parameters.\n */\nexport type Mapper = BaseMapper | CompositeMapper | SequenceMapper | DictionaryMapper | EnumMapper;\n\n/**\n * Used to disambiguate discriminated type unions.\n * For example, if response can have many shapes but also includes a 'kind' field (or similar),\n * that field can be used to determine how to deserialize the response to the correct type.\n */\nexport interface PolymorphicDiscriminator {\n  /**\n   * Name of the discriminant property in the original JSON payload, e.g. `@odata.kind`.\n   */\n  serializedName: string;\n  /**\n   * Name to use on the resulting object instead of the original property name.\n   * Useful since the JSON property could be difficult to work with.\n   * For example: For a field received as `@odata.kind`, the final object could instead include a property simply named `kind`.\n   */\n  clientName: string;\n  /**\n   * It may contain any other property.\n   */\n  [key: string]: string;\n}\n\n/**\n * A mapper composed of other mappers.\n */\nexport interface CompositeMapper extends BaseMapper {\n  /**\n   * The type descriptor of the `CompositeMapper`.\n   */\n  type: CompositeMapperType;\n}\n\n/**\n * A mapper describing arrays.\n */\nexport interface SequenceMapper extends BaseMapper {\n  /**\n   * The type descriptor of the `SequenceMapper`.\n   */\n  type: SequenceMapperType;\n}\n\n/**\n * A mapper describing plain JavaScript objects used as key/value pairs.\n */\nexport interface DictionaryMapper extends BaseMapper {\n  /**\n   * The type descriptor of the `DictionaryMapper`.\n   */\n  type: DictionaryMapperType;\n  /**\n   * Optionally, a prefix to add to the header collection.\n   */\n  headerCollectionPrefix?: string;\n}\n\n/**\n * A mapper describing an enum value.\n */\nexport interface EnumMapper extends BaseMapper {\n  /**\n   * The type descriptor of the `EnumMapper`.\n   */\n  type: EnumMapperType;\n}\n\nexport interface UrlParameterValue {\n  value: string;\n  skipUrlEncoding: boolean;\n}\n\n/**\n * Configuration for creating a new Tracing Span\n */\nexport interface SpanConfig {\n  /**\n   * Package name prefix\n   */\n  packagePrefix: string;\n  /**\n   * Service namespace\n   */\n  namespace: string;\n}\n\n/**\n * Used to configure additional policies added to the pipeline at construction.\n */\nexport interface AdditionalPolicyConfig {\n  /**\n   * A policy to be added.\n   */\n  policy: PipelinePolicy;\n  /**\n   * Determines if this policy be applied before or after retry logic.\n   * Only use `perRetry` if you need to modify the request again\n   * each time the operation is retried due to retryable service\n   * issues.\n   */\n  position: \"perCall\" | \"perRetry\";\n}\n\n/**\n * The common set of options that high level clients are expected to expose.\n */\nexport interface CommonClientOptions extends PipelineOptions {\n  /**\n   * The HttpClient that will be used to send HTTP requests.\n   */\n  httpClient?: HttpClient;\n  /**\n   * Set to true if the request is sent over HTTP instead of HTTPS\n   */\n  allowInsecureConnection?: boolean;\n  /**\n   * Additional policies to include in the HTTP pipeline.\n   */\n  additionalPolicies?: AdditionalPolicyConfig[];\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { CompositeMapper, FullOperationResponse, OperationResponseMap } from \"./interfaces.js\";\n\n/**\n * The union of all possible types for a primitive response body.\n * @internal\n */\nexport type BodyPrimitive = number | string | boolean | Date | Uint8Array | undefined | null;\n\n/**\n * A type guard for a primitive response body.\n * @param value - Value to test\n *\n * @internal\n */\nexport function isPrimitiveBody(value: unknown, mapperTypeName?: string): value is BodyPrimitive {\n  return (\n    mapperTypeName !== \"Composite\" &&\n    mapperTypeName !== \"Dictionary\" &&\n    (typeof value === \"string\" ||\n      typeof value === \"number\" ||\n      typeof value === \"boolean\" ||\n      mapperTypeName?.match(/^(Date|DateTime|DateTimeRfc1123|UnixTime|ByteArray|Base64Url)$/i) !==\n        null ||\n      value === undefined ||\n      value === null)\n  );\n}\n\nconst validateISODuration =\n  /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n\n/**\n * Returns true if the given string is in ISO 8601 format.\n * @param value - The value to be validated for ISO 8601 duration format.\n * @internal\n */\nexport function isDuration(value: string): boolean {\n  return validateISODuration.test(value);\n}\n\nconst validUuidRegex =\n  /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;\n\n/**\n * Returns true if the provided uuid is valid.\n *\n * @param uuid - The uuid that needs to be validated.\n *\n * @internal\n */\nexport function isValidUuid(uuid: string): boolean {\n  return validUuidRegex.test(uuid);\n}\n\n/**\n * Representation of parsed response headers and body coupled with information\n * about how to map them:\n * - whether the response body should be wrapped (typically if its type is primitive).\n * - whether the response is nullable so it can be null if the combination of\n *   the headers and the body is empty.\n */\ninterface ResponseObjectWithMetadata {\n  /** whether the mapper allows nullable body */\n  hasNullableType: boolean;\n  /** whether the response's body should be wrapped */\n  shouldWrapBody: boolean;\n  /** parsed headers of the response */\n  headers:\n    | {\n        [key: string]: unknown;\n      }\n    | undefined;\n  /** parsed body of the response */\n  body: any;\n}\n\n/**\n * Maps the response as follows:\n * - wraps the response body if needed (typically if its type is primitive).\n * - returns null if the combination of the headers and the body is empty.\n * - otherwise, returns the combination of the headers and the body.\n *\n * @param responseObject - a representation of the parsed response\n * @returns the response that will be returned to the user which can be null and/or wrapped\n *\n * @internal\n */\nfunction handleNullableResponseAndWrappableBody(\n  responseObject: ResponseObjectWithMetadata,\n): unknown | null {\n  const combinedHeadersAndBody = {\n    ...responseObject.headers,\n    ...responseObject.body,\n  };\n  if (\n    responseObject.hasNullableType &&\n    Object.getOwnPropertyNames(combinedHeadersAndBody).length === 0\n  ) {\n    return responseObject.shouldWrapBody ? { body: null } : null;\n  } else {\n    return responseObject.shouldWrapBody\n      ? {\n          ...responseObject.headers,\n          body: responseObject.body,\n        }\n      : combinedHeadersAndBody;\n  }\n}\n\n/**\n * Take a `FullOperationResponse` and turn it into a flat\n * response object to hand back to the consumer.\n * @param fullResponse - The processed response from the operation request\n * @param responseSpec - The response map from the OperationSpec\n *\n * @internal\n */\nexport function flattenResponse(\n  fullResponse: FullOperationResponse,\n  responseSpec: OperationResponseMap | undefined,\n): unknown {\n  const parsedHeaders = fullResponse.parsedHeaders;\n\n  // head methods never have a body, but we return a boolean set to body property\n  // to indicate presence/absence of the resource\n  if (fullResponse.request.method === \"HEAD\") {\n    return {\n      ...parsedHeaders,\n      body: fullResponse.parsedBody,\n    };\n  }\n  const bodyMapper = responseSpec && responseSpec.bodyMapper;\n  const isNullable = Boolean(bodyMapper?.nullable);\n  const expectedBodyTypeName = bodyMapper?.type.name;\n\n  /** If the body is asked for, we look at the expected body type to handle it */\n  if (expectedBodyTypeName === \"Stream\") {\n    return {\n      ...parsedHeaders,\n      blobBody: fullResponse.blobBody,\n      readableStreamBody: fullResponse.readableStreamBody,\n    };\n  }\n\n  const modelProperties =\n    (expectedBodyTypeName === \"Composite\" &&\n      (bodyMapper as CompositeMapper).type.modelProperties) ||\n    {};\n  const isPageableResponse = Object.keys(modelProperties).some(\n    (k) => modelProperties[k].serializedName === \"\",\n  );\n  if (expectedBodyTypeName === \"Sequence\" || isPageableResponse) {\n    const arrayResponse: { [key: string]: unknown } =\n      fullResponse.parsedBody ?? ([] as unknown as { [key: string]: unknown });\n\n    for (const key of Object.keys(modelProperties)) {\n      if (modelProperties[key].serializedName) {\n        arrayResponse[key] = fullResponse.parsedBody?.[key];\n      }\n    }\n\n    if (parsedHeaders) {\n      for (const key of Object.keys(parsedHeaders)) {\n        arrayResponse[key] = parsedHeaders[key];\n      }\n    }\n    return isNullable &&\n      !fullResponse.parsedBody &&\n      !parsedHeaders &&\n      Object.getOwnPropertyNames(modelProperties).length === 0\n      ? null\n      : arrayResponse;\n  }\n\n  return handleNullableResponseAndWrappableBody({\n    body: fullResponse.parsedBody,\n    headers: parsedHeaders,\n    hasNullableType: isNullable,\n    shouldWrapBody: isPrimitiveBody(fullResponse.parsedBody, expectedBodyTypeName),\n  });\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport * as base64 from \"./base64.js\";\nimport {\n  BaseMapper,\n  CompositeMapper,\n  DictionaryMapper,\n  EnumMapper,\n  Mapper,\n  MapperConstraints,\n  PolymorphicDiscriminator,\n  RequiredSerializerOptions,\n  SequenceMapper,\n  Serializer,\n  SerializerOptions,\n  XML_ATTRKEY,\n  XML_CHARKEY,\n} from \"./interfaces.js\";\nimport { isDuration, isValidUuid } from \"./utils.js\";\n\nclass SerializerImpl implements Serializer {\n  constructor(\n    public readonly modelMappers: { [key: string]: any } = {},\n    public readonly isXML: boolean = false,\n  ) {}\n\n  /**\n   * @deprecated Removing the constraints validation on client side.\n   */\n  validateConstraints(mapper: Mapper, value: any, objectName: string): void {\n    const failValidation = (\n      constraintName: keyof MapperConstraints,\n      constraintValue: any,\n    ): never => {\n      throw new Error(\n        `\"${objectName}\" with value \"${value}\" should satisfy the constraint \"${constraintName}\": ${constraintValue}.`,\n      );\n    };\n    if (mapper.constraints && value !== undefined && value !== null) {\n      const {\n        ExclusiveMaximum,\n        ExclusiveMinimum,\n        InclusiveMaximum,\n        InclusiveMinimum,\n        MaxItems,\n        MaxLength,\n        MinItems,\n        MinLength,\n        MultipleOf,\n        Pattern,\n        UniqueItems,\n      } = mapper.constraints;\n      if (ExclusiveMaximum !== undefined && value >= ExclusiveMaximum) {\n        failValidation(\"ExclusiveMaximum\", ExclusiveMaximum);\n      }\n      if (ExclusiveMinimum !== undefined && value <= ExclusiveMinimum) {\n        failValidation(\"ExclusiveMinimum\", ExclusiveMinimum);\n      }\n      if (InclusiveMaximum !== undefined && value > InclusiveMaximum) {\n        failValidation(\"InclusiveMaximum\", InclusiveMaximum);\n      }\n      if (InclusiveMinimum !== undefined && value < InclusiveMinimum) {\n        failValidation(\"InclusiveMinimum\", InclusiveMinimum);\n      }\n      if (MaxItems !== undefined && value.length > MaxItems) {\n        failValidation(\"MaxItems\", MaxItems);\n      }\n      if (MaxLength !== undefined && value.length > MaxLength) {\n        failValidation(\"MaxLength\", MaxLength);\n      }\n      if (MinItems !== undefined && value.length < MinItems) {\n        failValidation(\"MinItems\", MinItems);\n      }\n      if (MinLength !== undefined && value.length < MinLength) {\n        failValidation(\"MinLength\", MinLength);\n      }\n      if (MultipleOf !== undefined && value % MultipleOf !== 0) {\n        failValidation(\"MultipleOf\", MultipleOf);\n      }\n      if (Pattern) {\n        const pattern: RegExp = typeof Pattern === \"string\" ? new RegExp(Pattern) : Pattern;\n        if (typeof value !== \"string\" || value.match(pattern) === null) {\n          failValidation(\"Pattern\", Pattern);\n        }\n      }\n      if (\n        UniqueItems &&\n        value.some((item: any, i: number, ar: Array<any>) => ar.indexOf(item) !== i)\n      ) {\n        failValidation(\"UniqueItems\", UniqueItems);\n      }\n    }\n  }\n\n  /**\n   * Serialize the given object based on its metadata defined in the mapper\n   *\n   * @param mapper - The mapper which defines the metadata of the serializable object\n   *\n   * @param object - A valid Javascript object to be serialized\n   *\n   * @param objectName - Name of the serialized object\n   *\n   * @param options - additional options to serialization\n   *\n   * @returns A valid serialized Javascript object\n   */\n  serialize(\n    mapper: Mapper,\n    object: any,\n    objectName?: string,\n    options: SerializerOptions = { xml: {} },\n  ): any {\n    const updatedOptions: RequiredSerializerOptions = {\n      xml: {\n        rootName: options.xml.rootName ?? \"\",\n        includeRoot: options.xml.includeRoot ?? false,\n        xmlCharKey: options.xml.xmlCharKey ?? XML_CHARKEY,\n      },\n    };\n    let payload: any = {};\n    const mapperType = mapper.type.name as string;\n    if (!objectName) {\n      objectName = mapper.serializedName!;\n    }\n    if (mapperType.match(/^Sequence$/i) !== null) {\n      payload = [];\n    }\n\n    if (mapper.isConstant) {\n      object = mapper.defaultValue;\n    }\n\n    // This table of allowed values should help explain\n    // the mapper.required and mapper.nullable properties.\n    // X means \"neither undefined or null are allowed\".\n    //           || required\n    //           || true      | false\n    //  nullable || ==========================\n    //      true || null      | undefined/null\n    //     false || X         | undefined\n    // undefined || X         | undefined/null\n\n    const { required, nullable } = mapper;\n\n    if (required && nullable && object === undefined) {\n      throw new Error(`${objectName} cannot be undefined.`);\n    }\n    if (required && !nullable && (object === undefined || object === null)) {\n      throw new Error(`${objectName} cannot be null or undefined.`);\n    }\n    if (!required && nullable === false && object === null) {\n      throw new Error(`${objectName} cannot be null.`);\n    }\n\n    if (object === undefined || object === null) {\n      payload = object;\n    } else {\n      if (mapperType.match(/^any$/i) !== null) {\n        payload = object;\n      } else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/i) !== null) {\n        payload = serializeBasicTypes(mapperType, objectName, object);\n      } else if (mapperType.match(/^Enum$/i) !== null) {\n        const enumMapper = mapper as EnumMapper;\n        payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);\n      } else if (\n        mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/i) !== null\n      ) {\n        payload = serializeDateTypes(mapperType, object, objectName);\n      } else if (mapperType.match(/^ByteArray$/i) !== null) {\n        payload = serializeByteArrayType(objectName, object);\n      } else if (mapperType.match(/^Base64Url$/i) !== null) {\n        payload = serializeBase64UrlType(objectName, object);\n      } else if (mapperType.match(/^Sequence$/i) !== null) {\n        payload = serializeSequenceType(\n          this,\n          mapper as SequenceMapper,\n          object,\n          objectName,\n          Boolean(this.isXML),\n          updatedOptions,\n        );\n      } else if (mapperType.match(/^Dictionary$/i) !== null) {\n        payload = serializeDictionaryType(\n          this,\n          mapper as DictionaryMapper,\n          object,\n          objectName,\n          Boolean(this.isXML),\n          updatedOptions,\n        );\n      } else if (mapperType.match(/^Composite$/i) !== null) {\n        payload = serializeCompositeType(\n          this,\n          mapper as CompositeMapper,\n          object,\n          objectName,\n          Boolean(this.isXML),\n          updatedOptions,\n        );\n      }\n    }\n    return payload;\n  }\n\n  /**\n   * Deserialize the given object based on its metadata defined in the mapper\n   *\n   * @param mapper - The mapper which defines the metadata of the serializable object\n   *\n   * @param responseBody - A valid Javascript entity to be deserialized\n   *\n   * @param objectName - Name of the deserialized object\n   *\n   * @param options - Controls behavior of XML parser and builder.\n   *\n   * @returns A valid deserialized Javascript object\n   */\n  deserialize(\n    mapper: Mapper,\n    responseBody: any,\n    objectName: string,\n    options: SerializerOptions = { xml: {} },\n  ): any {\n    const updatedOptions: RequiredSerializerOptions = {\n      xml: {\n        rootName: options.xml.rootName ?? \"\",\n        includeRoot: options.xml.includeRoot ?? false,\n        xmlCharKey: options.xml.xmlCharKey ?? XML_CHARKEY,\n      },\n      ignoreUnknownProperties: options.ignoreUnknownProperties ?? false,\n    };\n    if (responseBody === undefined || responseBody === null) {\n      if (this.isXML && mapper.type.name === \"Sequence\" && !mapper.xmlIsWrapped) {\n        // Edge case for empty XML non-wrapped lists. xml2js can't distinguish\n        // between the list being empty versus being missing,\n        // so let's do the more user-friendly thing and return an empty list.\n        responseBody = [];\n      }\n      // specifically check for undefined as default value can be a falsey value `0, \"\", false, null`\n      if (mapper.defaultValue !== undefined) {\n        responseBody = mapper.defaultValue;\n      }\n      return responseBody;\n    }\n\n    let payload: any;\n    const mapperType = mapper.type.name;\n    if (!objectName) {\n      objectName = mapper.serializedName!;\n    }\n\n    if (mapperType.match(/^Composite$/i) !== null) {\n      payload = deserializeCompositeType(\n        this,\n        mapper as CompositeMapper,\n        responseBody,\n        objectName,\n        updatedOptions,\n      );\n    } else {\n      if (this.isXML) {\n        const xmlCharKey = updatedOptions.xml.xmlCharKey;\n        /**\n         * If the mapper specifies this as a non-composite type value but the responseBody contains\n         * both header (\"$\" i.e., XML_ATTRKEY) and body (\"#\" i.e., XML_CHARKEY) properties,\n         * then just reduce the responseBody value to the body (\"#\" i.e., XML_CHARKEY) property.\n         */\n        if (responseBody[XML_ATTRKEY] !== undefined && responseBody[xmlCharKey] !== undefined) {\n          responseBody = responseBody[xmlCharKey];\n        }\n      }\n\n      if (mapperType.match(/^Number$/i) !== null) {\n        payload = parseFloat(responseBody);\n        if (isNaN(payload)) {\n          payload = responseBody;\n        }\n      } else if (mapperType.match(/^Boolean$/i) !== null) {\n        if (responseBody === \"true\") {\n          payload = true;\n        } else if (responseBody === \"false\") {\n          payload = false;\n        } else {\n          payload = responseBody;\n        }\n      } else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/i) !== null) {\n        payload = responseBody;\n      } else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/i) !== null) {\n        payload = new Date(responseBody);\n      } else if (mapperType.match(/^UnixTime$/i) !== null) {\n        payload = unixTimeToDate(responseBody);\n      } else if (mapperType.match(/^ByteArray$/i) !== null) {\n        payload = base64.decodeString(responseBody);\n      } else if (mapperType.match(/^Base64Url$/i) !== null) {\n        payload = base64UrlToByteArray(responseBody);\n      } else if (mapperType.match(/^Sequence$/i) !== null) {\n        payload = deserializeSequenceType(\n          this,\n          mapper as SequenceMapper,\n          responseBody,\n          objectName,\n          updatedOptions,\n        );\n      } else if (mapperType.match(/^Dictionary$/i) !== null) {\n        payload = deserializeDictionaryType(\n          this,\n          mapper as DictionaryMapper,\n          responseBody,\n          objectName,\n          updatedOptions,\n        );\n      }\n    }\n\n    if (mapper.isConstant) {\n      payload = mapper.defaultValue;\n    }\n\n    return payload;\n  }\n}\n\n/**\n * Method that creates and returns a Serializer.\n * @param modelMappers - Known models to map\n * @param isXML - If XML should be supported\n */\nexport function createSerializer(\n  modelMappers: { [key: string]: any } = {},\n  isXML: boolean = false,\n): Serializer {\n  return new SerializerImpl(modelMappers, isXML);\n}\n\nfunction trimEnd(str: string, ch: string): string {\n  let len = str.length;\n  while (len - 1 >= 0 && str[len - 1] === ch) {\n    --len;\n  }\n  return str.substr(0, len);\n}\n\nfunction bufferToBase64Url(buffer: Uint8Array): string | undefined {\n  if (!buffer) {\n    return undefined;\n  }\n  if (!(buffer instanceof Uint8Array)) {\n    throw new Error(`Please provide an input of type Uint8Array for converting to Base64Url.`);\n  }\n  // Uint8Array to Base64.\n  const str = base64.encodeByteArray(buffer);\n  // Base64 to Base64Url.\n  return trimEnd(str, \"=\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\n\nfunction base64UrlToByteArray(str: string): Uint8Array | undefined {\n  if (!str) {\n    return undefined;\n  }\n  if (str && typeof str.valueOf() !== \"string\") {\n    throw new Error(\"Please provide an input of type string for converting to Uint8Array\");\n  }\n  // Base64Url to Base64.\n  str = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  // Base64 to Uint8Array.\n  return base64.decodeString(str);\n}\n\nfunction splitSerializeName(prop: string | undefined): string[] {\n  const classes: string[] = [];\n  let partialclass = \"\";\n  if (prop) {\n    const subwords = prop.split(\".\");\n\n    for (const item of subwords) {\n      if (item.charAt(item.length - 1) === \"\\\\\") {\n        partialclass += item.substr(0, item.length - 1) + \".\";\n      } else {\n        partialclass += item;\n        classes.push(partialclass);\n        partialclass = \"\";\n      }\n    }\n  }\n\n  return classes;\n}\n\nfunction dateToUnixTime(d: string | Date): number | undefined {\n  if (!d) {\n    return undefined;\n  }\n\n  if (typeof d.valueOf() === \"string\") {\n    d = new Date(d as string);\n  }\n  return Math.floor((d as Date).getTime() / 1000);\n}\n\nfunction unixTimeToDate(n: number): Date | undefined {\n  if (!n) {\n    return undefined;\n  }\n  return new Date(n * 1000);\n}\n\nfunction serializeBasicTypes(typeName: string, objectName: string, value: any): any {\n  if (value !== null && value !== undefined) {\n    if (typeName.match(/^Number$/i) !== null) {\n      if (typeof value !== \"number\") {\n        throw new Error(`${objectName} with value ${value} must be of type number.`);\n      }\n    } else if (typeName.match(/^String$/i) !== null) {\n      if (typeof value.valueOf() !== \"string\") {\n        throw new Error(`${objectName} with value \"${value}\" must be of type string.`);\n      }\n    } else if (typeName.match(/^Uuid$/i) !== null) {\n      if (!(typeof value.valueOf() === \"string\" && isValidUuid(value))) {\n        throw new Error(\n          `${objectName} with value \"${value}\" must be of type string and a valid uuid.`,\n        );\n      }\n    } else if (typeName.match(/^Boolean$/i) !== null) {\n      if (typeof value !== \"boolean\") {\n        throw new Error(`${objectName} with value ${value} must be of type boolean.`);\n      }\n    } else if (typeName.match(/^Stream$/i) !== null) {\n      const objectType = typeof value;\n      if (\n        objectType !== \"string\" &&\n        typeof value.pipe !== \"function\" && // NodeJS.ReadableStream\n        typeof value.tee !== \"function\" && // browser ReadableStream\n        !(value instanceof ArrayBuffer) &&\n        !ArrayBuffer.isView(value) &&\n        // File objects count as a type of Blob, so we want to use instanceof explicitly\n        !((typeof Blob === \"function\" || typeof Blob === \"object\") && value instanceof Blob) &&\n        objectType !== \"function\"\n      ) {\n        throw new Error(\n          `${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, ReadableStream, or () => ReadableStream.`,\n        );\n      }\n    }\n  }\n  return value;\n}\n\nfunction serializeEnumType(objectName: string, allowedValues: Array<any>, value: any): any {\n  if (!allowedValues) {\n    throw new Error(\n      `Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`,\n    );\n  }\n  const isPresent = allowedValues.some((item) => {\n    if (typeof item.valueOf() === \"string\") {\n      return item.toLowerCase() === value.toLowerCase();\n    }\n    return item === value;\n  });\n  if (!isPresent) {\n    throw new Error(\n      `${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(\n        allowedValues,\n      )}.`,\n    );\n  }\n  return value;\n}\n\nfunction serializeByteArrayType(objectName: string, value: any): any {\n  if (value !== undefined && value !== null) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error(`${objectName} must be of type Uint8Array.`);\n    }\n    value = base64.encodeByteArray(value);\n  }\n  return value;\n}\n\nfunction serializeBase64UrlType(objectName: string, value: any): any {\n  if (value !== undefined && value !== null) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error(`${objectName} must be of type Uint8Array.`);\n    }\n    value = bufferToBase64Url(value);\n  }\n  return value;\n}\n\nfunction serializeDateTypes(typeName: string, value: any, objectName: string): any {\n  if (value !== undefined && value !== null) {\n    if (typeName.match(/^Date$/i) !== null) {\n      if (\n        !(\n          value instanceof Date ||\n          (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))\n        )\n      ) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n      }\n      value =\n        value instanceof Date\n          ? value.toISOString().substring(0, 10)\n          : new Date(value).toISOString().substring(0, 10);\n    } else if (typeName.match(/^DateTime$/i) !== null) {\n      if (\n        !(\n          value instanceof Date ||\n          (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))\n        )\n      ) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n      }\n      value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();\n    } else if (typeName.match(/^DateTimeRfc1123$/i) !== null) {\n      if (\n        !(\n          value instanceof Date ||\n          (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))\n        )\n      ) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);\n      }\n      value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();\n    } else if (typeName.match(/^UnixTime$/i) !== null) {\n      if (\n        !(\n          value instanceof Date ||\n          (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))\n        )\n      ) {\n        throw new Error(\n          `${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format ` +\n            `for it to be serialized in UnixTime/Epoch format.`,\n        );\n      }\n      value = dateToUnixTime(value);\n    } else if (typeName.match(/^TimeSpan$/i) !== null) {\n      if (!isDuration(value)) {\n        throw new Error(\n          `${objectName} must be a string in ISO 8601 format. Instead was \"${value}\".`,\n        );\n      }\n    }\n  }\n  return value;\n}\n\nfunction serializeSequenceType(\n  serializer: Serializer,\n  mapper: SequenceMapper,\n  object: any,\n  objectName: string,\n  isXml: boolean,\n  options: RequiredSerializerOptions,\n): any {\n  if (!Array.isArray(object)) {\n    throw new Error(`${objectName} must be of type Array.`);\n  }\n  let elementType = mapper.type.element;\n  if (!elementType || typeof elementType !== \"object\") {\n    throw new Error(\n      `element\" metadata for an Array must be defined in the ` +\n        `mapper and it must of type \"object\" in ${objectName}.`,\n    );\n  }\n  // Quirk: Composite mappers referenced by `element` might\n  // not have *all* properties declared (like uberParent),\n  // so let's try to look up the full definition by name.\n  if (elementType.type.name === \"Composite\" && elementType.type.className) {\n    elementType = serializer.modelMappers[elementType.type.className] ?? elementType;\n  }\n  const tempArray = [];\n  for (let i = 0; i < object.length; i++) {\n    const serializedValue = serializer.serialize(elementType, object[i], objectName, options);\n    if (isXml && elementType.xmlNamespace) {\n      const xmlnsKey = elementType.xmlNamespacePrefix\n        ? `xmlns:${elementType.xmlNamespacePrefix}`\n        : \"xmlns\";\n      if (elementType.type.name === \"Composite\") {\n        tempArray[i] = { ...serializedValue };\n        tempArray[i][XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };\n      } else {\n        tempArray[i] = {};\n        tempArray[i][options.xml.xmlCharKey] = serializedValue;\n        tempArray[i][XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };\n      }\n    } else {\n      tempArray[i] = serializedValue;\n    }\n  }\n  return tempArray;\n}\n\nfunction serializeDictionaryType(\n  serializer: Serializer,\n  mapper: DictionaryMapper,\n  object: any,\n  objectName: string,\n  isXml: boolean,\n  options: RequiredSerializerOptions,\n): any {\n  if (typeof object !== \"object\") {\n    throw new Error(`${objectName} must be of type object.`);\n  }\n  const valueType = mapper.type.value;\n  if (!valueType || typeof valueType !== \"object\") {\n    throw new Error(\n      `\"value\" metadata for a Dictionary must be defined in the ` +\n        `mapper and it must of type \"object\" in ${objectName}.`,\n    );\n  }\n  const tempDictionary: { [key: string]: any } = {};\n  for (const key of Object.keys(object)) {\n    const serializedValue = serializer.serialize(valueType, object[key], objectName, options);\n    // If the element needs an XML namespace we need to add it within the $ property\n    tempDictionary[key] = getXmlObjectValue(valueType, serializedValue, isXml, options);\n  }\n\n  // Add the namespace to the root element if needed\n  if (isXml && mapper.xmlNamespace) {\n    const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : \"xmlns\";\n    const result = tempDictionary;\n    result[XML_ATTRKEY] = { [xmlnsKey]: mapper.xmlNamespace };\n    return result;\n  }\n\n  return tempDictionary;\n}\n\n/**\n * Resolves the additionalProperties property from a referenced mapper\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n * @param objectName - name of the object being serialized\n */\nfunction resolveAdditionalProperties(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  objectName: string,\n): SequenceMapper | BaseMapper | CompositeMapper | DictionaryMapper | EnumMapper | undefined {\n  const additionalProperties = mapper.type.additionalProperties;\n\n  if (!additionalProperties && mapper.type.className) {\n    const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n    return modelMapper?.type.additionalProperties;\n  }\n\n  return additionalProperties;\n}\n\n/**\n * Finds the mapper referenced by className\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n * @param objectName - name of the object being serialized\n */\nfunction resolveReferencedMapper(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  objectName: string,\n): CompositeMapper | undefined {\n  const className = mapper.type.className;\n  if (!className) {\n    throw new Error(\n      `Class name for model \"${objectName}\" is not provided in the mapper \"${JSON.stringify(\n        mapper,\n        undefined,\n        2,\n      )}\".`,\n    );\n  }\n\n  return serializer.modelMappers[className];\n}\n\n/**\n * Resolves a composite mapper's modelProperties.\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n */\nfunction resolveModelProperties(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  objectName: string,\n): { [propertyName: string]: Mapper } {\n  let modelProps = mapper.type.modelProperties;\n  if (!modelProps) {\n    const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n    if (!modelMapper) {\n      throw new Error(`mapper() cannot be null or undefined for model \"${mapper.type.className}\".`);\n    }\n    modelProps = modelMapper?.type.modelProperties;\n    if (!modelProps) {\n      throw new Error(\n        `modelProperties cannot be null or undefined in the ` +\n          `mapper \"${JSON.stringify(modelMapper)}\" of type \"${\n            mapper.type.className\n          }\" for object \"${objectName}\".`,\n      );\n    }\n  }\n\n  return modelProps;\n}\n\nfunction serializeCompositeType(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  object: any,\n  objectName: string,\n  isXml: boolean,\n  options: RequiredSerializerOptions,\n): any {\n  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n    mapper = getPolymorphicMapper(serializer, mapper, object, \"clientName\");\n  }\n\n  if (object !== undefined && object !== null) {\n    const payload: any = {};\n    const modelProps = resolveModelProperties(serializer, mapper, objectName);\n    for (const key of Object.keys(modelProps)) {\n      const propertyMapper = modelProps[key];\n      if (propertyMapper.readOnly) {\n        continue;\n      }\n\n      let propName: string | undefined;\n      let parentObject: any = payload;\n      if (serializer.isXML) {\n        if (propertyMapper.xmlIsWrapped) {\n          propName = propertyMapper.xmlName;\n        } else {\n          propName = propertyMapper.xmlElementName || propertyMapper.xmlName;\n        }\n      } else {\n        const paths = splitSerializeName(propertyMapper.serializedName!);\n        propName = paths.pop();\n\n        for (const pathName of paths) {\n          const childObject = parentObject[pathName];\n          if (\n            (childObject === undefined || childObject === null) &&\n            ((object[key] !== undefined && object[key] !== null) ||\n              propertyMapper.defaultValue !== undefined)\n          ) {\n            parentObject[pathName] = {};\n          }\n          parentObject = parentObject[pathName];\n        }\n      }\n\n      if (parentObject !== undefined && parentObject !== null) {\n        if (isXml && mapper.xmlNamespace) {\n          const xmlnsKey = mapper.xmlNamespacePrefix\n            ? `xmlns:${mapper.xmlNamespacePrefix}`\n            : \"xmlns\";\n          parentObject[XML_ATTRKEY] = {\n            ...parentObject[XML_ATTRKEY],\n            [xmlnsKey]: mapper.xmlNamespace,\n          };\n        }\n        const propertyObjectName =\n          propertyMapper.serializedName !== \"\"\n            ? objectName + \".\" + propertyMapper.serializedName\n            : objectName;\n\n        let toSerialize = object[key];\n        const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n        if (\n          polymorphicDiscriminator &&\n          polymorphicDiscriminator.clientName === key &&\n          (toSerialize === undefined || toSerialize === null)\n        ) {\n          toSerialize = mapper.serializedName;\n        }\n\n        const serializedValue = serializer.serialize(\n          propertyMapper,\n          toSerialize,\n          propertyObjectName,\n          options,\n        );\n        if (serializedValue !== undefined && propName !== undefined && propName !== null) {\n          const value = getXmlObjectValue(propertyMapper, serializedValue, isXml, options);\n          if (isXml && propertyMapper.xmlIsAttribute) {\n            // XML_ATTRKEY, i.e., $ is the key attributes are kept under in xml2js.\n            // This keeps things simple while preventing name collision\n            // with names in user documents.\n            parentObject[XML_ATTRKEY] = parentObject[XML_ATTRKEY] || {};\n            parentObject[XML_ATTRKEY][propName] = serializedValue;\n          } else if (isXml && propertyMapper.xmlIsWrapped) {\n            parentObject[propName] = { [propertyMapper.xmlElementName!]: value };\n          } else {\n            parentObject[propName] = value;\n          }\n        }\n      }\n    }\n\n    const additionalPropertiesMapper = resolveAdditionalProperties(serializer, mapper, objectName);\n    if (additionalPropertiesMapper) {\n      const propNames = Object.keys(modelProps);\n      for (const clientPropName in object) {\n        const isAdditionalProperty = propNames.every((pn) => pn !== clientPropName);\n        if (isAdditionalProperty) {\n          payload[clientPropName] = serializer.serialize(\n            additionalPropertiesMapper,\n            object[clientPropName],\n            objectName + '[\"' + clientPropName + '\"]',\n            options,\n          );\n        }\n      }\n    }\n\n    return payload;\n  }\n  return object;\n}\n\nfunction getXmlObjectValue(\n  propertyMapper: Mapper,\n  serializedValue: any,\n  isXml: boolean,\n  options: RequiredSerializerOptions,\n): any {\n  if (!isXml || !propertyMapper.xmlNamespace) {\n    return serializedValue;\n  }\n\n  const xmlnsKey = propertyMapper.xmlNamespacePrefix\n    ? `xmlns:${propertyMapper.xmlNamespacePrefix}`\n    : \"xmlns\";\n  const xmlNamespace = { [xmlnsKey]: propertyMapper.xmlNamespace };\n\n  if ([\"Composite\"].includes(propertyMapper.type.name)) {\n    if (serializedValue[XML_ATTRKEY]) {\n      return serializedValue;\n    } else {\n      const result: any = { ...serializedValue };\n      result[XML_ATTRKEY] = xmlNamespace;\n      return result;\n    }\n  }\n  const result: any = {};\n  result[options.xml.xmlCharKey] = serializedValue;\n  result[XML_ATTRKEY] = xmlNamespace;\n  return result;\n}\n\nfunction isSpecialXmlProperty(propertyName: string, options: RequiredSerializerOptions): boolean {\n  return [XML_ATTRKEY, options.xml.xmlCharKey].includes(propertyName);\n}\n\nfunction deserializeCompositeType(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  responseBody: any,\n  objectName: string,\n  options: RequiredSerializerOptions,\n): any {\n  const xmlCharKey = options.xml.xmlCharKey ?? XML_CHARKEY;\n  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n    mapper = getPolymorphicMapper(serializer, mapper, responseBody, \"serializedName\");\n  }\n\n  const modelProps = resolveModelProperties(serializer, mapper, objectName);\n  let instance: { [key: string]: any } = {};\n  const handledPropertyNames: string[] = [];\n\n  for (const key of Object.keys(modelProps)) {\n    const propertyMapper = modelProps[key];\n    const paths = splitSerializeName(modelProps[key].serializedName!);\n    handledPropertyNames.push(paths[0]);\n    const { serializedName, xmlName, xmlElementName } = propertyMapper;\n    let propertyObjectName = objectName;\n    if (serializedName !== \"\" && serializedName !== undefined) {\n      propertyObjectName = objectName + \".\" + serializedName;\n    }\n\n    const headerCollectionPrefix = (propertyMapper as DictionaryMapper).headerCollectionPrefix;\n    if (headerCollectionPrefix) {\n      const dictionary: any = {};\n      for (const headerKey of Object.keys(responseBody)) {\n        if (headerKey.startsWith(headerCollectionPrefix)) {\n          dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize(\n            (propertyMapper as DictionaryMapper).type.value,\n            responseBody[headerKey],\n            propertyObjectName,\n            options,\n          );\n        }\n\n        handledPropertyNames.push(headerKey);\n      }\n      instance[key] = dictionary;\n    } else if (serializer.isXML) {\n      if (propertyMapper.xmlIsAttribute && responseBody[XML_ATTRKEY]) {\n        instance[key] = serializer.deserialize(\n          propertyMapper,\n          responseBody[XML_ATTRKEY][xmlName!],\n          propertyObjectName,\n          options,\n        );\n      } else if (propertyMapper.xmlIsMsText) {\n        if (responseBody[xmlCharKey] !== undefined) {\n          instance[key] = responseBody[xmlCharKey];\n        } else if (typeof responseBody === \"string\") {\n          // The special case where xml parser parses \"<Name>content</Name>\" into JSON of\n          //   `{ name: \"content\"}` instead of `{ name: { \"_\": \"content\" }}`\n          instance[key] = responseBody;\n        }\n      } else {\n        const propertyName = xmlElementName || xmlName || serializedName;\n        if (propertyMapper.xmlIsWrapped) {\n          /* a list of <xmlElementName> wrapped by <xmlName>\n            For the xml example below\n              <Cors>\n                <CorsRule>...</CorsRule>\n                <CorsRule>...</CorsRule>\n              </Cors>\n            the responseBody has\n              {\n                Cors: {\n                  CorsRule: [{...}, {...}]\n                }\n              }\n            xmlName is \"Cors\" and xmlElementName is\"CorsRule\".\n          */\n          const wrapped = responseBody[xmlName!];\n          const elementList = wrapped?.[xmlElementName!] ?? [];\n          instance[key] = serializer.deserialize(\n            propertyMapper,\n            elementList,\n            propertyObjectName,\n            options,\n          );\n          handledPropertyNames.push(xmlName!);\n        } else {\n          const property = responseBody[propertyName!];\n          instance[key] = serializer.deserialize(\n            propertyMapper,\n            property,\n            propertyObjectName,\n            options,\n          );\n          handledPropertyNames.push(propertyName!);\n        }\n      }\n    } else {\n      // deserialize the property if it is present in the provided responseBody instance\n      let propertyInstance;\n      let res = responseBody;\n      // traversing the object step by step.\n      let steps = 0;\n      for (const item of paths) {\n        if (!res) break;\n        steps++;\n        res = res[item];\n      }\n      // only accept null when reaching the last position of object otherwise it would be undefined\n      if (res === null && steps < paths.length) {\n        res = undefined;\n      }\n      propertyInstance = res;\n      const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;\n      // checking that the model property name (key)(ex: \"fishtype\") and the\n      // clientName of the polymorphicDiscriminator {metadata} (ex: \"fishtype\")\n      // instead of the serializedName of the polymorphicDiscriminator (ex: \"fish.type\")\n      // is a better approach. The generator is not consistent with escaping '\\.' in the\n      // serializedName of the property (ex: \"fish\\.type\") that is marked as polymorphic discriminator\n      // and the serializedName of the metadata polymorphicDiscriminator (ex: \"fish.type\"). However,\n      // the clientName transformation of the polymorphicDiscriminator (ex: \"fishtype\") and\n      // the transformation of model property name (ex: \"fishtype\") is done consistently.\n      // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.\n      if (\n        polymorphicDiscriminator &&\n        key === polymorphicDiscriminator.clientName &&\n        (propertyInstance === undefined || propertyInstance === null)\n      ) {\n        propertyInstance = mapper.serializedName;\n      }\n\n      let serializedValue;\n      // paging\n      if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === \"\") {\n        propertyInstance = responseBody[key];\n        const arrayInstance = serializer.deserialize(\n          propertyMapper,\n          propertyInstance,\n          propertyObjectName,\n          options,\n        );\n        // Copy over any properties that have already been added into the instance, where they do\n        // not exist on the newly de-serialized array\n        for (const [k, v] of Object.entries(instance)) {\n          if (!Object.prototype.hasOwnProperty.call(arrayInstance, k)) {\n            arrayInstance[k] = v;\n          }\n        }\n        instance = arrayInstance;\n      } else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {\n        serializedValue = serializer.deserialize(\n          propertyMapper,\n          propertyInstance,\n          propertyObjectName,\n          options,\n        );\n        instance[key] = serializedValue;\n      }\n    }\n  }\n\n  const additionalPropertiesMapper = mapper.type.additionalProperties;\n  if (additionalPropertiesMapper) {\n    const isAdditionalProperty = (responsePropName: string): boolean => {\n      for (const clientPropName in modelProps) {\n        const paths = splitSerializeName(modelProps[clientPropName].serializedName);\n        if (paths[0] === responsePropName) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    for (const responsePropName in responseBody) {\n      if (isAdditionalProperty(responsePropName)) {\n        instance[responsePropName] = serializer.deserialize(\n          additionalPropertiesMapper,\n          responseBody[responsePropName],\n          objectName + '[\"' + responsePropName + '\"]',\n          options,\n        );\n      }\n    }\n  } else if (responseBody && !options.ignoreUnknownProperties) {\n    for (const key of Object.keys(responseBody)) {\n      if (\n        instance[key] === undefined &&\n        !handledPropertyNames.includes(key) &&\n        !isSpecialXmlProperty(key, options)\n      ) {\n        instance[key] = responseBody[key];\n      }\n    }\n  }\n\n  return instance;\n}\n\nfunction deserializeDictionaryType(\n  serializer: Serializer,\n  mapper: DictionaryMapper,\n  responseBody: any,\n  objectName: string,\n  options: RequiredSerializerOptions,\n): any {\n  /* jshint validthis: true */\n  const value = mapper.type.value;\n  if (!value || typeof value !== \"object\") {\n    throw new Error(\n      `\"value\" metadata for a Dictionary must be defined in the ` +\n        `mapper and it must of type \"object\" in ${objectName}`,\n    );\n  }\n  if (responseBody) {\n    const tempDictionary: { [key: string]: any } = {};\n    for (const key of Object.keys(responseBody)) {\n      tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName, options);\n    }\n    return tempDictionary;\n  }\n  return responseBody;\n}\n\nfunction deserializeSequenceType(\n  serializer: Serializer,\n  mapper: SequenceMapper,\n  responseBody: any,\n  objectName: string,\n  options: RequiredSerializerOptions,\n): any {\n  let element = mapper.type.element;\n  if (!element || typeof element !== \"object\") {\n    throw new Error(\n      `element\" metadata for an Array must be defined in the ` +\n        `mapper and it must of type \"object\" in ${objectName}`,\n    );\n  }\n  if (responseBody) {\n    if (!Array.isArray(responseBody)) {\n      // xml2js will interpret a single element array as just the element, so force it to be an array\n      responseBody = [responseBody];\n    }\n\n    // Quirk: Composite mappers referenced by `element` might\n    // not have *all* properties declared (like uberParent),\n    // so let's try to look up the full definition by name.\n    if (element.type.name === \"Composite\" && element.type.className) {\n      element = serializer.modelMappers[element.type.className] ?? element;\n    }\n\n    const tempArray = [];\n    for (let i = 0; i < responseBody.length; i++) {\n      tempArray[i] = serializer.deserialize(\n        element,\n        responseBody[i],\n        `${objectName}[${i}]`,\n        options,\n      );\n    }\n    return tempArray;\n  }\n  return responseBody;\n}\n\nfunction getIndexDiscriminator(\n  discriminators: Record<string, CompositeMapper>,\n  discriminatorValue: string,\n  typeName: string,\n): CompositeMapper | undefined {\n  const typeNamesToCheck = [typeName];\n  while (typeNamesToCheck.length) {\n    const currentName = typeNamesToCheck.shift();\n    const indexDiscriminator =\n      discriminatorValue === currentName\n        ? discriminatorValue\n        : currentName + \".\" + discriminatorValue;\n    if (Object.prototype.hasOwnProperty.call(discriminators, indexDiscriminator)) {\n      return discriminators[indexDiscriminator];\n    } else {\n      for (const [name, mapper] of Object.entries(discriminators)) {\n        if (\n          name.startsWith(currentName + \".\") &&\n          mapper.type.uberParent === currentName &&\n          mapper.type.className\n        ) {\n          typeNamesToCheck.push(mapper.type.className);\n        }\n      }\n    }\n  }\n\n  return undefined;\n}\n\nfunction getPolymorphicMapper(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  object: any,\n  polymorphicPropertyName: \"clientName\" | \"serializedName\",\n): CompositeMapper {\n  const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n\n  if (polymorphicDiscriminator) {\n    let discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];\n    if (discriminatorName) {\n      // The serializedName might have \\\\, which we just want to ignore\n      if (polymorphicPropertyName === \"serializedName\") {\n        discriminatorName = discriminatorName.replace(/\\\\/gi, \"\");\n      }\n      const discriminatorValue = object[discriminatorName];\n      const typeName = mapper.type.uberParent ?? mapper.type.className;\n\n      if (typeof discriminatorValue === \"string\" && typeName) {\n        const polymorphicMapper = getIndexDiscriminator(\n          serializer.modelMappers.discriminators,\n          discriminatorValue,\n          typeName,\n        );\n        if (polymorphicMapper) {\n          mapper = polymorphicMapper;\n        }\n      }\n    }\n  }\n  return mapper;\n}\n\nfunction getPolymorphicDiscriminatorRecursively(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n): PolymorphicDiscriminator | undefined {\n  return (\n    mapper.type.polymorphicDiscriminator ||\n    getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent) ||\n    getPolymorphicDiscriminatorSafely(serializer, mapper.type.className)\n  );\n}\n\nfunction getPolymorphicDiscriminatorSafely(\n  serializer: Serializer,\n  typeName?: string,\n): PolymorphicDiscriminator | undefined {\n  return (\n    typeName &&\n    serializer.modelMappers[typeName] &&\n    serializer.modelMappers[typeName].type.polymorphicDiscriminator\n  );\n}\n\n/**\n * Known types of Mappers\n */\nexport const MapperTypeNames = {\n  Base64Url: \"Base64Url\",\n  Boolean: \"Boolean\",\n  ByteArray: \"ByteArray\",\n  Composite: \"Composite\",\n  Date: \"Date\",\n  DateTime: \"DateTime\",\n  DateTimeRfc1123: \"DateTimeRfc1123\",\n  Dictionary: \"Dictionary\",\n  Enum: \"Enum\",\n  Number: \"Number\",\n  Object: \"Object\",\n  Sequence: \"Sequence\",\n  String: \"String\",\n  Stream: \"Stream\",\n  TimeSpan: \"TimeSpan\",\n  UnixTime: \"UnixTime\",\n} as const;\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { OperationRequest, OperationRequestInfo } from \"./interfaces.js\";\n\n/**\n * Browser-only implementation of the module's state. The browser esm variant will not load the commonjs state, so we do not need to share state between the two.\n */\nexport const state = {\n  operationRequestMap: new WeakMap<OperationRequest, OperationRequestInfo>(),\n};\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  CompositeMapper,\n  Mapper,\n  OperationArguments,\n  OperationParameter,\n  OperationRequest,\n  OperationRequestInfo,\n  ParameterPath,\n} from \"./interfaces.js\";\n\nimport { state } from \"./state.js\";\n\n/**\n * @internal\n * Retrieves the value to use for a given operation argument\n * @param operationArguments - The arguments passed from the generated client\n * @param parameter - The parameter description\n * @param fallbackObject - If something isn't found in the arguments bag, look here.\n *  Generally used to look at the service client properties.\n */\nexport function getOperationArgumentValueFromParameter(\n  operationArguments: OperationArguments,\n  parameter: OperationParameter,\n  fallbackObject?: { [parameterName: string]: any },\n): any {\n  let parameterPath = parameter.parameterPath;\n  const parameterMapper = parameter.mapper;\n  let value: any;\n  if (typeof parameterPath === \"string\") {\n    parameterPath = [parameterPath];\n  }\n  if (Array.isArray(parameterPath)) {\n    if (parameterPath.length > 0) {\n      if (parameterMapper.isConstant) {\n        value = parameterMapper.defaultValue;\n      } else {\n        let propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);\n\n        if (!propertySearchResult.propertyFound && fallbackObject) {\n          propertySearchResult = getPropertyFromParameterPath(fallbackObject, parameterPath);\n        }\n\n        let useDefaultValue = false;\n        if (!propertySearchResult.propertyFound) {\n          useDefaultValue =\n            parameterMapper.required ||\n            (parameterPath[0] === \"options\" && parameterPath.length === 2);\n        }\n        value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;\n      }\n    }\n  } else {\n    if (parameterMapper.required) {\n      value = {};\n    }\n\n    for (const propertyName in parameterPath) {\n      const propertyMapper: Mapper = (parameterMapper as CompositeMapper).type.modelProperties![\n        propertyName\n      ];\n      const propertyPath: ParameterPath = parameterPath[propertyName];\n      const propertyValue: any = getOperationArgumentValueFromParameter(\n        operationArguments,\n        {\n          parameterPath: propertyPath,\n          mapper: propertyMapper,\n        },\n        fallbackObject,\n      );\n      if (propertyValue !== undefined) {\n        if (!value) {\n          value = {};\n        }\n        value[propertyName] = propertyValue;\n      }\n    }\n  }\n  return value;\n}\n\ninterface PropertySearchResult {\n  propertyValue?: any;\n  propertyFound: boolean;\n}\n\nfunction getPropertyFromParameterPath(\n  parent: { [parameterName: string]: any },\n  parameterPath: string[],\n): PropertySearchResult {\n  const result: PropertySearchResult = { propertyFound: false };\n  let i = 0;\n  for (; i < parameterPath.length; ++i) {\n    const parameterPathPart: string = parameterPath[i];\n    // Make sure to check inherited properties too, so don't use hasOwnProperty().\n    if (parent && parameterPathPart in parent) {\n      parent = parent[parameterPathPart];\n    } else {\n      break;\n    }\n  }\n  if (i === parameterPath.length) {\n    result.propertyValue = parent;\n    result.propertyFound = true;\n  }\n  return result;\n}\n\nconst originalRequestSymbol = Symbol.for(\"@azure/core-client original request\");\n\nfunction hasOriginalRequest(\n  request: OperationRequest,\n): request is OperationRequest & { [originalRequestSymbol]: OperationRequest } {\n  return originalRequestSymbol in request;\n}\n\nexport function getOperationRequestInfo(request: OperationRequest): OperationRequestInfo {\n  if (hasOriginalRequest(request)) {\n    return getOperationRequestInfo(request[originalRequestSymbol]);\n  }\n  let info = state.operationRequestMap.get(request);\n\n  if (!info) {\n    info = {};\n    state.operationRequestMap.set(request, info);\n  }\n  return info;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  FullOperationResponse,\n  OperationRequest,\n  OperationResponseMap,\n  OperationSpec,\n  RequiredSerializerOptions,\n  SerializerOptions,\n  XML_CHARKEY,\n  XmlOptions,\n} from \"./interfaces.js\";\nimport {\n  PipelinePolicy,\n  PipelineRequest,\n  PipelineResponse,\n  RestError,\n  SendRequest,\n} from \"@azure/core-rest-pipeline\";\nimport { MapperTypeNames } from \"./serializer.js\";\nimport { getOperationRequestInfo } from \"./operationHelpers.js\";\n\nconst defaultJsonContentTypes = [\"application/json\", \"text/json\"];\nconst defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\n\n/**\n * The programmatic identifier of the deserializationPolicy.\n */\nexport const deserializationPolicyName = \"deserializationPolicy\";\n\n/**\n * Options to configure API response deserialization.\n */\nexport interface DeserializationPolicyOptions {\n  /**\n   * Configures the expected content types for the deserialization of\n   * JSON and XML response bodies.\n   */\n  expectedContentTypes?: DeserializationContentTypes;\n\n  /**\n   * A function that is able to parse XML. Required for XML support.\n   */\n  parseXML?: (str: string, opts?: XmlOptions) => Promise<any>;\n\n  /**\n   * Configures behavior of xml parser and builder.\n   */\n  serializerOptions?: SerializerOptions;\n}\n\n/**\n * The content-types that will indicate that an operation response should be deserialized in a\n * particular way.\n */\nexport interface DeserializationContentTypes {\n  /**\n   * The content-types that indicate that an operation response should be deserialized as JSON.\n   * Defaults to [ \"application/json\", \"text/json\" ].\n   */\n  json?: string[];\n\n  /**\n   * The content-types that indicate that an operation response should be deserialized as XML.\n   * Defaults to [ \"application/xml\", \"application/atom+xml\" ].\n   */\n  xml?: string[];\n}\n\n/**\n * This policy handles parsing out responses according to OperationSpecs on the request.\n */\nexport function deserializationPolicy(options: DeserializationPolicyOptions = {}): PipelinePolicy {\n  const jsonContentTypes = options.expectedContentTypes?.json ?? defaultJsonContentTypes;\n  const xmlContentTypes = options.expectedContentTypes?.xml ?? defaultXmlContentTypes;\n  const parseXML = options.parseXML;\n  const serializerOptions = options.serializerOptions;\n  const updatedOptions: RequiredSerializerOptions = {\n    xml: {\n      rootName: serializerOptions?.xml.rootName ?? \"\",\n      includeRoot: serializerOptions?.xml.includeRoot ?? false,\n      xmlCharKey: serializerOptions?.xml.xmlCharKey ?? XML_CHARKEY,\n    },\n  };\n\n  return {\n    name: deserializationPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      const response = await next(request);\n      return deserializeResponseBody(\n        jsonContentTypes,\n        xmlContentTypes,\n        response,\n        updatedOptions,\n        parseXML,\n      );\n    },\n  };\n}\n\nfunction getOperationResponseMap(\n  parsedResponse: PipelineResponse,\n): undefined | OperationResponseMap {\n  let result: OperationResponseMap | undefined;\n  const request: OperationRequest = parsedResponse.request;\n  const operationInfo = getOperationRequestInfo(request);\n  const operationSpec = operationInfo?.operationSpec;\n  if (operationSpec) {\n    if (!operationInfo?.operationResponseGetter) {\n      result = operationSpec.responses[parsedResponse.status];\n    } else {\n      result = operationInfo?.operationResponseGetter(operationSpec, parsedResponse);\n    }\n  }\n  return result;\n}\n\nfunction shouldDeserializeResponse(parsedResponse: PipelineResponse): boolean {\n  const request: OperationRequest = parsedResponse.request;\n  const operationInfo = getOperationRequestInfo(request);\n  const shouldDeserialize = operationInfo?.shouldDeserialize;\n  let result: boolean;\n  if (shouldDeserialize === undefined) {\n    result = true;\n  } else if (typeof shouldDeserialize === \"boolean\") {\n    result = shouldDeserialize;\n  } else {\n    result = shouldDeserialize(parsedResponse);\n  }\n  return result;\n}\n\nasync function deserializeResponseBody(\n  jsonContentTypes: string[],\n  xmlContentTypes: string[],\n  response: PipelineResponse,\n  options: RequiredSerializerOptions,\n  parseXML?: (str: string, opts?: XmlOptions) => Promise<any>,\n): Promise<PipelineResponse> {\n  const parsedResponse = await parse(\n    jsonContentTypes,\n    xmlContentTypes,\n    response,\n    options,\n    parseXML,\n  );\n  if (!shouldDeserializeResponse(parsedResponse)) {\n    return parsedResponse;\n  }\n\n  const operationInfo = getOperationRequestInfo(parsedResponse.request);\n  const operationSpec = operationInfo?.operationSpec;\n  if (!operationSpec || !operationSpec.responses) {\n    return parsedResponse;\n  }\n\n  const responseSpec = getOperationResponseMap(parsedResponse);\n  const { error, shouldReturnResponse } = handleErrorResponse(\n    parsedResponse,\n    operationSpec,\n    responseSpec,\n    options,\n  );\n  if (error) {\n    throw error;\n  } else if (shouldReturnResponse) {\n    return parsedResponse;\n  }\n\n  // An operation response spec does exist for current status code, so\n  // use it to deserialize the response.\n  if (responseSpec) {\n    if (responseSpec.bodyMapper) {\n      let valueToDeserialize: any = parsedResponse.parsedBody;\n      if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperTypeNames.Sequence) {\n        valueToDeserialize =\n          typeof valueToDeserialize === \"object\"\n            ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName!]\n            : [];\n      }\n      try {\n        parsedResponse.parsedBody = operationSpec.serializer.deserialize(\n          responseSpec.bodyMapper,\n          valueToDeserialize,\n          \"operationRes.parsedBody\",\n          options,\n        );\n      } catch (deserializeError: any) {\n        const restError = new RestError(\n          `Error ${deserializeError} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`,\n          {\n            statusCode: parsedResponse.status,\n            request: parsedResponse.request,\n            response: parsedResponse,\n          },\n        );\n        throw restError;\n      }\n    } else if (operationSpec.httpMethod === \"HEAD\") {\n      // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n      parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n    }\n\n    if (responseSpec.headersMapper) {\n      parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(\n        responseSpec.headersMapper,\n        parsedResponse.headers.toJSON(),\n        \"operationRes.parsedHeaders\",\n        { xml: {}, ignoreUnknownProperties: true },\n      );\n    }\n  }\n\n  return parsedResponse;\n}\n\nfunction isOperationSpecEmpty(operationSpec: OperationSpec): boolean {\n  const expectedStatusCodes = Object.keys(operationSpec.responses);\n  return (\n    expectedStatusCodes.length === 0 ||\n    (expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\")\n  );\n}\n\nfunction handleErrorResponse(\n  parsedResponse: FullOperationResponse,\n  operationSpec: OperationSpec,\n  responseSpec: OperationResponseMap | undefined,\n  options: RequiredSerializerOptions,\n): { error: RestError | null; shouldReturnResponse: boolean } {\n  const isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;\n  const isExpectedStatusCode: boolean = isOperationSpecEmpty(operationSpec)\n    ? isSuccessByStatus\n    : !!responseSpec;\n\n  if (isExpectedStatusCode) {\n    if (responseSpec) {\n      if (!responseSpec.isError) {\n        return { error: null, shouldReturnResponse: false };\n      }\n    } else {\n      return { error: null, shouldReturnResponse: false };\n    }\n  }\n\n  const errorResponseSpec = responseSpec ?? operationSpec.responses.default;\n\n  const initialErrorMessage = parsedResponse.request.streamResponseStatusCodes?.has(\n    parsedResponse.status,\n  )\n    ? `Unexpected status code: ${parsedResponse.status}`\n    : (parsedResponse.bodyAsText as string);\n\n  const error = new RestError(initialErrorMessage, {\n    statusCode: parsedResponse.status,\n    request: parsedResponse.request,\n    response: parsedResponse,\n  });\n\n  // If the item failed but there's no error spec or default spec to deserialize the error,\n  // we should fail so we just throw the parsed response\n  if (!errorResponseSpec) {\n    throw error;\n  }\n\n  const defaultBodyMapper = errorResponseSpec.bodyMapper;\n  const defaultHeadersMapper = errorResponseSpec.headersMapper;\n\n  try {\n    // If error response has a body, try to deserialize it using default body mapper.\n    // Then try to extract error code & message from it\n    if (parsedResponse.parsedBody) {\n      const parsedBody = parsedResponse.parsedBody;\n      let deserializedError;\n\n      if (defaultBodyMapper) {\n        let valueToDeserialize: any = parsedBody;\n        if (operationSpec.isXML && defaultBodyMapper.type.name === MapperTypeNames.Sequence) {\n          valueToDeserialize = [];\n          const elementName = defaultBodyMapper.xmlElementName;\n          if (typeof parsedBody === \"object\" && elementName) {\n            valueToDeserialize = parsedBody[elementName];\n          }\n        }\n        deserializedError = operationSpec.serializer.deserialize(\n          defaultBodyMapper,\n          valueToDeserialize,\n          \"error.response.parsedBody\",\n          options,\n        );\n      }\n\n      const internalError: any = parsedBody.error || deserializedError || parsedBody;\n      error.code = internalError.code;\n      if (internalError.message) {\n        error.message = internalError.message;\n      }\n\n      if (defaultBodyMapper) {\n        (error.response! as FullOperationResponse).parsedBody = deserializedError;\n      }\n    }\n\n    // If error response has headers, try to deserialize it using default header mapper\n    if (parsedResponse.headers && defaultHeadersMapper) {\n      (error.response! as FullOperationResponse).parsedHeaders =\n        operationSpec.serializer.deserialize(\n          defaultHeadersMapper,\n          parsedResponse.headers.toJSON(),\n          \"operationRes.parsedHeaders\",\n        );\n    }\n  } catch (defaultError: any) {\n    error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody - \"${parsedResponse.bodyAsText}\" for the default response.`;\n  }\n\n  return { error, shouldReturnResponse: false };\n}\n\nasync function parse(\n  jsonContentTypes: string[],\n  xmlContentTypes: string[],\n  operationResponse: FullOperationResponse,\n  opts: RequiredSerializerOptions,\n  parseXML?: (str: string, opts?: XmlOptions) => Promise<any>,\n): Promise<FullOperationResponse> {\n  if (\n    !operationResponse.request.streamResponseStatusCodes?.has(operationResponse.status) &&\n    operationResponse.bodyAsText\n  ) {\n    const text = operationResponse.bodyAsText;\n    const contentType: string = operationResponse.headers.get(\"Content-Type\") || \"\";\n    const contentComponents: string[] = !contentType\n      ? []\n      : contentType.split(\";\").map((component) => component.toLowerCase());\n\n    try {\n      if (\n        contentComponents.length === 0 ||\n        contentComponents.some((component) => jsonContentTypes.indexOf(component) !== -1)\n      ) {\n        operationResponse.parsedBody = JSON.parse(text);\n        return operationResponse;\n      } else if (contentComponents.some((component) => xmlContentTypes.indexOf(component) !== -1)) {\n        if (!parseXML) {\n          throw new Error(\"Parsing XML not supported.\");\n        }\n        const body = await parseXML(text, opts.xml);\n        operationResponse.parsedBody = body;\n        return operationResponse;\n      }\n    } catch (err: any) {\n      const msg = `Error \"${err}\" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;\n      const errCode = err.code || RestError.PARSE_ERROR;\n      const e = new RestError(msg, {\n        code: errCode,\n        statusCode: operationResponse.status,\n        request: operationResponse.request,\n        response: operationResponse,\n      });\n      throw e;\n    }\n  }\n\n  return operationResponse;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { OperationParameter, OperationSpec } from \"./interfaces.js\";\nimport { MapperTypeNames } from \"./serializer.js\";\n\n/**\n * Gets the list of status codes for streaming responses.\n * @internal\n */\nexport function getStreamingResponseStatusCodes(operationSpec: OperationSpec): Set<number> {\n  const result = new Set<number>();\n  for (const statusCode in operationSpec.responses) {\n    const operationResponse = operationSpec.responses[statusCode];\n    if (\n      operationResponse.bodyMapper &&\n      operationResponse.bodyMapper.type.name === MapperTypeNames.Stream\n    ) {\n      result.add(Number(statusCode));\n    }\n  }\n  return result;\n}\n\n/**\n * Get the path to this parameter's value as a dotted string (a.b.c).\n * @param parameter - The parameter to get the path string for.\n * @returns The path to this parameter's value as a dotted string.\n * @internal\n */\nexport function getPathStringFromParameter(parameter: OperationParameter): string {\n  const { parameterPath, mapper } = parameter;\n  let result: string;\n  if (typeof parameterPath === \"string\") {\n    result = parameterPath;\n  } else if (Array.isArray(parameterPath)) {\n    result = parameterPath.join(\".\");\n  } else {\n    result = mapper.serializedName!;\n  }\n  return result;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  DictionaryMapper,\n  OperationArguments,\n  OperationRequest,\n  OperationSpec,\n  RequiredSerializerOptions,\n  SerializerOptions,\n  XML_ATTRKEY,\n  XML_CHARKEY,\n  XmlOptions,\n} from \"./interfaces.js\";\nimport { PipelinePolicy, PipelineResponse, SendRequest } from \"@azure/core-rest-pipeline\";\nimport {\n  getOperationArgumentValueFromParameter,\n  getOperationRequestInfo,\n} from \"./operationHelpers.js\";\nimport { MapperTypeNames } from \"./serializer.js\";\nimport { getPathStringFromParameter } from \"./interfaceHelpers.js\";\n\n/**\n * The programmatic identifier of the serializationPolicy.\n */\nexport const serializationPolicyName = \"serializationPolicy\";\n\n/**\n * Options to configure API request serialization.\n */\nexport interface SerializationPolicyOptions {\n  /**\n   * A function that is able to write XML. Required for XML support.\n   */\n  stringifyXML?: (obj: any, opts?: XmlOptions) => string;\n\n  /**\n   * Configures behavior of xml parser and builder.\n   */\n  serializerOptions?: SerializerOptions;\n}\n\n/**\n * This policy handles assembling the request body and headers using\n * an OperationSpec and OperationArguments on the request.\n */\nexport function serializationPolicy(options: SerializationPolicyOptions = {}): PipelinePolicy {\n  const stringifyXML = options.stringifyXML;\n\n  return {\n    name: serializationPolicyName,\n    async sendRequest(request: OperationRequest, next: SendRequest): Promise<PipelineResponse> {\n      const operationInfo = getOperationRequestInfo(request);\n      const operationSpec = operationInfo?.operationSpec;\n      const operationArguments = operationInfo?.operationArguments;\n      if (operationSpec && operationArguments) {\n        serializeHeaders(request, operationArguments, operationSpec);\n        serializeRequestBody(request, operationArguments, operationSpec, stringifyXML);\n      }\n      return next(request);\n    },\n  };\n}\n\n/**\n * @internal\n */\nexport function serializeHeaders(\n  request: OperationRequest,\n  operationArguments: OperationArguments,\n  operationSpec: OperationSpec,\n): void {\n  if (operationSpec.headerParameters) {\n    for (const headerParameter of operationSpec.headerParameters) {\n      let headerValue = getOperationArgumentValueFromParameter(operationArguments, headerParameter);\n      if ((headerValue !== null && headerValue !== undefined) || headerParameter.mapper.required) {\n        headerValue = operationSpec.serializer.serialize(\n          headerParameter.mapper,\n          headerValue,\n          getPathStringFromParameter(headerParameter),\n        );\n        const headerCollectionPrefix = (headerParameter.mapper as DictionaryMapper)\n          .headerCollectionPrefix;\n        if (headerCollectionPrefix) {\n          for (const key of Object.keys(headerValue)) {\n            request.headers.set(headerCollectionPrefix + key, headerValue[key]);\n          }\n        } else {\n          request.headers.set(\n            headerParameter.mapper.serializedName || getPathStringFromParameter(headerParameter),\n            headerValue,\n          );\n        }\n      }\n    }\n  }\n  const customHeaders = operationArguments.options?.requestOptions?.customHeaders;\n  if (customHeaders) {\n    for (const customHeaderName of Object.keys(customHeaders)) {\n      request.headers.set(customHeaderName, customHeaders[customHeaderName]);\n    }\n  }\n}\n\n/**\n * @internal\n */\nexport function serializeRequestBody(\n  request: OperationRequest,\n  operationArguments: OperationArguments,\n  operationSpec: OperationSpec,\n  stringifyXML: (obj: any, opts?: XmlOptions) => string = function () {\n    throw new Error(\"XML serialization unsupported!\");\n  },\n): void {\n  const serializerOptions = operationArguments.options?.serializerOptions;\n  const updatedOptions: RequiredSerializerOptions = {\n    xml: {\n      rootName: serializerOptions?.xml.rootName ?? \"\",\n      includeRoot: serializerOptions?.xml.includeRoot ?? false,\n      xmlCharKey: serializerOptions?.xml.xmlCharKey ?? XML_CHARKEY,\n    },\n  };\n\n  const xmlCharKey = updatedOptions.xml.xmlCharKey;\n  if (operationSpec.requestBody && operationSpec.requestBody.mapper) {\n    request.body = getOperationArgumentValueFromParameter(\n      operationArguments,\n      operationSpec.requestBody,\n    );\n\n    const bodyMapper = operationSpec.requestBody.mapper;\n    const {\n      required,\n      serializedName,\n      xmlName,\n      xmlElementName,\n      xmlNamespace,\n      xmlNamespacePrefix,\n      nullable,\n    } = bodyMapper;\n    const typeName = bodyMapper.type.name;\n\n    try {\n      if (\n        (request.body !== undefined && request.body !== null) ||\n        (nullable && request.body === null) ||\n        required\n      ) {\n        const requestBodyParameterPathString: string = getPathStringFromParameter(\n          operationSpec.requestBody,\n        );\n        request.body = operationSpec.serializer.serialize(\n          bodyMapper,\n          request.body,\n          requestBodyParameterPathString,\n          updatedOptions,\n        );\n\n        const isStream = typeName === MapperTypeNames.Stream;\n\n        if (operationSpec.isXML) {\n          const xmlnsKey = xmlNamespacePrefix ? `xmlns:${xmlNamespacePrefix}` : \"xmlns\";\n          const value = getXmlValueWithNamespace(\n            xmlNamespace,\n            xmlnsKey,\n            typeName,\n            request.body,\n            updatedOptions,\n          );\n\n          if (typeName === MapperTypeNames.Sequence) {\n            request.body = stringifyXML(\n              prepareXMLRootList(\n                value,\n                xmlElementName || xmlName || serializedName!,\n                xmlnsKey,\n                xmlNamespace,\n              ),\n              { rootName: xmlName || serializedName, xmlCharKey },\n            );\n          } else if (!isStream) {\n            request.body = stringifyXML(value, {\n              rootName: xmlName || serializedName,\n              xmlCharKey,\n            });\n          }\n        } else if (\n          typeName === MapperTypeNames.String &&\n          (operationSpec.contentType?.match(\"text/plain\") || operationSpec.mediaType === \"text\")\n        ) {\n          // the String serializer has validated that request body is a string\n          // so just send the string.\n          return;\n        } else if (!isStream) {\n          request.body = JSON.stringify(request.body);\n        }\n      }\n    } catch (error: any) {\n      throw new Error(\n        `Error \"${error.message}\" occurred in serializing the payload - ${JSON.stringify(\n          serializedName,\n          undefined,\n          \"  \",\n        )}.`,\n      );\n    }\n  } else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {\n    request.formData = {};\n    for (const formDataParameter of operationSpec.formDataParameters) {\n      const formDataParameterValue = getOperationArgumentValueFromParameter(\n        operationArguments,\n        formDataParameter,\n      );\n      if (formDataParameterValue !== undefined && formDataParameterValue !== null) {\n        const formDataParameterPropertyName: string =\n          formDataParameter.mapper.serializedName || getPathStringFromParameter(formDataParameter);\n        request.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(\n          formDataParameter.mapper,\n          formDataParameterValue,\n          getPathStringFromParameter(formDataParameter),\n          updatedOptions,\n        );\n      }\n    }\n  }\n}\n\n/**\n * Adds an xml namespace to the xml serialized object if needed, otherwise it just returns the value itself\n */\nfunction getXmlValueWithNamespace(\n  xmlNamespace: string | undefined,\n  xmlnsKey: string,\n  typeName: string,\n  serializedValue: any,\n  options: RequiredSerializerOptions,\n): any {\n  // Composite and Sequence schemas already got their root namespace set during serialization\n  // We just need to add xmlns to the other schema types\n  if (xmlNamespace && ![\"Composite\", \"Sequence\", \"Dictionary\"].includes(typeName)) {\n    const result: any = {};\n    result[options.xml.xmlCharKey] = serializedValue;\n    result[XML_ATTRKEY] = { [xmlnsKey]: xmlNamespace };\n    return result;\n  }\n\n  return serializedValue;\n}\n\nfunction prepareXMLRootList(\n  obj: any,\n  elementName: string,\n  xmlNamespaceKey?: string,\n  xmlNamespace?: string,\n): { [key: string]: any[] } {\n  if (!Array.isArray(obj)) {\n    obj = [obj];\n  }\n  if (!xmlNamespaceKey || !xmlNamespace) {\n    return { [elementName]: obj };\n  }\n\n  const result = { [elementName]: obj };\n  result[XML_ATTRKEY] = { [xmlNamespaceKey]: xmlNamespace };\n  return result;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { DeserializationPolicyOptions, deserializationPolicy } from \"./deserializationPolicy.js\";\nimport {\n  InternalPipelineOptions,\n  Pipeline,\n  bearerTokenAuthenticationPolicy,\n  createPipelineFromOptions,\n} from \"@azure/core-rest-pipeline\";\nimport { SerializationPolicyOptions, serializationPolicy } from \"./serializationPolicy.js\";\nimport { TokenCredential } from \"@azure/core-auth\";\n\n/**\n * Options for creating a Pipeline to use with ServiceClient.\n * Mostly for customizing the auth policy (if using token auth) or\n * the deserialization options when using XML.\n */\nexport interface InternalClientPipelineOptions extends InternalPipelineOptions {\n  /**\n   * Options to customize bearerTokenAuthenticationPolicy.\n   */\n  credentialOptions?: { credentialScopes: string | string[]; credential: TokenCredential };\n  /**\n   * Options to customize deserializationPolicy.\n   */\n  deserializationOptions?: DeserializationPolicyOptions;\n  /**\n   * Options to customize serializationPolicy.\n   */\n  serializationOptions?: SerializationPolicyOptions;\n}\n\n/**\n * Creates a new Pipeline for use with a Service Client.\n * Adds in deserializationPolicy by default.\n * Also adds in bearerTokenAuthenticationPolicy if passed a TokenCredential.\n * @param options - Options to customize the created pipeline.\n */\nexport function createClientPipeline(options: InternalClientPipelineOptions = {}): Pipeline {\n  const pipeline = createPipelineFromOptions(options ?? {});\n  if (options.credentialOptions) {\n    pipeline.addPolicy(\n      bearerTokenAuthenticationPolicy({\n        credential: options.credentialOptions.credential,\n        scopes: options.credentialOptions.credentialScopes,\n      }),\n    );\n  }\n\n  pipeline.addPolicy(serializationPolicy(options.serializationOptions), { phase: \"Serialize\" });\n  pipeline.addPolicy(deserializationPolicy(options.deserializationOptions), {\n    phase: \"Deserialize\",\n  });\n\n  return pipeline;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpClient, createDefaultHttpClient } from \"@azure/core-rest-pipeline\";\n\nlet cachedHttpClient: HttpClient | undefined;\n\nexport function getCachedDefaultHttpClient(): HttpClient {\n  if (!cachedHttpClient) {\n    cachedHttpClient = createDefaultHttpClient();\n  }\n\n  return cachedHttpClient;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { OperationArguments, OperationSpec, QueryCollectionFormat } from \"./interfaces.js\";\nimport { getOperationArgumentValueFromParameter } from \"./operationHelpers.js\";\nimport { getPathStringFromParameter } from \"./interfaceHelpers.js\";\n\nconst CollectionFormatToDelimiterMap: { [key in QueryCollectionFormat]: string } = {\n  CSV: \",\",\n  SSV: \" \",\n  Multi: \"Multi\",\n  TSV: \"\\t\",\n  Pipes: \"|\",\n};\n\nexport function getRequestUrl(\n  baseUri: string,\n  operationSpec: OperationSpec,\n  operationArguments: OperationArguments,\n  fallbackObject: { [parameterName: string]: any },\n): string {\n  const urlReplacements = calculateUrlReplacements(\n    operationSpec,\n    operationArguments,\n    fallbackObject,\n  );\n\n  let isAbsolutePath = false;\n\n  let requestUrl = replaceAll(baseUri, urlReplacements);\n  if (operationSpec.path) {\n    let path = replaceAll(operationSpec.path, urlReplacements);\n    // QUIRK: sometimes we get a path component like /{nextLink}\n    // which may be a fully formed URL with a leading /. In that case, we should\n    // remove the leading /\n    if (operationSpec.path === \"/{nextLink}\" && path.startsWith(\"/\")) {\n      path = path.substring(1);\n    }\n    // QUIRK: sometimes we get a path component like {nextLink}\n    // which may be a fully formed URL. In that case, we should\n    // ignore the baseUri.\n    if (isAbsoluteUrl(path)) {\n      requestUrl = path;\n      isAbsolutePath = true;\n    } else {\n      requestUrl = appendPath(requestUrl, path);\n    }\n  }\n\n  const { queryParams, sequenceParams } = calculateQueryParameters(\n    operationSpec,\n    operationArguments,\n    fallbackObject,\n  );\n  /**\n   * Notice that this call sets the `noOverwrite` parameter to true if the `requestUrl`\n   * is an absolute path. This ensures that existing query parameter values in `requestUrl`\n   * do not get overwritten. On the other hand when `requestUrl` is not absolute path, it\n   * is still being built so there is nothing to overwrite.\n   */\n  requestUrl = appendQueryParams(requestUrl, queryParams, sequenceParams, isAbsolutePath);\n\n  return requestUrl;\n}\n\nfunction replaceAll(input: string, replacements: Map<string, string>): string {\n  let result = input;\n  for (const [searchValue, replaceValue] of replacements) {\n    result = result.split(searchValue).join(replaceValue);\n  }\n  return result;\n}\n\nfunction calculateUrlReplacements(\n  operationSpec: OperationSpec,\n  operationArguments: OperationArguments,\n  fallbackObject: { [parameterName: string]: any },\n): Map<string, string> {\n  const result = new Map<string, string>();\n  if (operationSpec.urlParameters?.length) {\n    for (const urlParameter of operationSpec.urlParameters) {\n      let urlParameterValue: string = getOperationArgumentValueFromParameter(\n        operationArguments,\n        urlParameter,\n        fallbackObject,\n      );\n      const parameterPathString = getPathStringFromParameter(urlParameter);\n      urlParameterValue = operationSpec.serializer.serialize(\n        urlParameter.mapper,\n        urlParameterValue,\n        parameterPathString,\n      );\n      if (!urlParameter.skipEncoding) {\n        urlParameterValue = encodeURIComponent(urlParameterValue);\n      }\n      result.set(\n        `{${urlParameter.mapper.serializedName || parameterPathString}}`,\n        urlParameterValue,\n      );\n    }\n  }\n  return result;\n}\n\nfunction isAbsoluteUrl(url: string): boolean {\n  return url.includes(\"://\");\n}\n\nfunction appendPath(url: string, pathToAppend?: string): string {\n  if (!pathToAppend) {\n    return url;\n  }\n\n  const parsedUrl = new URL(url);\n  let newPath = parsedUrl.pathname;\n\n  if (!newPath.endsWith(\"/\")) {\n    newPath = `${newPath}/`;\n  }\n\n  if (pathToAppend.startsWith(\"/\")) {\n    pathToAppend = pathToAppend.substring(1);\n  }\n\n  const searchStart = pathToAppend.indexOf(\"?\");\n  if (searchStart !== -1) {\n    const path = pathToAppend.substring(0, searchStart);\n    const search = pathToAppend.substring(searchStart + 1);\n    newPath = newPath + path;\n    if (search) {\n      parsedUrl.search = parsedUrl.search ? `${parsedUrl.search}&${search}` : search;\n    }\n  } else {\n    newPath = newPath + pathToAppend;\n  }\n\n  parsedUrl.pathname = newPath;\n\n  return parsedUrl.toString();\n}\n\nfunction calculateQueryParameters(\n  operationSpec: OperationSpec,\n  operationArguments: OperationArguments,\n  fallbackObject: { [parameterName: string]: any },\n): {\n  queryParams: Map<string, string | string[]>;\n  sequenceParams: Set<string>;\n} {\n  const result = new Map<string, string | string[]>();\n  const sequenceParams: Set<string> = new Set<string>();\n\n  if (operationSpec.queryParameters?.length) {\n    for (const queryParameter of operationSpec.queryParameters) {\n      if (queryParameter.mapper.type.name === \"Sequence\" && queryParameter.mapper.serializedName) {\n        sequenceParams.add(queryParameter.mapper.serializedName);\n      }\n      let queryParameterValue: string | string[] = getOperationArgumentValueFromParameter(\n        operationArguments,\n        queryParameter,\n        fallbackObject,\n      );\n      if (\n        (queryParameterValue !== undefined && queryParameterValue !== null) ||\n        queryParameter.mapper.required\n      ) {\n        queryParameterValue = operationSpec.serializer.serialize(\n          queryParameter.mapper,\n          queryParameterValue,\n          getPathStringFromParameter(queryParameter),\n        );\n\n        const delimiter = queryParameter.collectionFormat\n          ? CollectionFormatToDelimiterMap[queryParameter.collectionFormat]\n          : \"\";\n        if (Array.isArray(queryParameterValue)) {\n          // replace null and undefined\n          queryParameterValue = queryParameterValue.map((item) => {\n            if (item === null || item === undefined) {\n              return \"\";\n            }\n\n            return item;\n          });\n        }\n        if (queryParameter.collectionFormat === \"Multi\" && queryParameterValue.length === 0) {\n          continue;\n        } else if (\n          Array.isArray(queryParameterValue) &&\n          (queryParameter.collectionFormat === \"SSV\" || queryParameter.collectionFormat === \"TSV\")\n        ) {\n          queryParameterValue = queryParameterValue.join(delimiter);\n        }\n        if (!queryParameter.skipEncoding) {\n          if (Array.isArray(queryParameterValue)) {\n            queryParameterValue = queryParameterValue.map((item: string) => {\n              return encodeURIComponent(item);\n            });\n          } else {\n            queryParameterValue = encodeURIComponent(queryParameterValue);\n          }\n        }\n\n        // Join pipes and CSV *after* encoding, or the server will be upset.\n        if (\n          Array.isArray(queryParameterValue) &&\n          (queryParameter.collectionFormat === \"CSV\" || queryParameter.collectionFormat === \"Pipes\")\n        ) {\n          queryParameterValue = queryParameterValue.join(delimiter);\n        }\n\n        result.set(\n          queryParameter.mapper.serializedName || getPathStringFromParameter(queryParameter),\n          queryParameterValue,\n        );\n      }\n    }\n  }\n  return {\n    queryParams: result,\n    sequenceParams,\n  };\n}\n\nfunction simpleParseQueryParams(queryString: string): Map<string, string | string[] | undefined> {\n  const result: Map<string, string | string[] | undefined> = new Map<\n    string,\n    string | string[] | undefined\n  >();\n  if (!queryString || queryString[0] !== \"?\") {\n    return result;\n  }\n\n  // remove the leading ?\n  queryString = queryString.slice(1);\n  const pairs = queryString.split(\"&\");\n\n  for (const pair of pairs) {\n    const [name, value] = pair.split(\"=\", 2);\n    const existingValue = result.get(name);\n    if (existingValue) {\n      if (Array.isArray(existingValue)) {\n        existingValue.push(value);\n      } else {\n        result.set(name, [existingValue, value]);\n      }\n    } else {\n      result.set(name, value);\n    }\n  }\n\n  return result;\n}\n\n/** @internal */\nexport function appendQueryParams(\n  url: string,\n  queryParams: Map<string, string | string[]>,\n  sequenceParams: Set<string>,\n  noOverwrite: boolean = false,\n): string {\n  if (queryParams.size === 0) {\n    return url;\n  }\n\n  const parsedUrl = new URL(url);\n\n  // QUIRK: parsedUrl.searchParams will have their name/value pairs decoded, which\n  // can change their meaning to the server, such as in the case of a SAS signature.\n  // To avoid accidentally un-encoding a query param, we parse the key/values ourselves\n  const combinedParams = simpleParseQueryParams(parsedUrl.search);\n\n  for (const [name, value] of queryParams) {\n    const existingValue = combinedParams.get(name);\n    if (Array.isArray(existingValue)) {\n      if (Array.isArray(value)) {\n        existingValue.push(...value);\n        const valueSet = new Set(existingValue);\n        combinedParams.set(name, Array.from(valueSet));\n      } else {\n        existingValue.push(value);\n      }\n    } else if (existingValue) {\n      if (Array.isArray(value)) {\n        value.unshift(existingValue);\n      } else if (sequenceParams.has(name)) {\n        combinedParams.set(name, [existingValue, value]);\n      }\n      if (!noOverwrite) {\n        combinedParams.set(name, value);\n      }\n    } else {\n      combinedParams.set(name, value);\n    }\n  }\n\n  const searchPieces: string[] = [];\n  for (const [name, value] of combinedParams) {\n    if (typeof value === \"string\") {\n      searchPieces.push(`${name}=${value}`);\n    } else if (Array.isArray(value)) {\n      // QUIRK: If we get an array of values, include multiple key/value pairs\n      for (const subValue of value) {\n        searchPieces.push(`${name}=${subValue}`);\n      }\n    } else {\n      searchPieces.push(`${name}=${value}`);\n    }\n  }\n\n  // QUIRK: we have to set search manually as searchParams will encode comma when it shouldn't.\n  parsedUrl.search = searchPieces.length ? `?${searchPieces.join(\"&\")}` : \"\";\n  return parsedUrl.toString();\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createClientLogger } from \"@azure/logger\";\nexport const logger = createClientLogger(\"core-client\");\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  CommonClientOptions,\n  OperationArguments,\n  OperationRequest,\n  OperationSpec,\n} from \"./interfaces.js\";\nimport {\n  HttpClient,\n  Pipeline,\n  PipelineRequest,\n  PipelineResponse,\n  createPipelineRequest,\n} from \"@azure/core-rest-pipeline\";\nimport { TokenCredential } from \"@azure/core-auth\";\nimport { createClientPipeline } from \"./pipeline.js\";\nimport { flattenResponse } from \"./utils.js\";\nimport { getCachedDefaultHttpClient } from \"./httpClientCache.js\";\nimport { getOperationRequestInfo } from \"./operationHelpers.js\";\nimport { getRequestUrl } from \"./urlHelpers.js\";\nimport { getStreamingResponseStatusCodes } from \"./interfaceHelpers.js\";\nimport { logger } from \"./log.js\";\n\n/**\n * Options to be provided while creating the client.\n */\nexport interface ServiceClientOptions extends CommonClientOptions {\n  /**\n   * If specified, this is the base URI that requests will be made against for this ServiceClient.\n   * If it is not specified, then all OperationSpecs must contain a baseUrl property.\n   * @deprecated This property is deprecated and will be removed soon, please use endpoint instead\n   */\n  baseUri?: string;\n  /**\n   * If specified, this is the endpoint that requests will be made against for this ServiceClient.\n   * If it is not specified, then all OperationSpecs must contain a baseUrl property.\n   * to encourage customer to use endpoint, we mark the baseUri as deprecated.\n   */\n  endpoint?: string;\n  /**\n   * If specified, will be used to build the BearerTokenAuthenticationPolicy.\n   */\n  credentialScopes?: string | string[];\n  /**\n   * The default request content type for the service.\n   * Used if no requestContentType is present on an OperationSpec.\n   */\n  requestContentType?: string;\n  /**\n   * Credential used to authenticate the request.\n   */\n  credential?: TokenCredential;\n  /**\n   * A customized pipeline to use, otherwise a default one will be created.\n   */\n  pipeline?: Pipeline;\n}\n\n/**\n * Initializes a new instance of the ServiceClient.\n */\nexport class ServiceClient {\n  /**\n   * If specified, this is the base URI that requests will be made against for this ServiceClient.\n   * If it is not specified, then all OperationSpecs must contain a baseUrl property.\n   */\n  private readonly _endpoint?: string;\n\n  /**\n   * The default request content type for the service.\n   * Used if no requestContentType is present on an OperationSpec.\n   */\n  private readonly _requestContentType?: string;\n\n  /**\n   * Set to true if the request is sent over HTTP instead of HTTPS\n   */\n  private readonly _allowInsecureConnection?: boolean;\n\n  /**\n   * The HTTP client that will be used to send requests.\n   */\n  private readonly _httpClient: HttpClient;\n\n  /**\n   * The pipeline used by this client to make requests\n   */\n  public readonly pipeline: Pipeline;\n\n  /**\n   * The ServiceClient constructor\n   * @param credential - The credentials used for authentication with the service.\n   * @param options - The service client options that govern the behavior of the client.\n   */\n  constructor(options: ServiceClientOptions = {}) {\n    this._requestContentType = options.requestContentType;\n    this._endpoint = options.endpoint ?? options.baseUri;\n    if (options.baseUri) {\n      logger.warning(\n        \"The baseUri option for SDK Clients has been deprecated, please use endpoint instead.\",\n      );\n    }\n    this._allowInsecureConnection = options.allowInsecureConnection;\n    this._httpClient = options.httpClient || getCachedDefaultHttpClient();\n\n    this.pipeline = options.pipeline || createDefaultPipeline(options);\n    if (options.additionalPolicies?.length) {\n      for (const { policy, position } of options.additionalPolicies) {\n        // Sign happens after Retry and is commonly needed to occur\n        // before policies that intercept post-retry.\n        const afterPhase = position === \"perRetry\" ? \"Sign\" : undefined;\n        this.pipeline.addPolicy(policy, {\n          afterPhase,\n        });\n      }\n    }\n  }\n\n  /**\n   * Send the provided httpRequest.\n   */\n  async sendRequest(request: PipelineRequest): Promise<PipelineResponse> {\n    return this.pipeline.sendRequest(this._httpClient, request);\n  }\n\n  /**\n   * Send an HTTP request that is populated using the provided OperationSpec.\n   * @typeParam T - The typed result of the request, based on the OperationSpec.\n   * @param operationArguments - The arguments that the HTTP request's templated values will be populated from.\n   * @param operationSpec - The OperationSpec to use to populate the httpRequest.\n   */\n  async sendOperationRequest<T>(\n    operationArguments: OperationArguments,\n    operationSpec: OperationSpec,\n  ): Promise<T> {\n    const endpoint: string | undefined = operationSpec.baseUrl || this._endpoint;\n    if (!endpoint) {\n      throw new Error(\n        \"If operationSpec.baseUrl is not specified, then the ServiceClient must have a endpoint string property that contains the base URL to use.\",\n      );\n    }\n\n    // Templatized URLs sometimes reference properties on the ServiceClient child class,\n    // so we have to pass `this` below in order to search these properties if they're\n    // not part of OperationArguments\n    const url = getRequestUrl(endpoint, operationSpec, operationArguments, this);\n\n    const request: OperationRequest = createPipelineRequest({\n      url,\n    });\n    request.method = operationSpec.httpMethod;\n    const operationInfo = getOperationRequestInfo(request);\n    operationInfo.operationSpec = operationSpec;\n    operationInfo.operationArguments = operationArguments;\n\n    const contentType = operationSpec.contentType || this._requestContentType;\n    if (contentType && operationSpec.requestBody) {\n      request.headers.set(\"Content-Type\", contentType);\n    }\n\n    const options = operationArguments.options;\n    if (options) {\n      const requestOptions = options.requestOptions;\n\n      if (requestOptions) {\n        if (requestOptions.timeout) {\n          request.timeout = requestOptions.timeout;\n        }\n\n        if (requestOptions.onUploadProgress) {\n          request.onUploadProgress = requestOptions.onUploadProgress;\n        }\n\n        if (requestOptions.onDownloadProgress) {\n          request.onDownloadProgress = requestOptions.onDownloadProgress;\n        }\n\n        if (requestOptions.shouldDeserialize !== undefined) {\n          operationInfo.shouldDeserialize = requestOptions.shouldDeserialize;\n        }\n\n        if (requestOptions.allowInsecureConnection) {\n          request.allowInsecureConnection = true;\n        }\n      }\n\n      if (options.abortSignal) {\n        request.abortSignal = options.abortSignal;\n      }\n\n      if (options.tracingOptions) {\n        request.tracingOptions = options.tracingOptions;\n      }\n    }\n\n    if (this._allowInsecureConnection) {\n      request.allowInsecureConnection = true;\n    }\n\n    if (request.streamResponseStatusCodes === undefined) {\n      request.streamResponseStatusCodes = getStreamingResponseStatusCodes(operationSpec);\n    }\n\n    try {\n      const rawResponse = await this.sendRequest(request);\n      const flatResponse = flattenResponse(\n        rawResponse,\n        operationSpec.responses[rawResponse.status],\n      ) as T;\n      if (options?.onResponse) {\n        options.onResponse(rawResponse, flatResponse);\n      }\n      return flatResponse;\n    } catch (error: any) {\n      if (typeof error === \"object\" && error?.response) {\n        const rawResponse = error.response;\n        const flatResponse = flattenResponse(\n          rawResponse,\n          operationSpec.responses[error.statusCode] || operationSpec.responses[\"default\"],\n        );\n        error.details = flatResponse;\n        if (options?.onResponse) {\n          options.onResponse(rawResponse, flatResponse, error);\n        }\n      }\n      throw error;\n    }\n  }\n}\n\nfunction createDefaultPipeline(options: ServiceClientOptions): Pipeline {\n  const credentialScopes = getCredentialScopes(options);\n  const credentialOptions =\n    options.credential && credentialScopes\n      ? { credentialScopes, credential: options.credential }\n      : undefined;\n\n  return createClientPipeline({\n    ...options,\n    credentialOptions,\n  });\n}\n\nfunction getCredentialScopes(options: ServiceClientOptions): string | string[] | undefined {\n  if (options.credentialScopes) {\n    return options.credentialScopes;\n  }\n\n  if (options.endpoint) {\n    return `${options.endpoint}/.default`;\n  }\n\n  if (options.baseUri) {\n    return `${options.baseUri}/.default`;\n  }\n\n  if (options.credential && !options.credentialScopes) {\n    throw new Error(\n      `When using credentials, the ServiceClientOptions must contain either a endpoint or a credentialScopes. Unable to create a bearerTokenAuthenticationPolicy`,\n    );\n  }\n\n  return undefined;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport function getIdentityTokenEndpointSuffix(tenantId: string): string {\n  if (tenantId === \"adfs\") {\n    return \"oauth2/token\";\n  } else {\n    return \"oauth2/v2.0/token\";\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { DefaultScopeSuffix } from \"./constants\";\n\n/**\n * Most MSIs send requests to the IMDS endpoint, or a similar endpoint.\n * These are GET requests that require sending a `resource` parameter on the query.\n * This resource can be derived from the scopes received through the getToken call, as long as only one scope is received.\n * Multiple scopes assume that the resulting token will have access to multiple resources, which won't be the case.\n *\n * For that reason, when we encounter multiple scopes, we return undefined.\n * It's up to the individual MSI implementations to throw the errors (which helps us provide less generic errors).\n */\nexport function mapScopesToResource(scopes: string | string[]): string | undefined {\n  let scope = \"\";\n  if (Array.isArray(scopes)) {\n    if (scopes.length !== 1) {\n      return;\n    }\n\n    scope = scopes[0];\n  } else if (typeof scopes === \"string\") {\n    scope = scopes;\n  }\n\n  if (!scope.endsWith(DefaultScopeSuffix)) {\n    return scope;\n  }\n\n  return scope.substr(0, scope.lastIndexOf(DefaultScopeSuffix));\n}\n\n/**\n * Internal type roughly matching the raw responses of the authentication endpoints.\n *\n * @internal\n */\nexport interface TokenResponseParsedBody {\n  access_token?: string;\n  refresh_token?: string;\n  expires_in: number;\n  expires_on?: number | string;\n  refresh_in?: number;\n}\n\n/**\n * Given a token response, return the expiration timestamp as the number of milliseconds from the Unix epoch.\n * @param body - A parsed response body from the authentication endpoint.\n */\nexport function parseExpirationTimestamp(body: TokenResponseParsedBody): number {\n  if (typeof body.expires_on === \"number\") {\n    return body.expires_on * 1000;\n  }\n\n  if (typeof body.expires_on === \"string\") {\n    const asNumber = +body.expires_on;\n    if (!isNaN(asNumber)) {\n      return asNumber * 1000;\n    }\n\n    const asDate = Date.parse(body.expires_on);\n    if (!isNaN(asDate)) {\n      return asDate;\n    }\n  }\n\n  if (typeof body.expires_in === \"number\") {\n    return Date.now() + body.expires_in * 1000;\n  }\n\n  throw new Error(\n    `Failed to parse token expiration from body. expires_in=\"${body.expires_in}\", expires_on=\"${body.expires_on}\"`,\n  );\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { INetworkModule, NetworkRequestOptions, NetworkResponse } from \"@azure/msal-node\";\nimport { AccessToken, GetTokenOptions } from \"@azure/core-auth\";\nimport { ServiceClient } from \"@azure/core-client\";\nimport { isNode } from \"@azure/core-util\";\nimport {\n  PipelineRequest,\n  PipelineResponse,\n  createHttpHeaders,\n  createPipelineRequest,\n} from \"@azure/core-rest-pipeline\";\nimport { AbortController, AbortSignalLike } from \"@azure/abort-controller\";\nimport { AuthenticationError, AuthenticationErrorName } from \"../errors\";\nimport { getIdentityTokenEndpointSuffix } from \"../util/identityTokenEndpoint\";\nimport { DefaultAuthorityHost, SDK_VERSION } from \"../constants\";\nimport { tracingClient } from \"../util/tracing\";\nimport { logger } from \"../util/logging\";\nimport { TokenCredentialOptions } from \"../tokenCredentialOptions\";\nimport {\n  TokenResponseParsedBody,\n  parseExpirationTimestamp,\n} from \"../credentials/managedIdentityCredential/utils\";\n\nconst noCorrelationId = \"noCorrelationId\";\n\n/**\n * An internal type used to communicate details of a token request's\n * response that should not be sent back as part of the access token.\n */\nexport interface TokenResponse {\n  /**\n   * The AccessToken to be returned from getToken.\n   */\n  accessToken: AccessToken;\n  /**\n   * The refresh token if the 'offline_access' scope was used.\n   */\n  refreshToken?: string;\n}\n\n/**\n * @internal\n */\nexport function getIdentityClientAuthorityHost(options?: TokenCredentialOptions): string {\n  // The authorityHost can come from options or from the AZURE_AUTHORITY_HOST environment variable.\n  let authorityHost = options?.authorityHost;\n\n  // The AZURE_AUTHORITY_HOST environment variable can only be provided in Node.js.\n  if (isNode) {\n    authorityHost = authorityHost ?? process.env.AZURE_AUTHORITY_HOST;\n  }\n\n  // If the authorityHost is not provided, we use the default one from the public cloud: https://login.microsoftonline.com\n  return authorityHost ?? DefaultAuthorityHost;\n}\n\n/**\n * The network module used by the Identity credentials.\n *\n * It allows for credentials to abort any pending request independently of the MSAL flow,\n * by calling to the `abortRequests()` method.\n *\n */\nexport class IdentityClient extends ServiceClient implements INetworkModule {\n  public authorityHost: string;\n  private allowLoggingAccountIdentifiers?: boolean;\n  private abortControllers: Map<string, AbortController[] | undefined>;\n  private allowInsecureConnection: boolean = false;\n  // used for WorkloadIdentity\n  private tokenCredentialOptions: TokenCredentialOptions;\n\n  constructor(options?: TokenCredentialOptions) {\n    const packageDetails = `azsdk-js-identity/${SDK_VERSION}`;\n    const userAgentPrefix = options?.userAgentOptions?.userAgentPrefix\n      ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n      : `${packageDetails}`;\n\n    const baseUri = getIdentityClientAuthorityHost(options);\n    if (!baseUri.startsWith(\"https:\")) {\n      throw new Error(\"The authorityHost address must use the 'https' protocol.\");\n    }\n\n    super({\n      requestContentType: \"application/json; charset=utf-8\",\n      retryOptions: {\n        maxRetries: 3,\n      },\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n      baseUri,\n    });\n\n    this.authorityHost = baseUri;\n    this.abortControllers = new Map();\n    this.allowLoggingAccountIdentifiers = options?.loggingOptions?.allowLoggingAccountIdentifiers;\n    // used for WorkloadIdentity\n    this.tokenCredentialOptions = { ...options };\n\n    // used for ManagedIdentity\n    if (options?.allowInsecureConnection) {\n      this.allowInsecureConnection = options.allowInsecureConnection;\n    }\n  }\n\n  async sendTokenRequest(request: PipelineRequest): Promise<TokenResponse | null> {\n    logger.info(`IdentityClient: sending token request to [${request.url}]`);\n    const response = await this.sendRequest(request);\n    if (response.bodyAsText && (response.status === 200 || response.status === 201)) {\n      const parsedBody: TokenResponseParsedBody = JSON.parse(response.bodyAsText);\n\n      if (!parsedBody.access_token) {\n        return null;\n      }\n\n      this.logIdentifiers(response);\n\n      const token = {\n        accessToken: {\n          token: parsedBody.access_token,\n          expiresOnTimestamp: parseExpirationTimestamp(parsedBody),\n        },\n        refreshToken: parsedBody.refresh_token,\n      };\n\n      logger.info(\n        `IdentityClient: [${request.url}] token acquired, expires on ${token.accessToken.expiresOnTimestamp}`,\n      );\n      return token;\n    } else {\n      const error = new AuthenticationError(response.status, response.bodyAsText);\n      logger.warning(\n        `IdentityClient: authentication error. HTTP status: ${response.status}, ${error.errorResponse.errorDescription}`,\n      );\n      throw error;\n    }\n  }\n\n  async refreshAccessToken(\n    tenantId: string,\n    clientId: string,\n    scopes: string,\n    refreshToken: string | undefined,\n    clientSecret: string | undefined,\n    options: GetTokenOptions = {},\n  ): Promise<TokenResponse | null> {\n    if (refreshToken === undefined) {\n      return null;\n    }\n    logger.info(\n      `IdentityClient: refreshing access token with client ID: ${clientId}, scopes: ${scopes} started`,\n    );\n\n    const refreshParams = {\n      grant_type: \"refresh_token\",\n      client_id: clientId,\n      refresh_token: refreshToken,\n      scope: scopes,\n    };\n\n    if (clientSecret !== undefined) {\n      (refreshParams as any).client_secret = clientSecret;\n    }\n\n    const query = new URLSearchParams(refreshParams);\n\n    return tracingClient.withSpan(\n      \"IdentityClient.refreshAccessToken\",\n      options,\n      async (updatedOptions) => {\n        try {\n          const urlSuffix = getIdentityTokenEndpointSuffix(tenantId);\n          const request = createPipelineRequest({\n            url: `${this.authorityHost}/${tenantId}/${urlSuffix}`,\n            method: \"POST\",\n            body: query.toString(),\n            abortSignal: options.abortSignal,\n            headers: createHttpHeaders({\n              Accept: \"application/json\",\n              \"Content-Type\": \"application/x-www-form-urlencoded\",\n            }),\n            tracingOptions: updatedOptions.tracingOptions,\n          });\n\n          const response = await this.sendTokenRequest(request);\n          logger.info(`IdentityClient: refreshed token for client ID: ${clientId}`);\n          return response;\n        } catch (err: any) {\n          if (\n            err.name === AuthenticationErrorName &&\n            err.errorResponse.error === \"interaction_required\"\n          ) {\n            // It's likely that the refresh token has expired, so\n            // return null so that the credential implementation will\n            // initiate the authentication flow again.\n            logger.info(`IdentityClient: interaction required for client ID: ${clientId}`);\n            return null;\n          } else {\n            logger.warning(\n              `IdentityClient: failed refreshing token for client ID: ${clientId}: ${err}`,\n            );\n            throw err;\n          }\n        }\n      },\n    );\n  }\n\n  // Here is a custom layer that allows us to abort requests that go through MSAL,\n  // since MSAL doesn't allow us to pass options all the way through.\n\n  generateAbortSignal(correlationId: string): AbortSignalLike {\n    const controller = new AbortController();\n    const controllers = this.abortControllers.get(correlationId) || [];\n    controllers.push(controller);\n    this.abortControllers.set(correlationId, controllers);\n    const existingOnAbort = controller.signal.onabort;\n    controller.signal.onabort = (...params) => {\n      this.abortControllers.set(correlationId, undefined);\n      if (existingOnAbort) {\n        existingOnAbort(...params);\n      }\n    };\n    return controller.signal;\n  }\n\n  abortRequests(correlationId?: string): void {\n    const key = correlationId || noCorrelationId;\n    const controllers = [\n      ...(this.abortControllers.get(key) || []),\n      // MSAL passes no correlation ID to the get requests...\n      ...(this.abortControllers.get(noCorrelationId) || []),\n    ];\n    if (!controllers.length) {\n      return;\n    }\n    for (const controller of controllers) {\n      controller.abort();\n    }\n    this.abortControllers.set(key, undefined);\n  }\n\n  getCorrelationId(options?: NetworkRequestOptions): string {\n    const parameter = options?.body\n      ?.split(\"&\")\n      .map((part) => part.split(\"=\"))\n      .find(([key]) => key === \"client-request-id\");\n    return parameter && parameter.length ? parameter[1] || noCorrelationId : noCorrelationId;\n  }\n\n  // The MSAL network module methods follow\n\n  async sendGetRequestAsync<T>(\n    url: string,\n    options?: NetworkRequestOptions,\n  ): Promise<NetworkResponse<T>> {\n    const request = createPipelineRequest({\n      url,\n      method: \"GET\",\n      body: options?.body,\n      allowInsecureConnection: this.allowInsecureConnection,\n      headers: createHttpHeaders(options?.headers),\n      abortSignal: this.generateAbortSignal(noCorrelationId),\n    });\n\n    const response = await this.sendRequest(request);\n\n    this.logIdentifiers(response);\n\n    return {\n      body: response.bodyAsText ? JSON.parse(response.bodyAsText) : undefined,\n      headers: response.headers.toJSON(),\n      status: response.status,\n    };\n  }\n\n  async sendPostRequestAsync<T>(\n    url: string,\n    options?: NetworkRequestOptions,\n  ): Promise<NetworkResponse<T>> {\n    const request = createPipelineRequest({\n      url,\n      method: \"POST\",\n      body: options?.body,\n      headers: createHttpHeaders(options?.headers),\n      allowInsecureConnection: this.allowInsecureConnection,\n      // MSAL doesn't send the correlation ID on the get requests.\n      abortSignal: this.generateAbortSignal(this.getCorrelationId(options)),\n    });\n\n    const response = await this.sendRequest(request);\n\n    this.logIdentifiers(response);\n\n    return {\n      body: response.bodyAsText ? JSON.parse(response.bodyAsText) : undefined,\n      headers: response.headers.toJSON(),\n      status: response.status,\n    };\n  }\n\n  /**\n   *\n   * @internal\n   */\n  getTokenCredentialOptions(): TokenCredentialOptions {\n    return this.tokenCredentialOptions;\n  }\n  /**\n   * If allowLoggingAccountIdentifiers was set on the constructor options\n   * we try to log the account identifiers by parsing the received access token.\n   *\n   * The account identifiers we try to log are:\n   * - `appid`: The application or Client Identifier.\n   * - `upn`: User Principal Name.\n   *   - It might not be available in some authentication scenarios.\n   *   - If it's not available, we put a placeholder: \"No User Principal Name available\".\n   * - `tid`: Tenant Identifier.\n   * - `oid`: Object Identifier of the authenticated user.\n   */\n  private logIdentifiers(response: PipelineResponse): void {\n    if (!this.allowLoggingAccountIdentifiers || !response.bodyAsText) {\n      return;\n    }\n    const unavailableUpn = \"No User Principal Name available\";\n    try {\n      const parsed = (response as any).parsedBody || JSON.parse(response.bodyAsText);\n      const accessToken = parsed.access_token;\n      if (!accessToken) {\n        // Without an access token allowLoggingAccountIdentifiers isn't useful.\n        return;\n      }\n      const base64Metadata = accessToken.split(\".\")[1];\n      const { appid, upn, tid, oid } = JSON.parse(\n        Buffer.from(base64Metadata, \"base64\").toString(\"utf8\"),\n      );\n\n      logger.info(\n        `[Authenticated account] Client ID: ${appid}. Tenant ID: ${tid}. User Principal Name: ${\n          upn || unavailableUpn\n        }. Object ID (user): ${oid}`,\n      );\n    } catch (e: any) {\n      logger.warning(\n        \"allowLoggingAccountIdentifiers was set, but we couldn't log the account information. Error:\",\n        e.message,\n      );\n    }\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\nimport { createHttpHeaders, createPipelineRequest } from \"@azure/core-rest-pipeline\";\nimport { credentialLogger, formatError, formatSuccess } from \"../util/logging\";\nimport {\n  processMultiTenantRequest,\n  resolveAdditionallyAllowedTenantIds,\n} from \"../util/tenantIdUtils\";\nimport { ClientSecretCredentialOptions } from \"./clientSecretCredentialOptions\";\nimport { IdentityClient } from \"../client/identityClient\";\nimport { getIdentityTokenEndpointSuffix } from \"../util/identityTokenEndpoint\";\nimport { tracingClient } from \"../util/tracing\";\n\nconst logger = credentialLogger(\"ClientSecretCredential\");\n\n// This credential is exported on browser bundles for development purposes.\n// For this credential to work in browsers, browsers would need to have security features disabled.\n// Please do not disable your browser security features.\n\n/**\n * Enables authentication to Microsoft Entra ID using a client secret\n * that was generated for an App Registration.  More information on how\n * to configure a client secret can be found here:\n *\n * https://learn.microsoft.com/en-us/azure/active-directory/develop/quickstart-configure-app-access-web-apis#add-credentials-to-your-web-application\n *\n */\nexport class ClientSecretCredential implements TokenCredential {\n  private identityClient: IdentityClient;\n  private tenantId: string;\n  private additionallyAllowedTenantIds: string[];\n  private clientId: string;\n  private clientSecret: string;\n\n  /**\n   * Creates an instance of the ClientSecretCredential with the details\n   * needed to authenticate against Microsoft Entra ID with a client\n   * secret.\n   *\n   * @param tenantId - The Microsoft Entra tenant (directory) ID.\n   * @param clientId - The client (application) ID of an App Registration in the tenant.\n   * @param clientSecret - A client secret that was generated for the App Registration.\n   * @param options - Options for configuring the client which makes the authentication request.\n   */\n  constructor(\n    tenantId: string,\n    clientId: string,\n    clientSecret: string,\n    options?: ClientSecretCredentialOptions,\n  ) {\n    this.identityClient = new IdentityClient(options);\n    this.tenantId = tenantId;\n    this.additionallyAllowedTenantIds = resolveAdditionallyAllowedTenantIds(\n      options?.additionallyAllowedTenants,\n    );\n    this.clientId = clientId;\n    this.clientSecret = clientSecret;\n  }\n\n  /**\n   * Authenticates with Microsoft Entra ID and returns an access token if\n   * successful.  If authentication cannot be performed at this time, this method may\n   * return null.  If an error occurs during authentication, an {@link AuthenticationError}\n   * containing failure details will be thrown.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n  public async getToken(\n    scopes: string | string[],\n    options: GetTokenOptions = {},\n  ): Promise<AccessToken | null> {\n    return tracingClient.withSpan(\n      `${this.constructor.name}.getToken`,\n      options,\n      async (newOptions) => {\n        const tenantId = processMultiTenantRequest(\n          this.tenantId,\n          newOptions,\n          this.additionallyAllowedTenantIds,\n        );\n\n        const query = new URLSearchParams({\n          response_type: \"token\",\n          grant_type: \"client_credentials\",\n          client_id: this.clientId,\n          client_secret: this.clientSecret,\n          scope: typeof scopes === \"string\" ? scopes : scopes.join(\" \"),\n        });\n\n        try {\n          const urlSuffix = getIdentityTokenEndpointSuffix(tenantId!);\n          const request = createPipelineRequest({\n            url: `${this.identityClient.authorityHost}/${tenantId!}/${urlSuffix}`,\n            method: \"POST\",\n            body: query.toString(),\n            headers: createHttpHeaders({\n              Accept: \"application/json\",\n              \"Content-Type\": \"application/x-www-form-urlencoded\",\n            }),\n            abortSignal: options && options.abortSignal,\n            tracingOptions: newOptions?.tracingOptions,\n          });\n\n          const tokenResponse = await this.identityClient.sendTokenRequest(request);\n          logger.getToken.info(formatSuccess(scopes));\n          return (tokenResponse && tokenResponse.accessToken) || null;\n        } catch (err: any) {\n          logger.getToken.info(formatError(scopes, err));\n          throw err;\n        }\n      },\n    );\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, TokenCredential } from \"@azure/core-auth\";\nimport { credentialLogger, formatError } from \"../util/logging\";\n\nconst BrowserNotSupportedError = new Error(\n  \"EnvironmentCredential is not supported in the browser.\",\n);\nconst logger = credentialLogger(\"EnvironmentCredential\");\n\n/**\n * Enables authentication to Microsoft Entra ID using client secret\n * details configured in environment variables\n */\nexport class EnvironmentCredential implements TokenCredential {\n  /**\n   * Only available in Node.js\n   */\n  constructor() {\n    logger.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n\n  getToken(): Promise<AccessToken | null> {\n    logger.getToken.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, TokenCredential } from \"@azure/core-auth\";\nimport { credentialLogger, formatError } from \"../util/logging\";\n\nconst BrowserNotSupportedError = new Error(\n  \"ClientCertificateCredential is not supported in the browser.\",\n);\nconst logger = credentialLogger(\"ClientCertificateCredential\");\n\n/**\n * Enables authentication to Microsoft Entra ID using a PEM-encoded\n * certificate that is assigned to an App Registration.\n */\nexport class ClientCertificateCredential implements TokenCredential {\n  /**\n   * Only available in Node.js\n   */\n  constructor() {\n    logger.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n\n  public getToken(): Promise<AccessToken | null> {\n    logger.getToken.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, TokenCredential } from \"@azure/core-auth\";\nimport { credentialLogger, formatError } from \"../util/logging\";\n\nconst BrowserNotSupportedError = new Error(\n  \"ClientAssertionCredential is not supported in the browser.\",\n);\nconst logger = credentialLogger(\"ClientAssertionCredential\");\n\n/**\n * Authenticates a service principal with a JWT assertion.\n */\nexport class ClientAssertionCredential implements TokenCredential {\n  /**\n   * Only available in Node.js\n   */\n  constructor() {\n    logger.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n\n  public getToken(): Promise<AccessToken | null> {\n    logger.getToken.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, TokenCredential } from \"@azure/core-auth\";\nimport { credentialLogger, formatError } from \"../util/logging\";\n\nconst BrowserNotSupportedError = new Error(\"AzureCliCredential is not supported in the browser.\");\nconst logger = credentialLogger(\"AzureCliCredential\");\n\n/**\n * This credential will use the currently logged-in user login information\n * via the Azure CLI ('az') commandline tool.\n */\nexport class AzureCliCredential implements TokenCredential {\n  /**\n   * Only available in Node.js\n   */\n  constructor() {\n    logger.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n\n  getToken(): Promise<AccessToken | null> {\n    logger.getToken.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, TokenCredential } from \"@azure/core-auth\";\nimport { credentialLogger, formatError } from \"../util/logging\";\n\nconst BrowserNotSupportedError = new Error(\n  \"AzureDeveloperCliCredential is not supported in the browser.\",\n);\nconst logger = credentialLogger(\"AzureDeveloperCliCredential\");\n\n/**\n * This credential will use the currently logged-in user login information\n * via the Azure Developer CLI ('azd') commandline tool.\n */\nexport class AzureDeveloperCliCredential implements TokenCredential {\n  /**\n   * Only available in Node.js\n   */\n  constructor() {\n    logger.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n\n  getToken(): Promise<AccessToken | null> {\n    logger.getToken.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport * as msalBrowser from \"@azure/msal-browser\";\n\nimport { AccessToken, GetTokenOptions } from \"@azure/core-auth\";\nimport { AuthenticationRecord, MsalResult } from \"../types\";\nimport { AuthenticationRequiredError, CredentialUnavailableError } from \"../../errors\";\nimport { CredentialLogger, formatSuccess } from \"../../util/logging\";\nimport { MsalFlow, MsalFlowOptions } from \"../flows\";\nimport { ensureValidMsalToken, getAuthority, getKnownAuthorities, msalToPublic } from \"../utils\";\nimport {\n  processMultiTenantRequest,\n  resolveAdditionallyAllowedTenantIds,\n  resolveTenantId,\n} from \"../../util/tenantIdUtils\";\n\nimport { BrowserLoginStyle } from \"../../credentials/interactiveBrowserCredentialOptions\";\nimport { CredentialFlowGetTokenOptions } from \"../credentials\";\nimport { DefaultTenantId } from \"../../constants\";\nimport { LogPolicyOptions } from \"@azure/core-rest-pipeline\";\nimport { MultiTenantTokenCredentialOptions } from \"../../credentials/multiTenantTokenCredentialOptions\";\n\n/**\n * Union of the constructor parameters that all MSAL flow types take.\n * Some properties might not be used by some flow types.\n */\nexport interface MsalBrowserFlowOptions extends MsalFlowOptions {\n  tokenCredentialOptions: MultiTenantTokenCredentialOptions;\n  redirectUri?: string;\n  loginStyle: BrowserLoginStyle;\n  loginHint?: string;\n  /**\n   * Allows users to configure settings for logging policy options, allow logging account information and personally identifiable information for customer support.\n   */\n  loggingOptions?: LogPolicyOptions & {\n    /**\n     * Allows logging account information once the authentication flow succeeds.\n     */\n    allowLoggingAccountIdentifiers?: boolean;\n    /**\n     * Allows logging personally identifiable information for customer support.\n     */\n    enableUnsafeSupportLogging?: boolean;\n  };\n}\n\n/**\n * The common methods we use to work with the MSAL browser flows.\n * @internal\n */\nexport interface MsalBrowserFlow extends MsalFlow {\n  login(scopes?: string[]): Promise<AuthenticationRecord | undefined>;\n  handleRedirect(): Promise<AuthenticationRecord | undefined>;\n}\n\n/**\n * Generates a MSAL configuration that generally works for browsers\n * @internal\n */\nexport function defaultBrowserMsalConfig(\n  options: MsalBrowserFlowOptions,\n): msalBrowser.Configuration {\n  const tenantId = options.tenantId || DefaultTenantId;\n  const authority = getAuthority(tenantId, options.authorityHost);\n  return {\n    auth: {\n      clientId: options.clientId!,\n      authority,\n      knownAuthorities: getKnownAuthorities(tenantId, authority, options.disableInstanceDiscovery),\n      // If the users picked redirect as their login style,\n      // but they didn't provide a redirectUri,\n      // we can try to use the current page we're in as a default value.\n      redirectUri: options.redirectUri || self.location.origin,\n    },\n  };\n}\n\n/**\n * MSAL partial base client for the browsers.\n *\n * It completes the input configuration with some default values.\n * It also provides with utility protected methods that can be used from any of the clients,\n * which includes handlers for successful responses and errors.\n *\n * @internal\n */\nexport abstract class MsalBrowser implements MsalBrowserFlow {\n  protected loginStyle: BrowserLoginStyle;\n  protected clientId: string;\n  protected tenantId: string;\n  protected additionallyAllowedTenantIds: string[];\n  protected authorityHost?: string;\n  protected account: AuthenticationRecord | undefined;\n  protected msalConfig: msalBrowser.Configuration;\n  protected disableAutomaticAuthentication?: boolean;\n  protected app?: msalBrowser.IPublicClientApplication;\n  protected logger: CredentialLogger;\n\n  constructor(options: MsalBrowserFlowOptions) {\n    this.logger = options.logger;\n    this.loginStyle = options.loginStyle;\n    if (!options.clientId) {\n      throw new CredentialUnavailableError(\"A client ID is required in browsers\");\n    }\n    this.clientId = options.clientId;\n    this.additionallyAllowedTenantIds = resolveAdditionallyAllowedTenantIds(\n      options?.tokenCredentialOptions?.additionallyAllowedTenants,\n    );\n    this.tenantId = resolveTenantId(this.logger, options.tenantId, options.clientId);\n    this.authorityHost = options.authorityHost;\n    this.msalConfig = defaultBrowserMsalConfig(options);\n    this.disableAutomaticAuthentication = options.disableAutomaticAuthentication;\n\n    if (options.authenticationRecord) {\n      this.account = {\n        ...options.authenticationRecord,\n        tenantId: this.tenantId,\n      };\n    }\n  }\n\n  /**\n   * In the browsers we don't need to init()\n   */\n  async init(): Promise<void> {\n    // Nothing to do here.\n  }\n\n  /**\n   * Attempts to handle a redirection request the least amount of times possible.\n   */\n  public abstract handleRedirect(): Promise<AuthenticationRecord | undefined>;\n\n  /**\n   * Clears MSAL's cache.\n   */\n  async logout(): Promise<void> {\n    this.app?.logout();\n  }\n\n  /**\n   * Uses MSAL to retrieve the active account.\n   */\n  public abstract getActiveAccount(): Promise<AuthenticationRecord | undefined>;\n\n  /**\n   * Uses MSAL to trigger a redirect or a popup login.\n   */\n  public abstract login(scopes?: string | string[]): Promise<AuthenticationRecord | undefined>;\n\n  /**\n   * Attempts to retrieve a token from cache.\n   */\n  public abstract getTokenSilent(scopes: string[]): Promise<AccessToken>;\n\n  /**\n   * Attempts to retrieve the token in the browser.\n   */\n  protected abstract doGetToken(scopes: string[]): Promise<AccessToken>;\n\n  /**\n   * Attempts to retrieve an authenticated token from MSAL.\n   */\n  public async getToken(\n    scopes: string[],\n    options: CredentialFlowGetTokenOptions = {},\n  ): Promise<AccessToken> {\n    const tenantId =\n      processMultiTenantRequest(this.tenantId, options, this.additionallyAllowedTenantIds) ||\n      this.tenantId;\n\n    if (!options.authority) {\n      options.authority = getAuthority(tenantId, this.authorityHost);\n    }\n\n    // We ensure that redirection is handled at this point.\n    await this.handleRedirect();\n\n    if (!(await this.getActiveAccount()) && !this.disableAutomaticAuthentication) {\n      await this.login(scopes);\n    }\n    return this.getTokenSilent(scopes).catch((err) => {\n      if (err.name !== \"AuthenticationRequiredError\") {\n        throw err;\n      }\n      if (options?.disableAutomaticAuthentication) {\n        throw new AuthenticationRequiredError({\n          scopes,\n          getTokenOptions: options,\n          message:\n            \"Automatic authentication has been disabled. You may call the authentication() method.\",\n        });\n      }\n      this.logger.info(\n        `Silent authentication failed, falling back to interactive method ${this.loginStyle}`,\n      );\n      return this.doGetToken(scopes);\n    });\n  }\n\n  /**\n   * Handles the MSAL authentication result.\n   * If the result has an account, we update the local account reference.\n   * If the token received is invalid, an error will be thrown depending on what's missing.\n   */\n  protected handleResult(\n    scopes: string | string[],\n    result?: MsalResult,\n    getTokenOptions?: GetTokenOptions,\n  ): AccessToken {\n    if (result?.account) {\n      this.account = msalToPublic(this.clientId, result.account);\n    }\n    ensureValidMsalToken(scopes, result, getTokenOptions);\n    this.logger.getToken.info(formatSuccess(scopes));\n    return {\n      token: result.accessToken,\n      expiresOnTimestamp: result.expiresOn.getTime(),\n    };\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport * as msalBrowser from \"@azure/msal-browser\";\n\nimport { MsalBrowser, MsalBrowserFlowOptions } from \"./msalBrowserCommon\";\nimport {\n  defaultLoggerCallback,\n  getMSALLogLevel,\n  handleMsalError,\n  msalToPublic,\n  publicToMsal,\n} from \"../utils\";\n\nimport { AccessToken } from \"@azure/core-auth\";\nimport { AuthenticationRecord } from \"../types\";\nimport { AuthenticationRequiredError } from \"../../errors\";\nimport { CredentialFlowGetTokenOptions } from \"../credentials\";\nimport { getLogLevel } from \"@azure/logger\";\n\n// We keep a copy of the redirect hash.\nconst redirectHash = self.location.hash;\n\n/**\n * Uses MSAL Browser 2.X for browser authentication,\n * which uses the [Auth Code Flow](https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow).\n * @internal\n */\nexport class MSALAuthCode extends MsalBrowser {\n  protected app?: msalBrowser.IPublicClientApplication;\n  private loginHint?: string;\n\n  /**\n   * Sets up an MSAL object based on the given parameters.\n   * MSAL with Auth Code allows sending a previously obtained `authenticationRecord` through the optional parameters,\n   * which is set to be the active account.\n   * @param options - Parameters necessary and otherwise used to create the MSAL object.\n   */\n  constructor(options: MsalBrowserFlowOptions) {\n    super(options);\n    this.loginHint = options.loginHint;\n\n    this.msalConfig.cache = {\n      cacheLocation: \"sessionStorage\",\n      storeAuthStateInCookie: true, // Set to true to improve the experience on IE11 and Edge.\n    };\n    this.msalConfig.system = {\n      loggerOptions: {\n        loggerCallback: defaultLoggerCallback(this.logger, \"Browser\"),\n        logLevel: getMSALLogLevel(getLogLevel()),\n        piiLoggingEnabled: options.loggingOptions?.enableUnsafeSupportLogging,\n      },\n    };\n    if (options.authenticationRecord) {\n      this.account = {\n        ...options.authenticationRecord,\n        tenantId: this.tenantId,\n      };\n    }\n  }\n\n  private async getApp(): Promise<msalBrowser.IPublicClientApplication> {\n    if (!this.app) {\n      // Prepare the MSAL application\n      this.app = await msalBrowser.PublicClientApplication.createPublicClientApplication(\n        this.msalConfig as msalBrowser.Configuration,\n      );\n\n      // setting the account right after the app is created.\n      if (this.account) {\n        this.app.setActiveAccount(publicToMsal(this.account));\n      }\n    }\n\n    return this.app;\n  }\n\n  /**\n   * Loads the account based on the result of the authentication.\n   * If no result was received, tries to load the account from the cache.\n   * @param result - Result object received from MSAL.\n   */\n  private async handleBrowserResult(\n    result?: msalBrowser.AuthenticationResult,\n  ): Promise<AuthenticationRecord | undefined> {\n    try {\n      const app = await this.getApp();\n      if (result && result.account) {\n        this.logger.info(`MSAL Browser V2 authentication successful.`);\n        app.setActiveAccount(result.account);\n        return msalToPublic(this.clientId, result.account);\n      }\n\n      // If by this point we happen to have an active account, we should stop trying to parse this.\n      const activeAccount = await this.app!.getActiveAccount();\n      if (activeAccount) {\n        return msalToPublic(this.clientId, activeAccount);\n      }\n\n      // If we don't have an active account, we try to activate it from all the already loaded accounts.\n      const accounts = app.getAllAccounts();\n      if (accounts.length > 1) {\n        // If there's more than one account in memory, we force the user to authenticate again.\n        // At this point we can't identify which account should this credential work with,\n        // since at this point the user won't have provided enough information.\n        // We log a message in case that helps.\n        this.logger.info(\n          `More than one account was found authenticated for this Client ID and Tenant ID.\nHowever, no \"authenticationRecord\" has been provided for this credential,\ntherefore we're unable to pick between these accounts.\nA new login attempt will be requested, to ensure the correct account is picked.\nTo work with multiple accounts for the same Client ID and Tenant ID, please provide an \"authenticationRecord\" when initializing \"InteractiveBrowserCredential\".`,\n        );\n        // To safely trigger a new login, we're also ensuring the local cache is cleared up for this MSAL object.\n        // However, we want to avoid kicking the user out of their authentication on the Azure side.\n        // We do this by calling to logout while specifying a `onRedirectNavigate` that returns false.\n        await app.logout({\n          onRedirectNavigate: () => false,\n        });\n        return;\n      }\n\n      // If there's only one account for this MSAL object, we can safely activate it.\n      if (accounts.length === 1) {\n        const account = accounts[0];\n        app.setActiveAccount(account);\n        return msalToPublic(this.clientId, account);\n      }\n\n      this.logger.info(`No accounts were found through MSAL.`);\n    } catch (e: any) {\n      this.logger.info(`Failed to acquire token through MSAL. ${e.message}`);\n    }\n    return;\n  }\n\n  /**\n   * Uses MSAL to handle the redirect.\n   */\n  public async handleRedirect(): Promise<AuthenticationRecord | undefined> {\n    const app = await this.getApp();\n    return this.handleBrowserResult((await app.handleRedirectPromise(redirectHash)) || undefined);\n  }\n\n  /**\n   * Uses MSAL to trigger a redirect or a popup login.\n   */\n  public async login(scopes: string | string[] = []): Promise<AuthenticationRecord | undefined> {\n    const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n    const loginRequest: msalBrowser.RedirectRequest = {\n      scopes: arrayScopes,\n      loginHint: this.loginHint,\n    };\n    const app = await this.getApp();\n    switch (this.loginStyle) {\n      case \"redirect\": {\n        await app.loginRedirect(loginRequest);\n        return;\n      }\n      case \"popup\":\n        return this.handleBrowserResult(await app.loginPopup(loginRequest));\n    }\n  }\n\n  /**\n   * Uses MSAL to retrieve the active account.\n   */\n  public async getActiveAccount(): Promise<AuthenticationRecord | undefined> {\n    const app = await this.getApp();\n    const account = app.getActiveAccount();\n    if (!account) {\n      return;\n    }\n    return msalToPublic(this.clientId, account);\n  }\n\n  /**\n   * Attempts to retrieve a token from cache.\n   */\n  public async getTokenSilent(\n    scopes: string[],\n    options?: CredentialFlowGetTokenOptions,\n  ): Promise<AccessToken> {\n    const account = await this.getActiveAccount();\n    if (!account) {\n      throw new AuthenticationRequiredError({\n        scopes,\n        getTokenOptions: options,\n        message:\n          \"Silent authentication failed. We couldn't retrieve an active account from the cache.\",\n      });\n    }\n\n    const parameters: msalBrowser.SilentRequest = {\n      authority: options?.authority || this.msalConfig.auth.authority!,\n      correlationId: options?.correlationId,\n      claims: options?.claims,\n      account: publicToMsal(account),\n      forceRefresh: false,\n      scopes,\n    };\n\n    try {\n      this.logger.info(\"Attempting to acquire token silently\");\n      const app = await this.getApp();\n      const response = await app.acquireTokenSilent(parameters);\n      return this.handleResult(scopes, response);\n    } catch (err: any) {\n      throw handleMsalError(scopes, err, options);\n    }\n  }\n\n  /**\n   * Attempts to retrieve the token in the browser.\n   */\n  protected async doGetToken(\n    scopes: string[],\n    options?: CredentialFlowGetTokenOptions,\n  ): Promise<AccessToken> {\n    const account = await this.getActiveAccount();\n    if (!account) {\n      throw new AuthenticationRequiredError({\n        scopes,\n        getTokenOptions: options,\n        message:\n          \"Silent authentication failed. We couldn't retrieve an active account from the cache.\",\n      });\n    }\n\n    const parameters: msalBrowser.RedirectRequest = {\n      authority: options?.authority || this.msalConfig.auth.authority!,\n      correlationId: options?.correlationId,\n      claims: options?.claims,\n      account: publicToMsal(account),\n      loginHint: this.loginHint,\n      scopes,\n    };\n    const app = await this.getApp();\n    switch (this.loginStyle) {\n      case \"redirect\":\n        // This will go out of the page.\n        // Once the InteractiveBrowserCredential is initialized again,\n        // we'll load the MSAL account in the constructor.\n\n        await app.acquireTokenRedirect(parameters);\n        return { token: \"\", expiresOnTimestamp: 0 };\n      case \"popup\":\n        return this.handleResult(scopes, await app.acquireTokenPopup(parameters));\n    }\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { CredentialLogger, formatError } from \"./logging\";\n\n/**\n * Ensures the scopes value is an array.\n * @internal\n */\nexport function ensureScopes(scopes: string | string[]): string[] {\n  return Array.isArray(scopes) ? scopes : [scopes];\n}\n\n/**\n * Throws if the received scope is not valid.\n * @internal\n */\nexport function ensureValidScopeForDevTimeCreds(scope: string, logger: CredentialLogger): void {\n  if (!scope.match(/^[0-9a-zA-Z-_.:/]+$/)) {\n    const error = new Error(\"Invalid scope was specified by the user or calling client\");\n    logger.getToken.info(formatError(scope, error));\n    throw error;\n  }\n}\n\n/**\n * Returns the resource out of a scope.\n * @internal\n */\nexport function getScopeResource(scope: string): string {\n  return scope.replace(/\\/.default$/, \"\");\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\nimport {\n  InteractiveBrowserCredentialInBrowserOptions,\n  InteractiveBrowserCredentialNodeOptions,\n} from \"./interactiveBrowserCredentialOptions\";\nimport { credentialLogger, formatError } from \"../util/logging\";\nimport {\n  processMultiTenantRequest,\n  resolveAdditionallyAllowedTenantIds,\n} from \"../util/tenantIdUtils\";\nimport { AuthenticationRecord } from \"../msal/types\";\nimport { MSALAuthCode } from \"../msal/browserFlows/msalAuthCode\";\nimport { MsalBrowserFlowOptions } from \"../msal/browserFlows/msalBrowserCommon\";\nimport { MsalFlow } from \"../msal/flows\";\nimport { ensureScopes } from \"../util/scopeUtils\";\nimport { tracingClient } from \"../util/tracing\";\n\nconst logger = credentialLogger(\"InteractiveBrowserCredential\");\n\n/**\n * Enables authentication to Microsoft Entra ID inside of the web browser\n * using the interactive login flow.\n */\nexport class InteractiveBrowserCredential implements TokenCredential {\n  private tenantId?: string;\n  private additionallyAllowedTenantIds: string[];\n  private msalFlow: MsalFlow;\n  private disableAutomaticAuthentication?: boolean;\n\n  /**\n   * Creates an instance of the InteractiveBrowserCredential with the\n   * details needed to authenticate against Microsoft Entra ID with\n   * a user identity.\n   *\n   * This credential uses the [Authorization Code Flow](https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow).\n   * On Node.js, it will open a browser window while it listens for a redirect response from the authentication service.\n   * On browsers, it authenticates via popups. The `loginStyle` optional parameter can be set to `redirect` to authenticate by redirecting the user to an Azure secure login page, which then will redirect the user back to the web application where the authentication started.\n   *\n   * It's recommended that the Microsoft Entra Applications used are configured to authenticate using Single Page Applications.\n   * More information here: [link](https://learn.microsoft.com/en-us/azure/active-directory/develop/scenario-spa-app-registration#redirect-uri-msaljs-20-with-auth-code-flow).\n   *\n   * @param options - Options for configuring the client which makes the authentication request.\n   */\n  constructor(\n    options: InteractiveBrowserCredentialInBrowserOptions | InteractiveBrowserCredentialNodeOptions,\n  ) {\n    if (!options?.clientId) {\n      const error = new Error(\n        \"The parameter `clientId` cannot be left undefined for the `InteractiveBrowserCredential`\",\n      );\n      logger.info(formatError(\"\", error));\n      throw error;\n    }\n\n    this.tenantId = options?.tenantId;\n    this.additionallyAllowedTenantIds = resolveAdditionallyAllowedTenantIds(\n      options?.additionallyAllowedTenants,\n    );\n\n    const browserOptions = options as InteractiveBrowserCredentialInBrowserOptions;\n    const loginStyle = browserOptions.loginStyle || \"popup\";\n    const loginStyles = [\"redirect\", \"popup\"];\n\n    if (loginStyles.indexOf(loginStyle) === -1) {\n      const error = new Error(\n        `Invalid loginStyle: ${\n          browserOptions.loginStyle\n        }. Should be any of the following: ${loginStyles.join(\", \")}.`,\n      );\n      logger.info(formatError(\"\", error));\n      throw error;\n    }\n\n    const msalOptions: MsalBrowserFlowOptions = {\n      ...options,\n      tokenCredentialOptions: options,\n      logger,\n      loginStyle: loginStyle,\n      redirectUri:\n        typeof options.redirectUri === \"function\" ? options.redirectUri() : options.redirectUri,\n    };\n\n    this.msalFlow = new MSALAuthCode(msalOptions);\n    this.disableAutomaticAuthentication = options?.disableAutomaticAuthentication;\n  }\n\n  /**\n   * Authenticates with Microsoft Entra ID and returns an access token if successful.\n   * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n   *\n   * If the user provided the option `disableAutomaticAuthentication`,\n   * once the token can't be retrieved silently,\n   * this method won't attempt to request user interaction to retrieve the token.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n  async getToken(scopes: string | string[], options: GetTokenOptions = {}): Promise<AccessToken> {\n    return tracingClient.withSpan(\n      `${this.constructor.name}.getToken`,\n      options,\n      async (newOptions) => {\n        const tenantId = processMultiTenantRequest(\n          this.tenantId,\n          newOptions,\n          this.additionallyAllowedTenantIds,\n        );\n        newOptions.tenantId = tenantId;\n\n        const arrayScopes = ensureScopes(scopes);\n        return this.msalFlow.getToken(arrayScopes, {\n          ...newOptions,\n          disableAutomaticAuthentication: this.disableAutomaticAuthentication,\n        });\n      },\n    );\n  }\n\n  /**\n   * Authenticates with Microsoft Entra ID and returns an access token if successful.\n   * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n   *\n   * If the token can't be retrieved silently, this method will require user interaction to retrieve the token.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                  TokenCredential implementation might make.\n   */\n  async authenticate(\n    scopes: string | string[],\n    options: GetTokenOptions = {},\n  ): Promise<AuthenticationRecord | undefined> {\n    return tracingClient.withSpan(\n      `${this.constructor.name}.authenticate`,\n      options,\n      async (newOptions) => {\n        const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n        await this.msalFlow.getToken(arrayScopes, newOptions);\n        return this.msalFlow.getActiveAccount();\n      },\n    );\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, TokenCredential } from \"@azure/core-auth\";\n\nimport { TokenCredentialOptions } from \"../../tokenCredentialOptions\";\nimport { credentialLogger, formatError } from \"../../util/logging\";\n\nconst BrowserNotSupportedError = new Error(\n  \"ManagedIdentityCredential is not supported in the browser.\",\n);\nconst logger = credentialLogger(\"ManagedIdentityCredential\");\n\nexport class ManagedIdentityCredential implements TokenCredential {\n  constructor(clientId: string, options?: TokenCredentialOptions);\n  constructor(options?: TokenCredentialOptions);\n  constructor() {\n    logger.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n\n  public async getToken(): Promise<AccessToken | null> {\n    logger.getToken.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, TokenCredential } from \"@azure/core-auth\";\n\nimport { credentialLogger, formatError } from \"../util/logging\";\n\nconst BrowserNotSupportedError = new Error(\"DeviceCodeCredential is not supported in the browser.\");\nconst logger = credentialLogger(\"DeviceCodeCredential\");\n\n/**\n * Enables authentication to Microsoft Entra ID using a device code\n * that the user can enter into https://microsoft.com/devicelogin.\n */\nexport class DeviceCodeCredential implements TokenCredential {\n  /**\n   * Only available in Node.js\n   */\n  constructor() {\n    logger.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n\n  public getToken(): Promise<AccessToken | null> {\n    logger.getToken.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, TokenCredential } from \"@azure/core-auth\";\nimport { credentialLogger, formatError } from \"../util/logging\";\n\nconst BrowserNotSupportedError = new Error(\n  \"AzurePipelinesCredential is not supported in the browser.\",\n);\nconst logger = credentialLogger(\"AzurePipelinesCredential\");\n\n/**\n * Enables authentication to Microsoft Entra ID using a PEM-encoded\n * certificate that is assigned to an App Registration.\n */\nexport class AzurePipelinesCredential implements TokenCredential {\n  /**\n   * Only available in Node.js\n   */\n  constructor() {\n    logger.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n\n  public getToken(): Promise<AccessToken | null> {\n    logger.getToken.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, TokenCredential } from \"@azure/core-auth\";\nimport { credentialLogger, formatError } from \"../util/logging\";\nimport { AuthorizationCodeCredentialOptions } from \"./authorizationCodeCredentialOptions\";\n\nconst BrowserNotSupportedError = new Error(\n  \"AuthorizationCodeCredential is not supported in the browser. InteractiveBrowserCredential is more appropriate for this use case.\",\n);\nconst logger = credentialLogger(\"AuthorizationCodeCredential\");\n\nexport class AuthorizationCodeCredential implements TokenCredential {\n  /**\n   * Only available in Node.js\n   */\n  constructor(\n    tenantId: string | \"common\",\n    clientId: string,\n    clientSecret: string,\n    authorizationCode: string,\n    redirectUri: string,\n    options?: AuthorizationCodeCredentialOptions,\n  );\n  constructor(\n    tenantId: string | \"common\",\n    clientId: string,\n    authorizationCode: string,\n    redirectUri: string,\n    options?: AuthorizationCodeCredentialOptions,\n  );\n  constructor() {\n    logger.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n\n  public getToken(): Promise<AccessToken | null> {\n    logger.getToken.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, TokenCredential } from \"@azure/core-auth\";\nimport { credentialLogger, formatError } from \"../util/logging\";\n\nconst BrowserNotSupportedError = new Error(\n  \"AzurePowerShellCredential is not supported in the browser.\",\n);\nconst logger = credentialLogger(\"AzurePowerShellCredential\");\n\n/**\n * This credential will use the currently-logged-in user's login information via the Azure Power Shell command line tool.\n */\nexport class AzurePowerShellCredential implements TokenCredential {\n  /**\n   * Only available in Node.js\n   */\n  constructor() {\n    logger.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n\n  getToken(): Promise<AccessToken | null> {\n    logger.getToken.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\nimport {\n  checkTenantId,\n  processMultiTenantRequest,\n  resolveAdditionallyAllowedTenantIds,\n} from \"../util/tenantIdUtils\";\nimport { createHttpHeaders, createPipelineRequest } from \"@azure/core-rest-pipeline\";\nimport { credentialLogger, formatSuccess } from \"../util/logging\";\nimport { IdentityClient } from \"../client/identityClient\";\nimport { UsernamePasswordCredentialOptions } from \"./usernamePasswordCredentialOptions\";\nimport { getIdentityTokenEndpointSuffix } from \"../util/identityTokenEndpoint\";\nimport { tracingClient } from \"../util/tracing\";\n\nconst logger = credentialLogger(\"UsernamePasswordCredential\");\n\n/**\n * Enables authentication to Microsoft Entra ID with a user's\n * username and password. This credential requires a high degree of\n * trust so you should only use it when other, more secure credential\n * types can't be used.\n */\nexport class UsernamePasswordCredential implements TokenCredential {\n  private identityClient: IdentityClient;\n  private tenantId: string;\n  private additionallyAllowedTenantIds: string[];\n  private clientId: string;\n  private username: string;\n  private password: string;\n\n  /**\n   * Creates an instance of the UsernamePasswordCredential with the details\n   * needed to authenticate against Microsoft Entra ID with a username\n   * and password.\n   *\n   * @param tenantIdOrName - The Microsoft Entra tenant (directory) ID or name.\n   * @param clientId - The client (application) ID of an App Registration in the tenant.\n   * @param username - The user account's e-mail address (user name).\n   * @param password - The user account's account password\n   * @param options - Options for configuring the client which makes the authentication request.\n   */\n  constructor(\n    tenantIdOrName: string,\n    clientId: string,\n    username: string,\n    password: string,\n    options?: UsernamePasswordCredentialOptions,\n  ) {\n    checkTenantId(logger, tenantIdOrName);\n\n    this.identityClient = new IdentityClient(options);\n    this.tenantId = tenantIdOrName;\n    this.additionallyAllowedTenantIds = resolveAdditionallyAllowedTenantIds(\n      options?.additionallyAllowedTenants,\n    );\n    this.clientId = clientId;\n    this.username = username;\n    this.password = password;\n  }\n\n  /**\n   * Authenticates with Microsoft Entra ID and returns an access token if\n   * successful.  If authentication cannot be performed at this time, this method may\n   * return null.  If an error occurs during authentication, an {@link AuthenticationError}\n   * containing failure details will be thrown.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n  public async getToken(\n    scopes: string | string[],\n    options: GetTokenOptions = {},\n  ): Promise<AccessToken | null> {\n    return tracingClient.withSpan(\n      \"UsernamePasswordCredential.getToken\",\n      options,\n      async (newOptions) => {\n        const tenantId = processMultiTenantRequest(\n          this.tenantId,\n          newOptions,\n          this.additionallyAllowedTenantIds,\n        );\n        newOptions.tenantId = tenantId;\n\n        const urlSuffix = getIdentityTokenEndpointSuffix(this.tenantId);\n        const params = new URLSearchParams({\n          response_type: \"token\",\n          grant_type: \"password\",\n          client_id: this.clientId,\n          username: this.username,\n          password: this.password,\n          scope: typeof scopes === \"string\" ? scopes : scopes.join(\" \"),\n        });\n        const webResource = createPipelineRequest({\n          url: `${this.identityClient.authorityHost}/${this.tenantId}/${urlSuffix}`,\n          method: \"POST\",\n          body: params.toString(),\n          headers: createHttpHeaders({\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n          }),\n          abortSignal: options && options.abortSignal,\n          tracingOptions: newOptions.tracingOptions,\n        });\n\n        const tokenResponse = await this.identityClient.sendTokenRequest(webResource);\n        logger.getToken.info(formatSuccess(scopes));\n        return (tokenResponse && tokenResponse.accessToken) || null;\n      },\n    );\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, TokenCredential } from \"@azure/core-auth\";\nimport { credentialLogger, formatError } from \"../util/logging\";\n\nconst BrowserNotSupportedError = new Error(\n  \"VisualStudioCodeCredential is not supported in the browser.\",\n);\nconst logger = credentialLogger(\"VisualStudioCodeCredential\");\n\nexport const vsCodeCredentialControl = {\n  set vsCodeCredentialFinder(_finder: never) {\n    throw new Error(\n      \"Attempted to register a VisualStudioCodeCredential provider plugin in the browser. This environment is not supported by VisualStudioCodeCredential.\",\n    );\n  },\n};\n\n/**\n * Connects to Azure using the credential provided by the VSCode extension 'Azure Account'.\n */\nexport class VisualStudioCodeCredential implements TokenCredential {\n  /**\n   * Only available in Node.js\n   */\n  constructor() {\n    logger.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n\n  public getToken(): Promise<AccessToken | null> {\n    logger.getToken.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, TokenCredential } from \"@azure/core-auth\";\nimport { credentialLogger, formatError } from \"../util/logging\";\n\nconst credentialName = \"OnBehalfOfCredential\";\nconst BrowserNotSupportedError = new Error(`${credentialName}: Not supported in the browser.`);\nconst logger = credentialLogger(credentialName);\n\n/**\n * Enables authentication to Microsoft Entra ID using the [On Behalf Of flow](https://learn.microsoft.com/entra/identity-platform/v2-oauth2-on-behalf-of-flow).\n */\nexport class OnBehalfOfCredential implements TokenCredential {\n  /**\n   * Only available in Node.js\n   */\n  constructor() {\n    logger.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n\n  public getToken(): Promise<AccessToken | null> {\n    logger.getToken.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, TokenCredential } from \"@azure/core-auth\";\nimport { credentialLogger, formatError } from \"../util/logging\";\n\nconst BrowserNotSupportedError = new Error(\n  \"WorkloadIdentityCredential is not supported in the browser.\",\n);\nconst logger = credentialLogger(\"WorkloadIdentityCredential\");\n\n/**\n * WorkloadIdentityCredential supports Microsoft Entra Workload ID authentication on Kubernetes.\n * Refer to <a href=\"https://learn.microsoft.com/azure/aks/workload-identity-overview\">Microsoft Entra Workload ID</a>\n * for more information.\n */\nexport class WorkloadIdentityCredential implements TokenCredential {\n  /**\n   * Only available in Node.js\n   */\n  constructor() {\n    logger.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n\n  /**\n   * Only available in Node.js\n   */\n  public getToken(): Promise<AccessToken | null> {\n    logger.getToken.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { TokenCredential, TracingContext } from \"@azure/core-auth\";\nimport {\n  bearerTokenAuthenticationPolicy,\n  createEmptyPipeline,\n  createPipelineRequest,\n} from \"@azure/core-rest-pipeline\";\n\n/**\n * The options to configure the token provider.\n */\nexport interface GetBearerTokenProviderOptions {\n  /** The abort signal to abort requests to get tokens */\n  abortSignal?: AbortSignal;\n  /** The tracing options for the requests to get tokens */\n  tracingOptions?: {\n    /**\n     * Tracing Context for the current request to get a token.\n     */\n    tracingContext?: TracingContext;\n  };\n}\n\n/**\n * Returns a callback that provides a bearer token.\n * For example, the bearer token can be used to authenticate a request as follows:\n * ```js\n * import { DefaultAzureCredential } from \"@azure/identity\";\n *\n * const credential = new DefaultAzureCredential();\n * const scope = \"https://cognitiveservices.azure.com/.default\";\n * const getAccessToken = getBearerTokenProvider(credential, scope);\n * const token = await getAccessToken();\n *\n * // usage\n * const request = createPipelineRequest({ url: \"https://example.com\" });\n * request.headers.set(\"Authorization\", `Bearer ${token}`);\n * ```\n *\n * @param credential - The credential used to authenticate the request.\n * @param scopes - The scopes required for the bearer token.\n * @param options - Options to configure the token provider.\n * @returns a callback that provides a bearer token.\n */\nexport function getBearerTokenProvider(\n  credential: TokenCredential,\n  scopes: string | string[],\n  options?: GetBearerTokenProviderOptions,\n): () => Promise<string> {\n  const { abortSignal, tracingOptions } = options || {};\n  const pipeline = createEmptyPipeline();\n  pipeline.addPolicy(bearerTokenAuthenticationPolicy({ credential, scopes }));\n  async function getRefreshedToken(): Promise<string> {\n    // Create a pipeline with just the bearer token policy\n    // and run a dummy request through it to get the token\n    const res = await pipeline.sendRequest(\n      {\n        sendRequest: (request) =>\n          Promise.resolve({\n            request,\n            status: 200,\n            headers: request.headers,\n          }),\n      },\n      createPipelineRequest({\n        url: \"https://example.com\",\n        abortSignal,\n        tracingOptions,\n      }),\n    );\n    const accessToken = res.headers.get(\"authorization\")?.split(\" \")[1];\n    if (!accessToken) {\n      throw new Error(\"Failed to get access token\");\n    }\n    return accessToken;\n  }\n  return getRefreshedToken;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport * from \"./plugins/consumer\";\n\nexport { IdentityPlugin } from \"./plugins/provider\";\n\nimport { TokenCredential } from \"@azure/core-auth\";\nimport { DefaultAzureCredential } from \"./credentials/defaultAzureCredential\";\n\nexport {\n  AuthenticationError,\n  ErrorResponse,\n  AggregateAuthenticationError,\n  AuthenticationErrorName,\n  AggregateAuthenticationErrorName,\n  CredentialUnavailableError,\n  CredentialUnavailableErrorName,\n  AuthenticationRequiredError,\n  AuthenticationRequiredErrorOptions,\n} from \"./errors\";\n\nexport { AuthenticationRecord } from \"./msal/types\";\nexport { serializeAuthenticationRecord, deserializeAuthenticationRecord } from \"./msal/utils\";\nexport { TokenCredentialOptions } from \"./tokenCredentialOptions\";\nexport { MultiTenantTokenCredentialOptions } from \"./credentials/multiTenantTokenCredentialOptions\";\nexport { AuthorityValidationOptions } from \"./credentials/authorityValidationOptions\";\n// TODO: Export again once we're ready to release this feature.\n// export { RegionalAuthority } from \"./regionalAuthority\";\n\nexport { BrokerAuthOptions } from \"./credentials/brokerAuthOptions\";\nexport {\n  BrokerOptions,\n  BrokerEnabledOptions,\n  BrokerDisabledOptions,\n} from \"./msal/nodeFlows/brokerOptions\";\nexport { InteractiveCredentialOptions } from \"./credentials/interactiveCredentialOptions\";\n\nexport { ChainedTokenCredential } from \"./credentials/chainedTokenCredential\";\n\nexport { ClientSecretCredential } from \"./credentials/clientSecretCredential\";\nexport { ClientSecretCredentialOptions } from \"./credentials/clientSecretCredentialOptions\";\n\nexport { DefaultAzureCredential } from \"./credentials/defaultAzureCredential\";\nexport {\n  DefaultAzureCredentialOptions,\n  DefaultAzureCredentialClientIdOptions,\n  DefaultAzureCredentialResourceIdOptions,\n} from \"./credentials/defaultAzureCredentialOptions\";\n\nexport { EnvironmentCredential } from \"./credentials/environmentCredential\";\nexport { EnvironmentCredentialOptions } from \"./credentials/environmentCredentialOptions\";\n\nexport {\n  ClientCertificateCredential,\n  ClientCertificateCredentialPEMConfiguration,\n  ClientCertificatePEMCertificatePath,\n  ClientCertificatePEMCertificate,\n} from \"./credentials/clientCertificateCredential\";\nexport { ClientCertificateCredentialOptions } from \"./credentials/clientCertificateCredentialOptions\";\nexport { ClientAssertionCredential } from \"./credentials/clientAssertionCredential\";\nexport { ClientAssertionCredentialOptions } from \"./credentials/clientAssertionCredentialOptions\";\nexport { CredentialPersistenceOptions } from \"./credentials/credentialPersistenceOptions\";\nexport { AzureCliCredential } from \"./credentials/azureCliCredential\";\nexport { AzureCliCredentialOptions } from \"./credentials/azureCliCredentialOptions\";\nexport { AzureDeveloperCliCredential } from \"./credentials/azureDeveloperCliCredential\";\nexport { AzureDeveloperCliCredentialOptions } from \"./credentials/azureDeveloperCliCredentialOptions\";\nexport { InteractiveBrowserCredential } from \"./credentials/interactiveBrowserCredential\";\nexport {\n  InteractiveBrowserCredentialNodeOptions,\n  InteractiveBrowserCredentialInBrowserOptions,\n  BrowserLoginStyle,\n} from \"./credentials/interactiveBrowserCredentialOptions\";\nexport {\n  ManagedIdentityCredential,\n  ManagedIdentityCredentialClientIdOptions,\n  ManagedIdentityCredentialResourceIdOptions,\n} from \"./credentials/managedIdentityCredential\";\nexport { DeviceCodeCredential } from \"./credentials/deviceCodeCredential\";\nexport {\n  DeviceCodePromptCallback,\n  DeviceCodeInfo,\n} from \"./credentials/deviceCodeCredentialOptions\";\nexport { DeviceCodeCredentialOptions } from \"./credentials/deviceCodeCredentialOptions\";\nexport { AzurePipelinesCredential as AzurePipelinesCredential } from \"./credentials/azurePipelinesCredential\";\nexport { AzurePipelinesCredentialOptions as AzurePipelinesCredentialOptions } from \"./credentials/azurePipelinesCredentialOptions\";\nexport { AuthorizationCodeCredential } from \"./credentials/authorizationCodeCredential\";\nexport { AuthorizationCodeCredentialOptions } from \"./credentials/authorizationCodeCredentialOptions\";\nexport { AzurePowerShellCredential } from \"./credentials/azurePowerShellCredential\";\nexport { AzurePowerShellCredentialOptions } from \"./credentials/azurePowerShellCredentialOptions\";\nexport {\n  OnBehalfOfCredentialOptions,\n  OnBehalfOfCredentialSecretOptions,\n  OnBehalfOfCredentialCertificateOptions,\n  OnBehalfOfCredentialAssertionOptions,\n} from \"./credentials/onBehalfOfCredentialOptions\";\nexport { UsernamePasswordCredential } from \"./credentials/usernamePasswordCredential\";\nexport { UsernamePasswordCredentialOptions } from \"./credentials/usernamePasswordCredentialOptions\";\nexport { VisualStudioCodeCredential } from \"./credentials/visualStudioCodeCredential\";\nexport { VisualStudioCodeCredentialOptions } from \"./credentials/visualStudioCodeCredentialOptions\";\nexport { OnBehalfOfCredential } from \"./credentials/onBehalfOfCredential\";\nexport { WorkloadIdentityCredential } from \"./credentials/workloadIdentityCredential\";\nexport { WorkloadIdentityCredentialOptions } from \"./credentials/workloadIdentityCredentialOptions\";\nexport { BrowserCustomizationOptions } from \"./credentials/browserCustomizationOptions\";\nexport { TokenCachePersistenceOptions } from \"./msal/nodeFlows/tokenCachePersistenceOptions\";\n\nexport { TokenCredential, GetTokenOptions, AccessToken } from \"@azure/core-auth\";\nexport { logger } from \"./util/logging\";\n\nexport { AzureAuthorityHosts } from \"./constants\";\n\n/**\n * Returns a new instance of the {@link DefaultAzureCredential}.\n */\nexport function getDefaultAzureCredential(): TokenCredential {\n  return new DefaultAzureCredential();\n}\n\nexport { getBearerTokenProvider, GetBearerTokenProviderOptions } from \"./tokenProvider\";\n"],
  "mappings": "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",
  "names": ["enabledNamespaces", "logger", "log", "errorMessage", "AzureAuthorityHosts", "name", "_a", "logger", "logger", "_a", "AbortError", "AbortController", "version", "AuthErrorCodes.unexpectedError", "AuthErrorCodes.postRequestFailed", "errorMessage", "ClientAuthErrorCodes.clientInfoDecodingError", "ClientAuthErrorCodes.clientInfoEmptyError", "ClientAuthErrorCodes.tokenParsingError", "ClientAuthErrorCodes.nullOrEmptyToken", "ClientAuthErrorCodes.endpointResolutionError", "ClientAuthErrorCodes.networkError", "ClientAuthErrorCodes.openIdConfigError", "ClientAuthErrorCodes.hashNotDeserialized", "ClientAuthErrorCodes.invalidState", "ClientAuthErrorCodes.stateMismatch", "ClientAuthErrorCodes.stateNotFound", "ClientAuthErrorCodes.nonceMismatch", "ClientAuthErrorCodes.authTimeNotFound", "ClientAuthErrorCodes.maxAgeTranspired", "ClientAuthErrorCodes.multipleMatchingTokens", "ClientAuthErrorCodes.multipleMatchingAccounts", "ClientAuthErrorCodes.multipleMatchingAppMetadata", "ClientAuthErrorCodes.requestCannotBeMade", "ClientAuthErrorCodes.cannotRemoveEmptyScope", "ClientAuthErrorCodes.cannotAppendScopeSet", "ClientAuthErrorCodes.emptyInputScopeSet", "ClientAuthErrorCodes.deviceCodePollingCancelled", "ClientAuthErrorCodes.deviceCodeExpired", "ClientAuthErrorCodes.deviceCodeUnknownError", "ClientAuthErrorCodes.noAccountInSilentRequest", "ClientAuthErrorCodes.invalidCacheRecord", "ClientAuthErrorCodes.invalidCacheEnvironment", "ClientAuthErrorCodes.noAccountFound", "ClientAuthErrorCodes.noCryptoObject", "ClientAuthErrorCodes.unexpectedCredentialType", "ClientAuthErrorCodes.invalidAssertion", "ClientAuthErrorCodes.invalidClientCredential", "ClientAuthErrorCodes.tokenRefreshRequired", "ClientAuthErrorCodes.userTimeoutReached", "ClientAuthErrorCodes.tokenClaimsCnfRequiredForSignedJwt", "ClientAuthErrorCodes.authorizationCodeMissingFromServerResponse", "ClientAuthErrorCodes.bindingKeyNotRemoved", "ClientAuthErrorCodes.endSessionEndpointNotSupported", "ClientAuthErrorCodes.keyIdMissing", "ClientAuthErrorCodes.noNetworkConnectivity", "ClientAuthErrorCodes.userCanceled", "ClientAuthErrorCodes.missingTenantIdError", "ClientAuthErrorCodes.methodNotImplemented", "ClientAuthErrorCodes.nestedAppAuthBridgeDisabled", "base64Decode", "ClientAuthErrorCodes.tokenParsingError", "ClientAuthErrorCodes.nullOrEmptyToken", "ClientAuthErrorCodes.maxAgeTranspired", "ClientConfigurationErrorCodes.redirectUriEmpty", "ClientConfigurationErrorCodes.claimsRequestParsingError", "ClientConfigurationErrorCodes.authorityUriInsecure", "ClientConfigurationErrorCodes.urlParseError", "ClientConfigurationErrorCodes.urlEmptyError", "ClientConfigurationErrorCodes.emptyInputScopesError", "ClientConfigurationErrorCodes.invalidPromptValue", "ClientConfigurationErrorCodes.invalidClaims", "ClientConfigurationErrorCodes.tokenRequestEmpty", "ClientConfigurationErrorCodes.logoutRequestEmpty", "ClientConfigurationErrorCodes.invalidCodeChallengeMethod", "ClientConfigurationErrorCodes.pkceParamsMissing", "ClientConfigurationErrorCodes.invalidCloudDiscoveryMetadata", "ClientConfigurationErrorCodes.invalidAuthorityMetadata", "ClientConfigurationErrorCodes.untrustedAuthority", "ClientConfigurationErrorCodes.missingSshJwk", "ClientConfigurationErrorCodes.missingSshKid", "ClientConfigurationErrorCodes.missingNonceAuthenticationHeader", "ClientConfigurationErrorCodes.invalidAuthenticationHeader", "ClientConfigurationErrorCodes.cannotSetOIDCOptions", "ClientConfigurationErrorCodes.cannotAllowNativeBroker", "ClientConfigurationErrorCodes.authorityMismatch", "ClientAuthErrorCodes.hashNotDeserialized", "ClientConfigurationErrorCodes.urlEmptyError", "ClientConfigurationErrorCodes.urlParseError", "ClientConfigurationErrorCodes.authorityUriInsecure", "UrlUtils.getDeserializedResponse", "logger", "_a", "logger", "e", "logger", "_a", "version", "delay", "base64Decode", "TimeUtils.nowSeconds", "_a", "_b", "ClientAuthErrorCodes.tokenClaimsCnfRequiredForSignedJwt", "logger", "ClientAuthErrorCodes.endpointResolutionError", "ClientAuthErrorCodes.endSessionEndpointNotSupported", "_a", "_b", "CacheHelpers.generateAuthorityMetadataExpiresAt", "CacheHelpers.updateAuthorityEndpointMetadata", "_c", "ClientAuthErrorCodes.openIdConfigError", "CacheHelpers.isAuthorityMetadataExpired", "ClientConfigurationErrorCodes.invalidAuthorityMetadata", "CacheHelpers.updateCloudDiscoveryMetadata", "ClientConfigurationErrorCodes.untrustedAuthority", "ClientConfigurationErrorCodes.invalidCloudDiscoveryMetadata", "logger", "ClientAuthErrorCodes.endpointResolutionError", "CLIENT_INFO", "ClientAuthErrorCodes.methodNotImplemented", "LogLevel", "defaultLoggerCallback", "log", "ClientConfigurationErrorCodes.emptyInputScopesError", "ClientAuthErrorCodes.cannotAppendScopeSet", "ClientAuthErrorCodes.cannotRemoveEmptyScope", "ClientAuthErrorCodes.emptyInputScopeSet", "base64Decode", "ClientAuthErrorCodes.clientInfoEmptyError", "ClientAuthErrorCodes.clientInfoDecodingError", "name", "tenantId", "base64Decode", "ClientAuthErrorCodes.invalidCacheEnvironment", "_a", "_b", "_c", "_d", "logger", "CacheErrorCodes.cacheQuotaExceededErrorCode", "CacheErrorCodes.cacheUnknownErrorCode", "errorMessage", "logger", "ClientAuthErrorCodes.invalidCacheRecord", "_a", "_b", "_c", "CacheErrorCodes.cacheQuotaExceededErrorCode", "_d", "CacheErrorCodes.cacheUnknownErrorCode", "ClientAuthErrorCodes.bindingKeyNotRemoved", "ClientAuthErrorCodes.multipleMatchingAppMetadata", "name", "ClientAuthErrorCodes.methodNotImplemented", "ClientAuthErrorCodes.methodNotImplemented", "errorMessage", "_a", "ClientAuthErrorCodes.networkError", "ClientConfigurationErrorCodes.redirectUriEmpty", "ClientConfigurationErrorCodes.invalidPromptValue", "ClientConfigurationErrorCodes.invalidClaims", "ClientConfigurationErrorCodes.pkceParamsMissing", "ClientConfigurationErrorCodes.invalidCodeChallengeMethod", "AADServerParamKeys.RESPONSE_TYPE", "AADServerParamKeys.RESPONSE_MODE", "AADServerParamKeys.NATIVE_BROKER", "AADServerParamKeys.SCOPE", "AADServerParamKeys.CLIENT_ID", "AADServerParamKeys.REDIRECT_URI", "AADServerParamKeys.POST_LOGOUT_URI", "AADServerParamKeys.ID_TOKEN_HINT", "AADServerParamKeys.DOMAIN_HINT", "AADServerParamKeys.LOGIN_HINT", "AADServerParamKeys.SID", "AADServerParamKeys.CLAIMS", "AADServerParamKeys.CLIENT_REQUEST_ID", "AADServerParamKeys.X_CLIENT_SKU", "AADServerParamKeys.X_CLIENT_VER", "AADServerParamKeys.X_CLIENT_OS", "AADServerParamKeys.X_CLIENT_CPU", "AADServerParamKeys.X_APP_NAME", "AADServerParamKeys.X_APP_VER", "AADServerParamKeys.PROMPT", "state", "AADServerParamKeys.STATE", "AADServerParamKeys.NONCE", "AADServerParamKeys.CODE_CHALLENGE", "AADServerParamKeys.CODE_CHALLENGE_METHOD", "ClientConfigurationErrorCodes.pkceParamsMissing", "AADServerParamKeys.CODE", "AADServerParamKeys.DEVICE_CODE", "AADServerParamKeys.REFRESH_TOKEN", "AADServerParamKeys.CODE_VERIFIER", "AADServerParamKeys.CLIENT_SECRET", "AADServerParamKeys.CLIENT_ASSERTION", "AADServerParamKeys.CLIENT_ASSERTION_TYPE", "AADServerParamKeys.OBO_ASSERTION", "AADServerParamKeys.REQUESTED_TOKEN_USE", "AADServerParamKeys.GRANT_TYPE", "ClientConfigurationErrorCodes.invalidClaims", "AADServerParamKeys.TOKEN_TYPE", "AADServerParamKeys.REQ_CNF", "AADServerParamKeys.X_CLIENT_CURR_TELEM", "AADServerParamKeys.X_CLIENT_LAST_TELEM", "AADServerParamKeys.X_MS_LIB_CAPABILITY", "AADServerParamKeys.LOGOUT_HINT", "_a", "_d", "_b", "_c", "InteractionRequiredAuthErrorCodes.interactionRequired", "InteractionRequiredAuthErrorCodes.consentRequired", "InteractionRequiredAuthErrorCodes.loginRequired", "InteractionRequiredAuthErrorCodes.badToken", "InteractionRequiredAuthErrorCodes.noTokensFound", "InteractionRequiredAuthErrorCodes.nativeAccountUnavailable", "InteractionRequiredAuthErrorCodes.refreshTokenExpired", "errorMessage", "ClientAuthErrorCodes.noCryptoObject", "state", "ClientAuthErrorCodes.invalidState", "logger", "_a", "TimeUtils.nowSeconds", "_a", "_b", "logger", "ClientAuthErrorCodes.stateNotFound", "ClientAuthErrorCodes.invalidState", "ClientAuthErrorCodes.stateMismatch", "ClientAuthErrorCodes.nonceMismatch", "ClientAuthErrorCodes.authTimeNotFound", "ClientAuthErrorCodes.invalidCacheEnvironment", "CacheHelpers.createIdTokenEntity", "CacheHelpers.createAccessTokenEntity", "CacheHelpers.createRefreshTokenEntity", "ClientAuthErrorCodes.keyIdMissing", "_c", "_d", "base64Decode", "_a", "ClientAuthErrorCodes.requestCannotBeMade", "TimeUtils.nowSeconds", "_b", "ClientAuthErrorCodes.authorizationCodeMissingFromServerResponse", "ClientConfigurationErrorCodes.logoutRequestEmpty", "AADServerParamKeys.CLIENT_ID", "ClientConfigurationErrorCodes.missingSshJwk", "AADServerParamKeys.RETURN_SPA_CODE", "_a", "TimeUtils.nowSeconds", "_b", "ClientConfigurationErrorCodes.tokenRequestEmpty", "ClientAuthErrorCodes.noAccountInSilentRequest", "InteractionRequiredAuthErrorCodes.noTokensFound", "TimeUtils.isTokenExpired", "InteractionRequiredAuthErrorCodes.refreshTokenExpired", "InteractionRequiredAuthErrorCodes.badToken", "AADServerParamKeys.CLIENT_ID", "_c", "ClientConfigurationErrorCodes.missingSshJwk", "_a", "ClientAuthErrorCodes.tokenRefreshRequired", "ClientAuthErrorCodes.noAccountInSilentRequest", "TimeUtils.wasClockTurnedBack", "TimeUtils.isTokenExpired", "_b", "ClientAuthErrorCodes.authTimeNotFound", "ClientAuthErrorCodes.methodNotImplemented", "JoseHeaderErrorCodes.missingKidError", "JoseHeaderErrorCodes.missingAlgError", "errorMessage", "JoseHeaderErrorCodes.missingKidError", "JoseHeaderErrorCodes.missingAlgError", "ClientConfigurationErrorCodes.invalidAuthenticationHeader", "ClientConfigurationErrorCodes.missingNonceAuthenticationHeader", "_a", "_b", "stack", "logger", "_a", "_b", "noNetworkConnectivity", "postRequestFailed", "BrowserAuthErrorCodes.pkceNotCreated", "BrowserAuthErrorCodes.cryptoNonExistent", "BrowserAuthErrorCodes.emptyNavigateUri", "BrowserAuthErrorCodes.hashEmptyError", "BrowserAuthErrorCodes.noStateInHash", "BrowserAuthErrorCodes.hashDoesNotContainKnownProperties", "BrowserAuthErrorCodes.unableToParseState", "BrowserAuthErrorCodes.stateInteractionTypeMismatch", "BrowserAuthErrorCodes.interactionInProgress", "BrowserAuthErrorCodes.popupWindowError", "BrowserAuthErrorCodes.emptyWindowError", "BrowserAuthErrorCodes.userCancelled", "BrowserAuthErrorCodes.monitorPopupTimeout", "BrowserAuthErrorCodes.monitorWindowTimeout", "BrowserAuthErrorCodes.redirectInIframe", "BrowserAuthErrorCodes.blockIframeReload", "BrowserAuthErrorCodes.blockNestedPopups", "BrowserAuthErrorCodes.iframeClosedPrematurely", "BrowserAuthErrorCodes.silentLogoutUnsupported", "BrowserAuthErrorCodes.noAccountError", "BrowserAuthErrorCodes.silentPromptValueError", "BrowserAuthErrorCodes.noTokenRequestCacheError", "BrowserAuthErrorCodes.unableToParseTokenRequestCacheError", "BrowserAuthErrorCodes.noCachedAuthorityError", "BrowserAuthErrorCodes.authRequestNotSetError", "BrowserAuthErrorCodes.invalidCacheType", "BrowserAuthErrorCodes.nonBrowserEnvironment", "BrowserAuthErrorCodes.databaseNotOpen", "BrowserAuthErrorCodes.noNetworkConnectivity", "BrowserAuthErrorCodes.postRequestFailed", "BrowserAuthErrorCodes.getRequestFailed", "BrowserAuthErrorCodes.failedToParseResponse", "BrowserAuthErrorCodes.unableToLoadToken", "BrowserAuthErrorCodes.cryptoKeyNotFound", "BrowserAuthErrorCodes.authCodeRequired", "BrowserAuthErrorCodes.authCodeOrNativeAccountIdRequired", "BrowserAuthErrorCodes.spaCodeAndNativeAccountIdPresent", "BrowserAuthErrorCodes.databaseUnavailable", "BrowserAuthErrorCodes.unableToAcquireTokenFromNativePlatform", "BrowserAuthErrorCodes.nativeHandshakeTimeout", "BrowserAuthErrorCodes.nativeExtensionNotInstalled", "BrowserAuthErrorCodes.nativeConnectionNotEstablished", "BrowserAuthErrorCodes.uninitializedPublicClientApplication", "BrowserAuthErrorCodes.nativePromptNotSupported", "BrowserAuthErrorCodes.invalidBase64String", "BrowserAuthErrorCodes.invalidPopTokenRequest", "InteractionType", "logger", "BrowserAuthErrorCodes.cryptoNonExistent", "BrowserConfigurationAuthErrorCodes.storageNotSupported", "BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled", "BrowserConfigurationAuthErrorCodes.inMemRedirectUnavailable", "BrowserConfigurationAuthErrorCodes\n            .stubbedPublicClientApplicationCalled", "errorMessage", "BrowserAuthErrorCodes.blockIframeReload", "BrowserAuthErrorCodes.redirectInIframe", "BrowserAuthErrorCodes.blockNestedPopups", "BrowserAuthErrorCodes.nonBrowserEnvironment", "BrowserAuthErrorCodes.uninitializedPublicClientApplication", "BrowserConfigurationAuthErrorCodes.inMemRedirectUnavailable", "BrowserCrypto.createNewGuid", "BrowserAuthErrorCodes.getRequestFailed", "BrowserAuthErrorCodes.noNetworkConnectivity", "BrowserAuthErrorCodes.failedToParseResponse", "BrowserAuthErrorCodes.postRequestFailed", "DEFAULT_CACHE_OPTIONS", "DEFAULT_TELEMETRY_OPTIONS", "logger", "name", "version", "_a", "name", "version", "BrowserCrypto.createNewGuid", "BrowserAuthErrorCodes.invalidBase64String", "BrowserAuthErrorCodes.databaseUnavailable", "BrowserAuthErrorCodes.databaseNotOpen", "logger", "BrowserAuthErrorCodes.databaseUnavailable", "logger", "BrowserCrypto.validateCryptoAvailable", "BrowserCrypto.createNewGuid", "_a", "BrowserCrypto.generateKeyPair", "BrowserCrypto.exportJwk", "BrowserCrypto.importJwk", "BrowserAuthErrorCodes.cryptoKeyNotFound", "BrowserCrypto.sign", "BrowserCrypto.hashString", "BrowserConfigurationAuthErrorCodes.storageNotSupported", "state", "logger", "version", "name", "state", "BrowserAuthErrorCodes.noTokenRequestCacheError", "BrowserAuthErrorCodes.unableToParseTokenRequestCacheError", "BrowserAuthErrorCodes.noCachedAuthorityError", "BrowserAuthErrorCodes.interactionInProgress", "_a", "_b", "_c", "e", "logger", "logger", "_a", "e", "logger", "version", "BrowserUtils.getCurrentUri", "logger", "BrowserAuthErrorCodes.pkceNotCreated", "logger", "BrowserUtils.getCurrentUri", "logger", "version", "state", "NativeAuthErrorCodes.userSwitch", "NativeStatusCodes.PERSISTENT_ERROR", "NativeStatusCodes.DISABLED", "NativeAuthErrorCodes.contentError", "NativeStatusCodes.ACCOUNT_UNAVAILABLE", "NativeStatusCodes.USER_INTERACTION_REQUIRED", "NativeStatusCodes.USER_CANCEL", "BrowserAuthErrorCodes.userCancelled", "NativeStatusCodes.NO_NETWORK", "BrowserAuthErrorCodes.noNetworkConnectivity", "BrowserAuthErrorCodes.cryptoKeyNotFound", "logger", "_a", "version", "NativeAuthErrorCodes.userSwitch", "BrowserAuthErrorCodes.nativePromptNotSupported", "BrowserAuthErrorCodes.invalidPopTokenRequest", "logger", "BrowserAuthErrorCodes.nativeHandshakeTimeout", "BrowserAuthErrorCodes.nativeExtensionNotInstalled", "logger", "BrowserAuthErrorCodes.userCancelled", "logger", "BrowserAuthErrorCodes.hashEmptyError", "BrowserAuthErrorCodes.hashDoesNotContainKnownProperties", "BrowserAuthErrorCodes.noStateInHash", "BrowserAuthErrorCodes.unableToParseState", "BrowserAuthErrorCodes.stateInteractionTypeMismatch", "logger", "BrowserUtils.preconnect", "ResponseHandler.deserializeResponse", "BrowserAuthErrorCodes.nativeConnectionNotEstablished", "_a", "_b", "BrowserUtils.getCurrentUri", "BrowserAuthErrorCodes.emptyNavigateUri", "BrowserAuthErrorCodes.userCancelled", "BrowserAuthErrorCodes.emptyWindowError", "BrowserAuthErrorCodes.popupWindowError", "_c", "_d", "logger", "BrowserAuthErrorCodes.emptyNavigateUri", "state", "BrowserAuthErrorCodes.userCancelled", "logger", "BrowserUtils.replaceHash", "BrowserUtils.isInIframe", "BrowserUtils.getHomepage", "ResponseHandler.validateInteractionType", "BrowserUtils.clearHash", "state", "BrowserAuthErrorCodes.noStateInHash", "BrowserAuthErrorCodes.nativeConnectionNotEstablished", "BrowserAuthErrorCodes.noCachedAuthorityError", "_a", "_b", "BrowserUtils.getCurrentUri", "logger", "BrowserAuthErrorCodes.emptyNavigateUri", "BrowserAuthErrorCodes.monitorWindowTimeout", "logger", "BrowserUtils.preconnect", "BrowserAuthErrorCodes.silentLogoutUnsupported", "ResponseHandler.deserializeResponse", "BrowserAuthErrorCodes.nativeConnectionNotEstablished", "BrowserAuthErrorCodes.silentLogoutUnsupported", "logger", "BrowserAuthErrorCodes.nonBrowserEnvironment", "BrowserCrypto.createNewGuid", "BrowserAuthErrorCodes.unableToLoadToken", "_a", "_b", "_c", "logger", "BrowserAuthErrorCodes.authCodeRequired", "BrowserAuthErrorCodes.silentLogoutUnsupported", "preflightCheck", "BrowserUtils.preflightCheck", "BrowserUtils.blockAPICallsBeforeInitialize", "BrowserUtils.redirectPreflightCheck", "result", "_a", "_b", "BrowserAuthErrorCodes.spaCodeAndNativeAccountIdPresent", "BrowserAuthErrorCodes.unableToAcquireTokenFromNativePlatform", "BrowserAuthErrorCodes.authCodeOrNativeAccountIdRequired", "AccountManager.getAllAccounts", "AccountManager.getAccount", "AccountManager.getAccountByUsername", "AccountManager.getAccountByHomeId", "AccountManager.getAccountByLocalId", "AccountManager.setActiveAccount", "AccountManager.getActiveAccount", "BrowserAuthErrorCodes.nativeConnectionNotEstablished", "logger", "version", "BrowserAuthErrorCodes.noAccountError", "logger", "_a", "name", "errorMessage", "AccountManager.getAccount", "AccountManager.setActiveAccount", "result", "_a", "AccountManager.getAllAccounts", "AccountManager.getAccountByUsername", "AccountManager.getAccountByHomeId", "AccountManager.getAccountByLocalId", "AccountManager.getActiveAccount", "logger", "version", "ControllerFactory.createV3Controller", "logger", "version", "logger", "version", "ControllerFactory.createController", "logger", "version", "BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled", "name", "version", "_a", "name", "version", "_b", "BrowserCrypto.createNewGuid", "logger", "logger", "AbortError", "_a", "name", "logger", "logger", "_a", "SDK_VERSION", "SDK_VERSION", "rawContent", "_a", "AbortError", "delay", "AbortError", "_a", "_b", "logger", "_a", "AbortError", "_b", "delay", "_a", "name", "_a", "_a", "tracingClient", "_a", "_b", "SDK_VERSION", "logger", "_a", "isBlob", "buildRequestBody", "_a", "_b", "AbortError", "name", "_a", "_b", "_c", "_d", "_a", "delay", "logger", "_a", "_a", "logger", "_a", "_b", "state", "state", "_b", "_a", "_d", "_c", "_b", "_a", "_c", "_d", "_a", "name", "logger", "_a", "logger", "_b", "_a", "_b", "AbortController", "logger", "BrowserNotSupportedError", "logger", "BrowserNotSupportedError", "logger", "BrowserNotSupportedError", "logger", "BrowserNotSupportedError", "logger", "BrowserNotSupportedError", "logger", "_a", "_a", "logger", "BrowserNotSupportedError", "logger", "BrowserNotSupportedError", "logger", "BrowserNotSupportedError", "logger", "BrowserNotSupportedError", "logger", "BrowserNotSupportedError", "logger", "logger", "BrowserNotSupportedError", "logger", "logger", "BrowserNotSupportedError", "BrowserNotSupportedError", "logger", "BrowserNotSupportedError", "logger", "abortSignal", "_a"]
}
